{
    "_G": {
        "body": "_G(${0:...})",
        "description": "5.1,5.2,5.3\n\n_G",
        "prefix": "_G",
        "scope": "source.lua"
    },
    "_VERSION": {
        "body": "_VERSION(${0:...})",
        "description": "5.1,5.2,5.3\n\n_VERSION",
        "prefix": "_VERSION",
        "scope": "source.lua"
    },
    "assert": {
        "body": "assert(${1:v}${2:[, message]})",
        "description": "5.1,5.2,5.3\n\nassert()",
        "prefix": "assert",
        "scope": "source.lua"
    },
    "bit32.arshift": {
        "body": "bit32.arshift(${0:...})",
        "description": "5.2\n\nbit32.arshift (x, disp)",
        "prefix": "bit32.arshift",
        "scope": "source.lua"
    },
    "bit32.band": {
        "body": "bit32.band(${0:...})",
        "description": "5.2\n\nbit32.band (...)",
        "prefix": "bit32.band",
        "scope": "source.lua"
    },
    "bit32.bnot": {
        "body": "bit32.bnot(${0:...})",
        "description": "5.2\n\nbit32.bnot (x)",
        "prefix": "bit32.bnot",
        "scope": "source.lua"
    },
    "bit32.bor": {
        "body": "bit32.bor(${0:...})",
        "description": "5.2\n\nbit32.bor (...)",
        "prefix": "bit32.bor",
        "scope": "source.lua"
    },
    "bit32.btest": {
        "body": "bit32.btest(${0:...})",
        "description": "5.2\n\nbit32.btest (...)",
        "prefix": "bit32.btest",
        "scope": "source.lua"
    },
    "bit32.bxor": {
        "body": "bit32.bxor(${0:...})",
        "description": "5.2\n\nbit32.bxor (...)",
        "prefix": "bit32.bxor",
        "scope": "source.lua"
    },
    "bit32.extract": {
        "body": "bit32.extract(${0:...})",
        "description": "5.2\n\nbit32.extract (n, field [, width])",
        "prefix": "bit32.extract",
        "scope": "source.lua"
    },
    "bit32.lrotate": {
        "body": "bit32.lrotate(${0:...})",
        "description": "5.2\n\nbit32.lrotate (x, disp)",
        "prefix": "bit32.lrotate",
        "scope": "source.lua"
    },
    "bit32.lshift": {
        "body": "bit32.lshift(${0:...})",
        "description": "5.2\n\nbit32.lshift (x, disp)",
        "prefix": "bit32.lshift",
        "scope": "source.lua"
    },
    "bit32.replace": {
        "body": "bit32.replace(${0:...})",
        "description": "5.2\n\nbit32.replace (n, v, field [, width])",
        "prefix": "bit32.replace",
        "scope": "source.lua"
    },
    "bit32.rrotate": {
        "body": "bit32.rrotate(${0:...})",
        "description": "5.2\n\nbit32.rrotate (x, disp)",
        "prefix": "bit32.rrotate",
        "scope": "source.lua"
    },
    "bit32.rshift": {
        "body": "bit32.rshift(${0:...})",
        "description": "5.2\n\nbit32.rshift (x, disp)",
        "prefix": "bit32.rshift",
        "scope": "source.lua"
    },
    "collectgarbage": {
        "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
        "description": "5.1,5.2,5.3\n\ncollectgarbage()",
        "prefix": "collectgarbage",
        "scope": "source.lua"
    },
    "coroutine.create": {
        "body": "coroutine.create( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.create",
        "prefix": "coroutine.create",
        "scope": "source.lua"
    },
    "coroutine.isyieldable": {
        "body": "coroutine.isyieldable( )",
        "description": "5.3\n\ncoroutine.isyieldable",
        "prefix": "coroutine.isyieldable",
        "scope": "source.lua"
    },
    "coroutine.resume": {
        "body": "coroutine.resume( ${1:co}${2:[, val1, \u00b7\u00b7\u00b7]} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.resume",
        "prefix": "coroutine.resume",
        "scope": "source.lua"
    },
    "coroutine.running": {
        "body": "coroutine.running( )",
        "description": "5.1,5.2,5.3\n\ncoroutine.running",
        "prefix": "coroutine.running",
        "scope": "source.lua"
    },
    "coroutine.status": {
        "body": "coroutine.status( ${1:co} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.status",
        "prefix": "coroutine.status",
        "scope": "source.lua"
    },
    "coroutine.wrap": {
        "body": "coroutine.wrap( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
        "prefix": "coroutine.wrap",
        "scope": "source.lua"
    },
    "coroutine.yield": {
        "body": "coroutine.yield( ${1:...} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.yield",
        "prefix": "coroutine.yield",
        "scope": "source.lua"
    },
    "debug.debug": {
        "body": "debug.debug()",
        "description": "5.1,5.2,5.3\n\ndebug.debug ()",
        "prefix": "debug.debug",
        "scope": "source.lua"
    },
    "debug.getfenv": {
        "body": "debug.getfenv(${0:...})",
        "description": "5.1\n\ndebug.getfenv (o)",
        "prefix": "debug.getfenv",
        "scope": "source.lua"
    },
    "debug.gethook": {
        "body": "debug.gethook( ${1:[thread]} )",
        "description": "5.1,5.2,5.3\n\ndebug.gethook ([thread])",
        "prefix": "debug.gethook",
        "scope": "source.lua"
    },
    "debug.getinfo": {
        "body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getinfo ([thread,] f [, what])",
        "prefix": "debug.getinfo",
        "scope": "source.lua"
    },
    "debug.getlocal": {
        "body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getlocal ([thread,] f, local)",
        "prefix": "debug.getlocal",
        "scope": "source.lua"
    },
    "debug.getmetatable": {
        "body": "debug.getmetatable( ${1:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.getmetatable (value)",
        "prefix": "debug.getmetatable",
        "scope": "source.lua"
    },
    "debug.getregistry": {
        "body": "debug.getregistry()",
        "description": "5.1,5.2,5.3\n\ndebug.getregistry ()",
        "prefix": "debug.getregistry",
        "scope": "source.lua"
    },
    "debug.getupvalue": {
        "body": "debug.getupvalue( ${1:f}, ${2:up} )",
        "description": "5.1,5.2,5.3\n\ndebug.getupvalue (f, up)",
        "prefix": "debug.getupvalue",
        "scope": "source.lua"
    },
    "debug.getuservalue": {
        "body": "debug.getuservalue(${0:...})",
        "description": "5.2,5.3\n\ndebug.getuservalue (u)",
        "prefix": "debug.getuservalue",
        "scope": "source.lua"
    },
    "debug.getuservalue ": {
        "body": "debug.getuservalue ( ${1:u} )",
        "description": "debug.getuservalue (u)",
        "prefix": "debug.getuservalue ",
        "scope": "source.lua"
    },
    "debug.setfenv": {
        "body": "debug.setfenv(${0:...})",
        "description": "5.1\n\ndebug.setfenv (object, table)",
        "prefix": "debug.setfenv",
        "scope": "source.lua"
    },
    "debug.sethook": {
        "body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
        "description": "5.1,5.2,5.3\n\ndebug.sethook ([thread,] hook, mask [, count])",
        "prefix": "debug.sethook",
        "scope": "source.lua"
    },
    "debug.setlocal": {
        "body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setlocal ([thread,] level, local, value)",
        "prefix": "debug.setlocal",
        "scope": "source.lua"
    },
    "debug.setmetatable": {
        "body": "debug.setmetatable( ${1:value}, ${2:table} )",
        "description": "5.1,5.2,5.3\n\ndebug.setmetatable (value, table)",
        "prefix": "debug.setmetatable",
        "scope": "source.lua"
    },
    "debug.setupvalue": {
        "body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setupvalue (f, up, value)",
        "prefix": "debug.setupvalue",
        "scope": "source.lua"
    },
    "debug.setuservalue": {
        "body": "debug.setuservalue( ${1:udata}, ${2:value} )",
        "description": "5.2,5.3\n\ndebug.setuservalue (udata, value)",
        "prefix": "debug.setuservalue",
        "scope": "source.lua"
    },
    "debug.traceback": {
        "body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
        "description": "5.1,5.2,5.3\n\ndebug.traceback ([thread,] [message [, level]])",
        "prefix": "debug.traceback",
        "scope": "source.lua"
    },
    "debug.upvalueid": {
        "body": "debug.upvalueid( ${1:f}, ${2:n})",
        "description": "5.2,5.3\n\ndebug.upvalueid (f, n)",
        "prefix": "debug.upvalueid",
        "scope": "source.lua"
    },
    "debug.upvaluejoin": {
        "body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
        "description": "5.2,5.3\n\ndebug.upvaluejoin (f1, n1, f2, n2)",
        "prefix": "debug.upvaluejoin",
        "scope": "source.lua"
    },
    "dofile": {
        "body": "dofile(${1:[filename]})",
        "description": "5.1,5.2,5.3\n\ndofile ([filename])",
        "prefix": "dofile",
        "scope": "source.lua"
    },
    "elif": {
        "body": "else if ${1:condition} then\n\t${0:-- body}\n",
        "description": "elif",
        "prefix": "elif",
        "scope": "source.lua"
    },
    "error": {
        "body": "error(${0:...})",
        "description": "5.1,5.2,5.3\n\nerror (message [, level])",
        "prefix": "error",
        "scope": "source.lua"
    },
    "file:close": {
        "body": "file:close(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:close ()",
        "prefix": "file:close",
        "scope": "source.lua"
    },
    "file:flush": {
        "body": "file:flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:flush ()",
        "prefix": "file:flush",
        "scope": "source.lua"
    },
    "file:lines": {
        "body": "file:lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:lines ()",
        "prefix": "file:lines",
        "scope": "source.lua"
    },
    "file:read": {
        "body": "file:read(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:read (...)",
        "prefix": "file:read",
        "scope": "source.lua"
    },
    "file:seek": {
        "body": "file:seek(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:seek ([whence] [, offset])",
        "prefix": "file:seek",
        "scope": "source.lua"
    },
    "file:setvbuf": {
        "body": "file:setvbuf(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:setvbuf (mode [, size])",
        "prefix": "file:setvbuf",
        "scope": "source.lua"
    },
    "file:write": {
        "body": "file:write(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:write (...)",
        "prefix": "file:write",
        "scope": "source.lua"
    },
    "for": {
        "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "description": "for i=1,10",
        "prefix": "for",
        "scope": "source.lua"
    },
    "fori": {
        "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
        "description": "for i,v in ipairs()",
        "prefix": "fori",
        "scope": "source.lua"
    },
    "forp": {
        "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
        "description": "for k,v in pairs()",
        "prefix": "forp",
        "scope": "source.lua"
    },
    "fun": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "fun",
        "scope": "source.lua"
    },
    "function": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "function",
        "scope": "source.lua"
    },
    "getfenv": {
        "body": "getfenv(${0:...})",
        "description": "5.1\n\ngetfenv ([f])",
        "prefix": "getfenv",
        "scope": "source.lua"
    },
    "getmetatable": {
        "body": "getmetatable(${1:object})",
        "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
        "prefix": "getmetatable",
        "scope": "source.lua"
    },
    "if": {
        "body": "if ${1:condition} then\n\t${0:-- body}\nend",
        "description": "if",
        "prefix": "if",
        "scope": "source.lua"
    },
    "ifel": {
        "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
        "description": "ifel",
        "prefix": "ifel",
        "scope": "source.lua"
    },
    "io.close": {
        "body": "io.close(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.close ([file])",
        "prefix": "io.close",
        "scope": "source.lua"
    },
    "io.flush": {
        "body": "io.flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.flush ()",
        "prefix": "io.flush",
        "scope": "source.lua"
    },
    "io.input": {
        "body": "io.input(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.input ([file])",
        "prefix": "io.input",
        "scope": "source.lua"
    },
    "io.lines": {
        "body": "io.lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.lines ([filename])",
        "prefix": "io.lines",
        "scope": "source.lua"
    },
    "io.open": {
        "body": "io.open(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.open (filename [, mode])",
        "prefix": "io.open",
        "scope": "source.lua"
    },
    "io.output": {
        "body": "io.output(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.output ([file])",
        "prefix": "io.output",
        "scope": "source.lua"
    },
    "io.popen": {
        "body": "io.popen(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.popen (prog [, mode])",
        "prefix": "io.popen",
        "scope": "source.lua"
    },
    "io.read": {
        "body": "io.read(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.read (...)",
        "prefix": "io.read",
        "scope": "source.lua"
    },
    "io.tmpfile": {
        "body": "io.tmpfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.tmpfile ()",
        "prefix": "io.tmpfile",
        "scope": "source.lua"
    },
    "io.type": {
        "body": "io.type(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.type (obj)",
        "prefix": "io.type",
        "scope": "source.lua"
    },
    "io.write": {
        "body": "io.write(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.write (...)",
        "prefix": "io.write",
        "scope": "source.lua"
    },
    "ipairs": {
        "body": "ipairs(${0:...})",
        "description": "5.1,5.2,5.3\n\nipairs (t)",
        "prefix": "ipairs",
        "scope": "source.lua"
    },
    "load": {
        "body": "load(${0:...})",
        "description": "5.1,5.2,5.3\n\nload (func [, chunkname])",
        "prefix": "load",
        "scope": "source.lua"
    },
    "loadfile": {
        "body": "loadfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nloadfile ([filename])",
        "prefix": "loadfile",
        "scope": "source.lua"
    },
    "loadstring": {
        "body": "loadstring(${0:...})",
        "description": "5.1\n\nloadstring (string [, chunkname])",
        "prefix": "loadstring",
        "scope": "source.lua"
    },
    "local": {
        "body": "local ${1:x} = ${0:1}",
        "description": "local x = 1",
        "prefix": "local",
        "scope": "source.lua"
    },
    "math.abs": {
        "body": "math.abs( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.abs",
        "prefix": "math.abs",
        "scope": "source.lua"
    },
    "math.acos": {
        "body": "math.acos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.acos",
        "prefix": "math.acos",
        "scope": "source.lua"
    },
    "math.asin": {
        "body": "math.asin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.asin",
        "prefix": "math.asin",
        "scope": "source.lua"
    },
    "math.atan": {
        "body": "math.atan( ${1:y}${2:[, x]} )",
        "description": "5.1,5.2,5.3\n\nmath.atan",
        "prefix": "math.atan",
        "scope": "source.lua"
    },
    "math.atan2": {
        "body": "math.atan2(${0:...})",
        "description": "5.1,5.2\n\nmath.atan2 (y, x)",
        "prefix": "math.atan2",
        "scope": "source.lua"
    },
    "math.ceil": {
        "body": "math.ceil( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.ceil",
        "prefix": "math.ceil",
        "scope": "source.lua"
    },
    "math.cos": {
        "body": "math.cos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.cos",
        "prefix": "math.cos",
        "scope": "source.lua"
    },
    "math.cosh": {
        "body": "math.cosh(${0:...})",
        "description": "5.1,5.2\n\nmath.cosh (x)",
        "prefix": "math.cosh",
        "scope": "source.lua"
    },
    "math.deg": {
        "body": "math.deg( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.deg",
        "prefix": "math.deg",
        "scope": "source.lua"
    },
    "math.exp": {
        "body": "math.exp( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.exp",
        "prefix": "math.exp",
        "scope": "source.lua"
    },
    "math.floor": {
        "body": "math.floor( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.floor",
        "prefix": "math.floor",
        "scope": "source.lua"
    },
    "math.fmod": {
        "body": "math.fmod( ${1:x},${2:y} )",
        "description": "5.1,5.2,5.3\n\nmath.fmod",
        "prefix": "math.fmod",
        "scope": "source.lua"
    },
    "math.frexp": {
        "body": "math.frexp(${0:...})",
        "description": "5.1,5.2\n\nmath.frexp (x)",
        "prefix": "math.frexp",
        "scope": "source.lua"
    },
    "math.huge": {
        "body": "math.huge(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.huge",
        "prefix": "math.huge",
        "scope": "source.lua"
    },
    "math.ldexp": {
        "body": "math.ldexp(${0:...})",
        "description": "5.1,5.2\n\nmath.ldexp (m, e)",
        "prefix": "math.ldexp",
        "scope": "source.lua"
    },
    "math.log": {
        "body": "math.log( ${1:x}${2:[, base]} )",
        "description": "5.1,5.2,5.3\n\nmath.log",
        "prefix": "math.log",
        "scope": "source.lua"
    },
    "math.log10": {
        "body": "math.log10(${0:...})",
        "description": "5.1\n\nmath.log10 (x)",
        "prefix": "math.log10",
        "scope": "source.lua"
    },
    "math.math.randomseed": {
        "body": "math.math.randomseed( ${1:x} )",
        "description": "math.math.randomseed",
        "prefix": "math.math.randomseed",
        "scope": "source.lua"
    },
    "math.max": {
        "body": "math.max( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.max",
        "prefix": "math.max",
        "scope": "source.lua"
    },
    "math.maxinteger": {
        "body": "math.maxinteger(${0:...})",
        "description": "5.3\n\nmath.maxinteger",
        "prefix": "math.maxinteger",
        "scope": "source.lua"
    },
    "math.min": {
        "body": "math.min( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.min",
        "prefix": "math.min",
        "scope": "source.lua"
    },
    "math.mininteger": {
        "body": "math.mininteger(${0:...})",
        "description": "5.3\n\nmath.mininteger",
        "prefix": "math.mininteger",
        "scope": "source.lua"
    },
    "math.modf": {
        "body": "math.modf( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.modf",
        "prefix": "math.modf",
        "scope": "source.lua"
    },
    "math.pi": {
        "body": "math.pi(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.pi",
        "prefix": "math.pi",
        "scope": "source.lua"
    },
    "math.pow": {
        "body": "math.pow(${0:...})",
        "description": "5.1,5.2\n\nmath.pow (x, y)",
        "prefix": "math.pow",
        "scope": "source.lua"
    },
    "math.rad": {
        "body": "math.rad(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.rad (x)",
        "prefix": "math.rad",
        "scope": "source.lua"
    },
    "math.random": {
        "body": "math.random( ${1:[m]}${2:[, n]} )",
        "description": "5.1,5.2,5.3\n\nmath.random",
        "prefix": "math.random",
        "scope": "source.lua"
    },
    "math.randomseed": {
        "body": "math.randomseed(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.randomseed (x)",
        "prefix": "math.randomseed",
        "scope": "source.lua"
    },
    "math.sin": {
        "body": "math.sin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sin",
        "prefix": "math.sin",
        "scope": "source.lua"
    },
    "math.sinh": {
        "body": "math.sinh(${0:...})",
        "description": "5.1,5.2\n\nmath.sinh (x)",
        "prefix": "math.sinh",
        "scope": "source.lua"
    },
    "math.sqrt": {
        "body": "math.sqrt( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sqrt",
        "prefix": "math.sqrt",
        "scope": "source.lua"
    },
    "math.tan": {
        "body": "math.tan( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.tan",
        "prefix": "math.tan",
        "scope": "source.lua"
    },
    "math.tanh": {
        "body": "math.tanh(${0:...})",
        "description": "5.1,5.2\n\nmath.tanh (x)",
        "prefix": "math.tanh",
        "scope": "source.lua"
    },
    "math.tointeger": {
        "body": "math.tointeger( ${1:x} )",
        "description": "5.3\n\nmath.tointeger",
        "prefix": "math.tointeger",
        "scope": "source.lua"
    },
    "math.type": {
        "body": "math.type( ${1:x} )",
        "description": "5.3\n\nmath.type",
        "prefix": "math.type",
        "scope": "source.lua"
    },
    "math.ult": {
        "body": "math.ult(${0:...})",
        "description": "5.3\n\nmath.ult (m, n)",
        "prefix": "math.ult",
        "scope": "source.lua"
    },
    "module": {
        "body": "module(${0:...})",
        "description": "5.1\n\nmodule (name [, ...])",
        "prefix": "module",
        "scope": "source.lua"
    },
    "next": {
        "body": "next(${1:table}${2:[, index]})",
        "description": "5.1,5.2,5.3\n\nnext (table [, index])",
        "prefix": "next",
        "scope": "source.lua"
    },
    "os.clock": {
        "body": "os.clock(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.clock ()",
        "prefix": "os.clock",
        "scope": "source.lua"
    },
    "os.date": {
        "body": "os.date(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.date ([format [, time]])",
        "prefix": "os.date",
        "scope": "source.lua"
    },
    "os.difftime": {
        "body": "os.difftime(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.difftime (t2, t1)",
        "prefix": "os.difftime",
        "scope": "source.lua"
    },
    "os.execute": {
        "body": "os.execute(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.execute ([command])",
        "prefix": "os.execute",
        "scope": "source.lua"
    },
    "os.exit": {
        "body": "os.exit(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.exit ([code])",
        "prefix": "os.exit",
        "scope": "source.lua"
    },
    "os.getenv": {
        "body": "os.getenv(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.getenv (varname)",
        "prefix": "os.getenv",
        "scope": "source.lua"
    },
    "os.remove": {
        "body": "os.remove(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.remove (filename)",
        "prefix": "os.remove",
        "scope": "source.lua"
    },
    "os.rename": {
        "body": "os.rename(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.rename (oldname, newname)",
        "prefix": "os.rename",
        "scope": "source.lua"
    },
    "os.setlocale": {
        "body": "os.setlocale(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.setlocale (locale [, category])",
        "prefix": "os.setlocale",
        "scope": "source.lua"
    },
    "os.time": {
        "body": "os.time(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.time ([table])",
        "prefix": "os.time",
        "scope": "source.lua"
    },
    "os.tmpname": {
        "body": "os.tmpname(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.tmpname ()",
        "prefix": "os.tmpname",
        "scope": "source.lua"
    },
    "package.config": {
        "body": "package.config(${0:...})",
        "description": "5.2,5.3\n\npackage.config",
        "prefix": "package.config",
        "scope": "source.lua"
    },
    "package.cpath": {
        "body": "package.cpath(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.cpath",
        "prefix": "package.cpath",
        "scope": "source.lua"
    },
    "package.loaded": {
        "body": "package.loaded(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loaded",
        "prefix": "package.loaded",
        "scope": "source.lua"
    },
    "package.loaders": {
        "body": "package.loaders(${0:...})",
        "description": "5.1\n\npackage.loaders",
        "prefix": "package.loaders",
        "scope": "source.lua"
    },
    "package.loadlib": {
        "body": "package.loadlib(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loadlib (libname, funcname)",
        "prefix": "package.loadlib",
        "scope": "source.lua"
    },
    "package.path": {
        "body": "package.path(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.path",
        "prefix": "package.path",
        "scope": "source.lua"
    },
    "package.preload": {
        "body": "package.preload(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.preload",
        "prefix": "package.preload",
        "scope": "source.lua"
    },
    "package.searchers": {
        "body": "package.searchers(${0:...})",
        "description": "5.2,5.3\n\npackage.searchers",
        "prefix": "package.searchers",
        "scope": "source.lua"
    },
    "package.searchpath": {
        "body": "package.searchpath(${0:...})",
        "description": "5.2,5.3\n\npackage.searchpath (name, path [, sep [, rep]])",
        "prefix": "package.searchpath",
        "scope": "source.lua"
    },
    "package.seeall": {
        "body": "package.seeall(${0:...})",
        "description": "5.1\n\npackage.seeall (module)",
        "prefix": "package.seeall",
        "scope": "source.lua"
    },
    "pairs": {
        "body": "pairs(${0:...})",
        "description": "5.1,5.2,5.3\n\npairs (t)",
        "prefix": "pairs",
        "scope": "source.lua"
    },
    "pcall": {
        "body": "pcall(${0:...})",
        "description": "5.1,5.2,5.3\n\npcall (f, arg1, ...)",
        "prefix": "pcall",
        "scope": "source.lua"
    },
    "print": {
        "body": "print(${1:...})",
        "description": "5.1,5.2,5.3\n\nprint(...)",
        "prefix": "print",
        "scope": "source.lua"
    },
    "rawequal": {
        "body": "rawequal(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawequal (v1, v2)",
        "prefix": "rawequal",
        "scope": "source.lua"
    },
    "rawget": {
        "body": "rawget(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawget (table, index)",
        "prefix": "rawget",
        "scope": "source.lua"
    },
    "rawlen": {
        "body": "rawlen(${0:...})",
        "description": "5.2,5.3\n\nrawlen (v)",
        "prefix": "rawlen",
        "scope": "source.lua"
    },
    "rawset": {
        "body": "rawset(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawset (table, index, value)",
        "prefix": "rawset",
        "scope": "source.lua"
    },
    "req": {
        "body": "require(\"${1:module}\")",
        "description": "require()",
        "prefix": "req",
        "scope": "source.lua"
    },
    "require": {
        "body": "require(\"${1:module}\")",
        "description": "5.1,5.2,5.3\n\nrequire()",
        "prefix": "require",
        "scope": "source.lua"
    },
    "ret": {
        "body": "return ${1:...}",
        "description": "return ...",
        "prefix": "ret",
        "scope": "source.lua"
    },
    "select": {
        "body": "select(${1:index}, ${2:...})",
        "description": "5.1,5.2,5.3\n\nselect (index, \u00b7\u00b7\u00b7)",
        "prefix": "select",
        "scope": "source.lua"
    },
    "setfenv": {
        "body": "setfenv(${0:...})",
        "description": "5.1\n\nsetfenv (f, table)",
        "prefix": "setfenv",
        "scope": "source.lua"
    },
    "setmetatable": {
        "body": "setmetatable(${1:table}, ${2:metatable})",
        "description": "5.1,5.2,5.3\n\nsetmetatable (table, metatable)",
        "prefix": "setmetatable",
        "scope": "source.lua"
    },
    "string.byte": {
        "body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.byte",
        "prefix": "string.byte",
        "scope": "source.lua"
    },
    "string.char": {
        "body": "string.char( ${1:...} )",
        "description": "5.1,5.2,5.3\n\nstring.char",
        "prefix": "string.char",
        "scope": "source.lua"
    },
    "string.dump": {
        "body": "string.dump(${0:...})",
        "description": "5.1,5.2,5.3\n\nstring.dump (function)",
        "prefix": "string.dump",
        "scope": "source.lua"
    },
    "string.find": {
        "body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
        "description": "5.1,5.2,5.3\n\nstring.find",
        "prefix": "string.find",
        "scope": "source.lua"
    },
    "string.format": {
        "body": "string.format( \"${1:formatstring}\",${2:...} )",
        "description": "5.1,5.2,5.3\n\nstring.format",
        "prefix": "string.format",
        "scope": "source.lua"
    },
    "string.gmatch": {
        "body": "string.gmatch( ${1:s},${2:pattern} )",
        "description": "5.1,5.2,5.3\n\nstring.gmatch",
        "prefix": "string.gmatch",
        "scope": "source.lua"
    },
    "string.gsub": {
        "body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
        "description": "5.1,5.2,5.3\n\nstring.gsub",
        "prefix": "string.gsub",
        "scope": "source.lua"
    },
    "string.len": {
        "body": "string.len( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.len",
        "prefix": "string.len",
        "scope": "source.lua"
    },
    "string.lower": {
        "body": "string.lower( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.lower",
        "prefix": "string.lower",
        "scope": "source.lua"
    },
    "string.match": {
        "body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
        "description": "5.1,5.2,5.3\n\nstring.match",
        "prefix": "string.match",
        "scope": "source.lua"
    },
    "string.pack": {
        "body": "string.pack(${0:...})",
        "description": "5.3\n\nstring.pack (fmt, v1, v2, ...)",
        "prefix": "string.pack",
        "scope": "source.lua"
    },
    "string.packsize": {
        "body": "string.packsize(${0:...})",
        "description": "5.3\n\nstring.packsize (fmt)",
        "prefix": "string.packsize",
        "scope": "source.lua"
    },
    "string.rep": {
        "body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
        "description": "5.1,5.2,5.3\n\nstring.rep",
        "prefix": "string.rep",
        "scope": "source.lua"
    },
    "string.reverse": {
        "body": "string.reverse( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.reverse",
        "prefix": "string.reverse",
        "scope": "source.lua"
    },
    "string.sub": {
        "body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.sub",
        "prefix": "string.sub",
        "scope": "source.lua"
    },
    "string.unpack": {
        "body": "string.unpack(${0:...})",
        "description": "5.3\n\nstring.unpack (fmt, s [, pos])",
        "prefix": "string.unpack",
        "scope": "source.lua"
    },
    "string.upper": {
        "body": "string.upper( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.upper",
        "prefix": "string.upper",
        "scope": "source.lua"
    },
    "table.concat": {
        "body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
        "description": "5.1,5.2,5.3\n\ntable.concat",
        "prefix": "table.concat",
        "scope": "source.lua"
    },
    "table.insert": {
        "body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
        "description": "5.1,5.2,5.3\n\ntable.insert",
        "prefix": "table.insert",
        "scope": "source.lua"
    },
    "table.maxn": {
        "body": "table.maxn(${0:...})",
        "description": "5.1\n\ntable.maxn (table)",
        "prefix": "table.maxn",
        "scope": "source.lua"
    },
    "table.move": {
        "body": "table.move(${0:...})",
        "description": "5.3\n\ntable.move (a1, f, e, t [,a2])",
        "prefix": "table.move",
        "scope": "source.lua"
    },
    "table.pack": {
        "body": "table.pack(${0:...})",
        "description": "5.2,5.3\n\ntable.pack (...)",
        "prefix": "table.pack",
        "scope": "source.lua"
    },
    "table.remove": {
        "body": "table.remove( ${1:list},${2: [pos,]} )",
        "description": "5.1,5.2,5.3\n\ntable.remove",
        "prefix": "table.remove",
        "scope": "source.lua"
    },
    "table.sort": {
        "body": "table.sort( ${1:tablename}${2:, sortfunction} )",
        "description": "5.1,5.2,5.3\n\ntable.sort",
        "prefix": "table.sort",
        "scope": "source.lua"
    },
    "table.unpack": {
        "body": "table.unpack(${0:...})",
        "description": "5.2,5.3\n\ntable.unpack (list [, i [, j]])",
        "prefix": "table.unpack",
        "scope": "source.lua"
    },
    "tonumber": {
        "body": "tonumber(${1:e}${2:[, base]})",
        "description": "5.1,5.2,5.3\n\ntonumber (e [, base])",
        "prefix": "tonumber",
        "scope": "source.lua"
    },
    "tostring": {
        "body": "tostring(${1:v})",
        "description": "5.1,5.2,5.3\n\ntostring (v)",
        "prefix": "tostring",
        "scope": "source.lua"
    },
    "type": {
        "body": "type(${1:v})",
        "description": "5.1,5.2,5.3\n\ntype (v)",
        "prefix": "type",
        "scope": "source.lua"
    },
    "unpack": {
        "body": "unpack(${0:...})",
        "description": "5.1\n\nunpack (list [, i [, j]])",
        "prefix": "unpack",
        "scope": "source.lua"
    },
    "utf8.char": {
        "body": "utf8.char(${0:...})",
        "description": "5.3\n\nutf8.char (...)",
        "prefix": "utf8.char",
        "scope": "source.lua"
    },
    "utf8.charpattern": {
        "body": "utf8.charpattern(${0:...})",
        "description": "5.3\n\nutf8.charpattern",
        "prefix": "utf8.charpattern",
        "scope": "source.lua"
    },
    "utf8.codepoint": {
        "body": "utf8.codepoint(${0:...})",
        "description": "5.3\n\nutf8.codepoint (s [, i [, j]])",
        "prefix": "utf8.codepoint",
        "scope": "source.lua"
    },
    "utf8.codes": {
        "body": "utf8.codes(${0:...})",
        "description": "5.3\n\nutf8.codes (s)",
        "prefix": "utf8.codes",
        "scope": "source.lua"
    },
    "utf8.len": {
        "body": "utf8.len(${0:...})",
        "description": "5.3\n\nutf8.len (s [, i [, j]])",
        "prefix": "utf8.len",
        "scope": "source.lua"
    },
    "utf8.offset": {
        "body": "utf8.offset(${0:...})",
        "description": "5.3\n\nutf8.offset (s, n [, i])",
        "prefix": "utf8.offset",
        "scope": "source.lua"
    },
    "ver": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "ver",
        "scope": "source.lua"
    },
    "version": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "version",
        "scope": "source.lua"
    },
    "xpcall": {
        "body": "xpcall(${0:...})",
        "description": "5.1,5.2,5.3\n\nxpcall (f, err)",
        "prefix": "xpcall",
        "scope": "source.lua"
    },

	
	"PLAYER_PED": {
		"body": "PLAYER_PED",
		"description": "GTA SA\nactor 1\n",
		"prefix": "PLAYER_PED",
		"scope": "source.lua"
	},
	"PLAYER_HANDLE": {
		"body": "PLAYER_HANDLE",
		"description": "GTA SA\n player 1\n",
		"prefix": "PLAYER_HANDLE",
		"scope": "source.lua"
	},
	
	
	"shakeCam": {
		"body": "shakeCam(${1:shake})",
		"description": "GTA SA\nshakeCam(int shake)\n",
		"prefix": "shakeCam",
		"scope": "source.lua"
	},
	"createPlayer": {
		"body": "createPlayer(${1:modelId},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nPlayer player = createPlayer(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createPlayer",
		"scope": "source.lua"
	},
	"createChar": {
		"body": "createChar(${1:pedtype},${2:modelId},${3:atX},${4:atY},${5:atZ})",
		"description": "GTA SA\nPed ped = createChar(int pedtype, Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createChar",
		"scope": "source.lua"
	},
	"deleteChar": {
		"body": "deleteChar(${1:ped})",
		"description": "GTA SA\ndeleteChar(Ped ped)\n",
		"prefix": "deleteChar",
		"scope": "source.lua"
	},
	"getCharCoordinates": {
		"body": "getCharCoordinates(${1:ped})",
		"description": "GTA SA\nfloat positionX, float positionY, float positionZ = getCharCoordinates(Ped ped)\n",
		"prefix": "getCharCoordinates",
		"scope": "source.lua"
	},
	"setCharCoordinates": {
		"body": "setCharCoordinates(${1:ped},${2:posX},${3:posY},${4:posZ})",
		"description": "GTA SA\nsetCharCoordinates(Ped ped, float posX, float posY, float posZ)\n",
		"prefix": "setCharCoordinates",
		"scope": "source.lua"
	},
	"isCharInArea2d": {
		"body": "isCharInArea2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInArea2d",
		"scope": "source.lua"
	},
	"isCharInArea3d": {
		"body": "isCharInArea3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInArea3d",
		"scope": "source.lua"
	},
	"createCar": {
		"body": "createCar(${1:modelId},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nVehicle car = createCar(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createCar",
		"scope": "source.lua"
	},
	"deleteCar": {
		"body": "deleteCar(${1:car})",
		"description": "GTA SA\ndeleteCar(Vehicle car)\n",
		"prefix": "deleteCar",
		"scope": "source.lua"
	},
	"carGotoCoordinates": {
		"body": "carGotoCoordinates(${1:car},${2:driveToX},${3:driveToY},${4:driveToZ})",
		"description": "GTA SA\ncarGotoCoordinates(Vehicle car, float driveToX, float driveToY, float driveToZ)\n",
		"prefix": "carGotoCoordinates",
		"scope": "source.lua"
	},
	"carWanderRandomly": {
		"body": "carWanderRandomly(${1:car})",
		"description": "GTA SA\ncarWanderRandomly(Vehicle car)\n",
		"prefix": "carWanderRandomly",
		"scope": "source.lua"
	},
	"carSetIdle": {
		"body": "carSetIdle(${1:car})",
		"description": "GTA SA\ncarSetIdle(Vehicle car)\n",
		"prefix": "carSetIdle",
		"scope": "source.lua"
	},
	"getCarCoordinates": {
		"body": "getCarCoordinates(${1:car})",
		"description": "GTA SA\nfloat positionX, float positionY, float positionZ = getCarCoordinates(Vehicle car)\n",
		"prefix": "getCarCoordinates",
		"scope": "source.lua"
	},
	"setCarCoordinates": {
		"body": "setCarCoordinates(${1:car},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nsetCarCoordinates(Vehicle car, float atX, float atY, float atZ)\n",
		"prefix": "setCarCoordinates",
		"scope": "source.lua"
	},
	"setCarCruiseSpeed": {
		"body": "setCarCruiseSpeed(${1:car},${2:maxSpeed})",
		"description": "GTA SA\nsetCarCruiseSpeed(Vehicle car, float maxSpeed)\n",
		"prefix": "setCarCruiseSpeed",
		"scope": "source.lua"
	},
	"setCarDrivingStyle": {
		"body": "setCarDrivingStyle(${1:car},${2:behaviour})",
		"description": "GTA SA\nsetCarDrivingStyle(Vehicle car, int behaviour)\n",
		"prefix": "setCarDrivingStyle",
		"scope": "source.lua"
	},
	"setCarMission": {
		"body": "setCarMission(${1:car},${2:driverBehaviour})",
		"description": "GTA SA\nsetCarMission(Vehicle car, int driverBehaviour)\n",
		"prefix": "setCarMission",
		"scope": "source.lua"
	},
	"isCarInArea2d": {
		"body": "isCarInArea2d(${1:car},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCarInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCarInArea2d",
		"scope": "source.lua"
	},
	"isCarInArea3d": {
		"body": "isCarInArea3d(${1:car},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCarInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCarInArea3d",
		"scope": "source.lua"
	},
	"printBig": {
		"body": "printBig(${1:gxtString},${2:time},${3:style})",
		"description": "GTA SA\nprintBig(GxtString gxtString, int time, int style)\n",
		"prefix": "printBig",
		"scope": "source.lua"
	},
	"printText": {
		"body": "printText(${1:gxtString},${2:time},${3:flag})",
		"description": "GTA SA\nprintText(GxtString gxtString, int time, int flag)\n",
		"prefix": "printText",
		"scope": "source.lua"
	},
	"printTextNow": {
		"body": "printTextNow(${1:gxtString},${2:time},${3:flag})",
		"description": "GTA SA\nprintTextNow(GxtString gxtString, int time, int flag)\n",
		"prefix": "printTextNow",
		"scope": "source.lua"
	},
	"clearPrints": {
		"body": "clearPrints()",
		"description": "GTA SA\nclearPrints()\n",
		"prefix": "clearPrints",
		"scope": "source.lua"
	},
	"getTimeOfDay": {
		"body": "getTimeOfDay()",
		"description": "GTA SA\nint hours, int mins = getTimeOfDay()\n",
		"prefix": "getTimeOfDay",
		"scope": "source.lua"
	},
	"setTimeOfDay": {
		"body": "setTimeOfDay(${1:hours},${2:minutes})",
		"description": "GTA SA\nsetTimeOfDay(int hours, int minutes)\n",
		"prefix": "setTimeOfDay",
		"scope": "source.lua"
	},
	"getMinutesToTimeOfDay": {
		"body": "getMinutesToTimeOfDay(${1:hours},${2:minutes})",
		"description": "GTA SA\nint minutes = getMinutesToTimeOfDay(int hours, int minutes)\n",
		"prefix": "getMinutesToTimeOfDay",
		"scope": "source.lua"
	},
	"isPointOnScreen": {
		"body": "isPointOnScreen(${1:sphereX},${2:sphereY},${3:sphereZ},${4:radius})",
		"description": "GTA SA\nbool result = isPointOnScreen(float sphereX, float sphereY, float sphereZ, float radius)\n",
		"prefix": "isPointOnScreen",
		"scope": "source.lua"
	},
	"storeCarCharIsIn": {
		"body": "storeCarCharIsIn(${1:ped})",
		"description": "GTA SA\nVehicle car = storeCarCharIsIn(Ped ped)\n",
		"prefix": "storeCarCharIsIn",
		"scope": "source.lua"
	},
	"isCharInCar": {
		"body": "isCharInCar(${1:ped},${2:car})",
		"description": "GTA SA\nbool result = isCharInCar(Ped ped, Vehicle car)\n",
		"prefix": "isCharInCar",
		"scope": "source.lua"
	},
	"isCharInModel": {
		"body": "isCharInModel(${1:ped},${2:carModel})",
		"description": "GTA SA\nbool result = isCharInModel(Ped ped, Model carModel)\n",
		"prefix": "isCharInModel",
		"scope": "source.lua"
	},
	"isCharInAnyCar": {
		"body": "isCharInAnyCar(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyCar(Ped ped)\n",
		"prefix": "isCharInAnyCar",
		"scope": "source.lua"
	},
	"isButtonPressed": {
		"body": "isButtonPressed(${1:player},${2:key})",
		"description": "GTA SA\nbool result = isButtonPressed(Player player, int key)\n",
		"prefix": "isButtonPressed",
		"scope": "source.lua"
	},
	"getPadState": {
		"body": "getPadState(${1:player},${2:key})",
		"description": "GTA SA\nint state = getPadState(Player player, int key)\n",
		"prefix": "getPadState",
		"scope": "source.lua"
	},
	"locateCharAnyMeans2d": {
		"body": "locateCharAnyMeans2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeans2d",
		"scope": "source.lua"
	},
	"locateCharOnFoot2d": {
		"body": "locateCharOnFoot2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFoot2d",
		"scope": "source.lua"
	},
	"locateCharInCar2d": {
		"body": "locateCharInCar2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCar2d",
		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans2d": {
		"body": "locateStoppedCharAnyMeans2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharAnyMeans2d",
		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot2d": {
		"body": "locateStoppedCharOnFoot2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharOnFoot2d",
		"scope": "source.lua"
	},
	"locateStoppedCharInCar2d": {
		"body": "locateStoppedCharInCar2d(${1:ped},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharInCar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansChar2d": {
		"body": "locateCharAnyMeansChar2d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeansChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansChar2d",
		"scope": "source.lua"
	},
	"locateCharOnFootChar2d": {
		"body": "locateCharOnFootChar2d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nlocateCharOnFootChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFootChar2d",
		"scope": "source.lua"
	},
	"locateCharInCarChar2d": {
		"body": "locateCharInCarChar2d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharInCarChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarChar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeans3d": {
		"body": "locateCharAnyMeans3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeans3d",
		"scope": "source.lua"
	},
	"locateCharOnFoot3d": {
		"body": "locateCharOnFoot3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFoot3d",
		"scope": "source.lua"
	},
	"locateCharInCar3d": {
		"body": "locateCharInCar3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCar3d",
		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans3d": {
		"body": "locateStoppedCharAnyMeans3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharAnyMeans3d",
		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot3d": {
		"body": "locateStoppedCharOnFoot3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharOnFoot3d",
		"scope": "source.lua"
	},
	"locateStoppedCharInCar3d": {
		"body": "locateStoppedCharInCar3d(${1:ped},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharInCar3d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansChar3d": {
		"body": "locateCharAnyMeansChar3d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeansChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeansChar3d",
		"scope": "source.lua"
	},
	"locateCharOnFootChar3d": {
		"body": "locateCharOnFootChar3d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharOnFootChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFootChar3d",
		"scope": "source.lua"
	},
	"locateCharInCarChar3d": {
		"body": "locateCharInCarChar3d(${1:ped},${2:nearPed},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharInCarChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCarChar3d",
		"scope": "source.lua"
	},
	"createObject": {
		"body": "createObject(${1:modelId},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nObject object = createObject(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createObject",
		"scope": "source.lua"
	},
	"deleteObject": {
		"body": "deleteObject(${1:object})",
		"description": "GTA SA\ndeleteObject(Object object)\n",
		"prefix": "deleteObject",
		"scope": "source.lua"
	},
	"givePlayerMoney": {
		"body": "givePlayerMoney(${1:player},${2:money})",
		"description": "GTA SA\ngivePlayerMoney(Player player, int money)\n",
		"prefix": "givePlayerMoney",
		"scope": "source.lua"
	},
	"getPlayerMoney": {
		"body": "getPlayerMoney(${1:player})",
		"description": "GTA SA\nint money = getPlayerMoney(Player player)\n",
		"prefix": "getPlayerMoney",
		"scope": "source.lua"
	},
	"giveRemoteControlledCarToPlayer": {
		"body": "giveRemoteControlledCarToPlayer(${1:player},${2:float2},${3:float3},${4:float4})",
		"description": "GTA SA\ngiveRemoteControlledCarToPlayer(Player player, float float2, float float3, float float4)\n",
		"prefix": "giveRemoteControlledCarToPlayer",
		"scope": "source.lua"
	},
	"alterWantedLevel": {
		"body": "alterWantedLevel(${1:player},${2:wantedLevel})",
		"description": "GTA SA\nalterWantedLevel(Player player, int wantedLevel)\n",
		"prefix": "alterWantedLevel",
		"scope": "source.lua"
	},
	"alterWantedLevelNoDrop": {
		"body": "alterWantedLevelNoDrop(${1:player},${2:minimumWantedLevel})",
		"description": "GTA SA\nalterWantedLevelNoDrop(Player player, int minimumWantedLevel)\n",
		"prefix": "alterWantedLevelNoDrop",
		"scope": "source.lua"
	},
	"isWantedLevelGreater": {
		"body": "isWantedLevelGreater(${1:player},${2:level})",
		"description": "GTA SA\nbool result = isWantedLevelGreater(Player player, int level)\n",
		"prefix": "isWantedLevelGreater",
		"scope": "source.lua"
	},
	"clearWantedLevel": {
		"body": "clearWantedLevel(${1:player})",
		"description": "GTA SA\nclearWantedLevel(Player player)\n",
		"prefix": "clearWantedLevel",
		"scope": "source.lua"
	},
	"setDeatharrestState": {
		"body": "setDeatharrestState(${1:value})",
		"description": "GTA SA\nsetDeatharrestState(bool value)\n",
		"prefix": "setDeatharrestState",
		"scope": "source.lua"
	},
	"hasDeatharrestBeenExecuted": {
		"body": "hasDeatharrestBeenExecuted()",
		"description": "GTA SA\nbool result = hasDeatharrestBeenExecuted()\n",
		"prefix": "hasDeatharrestBeenExecuted",
		"scope": "source.lua"
	},
	"addAmmoToChar": {
		"body": "addAmmoToChar(${1:ped},${2:weapon},${3:ammo})",
		"description": "GTA SA\naddAmmoToChar(Ped ped, int weapon, int ammo)\n",
		"prefix": "addAmmoToChar",
		"scope": "source.lua"
	},
	"isPlayerDead": {
		"body": "isPlayerDead(${1:player})",
		"description": "GTA SA\nbool result = isPlayerDead(Player player)\n",
		"prefix": "isPlayerDead",
		"scope": "source.lua"
	},
	"isCharDead": {
		"body": "isCharDead(${1:ped})",
		"description": "GTA SA\nbool result = isCharDead(Ped ped)\n",
		"prefix": "isCharDead",
		"scope": "source.lua"
	},
	"isCarDead": {
		"body": "isCarDead(${1:car})",
		"description": "GTA SA\nbool result = isCarDead(Vehicle car)\n",
		"prefix": "isCarDead",
		"scope": "source.lua"
	},
	"isPlayerPressingHorn": {
		"body": "isPlayerPressingHorn(${1:player})",
		"description": "GTA SA\nbool result = isPlayerPressingHorn(Player player)\n",
		"prefix": "isPlayerPressingHorn",
		"scope": "source.lua"
	},
	"createCharInsideCar": {
		"body": "createCharInsideCar(${1:car},${2:pedtype},${3:model})",
		"description": "GTA SA\nPed ped = createCharInsideCar(Vehicle car, Model pedtype, int model)\n",
		"prefix": "createCharInsideCar",
		"scope": "source.lua"
	},
	"isCarModel": {
		"body": "isCarModel(${1:car},${2:modelId})",
		"description": "GTA SA\nbool result = isCarModel(Vehicle car, Model modelId)\n",
		"prefix": "isCarModel",
		"scope": "source.lua"
	},
	"createCarGenerator": {
		"body": "createCarGenerator(${1:atX},${2:atY},${3:atZ},${4:angle},${5:modelId},${6:color1},${7:color2},${8:forceSpawn},${9:alarm},${10:doorLock},${11:minDelay},${12:maxDelay})",
		"description": "GTA SA\nint carGenerator = createCarGenerator(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay)\n",
		"prefix": "createCarGenerator",
		"scope": "source.lua"
	},
	"switchCarGenerator": {
		"body": "switchCarGenerator(${1:carGenerator},${2:carsToGenerate})",
		"description": "GTA SA\nswitchCarGenerator(int carGenerator, int carsToGenerate)\n",
		"prefix": "switchCarGenerator",
		"scope": "source.lua"
	},
	"displayOnscreenTimer": {
		"body": "displayOnscreenTimer(${1:var},${2:countInDirection})",
		"description": "GTA SA\ndisplayOnscreenTimer(VarId var, bool countInDirection)\n",
		"prefix": "displayOnscreenTimer",
		"scope": "source.lua"
	},
	"clearOnscreenTimer": {
		"body": "clearOnscreenTimer(${1:var})",
		"description": "GTA SA\nclearOnscreenTimer(VarId var)\n",
		"prefix": "clearOnscreenTimer",
		"scope": "source.lua"
	},
	"clearOnscreenCounter": {
		"body": "clearOnscreenCounter(${1:var})",
		"description": "GTA SA\nclearOnscreenCounter(VarId var)\n",
		"prefix": "clearOnscreenCounter",
		"scope": "source.lua"
	},
	"isCharInZone": {
		"body": "isCharInZone(${1:ped},${2:zoneName})",
		"description": "GTA SA\nbool result = isCharInZone(Ped ped, GxtString zoneName)\n",
		"prefix": "isCharInZone",
		"scope": "source.lua"
	},
	"pointCameraAtCar": {
		"body": "pointCameraAtCar(${1:car},${2:mode},${3:switchstyle})",
		"description": "GTA SA\npointCameraAtCar(Vehicle car, int mode, int switchstyle)\n",
		"prefix": "pointCameraAtCar",
		"scope": "source.lua"
	},
	"pointCameraAtChar": {
		"body": "pointCameraAtChar(${1:ped},${2:mode},${3:switchstyle})",
		"description": "GTA SA\npointCameraAtChar(Ped ped, int mode, int switchstyle)\n",
		"prefix": "pointCameraAtChar",
		"scope": "source.lua"
	},
	"restoreCamera": {
		"body": "restoreCamera()",
		"description": "GTA SA\nrestoreCamera()\n",
		"prefix": "restoreCamera",
		"scope": "source.lua"
	},
	"shakePad": {
		"body": "shakePad(${1:player},${2:time},${3:intensity})",
		"description": "GTA SA\nshakePad(Player player, int time, int intensity)\n",
		"prefix": "shakePad",
		"scope": "source.lua"
	},
	"setTimeScale": {
		"body": "setTimeScale(${1:gamespeed})",
		"description": "GTA SA\nsetTimeScale(float gamespeed)\n",
		"prefix": "setTimeScale",
		"scope": "source.lua"
	},
	"setFixedCameraPosition": {
		"body": "setFixedCameraPosition(${1:positionX},${2:positionY},${3:positionZ},${4:rotationX},${5:rotationY},${6:rotationZ})",
		"description": "GTA SA\nsetFixedCameraPosition(float positionX, float positionY, float positionZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "setFixedCameraPosition",
		"scope": "source.lua"
	},
	"pointCameraAtPoint": {
		"body": "pointCameraAtPoint(${1:pointAtX},${2:pointAtY},${3:pointAtZ},${4:switchstyle})",
		"description": "GTA SA\npointCameraAtPoint(float pointAtX, float pointAtY, float pointAtZ, int switchstyle)\n",
		"prefix": "pointCameraAtPoint",
		"scope": "source.lua"
	},
	"addBlipForCarOld": {
		"body": "addBlipForCarOld(${1:car},${2:unused},${3:visibility})",
		"description": "GTA SA\nMarker marker = addBlipForCarOld(Vehicle car, int unused, bool visibility)\n",
		"prefix": "addBlipForCarOld",
		"scope": "source.lua"
	},
	"addBlipForCharOld": {
		"body": "addBlipForCharOld(${1:ped},${2:int2},${3:int3})",
		"description": "GTA SA\nMarker marker = addBlipForCharOld(Ped ped, int int2, int int3)\n",
		"prefix": "addBlipForCharOld",
		"scope": "source.lua"
	},
	"removeBlip": {
		"body": "removeBlip(${1:marker})",
		"description": "GTA SA\nremoveBlip(Marker marker)\n",
		"prefix": "removeBlip",
		"scope": "source.lua"
	},
	"changeBlipColour": {
		"body": "changeBlipColour(${1:marker},${2:color})",
		"description": "GTA SA\nchangeBlipColour(Marker marker, int color)\n",
		"prefix": "changeBlipColour",
		"scope": "source.lua"
	},
	"addBlipForCoordOld": {
		"body": "addBlipForCoordOld(${1:atX},${2:atY},${3:atZ},${4:color},${5:flag})",
		"description": "GTA SA\nMarker marker = addBlipForCoordOld(float atX, float atY, float atZ, int color, int flag)\n",
		"prefix": "addBlipForCoordOld",
		"scope": "source.lua"
	},
	"changeBlipScale": {
		"body": "changeBlipScale(${1:marker},${2:size})",
		"description": "GTA SA\nchangeBlipScale(Marker marker, int size)\n",
		"prefix": "changeBlipScale",
		"scope": "source.lua"
	},
	"setFadingColour": {
		"body": "setFadingColour(${1:r},${2:g},${3:b})",
		"description": "GTA SA\nsetFadingColour(int r, int g, int b)\n",
		"prefix": "setFadingColour",
		"scope": "source.lua"
	},
	"doFade": {
		"body": "doFade(${1:fade},${2:time})",
		"description": "GTA SA\ndoFade(bool fade, int time)\n",
		"prefix": "doFade",
		"scope": "source.lua"
	},
	"getFadingStatus": {
		"body": "getFadingStatus()",
		"description": "GTA SA\nbool result = getFadingStatus()\n",
		"prefix": "getFadingStatus",
		"scope": "source.lua"
	},
	"addHospitalRestart": {
		"body": "addHospitalRestart(${1:atX},${2:atY},${3:atZ},${4:angle},${5:townNumber})",
		"description": "GTA SA\naddHospitalRestart(float atX, float atY, float atZ, float angle, int townNumber)\n",
		"prefix": "addHospitalRestart",
		"scope": "source.lua"
	},
	"addPoliceRestart": {
		"body": "addPoliceRestart(${1:atX},${2:atY},${3:atZ},${4:angle},${5:townNumber})",
		"description": "GTA SA\naddPoliceRestart(float atX, float atY, float atZ, float angle, int townNumber)\n",
		"prefix": "addPoliceRestart",
		"scope": "source.lua"
	},
	"overrideNextRestart": {
		"body": "overrideNextRestart(${1:atX},${2:atY},${3:atZ},${4:angle})",
		"description": "GTA SA\noverrideNextRestart(float atX, float atY, float atZ, float angle)\n",
		"prefix": "overrideNextRestart",
		"scope": "source.lua"
	},
	"drawShadow": {
		"body": "drawShadow(${1:particle},${2:atX},${3:atY},${4:atZ},${5:rotationFactor},${6:size},${7:intensity},${8:flags1},${9:flags2},${10:flags3})",
		"description": "GTA SA\ndrawShadow(Particle particle, float atX, float atY, float atZ, float rotationFactor, float size, int intensity, int flags1, int flags2, int flags3)\n",
		"prefix": "drawShadow",
		"scope": "source.lua"
	},
	"getCharHeading": {
		"body": "getCharHeading(${1:ped})",
		"description": "GTA SA\nfloat angle = getCharHeading(Ped ped)\n",
		"prefix": "getCharHeading",
		"scope": "source.lua"
	},
	"setCharHeading": {
		"body": "setCharHeading(${1:ped},${2:angle})",
		"description": "GTA SA\nsetCharHeading(Ped ped, float angle)\n",
		"prefix": "setCharHeading",
		"scope": "source.lua"
	},
	"getCarHeading": {
		"body": "getCarHeading(${1:car})",
		"description": "GTA SA\nfloat angle = getCarHeading(Vehicle car)\n",
		"prefix": "getCarHeading",
		"scope": "source.lua"
	},
	"setCarHeading": {
		"body": "setCarHeading(${1:car},${2:angle})",
		"description": "GTA SA\nsetCarHeading(Vehicle car, float angle)\n",
		"prefix": "setCarHeading",
		"scope": "source.lua"
	},
	"getObjectHeading": {
		"body": "getObjectHeading(${1:object})",
		"description": "GTA SA\nfloat angle = getObjectHeading(Object object)\n",
		"prefix": "getObjectHeading",
		"scope": "source.lua"
	},
	"setObjectHeading": {
		"body": "setObjectHeading(${1:object},${2:angle})",
		"description": "GTA SA\nsetObjectHeading(Object object, float angle)\n",
		"prefix": "setObjectHeading",
		"scope": "source.lua"
	},
	"isCharTouchingObject": {
		"body": "isCharTouchingObject(${1:ped},${2:object})",
		"description": "GTA SA\nbool result = isCharTouchingObject(Ped ped, Object object)\n",
		"prefix": "isCharTouchingObject",
		"scope": "source.lua"
	},
	"setCharAmmo": {
		"body": "setCharAmmo(${1:ped},${2:weapon},${3:ammo})",
		"description": "GTA SA\nsetCharAmmo(Ped ped, int weapon, int ammo)\n",
		"prefix": "setCharAmmo",
		"scope": "source.lua"
	},
	"declareMissionFlag": {
		"body": "declareMissionFlag(${1:flag})",
		"description": "GTA SA\ndeclareMissionFlag(VarId flag)\n",
		"prefix": "declareMissionFlag",
		"scope": "source.lua"
	},
	"addBlipForCar": {
		"body": "addBlipForCar(${1:car})",
		"description": "GTA SA\nMarker marker = addBlipForCar(Vehicle car)\n",
		"prefix": "addBlipForCar",
		"scope": "source.lua"
	},
	"addBlipForChar": {
		"body": "addBlipForChar(${1:ped})",
		"description": "GTA SA\nMarker marker = addBlipForChar(Ped ped)\n",
		"prefix": "addBlipForChar",
		"scope": "source.lua"
	},
	"addBlipForObject": {
		"body": "addBlipForObject(${1:object})",
		"description": "GTA SA\nMarker marker = addBlipForObject(Object object)\n",
		"prefix": "addBlipForObject",
		"scope": "source.lua"
	},
	"addBlipForCoord": {
		"body": "addBlipForCoord(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nCheckpoint checkpoint = addBlipForCoord(float atX, float atY, float atZ)\n",
		"prefix": "addBlipForCoord",
		"scope": "source.lua"
	},
	"changeBlipDisplay": {
		"body": "changeBlipDisplay(${1:marker},${2:mode})",
		"description": "GTA SA\nchangeBlipDisplay(Marker marker, int mode)\n",
		"prefix": "changeBlipDisplay",
		"scope": "source.lua"
	},
	"addOneOffSound": {
		"body": "addOneOffSound(${1:atX},${2:atY},${3:atZ},${4:sound})",
		"description": "GTA SA\naddOneOffSound(float atX, float atY, float atZ, int sound)\n",
		"prefix": "addOneOffSound",
		"scope": "source.lua"
	},
	"addContinuousSound": {
		"body": "addContinuousSound(${1:atX},${2:atY},${3:atZ},${4:sound})",
		"description": "GTA SA\nint unk = addContinuousSound(float atX, float atY, float atZ, int sound)\n",
		"prefix": "addContinuousSound",
		"scope": "source.lua"
	},
	"removeSound": {
		"body": "removeSound(${1:sound})",
		"description": "GTA SA\nremoveSound(int sound)\n",
		"prefix": "removeSound",
		"scope": "source.lua"
	},
	"isCarStuckOnRoof": {
		"body": "isCarStuckOnRoof(${1:car})",
		"description": "GTA SA\nbool result = isCarStuckOnRoof(Vehicle car)\n",
		"prefix": "isCarStuckOnRoof",
		"scope": "source.lua"
	},
	"addUpsidedownCarCheck": {
		"body": "addUpsidedownCarCheck(${1:car})",
		"description": "GTA SA\naddUpsidedownCarCheck(Vehicle car)\n",
		"prefix": "addUpsidedownCarCheck",
		"scope": "source.lua"
	},
	"removeUpsidedownCarCheck": {
		"body": "removeUpsidedownCarCheck(${1:car})",
		"description": "GTA SA\nremoveUpsidedownCarCheck(Vehicle car)\n",
		"prefix": "removeUpsidedownCarCheck",
		"scope": "source.lua"
	},
	"isCharInAreaOnFoot2d": {
		"body": "isCharInAreaOnFoot2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharInAreaInCar2d": {
		"body": "isCharInAreaInCar2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharStoppedInArea2d": {
		"body": "isCharStoppedInArea2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInArea2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot2d": {
		"body": "isCharStoppedInAreaOnFoot2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar2d": {
		"body": "isCharStoppedInAreaInCar2d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharInAreaOnFoot3d": {
		"body": "isCharInAreaOnFoot3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharInAreaInCar3d": {
		"body": "isCharInAreaInCar3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharStoppedInArea3d": {
		"body": "isCharStoppedInArea3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInArea3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot3d": {
		"body": "isCharStoppedInAreaOnFoot3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar3d": {
		"body": "isCharStoppedInAreaInCar3d(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInAreaInCar3d",
		"scope": "source.lua"
	},
	"isCarStoppedInArea2d": {
		"body": "isCarStoppedInArea2d(${1:car},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isCarStoppedInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCarStoppedInArea2d",
		"scope": "source.lua"
	},
	"isCarStoppedInArea3d": {
		"body": "isCarStoppedInArea3d(${1:car},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:sphere})",
		"description": "GTA SA\nbool result = isCarStoppedInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCarStoppedInArea3d",
		"scope": "source.lua"
	},
	"locateCar2d": {
		"body": "locateCar2d(${1:car},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCar2d",
		"scope": "source.lua"
	},
	"locateStoppedCar2d": {
		"body": "locateStoppedCar2d(${1:car},${2:pointX},${3:pointY},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCar2d",
		"scope": "source.lua"
	},
	"locateCar3d": {
		"body": "locateCar3d(${1:car},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCar3d",
		"scope": "source.lua"
	},
	"locateStoppedCar3d": {
		"body": "locateStoppedCar3d(${1:car},${2:sphereX},${3:sphereY},${4:sphereZ},${5:radiusX},${6:radiusY},${7:radiusZ},${8:sphere})",
		"description": "GTA SA\nbool result = locateStoppedCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCar3d",
		"scope": "source.lua"
	},
	"giveWeaponToChar": {
		"body": "giveWeaponToChar(${1:ped},${2:weapon},${3:ammo})",
		"description": "GTA SA\ngiveWeaponToChar(Ped ped, int weapon, int ammo)\n",
		"prefix": "giveWeaponToChar",
		"scope": "source.lua"
	},
	"setPlayerControl": {
		"body": "setPlayerControl(${1:player},${2:canMove})",
		"description": "GTA SA\nbool result = setPlayerControl(Player player, bool canMove)\n",
		"prefix": "setPlayerControl",
		"scope": "source.lua"
	},
	"forceWeather": {
		"body": "forceWeather(${1:weather})",
		"description": "GTA SA\nbool result = forceWeather(int weather)\n",
		"prefix": "forceWeather",
		"scope": "source.lua"
	},
	"forceWeatherNow": {
		"body": "forceWeatherNow(${1:weather})",
		"description": "GTA SA\nbool result = forceWeatherNow(int weather)\n",
		"prefix": "forceWeatherNow",
		"scope": "source.lua"
	},
	"releaseWeather": {
		"body": "releaseWeather()",
		"description": "GTA SA\nreleaseWeather()\n",
		"prefix": "releaseWeather",
		"scope": "source.lua"
	},
	"setCurrentCharWeapon": {
		"body": "setCurrentCharWeapon(${1:ped},${2:weapon})",
		"description": "GTA SA\nsetCurrentCharWeapon(Ped ped, int weapon)\n",
		"prefix": "setCurrentCharWeapon",
		"scope": "source.lua"
	},
	"getObjectCoordinates": {
		"body": "getObjectCoordinates(${1:object})",
		"description": "GTA SA\nbool result, float positionX, float positionY, float positionZ = getObjectCoordinates(Object object)\n",
		"prefix": "getObjectCoordinates",
		"scope": "source.lua"
	},
	"setObjectCoordinates": {
		"body": "setObjectCoordinates(${1:object},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nbool result = setObjectCoordinates(Object object, float atX, float atY, float atZ)\n",
		"prefix": "setObjectCoordinates",
		"scope": "source.lua"
	},
	"getGameTimer": {
		"body": "getGameTimer()",
		"description": "GTA SA\nint timeMs = getGameTimer()\n",
		"prefix": "getGameTimer",
		"scope": "source.lua"
	},
	"storeWantedLevel": {
		"body": "storeWantedLevel(${1:player})",
		"description": "GTA SA\nbool result, int level = storeWantedLevel(Player player)\n",
		"prefix": "storeWantedLevel",
		"scope": "source.lua"
	},
	"isCarStopped": {
		"body": "isCarStopped(${1:car})",
		"description": "GTA SA\nbool result = isCarStopped(Vehicle car)\n",
		"prefix": "isCarStopped",
		"scope": "source.lua"
	},
	"markCharAsNoLongerNeeded": {
		"body": "markCharAsNoLongerNeeded(${1:ped})",
		"description": "GTA SA\nbool result = markCharAsNoLongerNeeded(Ped ped)\n",
		"prefix": "markCharAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"markCarAsNoLongerNeeded": {
		"body": "markCarAsNoLongerNeeded(${1:car})",
		"description": "GTA SA\nbool result = markCarAsNoLongerNeeded(Vehicle car)\n",
		"prefix": "markCarAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"markObjectAsNoLongerNeeded": {
		"body": "markObjectAsNoLongerNeeded(${1:object})",
		"description": "GTA SA\nbool result = markObjectAsNoLongerNeeded(Object object)\n",
		"prefix": "markObjectAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"dontRemoveChar": {
		"body": "dontRemoveChar(${1:ped})",
		"description": "GTA SA\nbool result = dontRemoveChar(Ped ped)\n",
		"prefix": "dontRemoveChar",
		"scope": "source.lua"
	},
	"dontRemoveObject": {
		"body": "dontRemoveObject(${1:object})",
		"description": "GTA SA\nbool result = dontRemoveObject(Object object)\n",
		"prefix": "dontRemoveObject",
		"scope": "source.lua"
	},
	"createCharAsPassenger": {
		"body": "createCharAsPassenger(${1:car},${2:pedtype},${3:model},${4:passengerSeat})",
		"description": "GTA SA\nbool result, Ped ped = createCharAsPassenger(Vehicle car, Model pedtype, int model, int passengerSeat)\n",
		"prefix": "createCharAsPassenger",
		"scope": "source.lua"
	},
	"printWithNumberBig": {
		"body": "printWithNumberBig(${1:gxtString},${2:number},${3:time},${4:style})",
		"description": "GTA SA\nbool result = printWithNumberBig(GxtString gxtString, int number, int time, int style)\n",
		"prefix": "printWithNumberBig",
		"scope": "source.lua"
	},
	"printWithNumber": {
		"body": "printWithNumber(${1:gxtString},${2:number},${3:time},${4:flag})",
		"description": "GTA SA\nbool result = printWithNumber(GxtString gxtString, int number, int time, int flag)\n",
		"prefix": "printWithNumber",
		"scope": "source.lua"
	},
	"printWithNumberNow": {
		"body": "printWithNumberNow(${1:gxtString},${2:number},${3:time},${4:flag})",
		"description": "GTA SA\nbool result = printWithNumberNow(GxtString gxtString, int number, int time, int flag)\n",
		"prefix": "printWithNumberNow",
		"scope": "source.lua"
	},
	"switchRoadsOn": {
		"body": "switchRoadsOn(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nbool result = switchRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsOn",
		"scope": "source.lua"
	},
	"switchRoadsOff": {
		"body": "switchRoadsOff(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nswitchRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsOff",
		"scope": "source.lua"
	},
	"getNumberOfPassengers": {
		"body": "getNumberOfPassengers(${1:car})",
		"description": "GTA SA\nbool result, int passengers = getNumberOfPassengers(Vehicle car)\n",
		"prefix": "getNumberOfPassengers",
		"scope": "source.lua"
	},
	"getMaximumNumberOfPassengers": {
		"body": "getMaximumNumberOfPassengers(${1:car})",
		"description": "GTA SA\nint maxPassengers = getMaximumNumberOfPassengers(Vehicle car)\n",
		"prefix": "getMaximumNumberOfPassengers",
		"scope": "source.lua"
	},
	"setCarDensityMultiplier": {
		"body": "setCarDensityMultiplier(${1:multiplier})",
		"description": "GTA SA\nbool result = setCarDensityMultiplier(float multiplier)\n",
		"prefix": "setCarDensityMultiplier",
		"scope": "source.lua"
	},
	"setCarHeavy": {
		"body": "setCarHeavy(${1:car},${2:heavy})",
		"description": "GTA SA\nbool result = setCarHeavy(Vehicle car, bool heavy)\n",
		"prefix": "setCarHeavy",
		"scope": "source.lua"
	},
	"setMaxWantedLevel": {
		"body": "setMaxWantedLevel(${1:level})",
		"description": "GTA SA\nsetMaxWantedLevel(int level)\n",
		"prefix": "setMaxWantedLevel",
		"scope": "source.lua"
	},
	"isCarInAirProper": {
		"body": "isCarInAirProper(${1:car})",
		"description": "GTA SA\nbool result = isCarInAirProper(Vehicle car)\n",
		"prefix": "isCarInAirProper",
		"scope": "source.lua"
	},
	"isCarUpsidedown": {
		"body": "isCarUpsidedown(${1:car})",
		"description": "GTA SA\nbool result = isCarUpsidedown(Vehicle car)\n",
		"prefix": "isCarUpsidedown",
		"scope": "source.lua"
	},
	"getPlayerChar": {
		"body": "getPlayerChar(${1:player})",
		"description": "GTA SA\nbool result, Ped ped = getPlayerChar(Player player)\n",
		"prefix": "getPlayerChar",
		"scope": "source.lua"
	},
	"cancelOverrideRestart": {
		"body": "cancelOverrideRestart()",
		"description": "GTA SA\nbool result = cancelOverrideRestart()\n",
		"prefix": "cancelOverrideRestart",
		"scope": "source.lua"
	},
	"setPoliceIgnorePlayer": {
		"body": "setPoliceIgnorePlayer(${1:player},${2:ignored})",
		"description": "GTA SA\nbool result = setPoliceIgnorePlayer(Player player, bool ignored)\n",
		"prefix": "setPoliceIgnorePlayer",
		"scope": "source.lua"
	},
	"startKillFrenzy": {
		"body": "startKillFrenzy(${1:gxtString},${2:weapon},${3:timeLimit},${4:targets},${5:targetModels1},${6:targetModels2},${7:targetModels3},${8:targetModels4},${9:completedText})",
		"description": "GTA SA\nbool result = startKillFrenzy(GxtString gxtString, int weapon, int timeLimit, int targets, Model targetModels1, Model targetModels2, Model targetModels3, Model targetModels4, bool completedText)\n",
		"prefix": "startKillFrenzy",
		"scope": "source.lua"
	},
	"readKillFrenzyStatus": {
		"body": "readKillFrenzyStatus()",
		"description": "GTA SA\nbool result, int status = readKillFrenzyStatus()\n",
		"prefix": "readKillFrenzyStatus",
		"scope": "source.lua"
	},
	"locateCharAnyMeansCar2d": {
		"body": "locateCharAnyMeansCar2d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeansCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansCar2d",
		"scope": "source.lua"
	},
	"locateCharOnFootCar2d": {
		"body": "locateCharOnFootCar2d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:flag})",
		"description": "GTA SA\nbool result = locateCharOnFootCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool flag)\n",
		"prefix": "locateCharOnFootCar2d",
		"scope": "source.lua"
	},
	"locateCharInCarCar2d": {
		"body": "locateCharInCarCar2d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharInCarCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarCar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansCar3d": {
		"body": "locateCharAnyMeansCar3d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:radiusZ},${6:flag})",
		"description": "GTA SA\nbool result = locateCharAnyMeansCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharAnyMeansCar3d",
		"scope": "source.lua"
	},
	"locateCharOnFootCar3d": {
		"body": "locateCharOnFootCar3d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:radiusZ},${6:flag})",
		"description": "GTA SA\nbool result = locateCharOnFootCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharOnFootCar3d",
		"scope": "source.lua"
	},
	"locateCharInCarCar3d": {
		"body": "locateCharInCarCar3d(${1:ped},${2:car},${3:radiusX},${4:radiusY},${5:radiusZ},${6:flag})",
		"description": "GTA SA\nbool result = locateCharInCarCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharInCarCar3d",
		"scope": "source.lua"
	},
	"lockCarDoors": {
		"body": "lockCarDoors(${1:car},${2:status})",
		"description": "GTA SA\nlockCarDoors(Vehicle car, int status)\n",
		"prefix": "lockCarDoors",
		"scope": "source.lua"
	},
	"explodeCar": {
		"body": "explodeCar(${1:car})",
		"description": "GTA SA\nbool result = explodeCar(Vehicle car)\n",
		"prefix": "explodeCar",
		"scope": "source.lua"
	},
	"addExplosion": {
		"body": "addExplosion(${1:atX},${2:atY},${3:atZ},${4:radius})",
		"description": "GTA SA\nbool result = addExplosion(float atX, float atY, float atZ, int radius)\n",
		"prefix": "addExplosion",
		"scope": "source.lua"
	},
	"isCarUpright": {
		"body": "isCarUpright(${1:car})",
		"description": "GTA SA\nbool result = isCarUpright(Vehicle car)\n",
		"prefix": "isCarUpright",
		"scope": "source.lua"
	},
	"createPickup": {
		"body": "createPickup(${1:modelId},${2:type},${3:atX},${4:atY},${5:atZ})",
		"description": "GTA SA\nbool result, Pickup pickup = createPickup(Model modelId, int type, float atX, float atY, float atZ)\n",
		"prefix": "createPickup",
		"scope": "source.lua"
	},
	"hasPickupBeenCollected": {
		"body": "hasPickupBeenCollected(${1:pickup})",
		"description": "GTA SA\nbool result = hasPickupBeenCollected(Pickup pickup)\n",
		"prefix": "hasPickupBeenCollected",
		"scope": "source.lua"
	},
	"removePickup": {
		"body": "removePickup(${1:pickup})",
		"description": "GTA SA\nbool result = removePickup(Pickup pickup)\n",
		"prefix": "removePickup",
		"scope": "source.lua"
	},
	"setTaxiLights": {
		"body": "setTaxiLights(${1:taxi},${2:light})",
		"description": "GTA SA\nbool result = setTaxiLights(Vehicle taxi, bool light)\n",
		"prefix": "setTaxiLights",
		"scope": "source.lua"
	},
	"printBigQ": {
		"body": "printBigQ(${1:gxtString},${2:time},${3:style})",
		"description": "GTA SA\nbool result = printBigQ(GxtString gxtString, int time, int style)\n",
		"prefix": "printBigQ",
		"scope": "source.lua"
	},
	"setTargetCarForMissionGarage": {
		"body": "setTargetCarForMissionGarage(${1:garage},${2:car})",
		"description": "GTA SA\nbool result = setTargetCarForMissionGarage(GxtString garage, Vehicle car)\n",
		"prefix": "setTargetCarForMissionGarage",
		"scope": "source.lua"
	},
	"applyBrakesToPlayersCar": {
		"body": "applyBrakesToPlayersCar(${1:player},${2:apply})",
		"description": "GTA SA\nbool result = applyBrakesToPlayersCar(Player player, bool apply)\n",
		"prefix": "applyBrakesToPlayersCar",
		"scope": "source.lua"
	},
	"setCharHealth": {
		"body": "setCharHealth(${1:ped},${2:health})",
		"description": "GTA SA\nsetCharHealth(Ped ped, int health)\n",
		"prefix": "setCharHealth",
		"scope": "source.lua"
	},
	"setCarHealth": {
		"body": "setCarHealth(${1:car},${2:health})",
		"description": "GTA SA\nsetCarHealth(Vehicle car, int health)\n",
		"prefix": "setCarHealth",
		"scope": "source.lua"
	},
	"getCharHealth": {
		"body": "getCharHealth(${1:ped})",
		"description": "GTA SA\nint health = getCharHealth(Ped ped)\n",
		"prefix": "getCharHealth",
		"scope": "source.lua"
	},
	"getCarHealth": {
		"body": "getCarHealth(${1:car})",
		"description": "GTA SA\nint health = getCarHealth(Vehicle car)\n",
		"prefix": "getCarHealth",
		"scope": "source.lua"
	},
	"changeCarColour": {
		"body": "changeCarColour(${1:car},${2:primaryColor},${3:secondaryColor})",
		"description": "GTA SA\nbool result = changeCarColour(Vehicle car, int primaryColor, int secondaryColor)\n",
		"prefix": "changeCarColour",
		"scope": "source.lua"
	},
	"switchPedRoadsOn": {
		"body": "switchPedRoadsOn(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nswitchPedRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsOn",
		"scope": "source.lua"
	},
	"switchPedRoadsOff": {
		"body": "switchPedRoadsOff(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nswitchPedRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsOff",
		"scope": "source.lua"
	},
	"setGangWeapons": {
		"body": "setGangWeapons(${1:gang},${2:weapons1},${3:weapons2},${4:weapons3})",
		"description": "GTA SA\nsetGangWeapons(int gang, int weapons1, int weapons2, int weapons3)\n",
		"prefix": "setGangWeapons",
		"scope": "source.lua"
	},
	"isCharTouchingObjectOnFoot": {
		"body": "isCharTouchingObjectOnFoot(${1:ped},${2:object})",
		"description": "GTA SA\nbool result = isCharTouchingObjectOnFoot(Ped ped, Object object)\n",
		"prefix": "isCharTouchingObjectOnFoot",
		"scope": "source.lua"
	},
	"loadSpecialCharacter": {
		"body": "loadSpecialCharacter(${1:gxtString},${2:id})",
		"description": "GTA SA\nloadSpecialCharacter(GxtString gxtString, int id)\n",
		"prefix": "loadSpecialCharacter",
		"scope": "source.lua"
	},
	"hasSpecialCharacterLoaded": {
		"body": "hasSpecialCharacterLoaded(${1:id})",
		"description": "GTA SA\nbool result = hasSpecialCharacterLoaded(int id)\n",
		"prefix": "hasSpecialCharacterLoaded",
		"scope": "source.lua"
	},
	"isPlayerInRemoteMode": {
		"body": "isPlayerInRemoteMode(${1:player})",
		"description": "GTA SA\nbool result = isPlayerInRemoteMode(Player player)\n",
		"prefix": "isPlayerInRemoteMode",
		"scope": "source.lua"
	},
	"setCutsceneOffset": {
		"body": "setCutsceneOffset(${1:posX},${2:posY},${3:posZ})",
		"description": "GTA SA\nsetCutsceneOffset(float posX, float posY, float posZ)\n",
		"prefix": "setCutsceneOffset",
		"scope": "source.lua"
	},
	"setAnimGroupForChar": {
		"body": "setAnimGroupForChar(${1:ped},${2:style})",
		"description": "GTA SA\nsetAnimGroupForChar(Ped ped, string style)\n",
		"prefix": "setAnimGroupForChar",
		"scope": "source.lua"
	},
	"requestModel": {
		"body": "requestModel(${1:modelId})",
		"description": "GTA SA\nrequestModel(Model modelId)\n",
		"prefix": "requestModel",
		"scope": "source.lua"
	},
	"hasModelLoaded": {
		"body": "hasModelLoaded(${1:modelId})",
		"description": "GTA SA\nbool result = hasModelLoaded(Model modelId)\n",
		"prefix": "hasModelLoaded",
		"scope": "source.lua"
	},
	"markModelAsNoLongerNeeded": {
		"body": "markModelAsNoLongerNeeded(${1:modelId})",
		"description": "GTA SA\nmarkModelAsNoLongerNeeded(Model modelId)\n",
		"prefix": "markModelAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"drawCorona": {
		"body": "drawCorona(${1:atX},${2:atY},${3:atZ},${4:radius},${5:type},${6:lensflares},${7:r},${8:g},${9:b})",
		"description": "GTA SA\ndrawCorona(float atX, float atY, float atZ, float radius, int type, bool lensflares, int r, int g, int b)\n",
		"prefix": "drawCorona",
		"scope": "source.lua"
	},
	"storeClock": {
		"body": "storeClock()",
		"description": "GTA SA\nstoreClock()\n",
		"prefix": "storeClock",
		"scope": "source.lua"
	},
	"restoreClock": {
		"body": "restoreClock()",
		"description": "GTA SA\nrestoreClock()\n",
		"prefix": "restoreClock",
		"scope": "source.lua"
	},
	"isPlayerPlaying": {
		"body": "isPlayerPlaying(${1:player})",
		"description": "GTA SA\nbool result = isPlayerPlaying(Player player)\n",
		"prefix": "isPlayerPlaying",
		"scope": "source.lua"
	},
	"getControllerMode": {
		"body": "getControllerMode()",
		"description": "GTA SA\nint mode = getControllerMode()\n",
		"prefix": "getControllerMode",
		"scope": "source.lua"
	},
	"setCanResprayCar": {
		"body": "setCanResprayCar(${1:car},${2:sprayable})",
		"description": "GTA SA\nsetCanResprayCar(Vehicle car, bool sprayable)\n",
		"prefix": "setCanResprayCar",
		"scope": "source.lua"
	},
	"unloadSpecialCharacter": {
		"body": "unloadSpecialCharacter(${1:id})",
		"description": "GTA SA\nunloadSpecialCharacter(int id)\n",
		"prefix": "unloadSpecialCharacter",
		"scope": "source.lua"
	},
	"resetNumOfModelsKilledByPlayer": {
		"body": "resetNumOfModelsKilledByPlayer(${1:player})",
		"description": "GTA SA\nresetNumOfModelsKilledByPlayer(Player player)\n",
		"prefix": "resetNumOfModelsKilledByPlayer",
		"scope": "source.lua"
	},
	"getNumOfModelsKilledByPlayer": {
		"body": "getNumOfModelsKilledByPlayer(${1:player},${2:modelId})",
		"description": "GTA SA\nint quantity = getNumOfModelsKilledByPlayer(Player player, Model modelId)\n",
		"prefix": "getNumOfModelsKilledByPlayer",
		"scope": "source.lua"
	},
	"activateGarage": {
		"body": "activateGarage(${1:garage})",
		"description": "GTA SA\nactivateGarage(GxtString garage)\n",
		"prefix": "activateGarage",
		"scope": "source.lua"
	},
	"createObjectNoOffset": {
		"body": "createObjectNoOffset(${1:modelId},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nObject object = createObjectNoOffset(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createObjectNoOffset",
		"scope": "source.lua"
	},
	"isCharStopped": {
		"body": "isCharStopped(${1:ped})",
		"description": "GTA SA\nbool result = isCharStopped(Ped ped)\n",
		"prefix": "isCharStopped",
		"scope": "source.lua"
	},
	"switchWidescreen": {
		"body": "switchWidescreen(${1:enable})",
		"description": "GTA SA\nswitchWidescreen(bool enable)\n",
		"prefix": "switchWidescreen",
		"scope": "source.lua"
	},
	"addSpriteBlipForContactPoint": {
		"body": "addSpriteBlipForContactPoint(${1:atX},${2:atY},${3:atZ},${4:icon})",
		"description": "GTA SA\nMarker marker = addSpriteBlipForContactPoint(float atX, float atY, float atZ, int icon)\n",
		"prefix": "addSpriteBlipForContactPoint",
		"scope": "source.lua"
	},
	"addSpriteBlipForCoord": {
		"body": "addSpriteBlipForCoord(${1:atX},${2:atY},${3:atZ},${4:type})",
		"description": "GTA SA\nMarker marker = addSpriteBlipForCoord(float atX, float atY, float atZ, int type)\n",
		"prefix": "addSpriteBlipForCoord",
		"scope": "source.lua"
	},
	"setCharOnlyDamagedByPlayer": {
		"body": "setCharOnlyDamagedByPlayer(${1:ped},${2:enabled})",
		"description": "GTA SA\nsetCharOnlyDamagedByPlayer(Ped ped, bool enabled)\n",
		"prefix": "setCharOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"setCarOnlyDamagedByPlayer": {
		"body": "setCarOnlyDamagedByPlayer(${1:car},${2:enabled})",
		"description": "GTA SA\nsetCarOnlyDamagedByPlayer(Vehicle car, bool enabled)\n",
		"prefix": "setCarOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"setCharProofs": {
		"body": "setCharProofs(${1:ped},${2:BP},${3:FP},${4:EP},${5:CP},${6:MP})",
		"description": "GTA SA\nsetCharProofs(Ped ped, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setCharProofs",
		"scope": "source.lua"
	},
	"setCarProofs": {
		"body": "setCarProofs(${1:car},${2:BP},${3:FP},${4:EP},${5:CP},${6:MP})",
		"description": "GTA SA\nsetCarProofs(Vehicle car, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setCarProofs",
		"scope": "source.lua"
	},
	"deactivateGarage": {
		"body": "deactivateGarage(${1:garage})",
		"description": "GTA SA\ndeactivateGarage(GxtString garage)\n",
		"prefix": "deactivateGarage",
		"scope": "source.lua"
	},
	"isCarInWater": {
		"body": "isCarInWater(${1:car})",
		"description": "GTA SA\nbool result = isCarInWater(Vehicle car)\n",
		"prefix": "isCarInWater",
		"scope": "source.lua"
	},
	"getClosestCharNode": {
		"body": "getClosestCharNode(${1:closestToX},${2:closestToY},${3:closestToZ})",
		"description": "GTA SA\nfloat nodeX, float nodeY, float nodeZ = getClosestCharNode(float closestToX, float closestToY, float closestToZ)\n",
		"prefix": "getClosestCharNode",
		"scope": "source.lua"
	},
	"getClosestCarNode": {
		"body": "getClosestCarNode(${1:closestToX},${2:closestToY},${3:closestToZ})",
		"description": "GTA SA\nfloat nodeX, float nodeY, float nodeZ = getClosestCarNode(float closestToX, float closestToY, float closestToZ)\n",
		"prefix": "getClosestCarNode",
		"scope": "source.lua"
	},
	"carGotoCoordinatesAccurate": {
		"body": "carGotoCoordinatesAccurate(${1:car},${2:toX},${3:toY},${4:toZ})",
		"description": "GTA SA\ncarGotoCoordinatesAccurate(Vehicle car, float toX, float toY, float toZ)\n",
		"prefix": "carGotoCoordinatesAccurate",
		"scope": "source.lua"
	},
	"isCarOnScreen": {
		"body": "isCarOnScreen(${1:car})",
		"description": "GTA SA\nbool result = isCarOnScreen(Vehicle car)\n",
		"prefix": "isCarOnScreen",
		"scope": "source.lua"
	},
	"isCharOnScreen": {
		"body": "isCharOnScreen(${1:ped})",
		"description": "GTA SA\nbool result = isCharOnScreen(Ped ped)\n",
		"prefix": "isCharOnScreen",
		"scope": "source.lua"
	},
	"isObjectOnScreen": {
		"body": "isObjectOnScreen(${1:object})",
		"description": "GTA SA\nbool result = isObjectOnScreen(Object object)\n",
		"prefix": "isObjectOnScreen",
		"scope": "source.lua"
	},
	"getGroundZFor3dCoord": {
		"body": "getGroundZFor3dCoord(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nfloat z = getGroundZFor3dCoord(float atX, float atY, float atZ)\n",
		"prefix": "getGroundZFor3dCoord",
		"scope": "source.lua"
	},
	"startScriptFire": {
		"body": "startScriptFire(${1:atX},${2:atY},${3:atZ},${4:propagation},${5:size})",
		"description": "GTA SA\nint fire = startScriptFire(float atX, float atY, float atZ, int propagation, int size)\n",
		"prefix": "startScriptFire",
		"scope": "source.lua"
	},
	"isScriptFireExtinguished": {
		"body": "isScriptFireExtinguished(${1:fire})",
		"description": "GTA SA\nbool result = isScriptFireExtinguished(int fire)\n",
		"prefix": "isScriptFireExtinguished",
		"scope": "source.lua"
	},
	"removeScriptFire": {
		"body": "removeScriptFire(${1:fire})",
		"description": "GTA SA\nremoveScriptFire(int fire)\n",
		"prefix": "removeScriptFire",
		"scope": "source.lua"
	},
	"boatGotoCoords": {
		"body": "boatGotoCoords(${1:boat},${2:toX},${3:toY},${4:toZ})",
		"description": "GTA SA\nboatGotoCoords(Vehicle boat, float toX, float toY, float toZ)\n",
		"prefix": "boatGotoCoords",
		"scope": "source.lua"
	},
	"boatStop": {
		"body": "boatStop(${1:car})",
		"description": "GTA SA\nboatStop(Vehicle car)\n",
		"prefix": "boatStop",
		"scope": "source.lua"
	},
	"isCharShootingInArea": {
		"body": "isCharShootingInArea(${1:ped},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:weapon})",
		"description": "GTA SA\nbool result = isCharShootingInArea(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, int weapon)\n",
		"prefix": "isCharShootingInArea",
		"scope": "source.lua"
	},
	"isCurrentCharWeapon": {
		"body": "isCurrentCharWeapon(${1:ped},${2:weapon})",
		"description": "GTA SA\nbool result = isCurrentCharWeapon(Ped ped, int weapon)\n",
		"prefix": "isCurrentCharWeapon",
		"scope": "source.lua"
	},
	"setBoatCruiseSpeed": {
		"body": "setBoatCruiseSpeed(${1:boat},${2:speed})",
		"description": "GTA SA\nsetBoatCruiseSpeed(Vehicle boat, float speed)\n",
		"prefix": "setBoatCruiseSpeed",
		"scope": "source.lua"
	},
	"getRandomCharInZone": {
		"body": "getRandomCharInZone(${1:zone},${2:pedtype},${3:gang},${4:criminal_prostitute})",
		"description": "GTA SA\nPed ped = getRandomCharInZone(GxtString zone, bool pedtype, bool gang, bool criminal_prostitute)\n",
		"prefix": "getRandomCharInZone",
		"scope": "source.lua"
	},
	"isCharShooting": {
		"body": "isCharShooting(${1:ped})",
		"description": "GTA SA\nbool result = isCharShooting(Ped ped)\n",
		"prefix": "isCharShooting",
		"scope": "source.lua"
	},
	"createMoneyPickup": {
		"body": "createMoneyPickup(${1:atX},${2:atY},${3:atZ},${4:cash},${5:permanenceFlag})",
		"description": "GTA SA\nPickup pickup = createMoneyPickup(float atX, float atY, float atZ, int cash, bool permanenceFlag)\n",
		"prefix": "createMoneyPickup",
		"scope": "source.lua"
	},
	"setCharAccuracy": {
		"body": "setCharAccuracy(${1:ped},${2:accuracy})",
		"description": "GTA SA\nsetCharAccuracy(Ped ped, int accuracy)\n",
		"prefix": "setCharAccuracy",
		"scope": "source.lua"
	},
	"getCarSpeed": {
		"body": "getCarSpeed(${1:car})",
		"description": "GTA SA\nfloat speed = getCarSpeed(Vehicle car)\n",
		"prefix": "getCarSpeed",
		"scope": "source.lua"
	},
	"loadCutscene": {
		"body": "loadCutscene(${1:cutscene})",
		"description": "GTA SA\nloadCutscene(GxtString cutscene)\n",
		"prefix": "loadCutscene",
		"scope": "source.lua"
	},
	"createCutsceneObject": {
		"body": "createCutsceneObject(${1:modelId})",
		"description": "GTA SA\nObject object = createCutsceneObject(Model modelId)\n",
		"prefix": "createCutsceneObject",
		"scope": "source.lua"
	},
	"setCutsceneAnim": {
		"body": "setCutsceneAnim(${1:cutscene},${2:anim})",
		"description": "GTA SA\nsetCutsceneAnim(int cutscene, GxtString anim)\n",
		"prefix": "setCutsceneAnim",
		"scope": "source.lua"
	},
	"startCutscene": {
		"body": "startCutscene()",
		"description": "GTA SA\nstartCutscene()\n",
		"prefix": "startCutscene",
		"scope": "source.lua"
	},
	"getCutsceneTime": {
		"body": "getCutsceneTime()",
		"description": "GTA SA\nint time = getCutsceneTime()\n",
		"prefix": "getCutsceneTime",
		"scope": "source.lua"
	},
	"hasCutsceneFinished": {
		"body": "hasCutsceneFinished()",
		"description": "GTA SA\nbool result = hasCutsceneFinished()\n",
		"prefix": "hasCutsceneFinished",
		"scope": "source.lua"
	},
	"clearCutscene": {
		"body": "clearCutscene()",
		"description": "GTA SA\nclearCutscene()\n",
		"prefix": "clearCutscene",
		"scope": "source.lua"
	},
	"restoreCameraJumpcut": {
		"body": "restoreCameraJumpcut()",
		"description": "GTA SA\nrestoreCameraJumpcut()\n",
		"prefix": "restoreCameraJumpcut",
		"scope": "source.lua"
	},
	"setCollectable1Total": {
		"body": "setCollectable1Total(${1:total})",
		"description": "GTA SA\nsetCollectable1Total(int total)\n",
		"prefix": "setCollectable1Total",
		"scope": "source.lua"
	},
	"isProjectileInArea": {
		"body": "isProjectileInArea(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nbool result = isProjectileInArea(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isProjectileInArea",
		"scope": "source.lua"
	},
	"isCharModel": {
		"body": "isCharModel(${1:ped},${2:modelId})",
		"description": "GTA SA\nbool result = isCharModel(Ped ped, Model modelId)\n",
		"prefix": "isCharModel",
		"scope": "source.lua"
	},
	"loadSpecialModel": {
		"body": "loadSpecialModel(${1:modelId},${2:gxtString})",
		"description": "GTA SA\nloadSpecialModel(Model modelId, GxtString gxtString)\n",
		"prefix": "loadSpecialModel",
		"scope": "source.lua"
	},
	"getCarForwardX": {
		"body": "getCarForwardX(${1:car})",
		"description": "GTA SA\nfloat forwardX = getCarForwardX(Vehicle car)\n",
		"prefix": "getCarForwardX",
		"scope": "source.lua"
	},
	"getCarForwardY": {
		"body": "getCarForwardY(${1:car})",
		"description": "GTA SA\nfloat forwardY = getCarForwardY(Vehicle car)\n",
		"prefix": "getCarForwardY",
		"scope": "source.lua"
	},
	"changeGarageType": {
		"body": "changeGarageType(${1:garage},${2:type})",
		"description": "GTA SA\nchangeGarageType(GxtString garage, int type)\n",
		"prefix": "changeGarageType",
		"scope": "source.lua"
	},
	"printWith2NumbersNow": {
		"body": "printWith2NumbersNow(${1:gxtString},${2:numbers1},${3:numbers2},${4:time},${5:flag})",
		"description": "GTA SA\nprintWith2NumbersNow(GxtString gxtString, int numbers1, int numbers2, int time, int flag)\n",
		"prefix": "printWith2NumbersNow",
		"scope": "source.lua"
	},
	"printWith3Numbers": {
		"body": "printWith3Numbers(${1:gxtString},${2:numbers1},${3:numbers2},${4:numbers3},${5:time},${6:flag})",
		"description": "GTA SA\nprintWith3Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int time, int flag)\n",
		"prefix": "printWith3Numbers",
		"scope": "source.lua"
	},
	"printWith4Numbers": {
		"body": "printWith4Numbers(${1:gxtString},${2:numbers1},${3:numbers2},${4:numbers3},${5:numbers4},${6:time},${7:flag})",
		"description": "GTA SA\nprintWith4Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)\n",
		"prefix": "printWith4Numbers",
		"scope": "source.lua"
	},
	"printWith4NumbersNow": {
		"body": "printWith4NumbersNow(${1:gxtString},${2:numbers1},${3:numbers2},${4:numbers3},${5:numbers4},${6:time},${7:flag})",
		"description": "GTA SA\nprintWith4NumbersNow(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)\n",
		"prefix": "printWith4NumbersNow",
		"scope": "source.lua"
	},
	"printWith6Numbers": {
		"body": "printWith6Numbers(${1:gxtString},${2:numbers1},${3:numbers2},${4:numbers3},${5:numbers4},${6:numbers5},${7:numbers6},${8:time},${9:flag})",
		"description": "GTA SA\nprintWith6Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int numbers5, int numbers6, int time, int flag)\n",
		"prefix": "printWith6Numbers",
		"scope": "source.lua"
	},
	"playerMadeProgress": {
		"body": "playerMadeProgress(${1:progress})",
		"description": "GTA SA\nplayerMadeProgress(int progress)\n",
		"prefix": "playerMadeProgress",
		"scope": "source.lua"
	},
	"setProgressTotal": {
		"body": "setProgressTotal(${1:maxProgress})",
		"description": "GTA SA\nsetProgressTotal(int maxProgress)\n",
		"prefix": "setProgressTotal",
		"scope": "source.lua"
	},
	"registerMissionGiven": {
		"body": "registerMissionGiven()",
		"description": "GTA SA\nregisterMissionGiven()\n",
		"prefix": "registerMissionGiven",
		"scope": "source.lua"
	},
	"registerMissionPassed": {
		"body": "registerMissionPassed(${1:mission})",
		"description": "GTA SA\nregisterMissionPassed(GxtString mission)\n",
		"prefix": "registerMissionPassed",
		"scope": "source.lua"
	},
	"removeAllScriptFires": {
		"body": "removeAllScriptFires()",
		"description": "GTA SA\nremoveAllScriptFires()\n",
		"prefix": "removeAllScriptFires",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByWeapon": {
		"body": "hasCharBeenDamagedByWeapon(${1:ped},${2:weapon})",
		"description": "GTA SA\nbool result = hasCharBeenDamagedByWeapon(Ped ped, int weapon)\n",
		"prefix": "hasCharBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByWeapon": {
		"body": "hasCarBeenDamagedByWeapon(${1:car},${2:weapon})",
		"description": "GTA SA\nbool result = hasCarBeenDamagedByWeapon(Vehicle car, int weapon)\n",
		"prefix": "hasCarBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"explodeCharHead": {
		"body": "explodeCharHead(${1:ped})",
		"description": "GTA SA\nexplodeCharHead(Ped ped)\n",
		"prefix": "explodeCharHead",
		"scope": "source.lua"
	},
	"anchorBoat": {
		"body": "anchorBoat(${1:boat},${2:anchor})",
		"description": "GTA SA\nanchorBoat(Vehicle boat, bool anchor)\n",
		"prefix": "anchorBoat",
		"scope": "source.lua"
	},
	"startCarFire": {
		"body": "startCarFire(${1:car})",
		"description": "GTA SA\nint fire = startCarFire(Vehicle car)\n",
		"prefix": "startCarFire",
		"scope": "source.lua"
	},
	"startCharFire": {
		"body": "startCharFire(${1:ped})",
		"description": "GTA SA\nint fire = startCharFire(Ped ped)\n",
		"prefix": "startCharFire",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInArea": {
		"body": "getRandomCarOfTypeInArea(${1:cornerAX},${2:cornerAY},${3:cornerBX},${4:cornerBY},${5:modelId})",
		"description": "GTA SA\nVehicle car = getRandomCarOfTypeInArea(float cornerAX, float cornerAY, float cornerBX, float cornerBY, Model modelId)\n",
		"prefix": "getRandomCarOfTypeInArea",
		"scope": "source.lua"
	},
	"hasResprayHappened": {
		"body": "hasResprayHappened(${1:car})",
		"description": "GTA SA\nbool result = hasResprayHappened(Vehicle car)\n",
		"prefix": "hasResprayHappened",
		"scope": "source.lua"
	},
	"setCameraZoom": {
		"body": "setCameraZoom(${1:mode})",
		"description": "GTA SA\nsetCameraZoom(int mode)\n",
		"prefix": "setCameraZoom",
		"scope": "source.lua"
	},
	"createPickupWithAmmo": {
		"body": "createPickupWithAmmo(${1:modelId},${2:type},${3:ammo},${4:atX},${5:atY},${6:atZ})",
		"description": "GTA SA\nPickup pickup = createPickupWithAmmo(Model modelId, int type, int ammo, float atX, float atY, float atZ)\n",
		"prefix": "createPickupWithAmmo",
		"scope": "source.lua"
	},
	"setCarRamCar": {
		"body": "setCarRamCar(${1:car},${2:car})",
		"description": "GTA SA\nsetCarRamCar(Vehicle car, Vehicle car)\n",
		"prefix": "setCarRamCar",
		"scope": "source.lua"
	},
	"setPlayerNeverGetsTired": {
		"body": "setPlayerNeverGetsTired(${1:player},${2:infiniteRun})",
		"description": "GTA SA\nsetPlayerNeverGetsTired(Player player, bool infiniteRun)\n",
		"prefix": "setPlayerNeverGetsTired",
		"scope": "source.lua"
	},
	"setPlayerFastReload": {
		"body": "setPlayerFastReload(${1:player},${2:fastReload})",
		"description": "GTA SA\nsetPlayerFastReload(Player player, bool fastReload)\n",
		"prefix": "setPlayerFastReload",
		"scope": "source.lua"
	},
	"setCharBleeding": {
		"body": "setCharBleeding(${1:ped},${2:bleeding})",
		"description": "GTA SA\nsetCharBleeding(Ped ped, bool bleeding)\n",
		"prefix": "setCharBleeding",
		"scope": "source.lua"
	},
	"setFreeResprays": {
		"body": "setFreeResprays(${1:enable})",
		"description": "GTA SA\nsetFreeResprays(bool enable)\n",
		"prefix": "setFreeResprays",
		"scope": "source.lua"
	},
	"setCharVisible": {
		"body": "setCharVisible(${1:ped},${2:visible})",
		"description": "GTA SA\nsetCharVisible(Ped ped, bool visible)\n",
		"prefix": "setCharVisible",
		"scope": "source.lua"
	},
	"setCarVisible": {
		"body": "setCarVisible(${1:car},${2:visible})",
		"description": "GTA SA\nsetCarVisible(Vehicle car, bool visible)\n",
		"prefix": "setCarVisible",
		"scope": "source.lua"
	},
	"isAreaOccupied": {
		"body": "isAreaOccupied(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ},${7:solid},${8:car},${9:actor},${10:object},${11:particle})",
		"description": "GTA SA\nbool result = isAreaOccupied(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool solid, bool car, bool actor, bool object, bool particle)\n",
		"prefix": "isAreaOccupied",
		"scope": "source.lua"
	},
	"displayText": {
		"body": "displayText(${1:posX},${2:posY},${3:gxtString})",
		"description": "GTA SA\ndisplayText(float posX, float posY, GxtString gxtString)\n",
		"prefix": "displayText",
		"scope": "source.lua"
	},
	"setTextScale": {
		"body": "setTextScale(${1:sizeX},${2:sizeY})",
		"description": "GTA SA\nsetTextScale(float sizeX, float sizeY)\n",
		"prefix": "setTextScale",
		"scope": "source.lua"
	},
	"setTextColour": {
		"body": "setTextColour(${1:r},${2:g},${3:b},${4:a})",
		"description": "GTA SA\nsetTextColour(int r, int g, int b, int a)\n",
		"prefix": "setTextColour",
		"scope": "source.lua"
	},
	"setTextJustify": {
		"body": "setTextJustify(${1:alignJustify})",
		"description": "GTA SA\nsetTextJustify(bool alignJustify)\n",
		"prefix": "setTextJustify",
		"scope": "source.lua"
	},
	"setTextCentre": {
		"body": "setTextCentre(${1:centered})",
		"description": "GTA SA\nsetTextCentre(bool centered)\n",
		"prefix": "setTextCentre",
		"scope": "source.lua"
	},
	"setTextWrapx": {
		"body": "setTextWrapx(${1:linewidth})",
		"description": "GTA SA\nsetTextWrapx(float linewidth)\n",
		"prefix": "setTextWrapx",
		"scope": "source.lua"
	},
	"setTextCentreSize": {
		"body": "setTextCentreSize(${1:linewidth})",
		"description": "GTA SA\nsetTextCentreSize(float linewidth)\n",
		"prefix": "setTextCentreSize",
		"scope": "source.lua"
	},
	"setTextBackground": {
		"body": "setTextBackground(${1:background})",
		"description": "GTA SA\nsetTextBackground(bool background)\n",
		"prefix": "setTextBackground",
		"scope": "source.lua"
	},
	"setTextProportional": {
		"body": "setTextProportional(${1:proportional})",
		"description": "GTA SA\nsetTextProportional(bool proportional)\n",
		"prefix": "setTextProportional",
		"scope": "source.lua"
	},
	"setTextFont": {
		"body": "setTextFont(${1:font})",
		"description": "GTA SA\nsetTextFont(int font)\n",
		"prefix": "setTextFont",
		"scope": "source.lua"
	},
	"rotateObject": {
		"body": "rotateObject(${1:object},${2:fromAngle},${3:toAngle},${4:flag})",
		"description": "GTA SA\nbool result = rotateObject(Object object, float fromAngle, float toAngle, bool flag)\n",
		"prefix": "rotateObject",
		"scope": "source.lua"
	},
	"slideObject": {
		"body": "slideObject(${1:object},${2:toX},${3:toY},${4:toZ},${5:speedX},${6:speedY},${7:speedZ},${8:collisionCheck})",
		"description": "GTA SA\nbool result = slideObject(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collisionCheck)\n",
		"prefix": "slideObject",
		"scope": "source.lua"
	},
	"removeCharElegantly": {
		"body": "removeCharElegantly(${1:ped})",
		"description": "GTA SA\nremoveCharElegantly(Ped ped)\n",
		"prefix": "removeCharElegantly",
		"scope": "source.lua"
	},
	"setCharStayInSamePlace": {
		"body": "setCharStayInSamePlace(${1:ped},${2:enabled})",
		"description": "GTA SA\nsetCharStayInSamePlace(Ped ped, bool enabled)\n",
		"prefix": "setCharStayInSamePlace",
		"scope": "source.lua"
	},
	"isExplosionInArea": {
		"body": "isExplosionInArea(${1:explosionType},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ})",
		"description": "GTA SA\nbool result = isExplosionInArea(int explosionType, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isExplosionInArea",
		"scope": "source.lua"
	},
	"placeObjectRelativeToCar": {
		"body": "placeObjectRelativeToCar(${1:object},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ})",
		"description": "GTA SA\nplaceObjectRelativeToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "placeObjectRelativeToCar",
		"scope": "source.lua"
	},
	"makeObjectTargettable": {
		"body": "makeObjectTargettable(${1:object},${2:targetable})",
		"description": "GTA SA\nmakeObjectTargettable(Object object, bool targetable)\n",
		"prefix": "makeObjectTargettable",
		"scope": "source.lua"
	},
	"addArmourToChar": {
		"body": "addArmourToChar(${1:ped},${2:points})",
		"description": "GTA SA\naddArmourToChar(Ped ped, int points)\n",
		"prefix": "addArmourToChar",
		"scope": "source.lua"
	},
	"openGarage": {
		"body": "openGarage(${1:garage})",
		"description": "GTA SA\nopenGarage(GxtString garage)\n",
		"prefix": "openGarage",
		"scope": "source.lua"
	},
	"closeGarage": {
		"body": "closeGarage(${1:garage})",
		"description": "GTA SA\ncloseGarage(GxtString garage)\n",
		"prefix": "closeGarage",
		"scope": "source.lua"
	},
	"warpCharFromCarToCoord": {
		"body": "warpCharFromCarToCoord(${1:ped},${2:placeAtX},${3:placeAtY},${4:placeAtZ})",
		"description": "GTA SA\nwarpCharFromCarToCoord(Ped ped, float placeAtX, float placeAtY, float placeAtZ)\n",
		"prefix": "warpCharFromCarToCoord",
		"scope": "source.lua"
	},
	"setVisibilityOfClosestObjectOfType": {
		"body": "setVisibilityOfClosestObjectOfType(${1:atX},${2:atY},${3:atZ},${4:radius},${5:modelId},${6:visibility})",
		"description": "GTA SA\nsetVisibilityOfClosestObjectOfType(float atX, float atY, float atZ, float radius, Model modelId, bool visibility)\n",
		"prefix": "setVisibilityOfClosestObjectOfType",
		"scope": "source.lua"
	},
	"hasCharSpottedChar": {
		"body": "hasCharSpottedChar(${1:ped},${2:ped})",
		"description": "GTA SA\nbool result = hasCharSpottedChar(Ped ped, Ped ped)\n",
		"prefix": "hasCharSpottedChar",
		"scope": "source.lua"
	},
	"hasObjectBeenDamaged": {
		"body": "hasObjectBeenDamaged(${1:object})",
		"description": "GTA SA\nbool result = hasObjectBeenDamaged(Object object)\n",
		"prefix": "hasObjectBeenDamaged",
		"scope": "source.lua"
	},
	"warpCharIntoCar": {
		"body": "warpCharIntoCar(${1:ped},${2:car})",
		"description": "GTA SA\nwarpCharIntoCar(Ped ped, Vehicle car)\n",
		"prefix": "warpCharIntoCar",
		"scope": "source.lua"
	},
	"printWith2NumbersBig": {
		"body": "printWith2NumbersBig(${1:gxtString},${2:numbers1},${3:numbers2},${4:time},${5:style})",
		"description": "GTA SA\nprintWith2NumbersBig(GxtString gxtString, int numbers1, int numbers2, int time, int style)\n",
		"prefix": "printWith2NumbersBig",
		"scope": "source.lua"
	},
	"setCameraBehindPlayer": {
		"body": "setCameraBehindPlayer()",
		"description": "GTA SA\nsetCameraBehindPlayer()\n",
		"prefix": "setCameraBehindPlayer",
		"scope": "source.lua"
	},
	"createRandomChar": {
		"body": "createRandomChar(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nPed ped = createRandomChar(float atX, float atY, float atZ)\n",
		"prefix": "createRandomChar",
		"scope": "source.lua"
	},
	"isSniperBulletInArea": {
		"body": "isSniperBulletInArea(${1:float1},${2:float2},${3:float3},${4:float4},${5:float5},${6:float6})",
		"description": "GTA SA\nbool result = isSniperBulletInArea(float float1, float float2, float float3, float float4, float float5, float float6)\n",
		"prefix": "isSniperBulletInArea",
		"scope": "source.lua"
	},
	"setObjectVelocity": {
		"body": "setObjectVelocity(${1:object},${2:velocityInDirectionX},${3:velocityInDirectionY},${4:velocityInDirectionZ})",
		"description": "GTA SA\nsetObjectVelocity(Object object, float velocityInDirectionX, float velocityInDirectionY, float velocityInDirectionZ)\n",
		"prefix": "setObjectVelocity",
		"scope": "source.lua"
	},
	"setObjectCollision": {
		"body": "setObjectCollision(${1:object},${2:collision})",
		"description": "GTA SA\nsetObjectCollision(Object object, bool collision)\n",
		"prefix": "setObjectCollision",
		"scope": "source.lua"
	},
	"printStringInStringNow": {
		"body": "printStringInStringNow(${1:gxtString},${2:string},${3:time1},${4:time2})",
		"description": "GTA SA\nprintStringInStringNow(GxtString gxtString, GxtString string, int time1, int time2)\n",
		"prefix": "printStringInStringNow",
		"scope": "source.lua"
	},
	"isPointObscuredByAMissionEntity": {
		"body": "isPointObscuredByAMissionEntity(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nbool result = isPointObscuredByAMissionEntity(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isPointObscuredByAMissionEntity",
		"scope": "source.lua"
	},
	"loadAllModelsNow": {
		"body": "loadAllModelsNow()",
		"description": "GTA SA\nloadAllModelsNow()\n",
		"prefix": "loadAllModelsNow",
		"scope": "source.lua"
	},
	"addToObjectVelocity": {
		"body": "addToObjectVelocity(${1:object},${2:velocityX},${3:velocityY},${4:velocityZ})",
		"description": "GTA SA\naddToObjectVelocity(Object object, float velocityX, float velocityY, float velocityZ)\n",
		"prefix": "addToObjectVelocity",
		"scope": "source.lua"
	},
	"drawSprite": {
		"body": "drawSprite(${1:texture},${2:positionX},${3:positionY},${4:width},${5:height},${6:r},${7:g},${8:b},${9:a})",
		"description": "GTA SA\ndrawSprite(int texture, float positionX, float positionY, float width, float height, int r, int g, int b, int a)\n",
		"prefix": "drawSprite",
		"scope": "source.lua"
	},
	"drawRect": {
		"body": "drawRect(${1:positionX},${2:positionY},${3:width},${4:height},${5:r},${6:g},${7:b},${8:a})",
		"description": "GTA SA\ndrawRect(float positionX, float positionY, float width, float height, int r, int g, int b, int a)\n",
		"prefix": "drawRect",
		"scope": "source.lua"
	},
	"loadSprite": {
		"body": "loadSprite(${1:name})",
		"description": "GTA SA\nint id = loadSprite(string name)\n",
		"prefix": "loadSprite",
		"scope": "source.lua"
	},
	"loadTextureDictionary": {
		"body": "loadTextureDictionary(${1:txd})",
		"description": "GTA SA\nbool result = loadTextureDictionary(zstring txd)\n",
		"prefix": "loadTextureDictionary",
		"scope": "source.lua"
	},
	"removeTextureDictionary": {
		"body": "removeTextureDictionary()",
		"description": "GTA SA\nremoveTextureDictionary()\n",
		"prefix": "removeTextureDictionary",
		"scope": "source.lua"
	},
	"setObjectDynamic": {
		"body": "setObjectDynamic(${1:object},${2:moveable})",
		"description": "GTA SA\nsetObjectDynamic(Object object, bool moveable)\n",
		"prefix": "setObjectDynamic",
		"scope": "source.lua"
	},
	"setCharAnimSpeed": {
		"body": "setCharAnimSpeed(${1:ped},${2:animation},${3:speed})",
		"description": "GTA SA\nsetCharAnimSpeed(Ped ped, string animation, float speed)\n",
		"prefix": "setCharAnimSpeed",
		"scope": "source.lua"
	},
	"playMissionPassedTune": {
		"body": "playMissionPassedTune(${1:music})",
		"description": "GTA SA\nplayMissionPassedTune(int music)\n",
		"prefix": "playMissionPassedTune",
		"scope": "source.lua"
	},
	"clearArea": {
		"body": "clearArea(${1:atX},${2:atY},${3:atZ},${4:radius},${5:area})",
		"description": "GTA SA\nclearArea(float atX, float atY, float atZ, float radius, bool area)\n",
		"prefix": "clearArea",
		"scope": "source.lua"
	},
	"freezeOnscreenTimer": {
		"body": "freezeOnscreenTimer(${1:timer})",
		"description": "GTA SA\nfreezeOnscreenTimer(bool timer)\n",
		"prefix": "freezeOnscreenTimer",
		"scope": "source.lua"
	},
	"switchCarSiren": {
		"body": "switchCarSiren(${1:car},${2:siren})",
		"description": "GTA SA\nswitchCarSiren(Vehicle car, bool siren)\n",
		"prefix": "switchCarSiren",
		"scope": "source.lua"
	},
	"setCarWatertight": {
		"body": "setCarWatertight(${1:car},${2:watertight})",
		"description": "GTA SA\nsetCarWatertight(Vehicle car, bool watertight)\n",
		"prefix": "setCarWatertight",
		"scope": "source.lua"
	},
	"setCharCantBeDraggedOut": {
		"body": "setCharCantBeDraggedOut(${1:ped},${2:locked})",
		"description": "GTA SA\nsetCharCantBeDraggedOut(Ped ped, bool locked)\n",
		"prefix": "setCharCantBeDraggedOut",
		"scope": "source.lua"
	},
	"turnCarToFaceCoord": {
		"body": "turnCarToFaceCoord(${1:car},${2:coordX},${3:coordY})",
		"description": "GTA SA\nturnCarToFaceCoord(Vehicle car, float coordX, float coordY)\n",
		"prefix": "turnCarToFaceCoord",
		"scope": "source.lua"
	},
	"drawSphere": {
		"body": "drawSphere(${1:atX},${2:atY},${3:atZ},${4:radius})",
		"description": "GTA SA\ndrawSphere(float atX, float atY, float atZ, float radius)\n",
		"prefix": "drawSphere",
		"scope": "source.lua"
	},
	"setCarStatus": {
		"body": "setCarStatus(${1:car},${2:action})",
		"description": "GTA SA\nsetCarStatus(Vehicle car, int action)\n",
		"prefix": "setCarStatus",
		"scope": "source.lua"
	},
	"isCharMale": {
		"body": "isCharMale(${1:ped})",
		"description": "GTA SA\nbool result = isCharMale(Ped ped)\n",
		"prefix": "isCharMale",
		"scope": "source.lua"
	},
	"policeRadioMessage": {
		"body": "policeRadioMessage(${1:float1},${2:float2},${3:float3})",
		"description": "GTA SA\npoliceRadioMessage(float float1, float float2, float float3)\n",
		"prefix": "policeRadioMessage",
		"scope": "source.lua"
	},
	"setCarStrong": {
		"body": "setCarStrong(${1:car},${2:strong})",
		"description": "GTA SA\nsetCarStrong(Vehicle car, bool strong)\n",
		"prefix": "setCarStrong",
		"scope": "source.lua"
	},
	"switchRubbish": {
		"body": "switchRubbish(${1:int1})",
		"description": "GTA SA\nswitchRubbish(bool int1)\n",
		"prefix": "switchRubbish",
		"scope": "source.lua"
	},
	"switchStreaming": {
		"body": "switchStreaming(${1:streaming})",
		"description": "GTA SA\nswitchStreaming(bool streaming)\n",
		"prefix": "switchStreaming",
		"scope": "source.lua"
	},
	"isGarageOpen": {
		"body": "isGarageOpen(${1:garage})",
		"description": "GTA SA\nbool result = isGarageOpen(GxtString garage)\n",
		"prefix": "isGarageOpen",
		"scope": "source.lua"
	},
	"isGarageClosed": {
		"body": "isGarageClosed(${1:garage})",
		"description": "GTA SA\nbool result = isGarageClosed(GxtString garage)\n",
		"prefix": "isGarageClosed",
		"scope": "source.lua"
	},
	"swapNearestBuildingModel": {
		"body": "swapNearestBuildingModel(${1:atX},${2:atY},${3:atZ},${4:radius},${5:from},${6:to})",
		"description": "GTA SA\nswapNearestBuildingModel(float atX, float atY, float atZ, float radius, Model from, Model to)\n",
		"prefix": "swapNearestBuildingModel",
		"scope": "source.lua"
	},
	"switchWorldProcessing": {
		"body": "switchWorldProcessing(${1:cutsceneOnly})",
		"description": "GTA SA\nswitchWorldProcessing(bool cutsceneOnly)\n",
		"prefix": "switchWorldProcessing",
		"scope": "source.lua"
	},
	"clearAreaOfCars": {
		"body": "clearAreaOfCars(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nclearAreaOfCars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "clearAreaOfCars",
		"scope": "source.lua"
	},
	"addSphere": {
		"body": "addSphere(${1:atX},${2:atY},${3:atZ},${4:radius})",
		"description": "GTA SA\nint sphere = addSphere(float atX, float atY, float atZ, float radius)\n",
		"prefix": "addSphere",
		"scope": "source.lua"
	},
	"removeSphere": {
		"body": "removeSphere(${1:sphere})",
		"description": "GTA SA\nremoveSphere(int sphere)\n",
		"prefix": "removeSphere",
		"scope": "source.lua"
	},
	"setEveryoneIgnorePlayer": {
		"body": "setEveryoneIgnorePlayer(${1:player},${2:ignored})",
		"description": "GTA SA\nsetEveryoneIgnorePlayer(Player player, bool ignored)\n",
		"prefix": "setEveryoneIgnorePlayer",
		"scope": "source.lua"
	},
	"storeCarCharIsInNoSave": {
		"body": "storeCarCharIsInNoSave(${1:ped})",
		"description": "GTA SA\nVehicle car = storeCarCharIsInNoSave(Ped ped)\n",
		"prefix": "storeCarCharIsInNoSave",
		"scope": "source.lua"
	},
	"displayOnscreenTimerWithString": {
		"body": "displayOnscreenTimerWithString(${1:timer},${2:type},${3:gxtString})",
		"description": "GTA SA\ndisplayOnscreenTimerWithString(VarId timer, int type, GxtString gxtString)\n",
		"prefix": "displayOnscreenTimerWithString",
		"scope": "source.lua"
	},
	"displayOnscreenCounterWithString": {
		"body": "displayOnscreenCounterWithString(${1:var},${2:type},${3:gxtString})",
		"description": "GTA SA\ndisplayOnscreenCounterWithString(VarId var, bool type, GxtString gxtString)\n",
		"prefix": "displayOnscreenCounterWithString",
		"scope": "source.lua"
	},
	"createRandomCarForCarPark": {
		"body": "createRandomCarForCarPark(${1:coordsX},${2:coordsY},${3:coordsZ},${4:zAngle})",
		"description": "GTA SA\ncreateRandomCarForCarPark(float coordsX, float coordsY, float coordsZ, float zAngle)\n",
		"prefix": "createRandomCarForCarPark",
		"scope": "source.lua"
	},
	"setWantedMultiplier": {
		"body": "setWantedMultiplier(${1:sensitivity})",
		"description": "GTA SA\nsetWantedMultiplier(float sensitivity)\n",
		"prefix": "setWantedMultiplier",
		"scope": "source.lua"
	},
	"setCameraInFrontOfPlayer": {
		"body": "setCameraInFrontOfPlayer()",
		"description": "GTA SA\nsetCameraInFrontOfPlayer()\n",
		"prefix": "setCameraInFrontOfPlayer",
		"scope": "source.lua"
	},
	"isCarVisiblyDamaged": {
		"body": "isCarVisiblyDamaged(${1:car})",
		"description": "GTA SA\nbool result = isCarVisiblyDamaged(Vehicle car)\n",
		"prefix": "isCarVisiblyDamaged",
		"scope": "source.lua"
	},
	"doesObjectExist": {
		"body": "doesObjectExist(${1:object})",
		"description": "GTA SA\nbool result = doesObjectExist(Object object)\n",
		"prefix": "doesObjectExist",
		"scope": "source.lua"
	},
	"loadScene": {
		"body": "loadScene(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nloadScene(float atX, float atY, float atZ)\n",
		"prefix": "loadScene",
		"scope": "source.lua"
	},
	"addStuckCarCheck": {
		"body": "addStuckCarCheck(${1:car},${2:stuckCheckDistance},${3:time})",
		"description": "GTA SA\naddStuckCarCheck(Vehicle car, float stuckCheckDistance, int time)\n",
		"prefix": "addStuckCarCheck",
		"scope": "source.lua"
	},
	"removeStuckCarCheck": {
		"body": "removeStuckCarCheck(${1:car})",
		"description": "GTA SA\nremoveStuckCarCheck(Vehicle car)\n",
		"prefix": "removeStuckCarCheck",
		"scope": "source.lua"
	},
	"isCarStuck": {
		"body": "isCarStuck(${1:car})",
		"description": "GTA SA\nbool result = isCarStuck(Vehicle car)\n",
		"prefix": "isCarStuck",
		"scope": "source.lua"
	},
	"loadMissionAudio": {
		"body": "loadMissionAudio(${1:asId},${2:name})",
		"description": "GTA SA\nloadMissionAudio(int asId, int name)\n",
		"prefix": "loadMissionAudio",
		"scope": "source.lua"
	},
	"hasMissionAudioLoaded": {
		"body": "hasMissionAudioLoaded(${1:id})",
		"description": "GTA SA\nbool result = hasMissionAudioLoaded(int id)\n",
		"prefix": "hasMissionAudioLoaded",
		"scope": "source.lua"
	},
	"playMissionAudio": {
		"body": "playMissionAudio(${1:id})",
		"description": "GTA SA\nplayMissionAudio(int id)\n",
		"prefix": "playMissionAudio",
		"scope": "source.lua"
	},
	"hasMissionAudioFinished": {
		"body": "hasMissionAudioFinished(${1:id})",
		"description": "GTA SA\nbool result = hasMissionAudioFinished(int id)\n",
		"prefix": "hasMissionAudioFinished",
		"scope": "source.lua"
	},
	"getClosestCarNodeWithHeading": {
		"body": "getClosestCarNodeWithHeading(${1:X},${2:Y},${3:Z})",
		"description": "GTA SA\nfloat nodeX, float nodeY, float nodeZ, float angle = getClosestCarNodeWithHeading(float X, float Y, float Z)\n",
		"prefix": "getClosestCarNodeWithHeading",
		"scope": "source.lua"
	},
	"hasImportGarageSlotBeenFilled": {
		"body": "hasImportGarageSlotBeenFilled(${1:int1},${2:int2})",
		"description": "GTA SA\nbool result = hasImportGarageSlotBeenFilled(int int1, int int2)\n",
		"prefix": "hasImportGarageSlotBeenFilled",
		"scope": "source.lua"
	},
	"clearThisPrint": {
		"body": "clearThisPrint(${1:text})",
		"description": "GTA SA\nclearThisPrint(GxtString text)\n",
		"prefix": "clearThisPrint",
		"scope": "source.lua"
	},
	"clearThisBigPrint": {
		"body": "clearThisBigPrint(${1:text})",
		"description": "GTA SA\nclearThisBigPrint(GxtString text)\n",
		"prefix": "clearThisBigPrint",
		"scope": "source.lua"
	},
	"setMissionAudioPosition": {
		"body": "setMissionAudioPosition(${1:id},${2:locationX},${3:locationY},${4:locationZ})",
		"description": "GTA SA\nsetMissionAudioPosition(int id, float locationX, float locationY, float locationZ)\n",
		"prefix": "setMissionAudioPosition",
		"scope": "source.lua"
	},
	"activateSaveMenu": {
		"body": "activateSaveMenu()",
		"description": "GTA SA\nactivateSaveMenu()\n",
		"prefix": "activateSaveMenu",
		"scope": "source.lua"
	},
	"hasSaveGameFinished": {
		"body": "hasSaveGameFinished()",
		"description": "GTA SA\nbool result = hasSaveGameFinished()\n",
		"prefix": "hasSaveGameFinished",
		"scope": "source.lua"
	},
	"noSpecialCameraForThisGarage": {
		"body": "noSpecialCameraForThisGarage(${1:int1})",
		"description": "GTA SA\nnoSpecialCameraForThisGarage(int int1)\n",
		"prefix": "noSpecialCameraForThisGarage",
		"scope": "source.lua"
	},
	"addBlipForPickup": {
		"body": "addBlipForPickup(${1:pickup})",
		"description": "GTA SA\nMarker marker = addBlipForPickup(Pickup pickup)\n",
		"prefix": "addBlipForPickup",
		"scope": "source.lua"
	},
	"setPedDensityMultiplier": {
		"body": "setPedDensityMultiplier(${1:multiplier})",
		"description": "GTA SA\nsetPedDensityMultiplier(float multiplier)\n",
		"prefix": "setPedDensityMultiplier",
		"scope": "source.lua"
	},
	"setTextDrawBeforeFade": {
		"body": "setTextDrawBeforeFade(${1:int1})",
		"description": "GTA SA\nsetTextDrawBeforeFade(bool int1)\n",
		"prefix": "setTextDrawBeforeFade",
		"scope": "source.lua"
	},
	"getCollectable1sCollected": {
		"body": "getCollectable1sCollected()",
		"description": "GTA SA\nint collected = getCollectable1sCollected()\n",
		"prefix": "getCollectable1sCollected",
		"scope": "source.lua"
	},
	"setSpritesDrawBeforeFade": {
		"body": "setSpritesDrawBeforeFade(${1:antialiased})",
		"description": "GTA SA\nsetSpritesDrawBeforeFade(bool antialiased)\n",
		"prefix": "setSpritesDrawBeforeFade",
		"scope": "source.lua"
	},
	"setTextRightJustify": {
		"body": "setTextRightJustify(${1:alignRight})",
		"description": "GTA SA\nsetTextRightJustify(bool alignRight)\n",
		"prefix": "setTextRightJustify",
		"scope": "source.lua"
	},
	"printHelp": {
		"body": "printHelp(${1:gxtString})",
		"description": "GTA SA\nprintHelp(GxtString gxtString)\n",
		"prefix": "printHelp",
		"scope": "source.lua"
	},
	"clearHelp": {
		"body": "clearHelp()",
		"description": "GTA SA\nclearHelp()\n",
		"prefix": "clearHelp",
		"scope": "source.lua"
	},
	"flashHudObject": {
		"body": "flashHudObject(${1:hudComponent})",
		"description": "GTA SA\nflashHudObject(int hudComponent)\n",
		"prefix": "flashHudObject",
		"scope": "source.lua"
	},
	"setGenerateCarsAroundCamera": {
		"body": "setGenerateCarsAroundCamera(${1:int1})",
		"description": "GTA SA\nsetGenerateCarsAroundCamera(bool int1)\n",
		"prefix": "setGenerateCarsAroundCamera",
		"scope": "source.lua"
	},
	"clearSmallPrints": {
		"body": "clearSmallPrints()",
		"description": "GTA SA\nclearSmallPrints()\n",
		"prefix": "clearSmallPrints",
		"scope": "source.lua"
	},
	"setUpsidedownCarNotDamaged": {
		"body": "setUpsidedownCarNotDamaged(${1:car},${2:disableFlippedExplosion})",
		"description": "GTA SA\nsetUpsidedownCarNotDamaged(Vehicle car, bool disableFlippedExplosion)\n",
		"prefix": "setUpsidedownCarNotDamaged",
		"scope": "source.lua"
	},
	"isPlayerControllable": {
		"body": "isPlayerControllable(${1:player})",
		"description": "GTA SA\nbool result = isPlayerControllable(Player player)\n",
		"prefix": "isPlayerControllable",
		"scope": "source.lua"
	},
	"makePlayerSafe": {
		"body": "makePlayerSafe(${1:player})",
		"description": "GTA SA\nmakePlayerSafe(Player player)\n",
		"prefix": "makePlayerSafe",
		"scope": "source.lua"
	},
	"getCarColours": {
		"body": "getCarColours(${1:car})",
		"description": "GTA SA\nint primaryColor, int secondaryColor = getCarColours(Vehicle car)\n",
		"prefix": "getCarColours",
		"scope": "source.lua"
	},
	"setAllCarsCanBeDamaged": {
		"body": "setAllCarsCanBeDamaged(${1:enable})",
		"description": "GTA SA\nsetAllCarsCanBeDamaged(bool enable)\n",
		"prefix": "setAllCarsCanBeDamaged",
		"scope": "source.lua"
	},
	"setCarCanBeDamaged": {
		"body": "setCarCanBeDamaged(${1:car},${2:enable})",
		"description": "GTA SA\nsetCarCanBeDamaged(Vehicle car, bool enable)\n",
		"prefix": "setCarCanBeDamaged",
		"scope": "source.lua"
	},
	"setDrunkInputDelay": {
		"body": "setDrunkInputDelay(${1:player},${2:handlingResponsiveness})",
		"description": "GTA SA\nsetDrunkInputDelay(Player player, int handlingResponsiveness)\n",
		"prefix": "setDrunkInputDelay",
		"scope": "source.lua"
	},
	"setCharMoney": {
		"body": "setCharMoney(${1:ped},${2:money})",
		"description": "GTA SA\nsetCharMoney(Ped ped, int money)\n",
		"prefix": "setCharMoney",
		"scope": "source.lua"
	},
	"getOffsetFromObjectInWorldCoords": {
		"body": "getOffsetFromObjectInWorldCoords(${1:object},${2:offsetX},${3:offsetY},${4:offsetZ})",
		"description": "GTA SA\nfloat X, float Y, float Z = getOffsetFromObjectInWorldCoords(Object object, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromObjectInWorldCoords",
		"scope": "source.lua"
	},
	"getOffsetFromCarInWorldCoords": {
		"body": "getOffsetFromCarInWorldCoords(${1:car},${2:offsetX},${3:offsetY},${4:offsetZ})",
		"description": "GTA SA\nfloat X, float Y, float Z = getOffsetFromCarInWorldCoords(Vehicle car, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromCarInWorldCoords",
		"scope": "source.lua"
	},
	"clearMissionAudio": {
		"body": "clearMissionAudio(${1:id})",
		"description": "GTA SA\nclearMissionAudio(int id)\n",
		"prefix": "clearMissionAudio",
		"scope": "source.lua"
	},
	"setFreeHealthCare": {
		"body": "setFreeHealthCare(${1:player},${2:free})",
		"description": "GTA SA\nsetFreeHealthCare(Player player, bool free)\n",
		"prefix": "setFreeHealthCare",
		"scope": "source.lua"
	},
	"loadAndLaunchMissionInternal": {
		"body": "loadAndLaunchMissionInternal(${1:mission})",
		"description": "GTA SA\nloadAndLaunchMissionInternal(int mission)\n",
		"prefix": "loadAndLaunchMissionInternal",
		"scope": "source.lua"
	},
	"setObjectDrawLast": {
		"body": "setObjectDrawLast(${1:object},${2:drawLast})",
		"description": "GTA SA\nsetObjectDrawLast(Object object, bool drawLast)\n",
		"prefix": "setObjectDrawLast",
		"scope": "source.lua"
	},
	"getAmmoInCharWeapon": {
		"body": "getAmmoInCharWeapon(${1:ped},${2:int})",
		"description": "GTA SA\nint ammo = getAmmoInCharWeapon(Ped ped, int int)\n",
		"prefix": "getAmmoInCharWeapon",
		"scope": "source.lua"
	},
	"setNearClip": {
		"body": "setNearClip(${1:clip})",
		"description": "GTA SA\nsetNearClip(float clip)\n",
		"prefix": "setNearClip",
		"scope": "source.lua"
	},
	"setRadioChannel": {
		"body": "setRadioChannel(${1:radioStation})",
		"description": "GTA SA\nsetRadioChannel(int radioStation)\n",
		"prefix": "setRadioChannel",
		"scope": "source.lua"
	},
	"setCarTraction": {
		"body": "setCarTraction(${1:car},${2:traction})",
		"description": "GTA SA\nsetCarTraction(Vehicle car, float traction)\n",
		"prefix": "setCarTraction",
		"scope": "source.lua"
	},
	"areMeasurementsInMetres": {
		"body": "areMeasurementsInMetres()",
		"description": "GTA SA\nbool result = areMeasurementsInMetres()\n",
		"prefix": "areMeasurementsInMetres",
		"scope": "source.lua"
	},
	"convertMetresToFeet": {
		"body": "convertMetresToFeet(${1:meters})",
		"description": "GTA SA\nfloat feet = convertMetresToFeet(float meters)\n",
		"prefix": "convertMetresToFeet",
		"scope": "source.lua"
	},
	"setCarAvoidLevelTransitions": {
		"body": "setCarAvoidLevelTransitions(${1:car},${2:avoidLevelTransitions})",
		"description": "GTA SA\nsetCarAvoidLevelTransitions(Vehicle car, bool avoidLevelTransitions)\n",
		"prefix": "setCarAvoidLevelTransitions",
		"scope": "source.lua"
	},
	"clearAreaOfChars": {
		"body": "clearAreaOfChars(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nclearAreaOfChars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "clearAreaOfChars",
		"scope": "source.lua"
	},
	"setTotalNumberOfMissions": {
		"body": "setTotalNumberOfMissions(${1:totalMissions})",
		"description": "GTA SA\nsetTotalNumberOfMissions(int totalMissions)\n",
		"prefix": "setTotalNumberOfMissions",
		"scope": "source.lua"
	},
	"convertMetresToFeetInt": {
		"body": "convertMetresToFeetInt(${1:metric})",
		"description": "GTA SA\nint imperial = convertMetresToFeetInt(int metric)\n",
		"prefix": "convertMetresToFeetInt",
		"scope": "source.lua"
	},
	"registerFastestTime": {
		"body": "registerFastestTime(${1:stat},${2:to})",
		"description": "GTA SA\nregisterFastestTime(int stat, int to)\n",
		"prefix": "registerFastestTime",
		"scope": "source.lua"
	},
	"registerHighestScore": {
		"body": "registerHighestScore(${1:int1},${2:int2})",
		"description": "GTA SA\nregisterHighestScore(int int1, int int2)\n",
		"prefix": "registerHighestScore",
		"scope": "source.lua"
	},
	"warpCharIntoCarAsPassenger": {
		"body": "warpCharIntoCarAsPassenger(${1:ped},${2:car},${3:passengerSeat})",
		"description": "GTA SA\nwarpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerSeat)\n",
		"prefix": "warpCharIntoCarAsPassenger",
		"scope": "source.lua"
	},
	"isCarPassengerSeatFree": {
		"body": "isCarPassengerSeatFree(${1:car},${2:seat})",
		"description": "GTA SA\nbool result = isCarPassengerSeatFree(Vehicle car, int seat)\n",
		"prefix": "isCarPassengerSeatFree",
		"scope": "source.lua"
	},
	"getCharInCarPassengerSeat": {
		"body": "getCharInCarPassengerSeat(${1:car},${2:seat})",
		"description": "GTA SA\nPed ped = getCharInCarPassengerSeat(Vehicle car, int seat)\n",
		"prefix": "getCharInCarPassengerSeat",
		"scope": "source.lua"
	},
	"setCharIsChrisCriminal": {
		"body": "setCharIsChrisCriminal(${1:ped},${2:flag})",
		"description": "GTA SA\nsetCharIsChrisCriminal(Ped ped, bool flag)\n",
		"prefix": "setCharIsChrisCriminal",
		"scope": "source.lua"
	},
	"startCredits": {
		"body": "startCredits()",
		"description": "GTA SA\nstartCredits()\n",
		"prefix": "startCredits",
		"scope": "source.lua"
	},
	"stopCredits": {
		"body": "stopCredits()",
		"description": "GTA SA\nstopCredits()\n",
		"prefix": "stopCredits",
		"scope": "source.lua"
	},
	"areCreditsFinished": {
		"body": "areCreditsFinished()",
		"description": "GTA SA\nbool result = areCreditsFinished()\n",
		"prefix": "areCreditsFinished",
		"scope": "source.lua"
	},
	"setMusicDoesFade": {
		"body": "setMusicDoesFade(${1:enable})",
		"description": "GTA SA\nsetMusicDoesFade(bool enable)\n",
		"prefix": "setMusicDoesFade",
		"scope": "source.lua"
	},
	"getCarModel": {
		"body": "getCarModel(${1:int})",
		"description": "GTA SA\nModel modelId = getCarModel(int int)\n",
		"prefix": "getCarModel",
		"scope": "source.lua"
	},
	"areAnyCarCheatsActivated": {
		"body": "areAnyCarCheatsActivated()",
		"description": "GTA SA\nbool result = areAnyCarCheatsActivated()\n",
		"prefix": "areAnyCarCheatsActivated",
		"scope": "source.lua"
	},
	"setCharSuffersCriticalHits": {
		"body": "setCharSuffersCriticalHits(${1:ped},${2:enable})",
		"description": "GTA SA\nsetCharSuffersCriticalHits(Ped ped, bool enable)\n",
		"prefix": "setCharSuffersCriticalHits",
		"scope": "source.lua"
	},
	"isCharSittingInCar": {
		"body": "isCharSittingInCar(${1:ped},${2:car})",
		"description": "GTA SA\nbool result = isCharSittingInCar(Ped ped, Vehicle car)\n",
		"prefix": "isCharSittingInCar",
		"scope": "source.lua"
	},
	"isCharSittingInAnyCar": {
		"body": "isCharSittingInAnyCar(${1:ped})",
		"description": "GTA SA\nbool result = isCharSittingInAnyCar(Ped ped)\n",
		"prefix": "isCharSittingInAnyCar",
		"scope": "source.lua"
	},
	"isCharOnFoot": {
		"body": "isCharOnFoot(${1:ped})",
		"description": "GTA SA\nbool result = isCharOnFoot(Ped ped)\n",
		"prefix": "isCharOnFoot",
		"scope": "source.lua"
	},
	"loadSplashScreen": {
		"body": "loadSplashScreen(${1:gxtString})",
		"description": "GTA SA\nloadSplashScreen(GxtString gxtString)\n",
		"prefix": "loadSplashScreen",
		"scope": "source.lua"
	},
	"setJamesCarOnPathToPlayer": {
		"body": "setJamesCarOnPathToPlayer(${1:int1})",
		"description": "GTA SA\nsetJamesCarOnPathToPlayer(int int1)\n",
		"prefix": "setJamesCarOnPathToPlayer",
		"scope": "source.lua"
	},
	"setObjectRotation": {
		"body": "setObjectRotation(${1:object},${2:rotationX},${3:rotationY},${4:rotationZ})",
		"description": "GTA SA\nsetObjectRotation(Object object, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "setObjectRotation",
		"scope": "source.lua"
	},
	"getDebugCameraCoordinates": {
		"body": "getDebugCameraCoordinates()",
		"description": "GTA SA\nfloat X, float Y, float Z = getDebugCameraCoordinates()\n",
		"prefix": "getDebugCameraCoordinates",
		"scope": "source.lua"
	},
	"isPlayerTargettingChar": {
		"body": "isPlayerTargettingChar(${1:player},${2:ped})",
		"description": "GTA SA\nbool result = isPlayerTargettingChar(Player player, Ped ped)\n",
		"prefix": "isPlayerTargettingChar",
		"scope": "source.lua"
	},
	"isPlayerTargettingObject": {
		"body": "isPlayerTargettingObject(${1:player},${2:object})",
		"description": "GTA SA\nbool result = isPlayerTargettingObject(Player player, Object object)\n",
		"prefix": "isPlayerTargettingObject",
		"scope": "source.lua"
	},
	"displayTextWithNumber": {
		"body": "displayTextWithNumber(${1:x},${2:y},${3:gxtString},${4:number})",
		"description": "GTA SA\ndisplayTextWithNumber(float x, float y, GxtString gxtString, int number)\n",
		"prefix": "displayTextWithNumber",
		"scope": "source.lua"
	},
	"displayTextWith2Numbers": {
		"body": "displayTextWith2Numbers(${1:x},${2:y},${3:gxtString},${4:numbersX},${5:numbersY})",
		"description": "GTA SA\ndisplayTextWith2Numbers(float x, float y, GxtString gxtString, int numbersX, int numbersY)\n",
		"prefix": "displayTextWith2Numbers",
		"scope": "source.lua"
	},
	"failCurrentMission": {
		"body": "failCurrentMission()",
		"description": "GTA SA\nfailCurrentMission()\n",
		"prefix": "failCurrentMission",
		"scope": "source.lua"
	},
	"setInterpolationParameters": {
		"body": "setInterpolationParameters(${1:delay},${2:time})",
		"description": "GTA SA\nsetInterpolationParameters(float delay, int time)\n",
		"prefix": "setInterpolationParameters",
		"scope": "source.lua"
	},
	"getDebugCameraPointAt": {
		"body": "getDebugCameraPointAt()",
		"description": "GTA SA\nfloat X, float Y, float Z = getDebugCameraPointAt()\n",
		"prefix": "getDebugCameraPointAt",
		"scope": "source.lua"
	},
	"attachCharToCar": {
		"body": "attachCharToCar(${1:ped},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ},${6:position},${7:shootingAngleLimit},${8:weapon})",
		"description": "GTA SA\nattachCharToCar(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngleLimit, int weapon)\n",
		"prefix": "attachCharToCar",
		"scope": "source.lua"
	},
	"detachCharFromCar": {
		"body": "detachCharFromCar(${1:ped})",
		"description": "GTA SA\ndetachCharFromCar(Ped ped)\n",
		"prefix": "detachCharFromCar",
		"scope": "source.lua"
	},
	"setCarStayInFastLane": {
		"body": "setCarStayInFastLane(${1:car},${2:flag})",
		"description": "GTA SA\nsetCarStayInFastLane(Vehicle car, bool flag)\n",
		"prefix": "setCarStayInFastLane",
		"scope": "source.lua"
	},
	"clearCharLastWeaponDamage": {
		"body": "clearCharLastWeaponDamage(${1:ped})",
		"description": "GTA SA\nclearCharLastWeaponDamage(Ped ped)\n",
		"prefix": "clearCharLastWeaponDamage",
		"scope": "source.lua"
	},
	"clearCarLastWeaponDamage": {
		"body": "clearCarLastWeaponDamage(${1:car})",
		"description": "GTA SA\nclearCarLastWeaponDamage(Vehicle car)\n",
		"prefix": "clearCarLastWeaponDamage",
		"scope": "source.lua"
	},
	"getRandomCopInArea": {
		"body": "getRandomCopInArea(${1:float1},${2:float2},${3:float3},${4:float4},${5:int5},${6:int6},${7:int7},${8:int8},${9:int9})",
		"description": "GTA SA\nint int10 = getRandomCopInArea(float float1, float float2, float float3, float float4, bool int5, bool int6, bool int7, bool int8, bool int9)\n",
		"prefix": "getRandomCopInArea",
		"scope": "source.lua"
	},
	"getDriverOfCar": {
		"body": "getDriverOfCar(${1:car})",
		"description": "GTA SA\nPed ped = getDriverOfCar(Vehicle car)\n",
		"prefix": "getDriverOfCar",
		"scope": "source.lua"
	},
	"getNumberOfFollowers": {
		"body": "getNumberOfFollowers(${1:ped})",
		"description": "GTA SA\nint followers = getNumberOfFollowers(Ped ped)\n",
		"prefix": "getNumberOfFollowers",
		"scope": "source.lua"
	},
	"giveRemoteControlledModelToPlayer": {
		"body": "giveRemoteControlledModelToPlayer(${1:player},${2:atX},${3:atY},${4:atZ},${5:angle},${6:RCModel})",
		"description": "GTA SA\ngiveRemoteControlledModelToPlayer(Player player, float atX, float atY, float atZ, float angle, Model RCModel)\n",
		"prefix": "giveRemoteControlledModelToPlayer",
		"scope": "source.lua"
	},
	"getCurrentCharWeapon": {
		"body": "getCurrentCharWeapon(${1:ped})",
		"description": "GTA SA\nint weapon = getCurrentCharWeapon(Ped ped)\n",
		"prefix": "getCurrentCharWeapon",
		"scope": "source.lua"
	},
	"locateCharAnyMeansObject2d": {
		"body": "locateCharAnyMeansObject2d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeansObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansObject2d",
		"scope": "source.lua"
	},
	"locateCharOnFootObject2d": {
		"body": "locateCharOnFootObject2d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharOnFootObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFootObject2d",
		"scope": "source.lua"
	},
	"locateCharInCarObject2d": {
		"body": "locateCharInCarObject2d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:sphere})",
		"description": "GTA SA\nbool result = locateCharInCarObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarObject2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansObject3d": {
		"body": "locateCharAnyMeansObject3d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharAnyMeansObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeansObject3d",
		"scope": "source.lua"
	},
	"locateCharOnFootObject3d": {
		"body": "locateCharOnFootObject3d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharOnFootObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFootObject3d",
		"scope": "source.lua"
	},
	"locateCharInCarObject3d": {
		"body": "locateCharInCarObject3d(${1:ped},${2:object},${3:radiusX},${4:radiusY},${5:radiusZ},${6:sphere})",
		"description": "GTA SA\nbool result = locateCharInCarObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCarObject3d",
		"scope": "source.lua"
	},
	"setCarTempAction": {
		"body": "setCarTempAction(${1:car},${2:action},${3:time})",
		"description": "GTA SA\nsetCarTempAction(Vehicle car, int action, int time)\n",
		"prefix": "setCarTempAction",
		"scope": "source.lua"
	},
	"isCharOnAnyBike": {
		"body": "isCharOnAnyBike(${1:ped})",
		"description": "GTA SA\nbool result = isCharOnAnyBike(Ped ped)\n",
		"prefix": "isCharOnAnyBike",
		"scope": "source.lua"
	},
	"canCharSeeDeadChar": {
		"body": "canCharSeeDeadChar(${1:ped},${2:pedtype})",
		"description": "GTA SA\nbool result = canCharSeeDeadChar(Ped ped, int pedtype)\n",
		"prefix": "canCharSeeDeadChar",
		"scope": "source.lua"
	},
	"setEnterCarRangeMultiplier": {
		"body": "setEnterCarRangeMultiplier(${1:float1})",
		"description": "GTA SA\nsetEnterCarRangeMultiplier(float float1)\n",
		"prefix": "setEnterCarRangeMultiplier",
		"scope": "source.lua"
	},
	"getRemoteControlledCar": {
		"body": "getRemoteControlledCar(${1:player})",
		"description": "GTA SA\nVehicle car = getRemoteControlledCar(Player player)\n",
		"prefix": "getRemoteControlledCar",
		"scope": "source.lua"
	},
	"isPcVersion": {
		"body": "isPcVersion()",
		"description": "GTA SA\nbool result = isPcVersion()\n",
		"prefix": "isPcVersion",
		"scope": "source.lua"
	},
	"isModelAvailable": {
		"body": "isModelAvailable(${1:modelId})",
		"description": "GTA SA\nbool result = isModelAvailable(Model modelId)\n",
		"prefix": "isModelAvailable",
		"scope": "source.lua"
	},
	"shutCharUp": {
		"body": "shutCharUp(${1:ped},${2:muted})",
		"description": "GTA SA\nshutCharUp(Ped ped, bool muted)\n",
		"prefix": "shutCharUp",
		"scope": "source.lua"
	},
	"setEnableRcDetonate": {
		"body": "setEnableRcDetonate(${1:detonation})",
		"description": "GTA SA\nsetEnableRcDetonate(bool detonation)\n",
		"prefix": "setEnableRcDetonate",
		"scope": "source.lua"
	},
	"setCarRandomRouteSeed": {
		"body": "setCarRandomRouteSeed(${1:car},${2:routeSeed})",
		"description": "GTA SA\nsetCarRandomRouteSeed(Vehicle car, int routeSeed)\n",
		"prefix": "setCarRandomRouteSeed",
		"scope": "source.lua"
	},
	"isAnyPickupAtCoords": {
		"body": "isAnyPickupAtCoords(${1:pickupX},${2:pickupY},${3:pickupZ})",
		"description": "GTA SA\nbool result = isAnyPickupAtCoords(float pickupX, float pickupY, float pickupZ)\n",
		"prefix": "isAnyPickupAtCoords",
		"scope": "source.lua"
	},
	"removeAllCharWeapons": {
		"body": "removeAllCharWeapons(${1:ped})",
		"description": "GTA SA\nremoveAllCharWeapons(Ped ped)\n",
		"prefix": "removeAllCharWeapons",
		"scope": "source.lua"
	},
	"hasCharGotWeapon": {
		"body": "hasCharGotWeapon(${1:ped},${2:weapon})",
		"description": "GTA SA\nbool result = hasCharGotWeapon(Ped ped, int weapon)\n",
		"prefix": "hasCharGotWeapon",
		"scope": "source.lua"
	},
	"setTankDetonateCars": {
		"body": "setTankDetonateCars(${1:tank},${2:detonate})",
		"description": "GTA SA\nsetTankDetonateCars(int tank, bool detonate)\n",
		"prefix": "setTankDetonateCars",
		"scope": "source.lua"
	},
	"getPositionOfAnalogueSticks": {
		"body": "getPositionOfAnalogueSticks(${1:joystick})",
		"description": "GTA SA\nint offset1, int offset2, int offset3, int offset4 = getPositionOfAnalogueSticks(int joystick)\n",
		"prefix": "getPositionOfAnalogueSticks",
		"scope": "source.lua"
	},
	"isCarOnFire": {
		"body": "isCarOnFire(${1:car})",
		"description": "GTA SA\nbool result = isCarOnFire(Vehicle car)\n",
		"prefix": "isCarOnFire",
		"scope": "source.lua"
	},
	"isCarTireBurst": {
		"body": "isCarTireBurst(${1:car},${2:tire})",
		"description": "GTA SA\nbool result = isCarTireBurst(Vehicle car, int tire)\n",
		"prefix": "isCarTireBurst",
		"scope": "source.lua"
	},
	"initialiseObjectPath": {
		"body": "initialiseObjectPath(${1:int1},${2:float2})",
		"description": "GTA SA\ninitialiseObjectPath(int int1, float float2)\n",
		"prefix": "initialiseObjectPath",
		"scope": "source.lua"
	},
	"setObjectPathSpeed": {
		"body": "setObjectPathSpeed(${1:int1},${2:int2})",
		"description": "GTA SA\nsetObjectPathSpeed(int int1, int int2)\n",
		"prefix": "setObjectPathSpeed",
		"scope": "source.lua"
	},
	"setObjectPathPosition": {
		"body": "setObjectPathPosition(${1:int1},${2:float2})",
		"description": "GTA SA\nsetObjectPathPosition(int int1, float float2)\n",
		"prefix": "setObjectPathPosition",
		"scope": "source.lua"
	},
	"clearObjectPath": {
		"body": "clearObjectPath(${1:int1})",
		"description": "GTA SA\nclearObjectPath(int int1)\n",
		"prefix": "clearObjectPath",
		"scope": "source.lua"
	},
	"heliGotoCoords": {
		"body": "heliGotoCoords(${1:heli},${2:toX},${3:toY},${4:toZ},${5:altitudeMin},${6:altitudeMax})",
		"description": "GTA SA\nheliGotoCoords(Vehicle heli, float toX, float toY, float toZ, float altitudeMin, float altitudeMax)\n",
		"prefix": "heliGotoCoords",
		"scope": "source.lua"
	},
	"getDeadCharPickupCoords": {
		"body": "getDeadCharPickupCoords(${1:ped})",
		"description": "GTA SA\nfloat coordsX, float coordsY, float coordsZ = getDeadCharPickupCoords(Ped ped)\n",
		"prefix": "getDeadCharPickupCoords",
		"scope": "source.lua"
	},
	"createProtectionPickup": {
		"body": "createProtectionPickup(${1:atX},${2:atY},${3:atZ},${4:int4},${5:int5})",
		"description": "GTA SA\nPickup pickup = createProtectionPickup(float atX, float atY, float atZ, int int4, int int5)\n",
		"prefix": "createProtectionPickup",
		"scope": "source.lua"
	},
	"isCharInAnyBoat": {
		"body": "isCharInAnyBoat(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyBoat(Ped ped)\n",
		"prefix": "isCharInAnyBoat",
		"scope": "source.lua"
	},
	"isCharInAnyHeli": {
		"body": "isCharInAnyHeli(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyHeli(Ped ped)\n",
		"prefix": "isCharInAnyHeli",
		"scope": "source.lua"
	},
	"isCharInAnyPlane": {
		"body": "isCharInAnyPlane(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyPlane(Ped ped)\n",
		"prefix": "isCharInAnyPlane",
		"scope": "source.lua"
	},
	"isCharInWater": {
		"body": "isCharInWater(${1:ped})",
		"description": "GTA SA\nbool result = isCharInWater(Ped ped)\n",
		"prefix": "isCharInWater",
		"scope": "source.lua"
	},
	"getCharWeaponInSlot": {
		"body": "getCharWeaponInSlot(${1:ped},${2:slot})",
		"description": "GTA SA\nint weapon, int ammo, Model modelId = getCharWeaponInSlot(Ped ped, int slot)\n",
		"prefix": "getCharWeaponInSlot",
		"scope": "source.lua"
	},
	"getClosestStraightRoad": {
		"body": "getClosestStraightRoad(${1:atX},${2:atY},${3:atZ},${4:height},${5:radius})",
		"description": "GTA SA\nfloat float6, float float7, float float8, float float9, float float10, float float11, float float12 = getClosestStraightRoad(float atX, float atY, float atZ, float height, float radius)\n",
		"prefix": "getClosestStraightRoad",
		"scope": "source.lua"
	},
	"setCarForwardSpeed": {
		"body": "setCarForwardSpeed(${1:car},${2:speed})",
		"description": "GTA SA\nsetCarForwardSpeed(Vehicle car, float speed)\n",
		"prefix": "setCarForwardSpeed",
		"scope": "source.lua"
	},
	"setInteriorVisible": {
		"body": "setInteriorVisible(${1:interior})",
		"description": "GTA SA\nsetInteriorVisible(int interior)\n",
		"prefix": "setInteriorVisible",
		"scope": "source.lua"
	},
	"markCarAsConvoyCar": {
		"body": "markCarAsConvoyCar(${1:car},${2:convoy})",
		"description": "GTA SA\nmarkCarAsConvoyCar(Vehicle car, bool convoy)\n",
		"prefix": "markCarAsConvoyCar",
		"scope": "source.lua"
	},
	"resetHavocCausedByPlayer": {
		"body": "resetHavocCausedByPlayer(${1:int1})",
		"description": "GTA SA\nresetHavocCausedByPlayer(int int1)\n",
		"prefix": "resetHavocCausedByPlayer",
		"scope": "source.lua"
	},
	"getHavocCausedByPlayer": {
		"body": "getHavocCausedByPlayer(${1:int1})",
		"description": "GTA SA\nint int2 = getHavocCausedByPlayer(int int1)\n",
		"prefix": "getHavocCausedByPlayer",
		"scope": "source.lua"
	},
	"createScriptRoadblock": {
		"body": "createScriptRoadblock(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ},${7:type})",
		"description": "GTA SA\ncreateScriptRoadblock(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, int type)\n",
		"prefix": "createScriptRoadblock",
		"scope": "source.lua"
	},
	"clearAllScriptRoadblocks": {
		"body": "clearAllScriptRoadblocks()",
		"description": "GTA SA\nclearAllScriptRoadblocks()\n",
		"prefix": "clearAllScriptRoadblocks",
		"scope": "source.lua"
	},
	"getOffsetFromCharInWorldCoords": {
		"body": "getOffsetFromCharInWorldCoords(${1:ped},${2:offsetX},${3:offsetY},${4:offsetZ})",
		"description": "GTA SA\nfloat X, float Y, float Z = getOffsetFromCharInWorldCoords(Ped ped, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromCharInWorldCoords",
		"scope": "source.lua"
	},
	"hasCharBeenPhotographed": {
		"body": "hasCharBeenPhotographed(${1:ped})",
		"description": "GTA SA\nbool result = hasCharBeenPhotographed(Ped ped)\n",
		"prefix": "hasCharBeenPhotographed",
		"scope": "source.lua"
	},
	"switchSecurityCamera": {
		"body": "switchSecurityCamera(${1:int1})",
		"description": "GTA SA\nswitchSecurityCamera(bool int1)\n",
		"prefix": "switchSecurityCamera",
		"scope": "source.lua"
	},
	"isCharInFlyingVehicle": {
		"body": "isCharInFlyingVehicle(${1:ped})",
		"description": "GTA SA\nbool result = isCharInFlyingVehicle(Ped ped)\n",
		"prefix": "isCharInFlyingVehicle",
		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForCoord": {
		"body": "addShortRangeSpriteBlipForCoord(${1:atX},${2:atY},${3:atZ},${4:icon})",
		"description": "GTA SA\nMarker marker = addShortRangeSpriteBlipForCoord(float atX, float atY, float atZ, int icon)\n",
		"prefix": "addShortRangeSpriteBlipForCoord",
		"scope": "source.lua"
	},
	"setHeliOrientation": {
		"body": "setHeliOrientation(${1:heli},${2:angle})",
		"description": "GTA SA\nsetHeliOrientation(Vehicle heli, float angle)\n",
		"prefix": "setHeliOrientation",
		"scope": "source.lua"
	},
	"clearHeliOrientation": {
		"body": "clearHeliOrientation(${1:heli})",
		"description": "GTA SA\nclearHeliOrientation(Vehicle heli)\n",
		"prefix": "clearHeliOrientation",
		"scope": "source.lua"
	},
	"planeGotoCoords": {
		"body": "planeGotoCoords(${1:plane},${2:X},${3:Y},${4:Z},${5:z1},${6:z2})",
		"description": "GTA SA\nplaneGotoCoords(int plane, float X, float Y, float Z, float z1, float z2)\n",
		"prefix": "planeGotoCoords",
		"scope": "source.lua"
	},
	"getNthClosestCarNode": {
		"body": "getNthClosestCarNode(${1:X},${2:Y},${3:Z},${4:type})",
		"description": "GTA SA\nfloat X, float Y, float Z = getNthClosestCarNode(float X, float Y, float Z, int type)\n",
		"prefix": "getNthClosestCarNode",
		"scope": "source.lua"
	},
	"drawWeaponshopCorona": {
		"body": "drawWeaponshopCorona(${1:X},${2:Y},${3:Z},${4:radius},${5:type},${6:flare},${7:r},${8:g},${9:b})",
		"description": "GTA SA\ndrawWeaponshopCorona(float X, float Y, float Z, float radius, int type, int flare, int r, int g, int b)\n",
		"prefix": "drawWeaponshopCorona",
		"scope": "source.lua"
	},
	"setEnableRcDetonateOnContact": {
		"body": "setEnableRcDetonateOnContact(${1:enable})",
		"description": "GTA SA\nsetEnableRcDetonateOnContact(bool enable)\n",
		"prefix": "setEnableRcDetonateOnContact",
		"scope": "source.lua"
	},
	"freezeCharPosition": {
		"body": "freezeCharPosition(${1:set},${2:locked})",
		"description": "GTA SA\nfreezeCharPosition(int set, bool locked)\n",
		"prefix": "freezeCharPosition",
		"scope": "source.lua"
	},
	"setCharDrownsInWater": {
		"body": "setCharDrownsInWater(${1:ped},${2:drowns})",
		"description": "GTA SA\nsetCharDrownsInWater(Ped ped, bool drowns)\n",
		"prefix": "setCharDrownsInWater",
		"scope": "source.lua"
	},
	"setObjectRecordsCollisions": {
		"body": "setObjectRecordsCollisions(${1:object},${2:set})",
		"description": "GTA SA\nsetObjectRecordsCollisions(Object object, bool set)\n",
		"prefix": "setObjectRecordsCollisions",
		"scope": "source.lua"
	},
	"hasObjectCollidedWithAnything": {
		"body": "hasObjectCollidedWithAnything(${1:object})",
		"description": "GTA SA\nbool result = hasObjectCollidedWithAnything(Object object)\n",
		"prefix": "hasObjectCollidedWithAnything",
		"scope": "source.lua"
	},
	"removeRcBuggy": {
		"body": "removeRcBuggy()",
		"description": "GTA SA\nremoveRcBuggy()\n",
		"prefix": "removeRcBuggy",
		"scope": "source.lua"
	},
	"getCharArmour": {
		"body": "getCharArmour(${1:ped})",
		"description": "GTA SA\nint armour = getCharArmour(Ped ped)\n",
		"prefix": "getCharArmour",
		"scope": "source.lua"
	},
	"setHeliStabiliser": {
		"body": "setHeliStabiliser(${1:heli},${2:limiter})",
		"description": "GTA SA\nsetHeliStabiliser(Vehicle heli, bool limiter)\n",
		"prefix": "setHeliStabiliser",
		"scope": "source.lua"
	},
	"setCarStraightLineDistance": {
		"body": "setCarStraightLineDistance(${1:car},${2:radius})",
		"description": "GTA SA\nsetCarStraightLineDistance(Vehicle car, int radius)\n",
		"prefix": "setCarStraightLineDistance",
		"scope": "source.lua"
	},
	"popCarBoot": {
		"body": "popCarBoot(${1:car})",
		"description": "GTA SA\npopCarBoot(Vehicle car)\n",
		"prefix": "popCarBoot",
		"scope": "source.lua"
	},
	"shutPlayerUp": {
		"body": "shutPlayerUp(${1:player},${2:shut})",
		"description": "GTA SA\nshutPlayerUp(Player player, bool shut)\n",
		"prefix": "shutPlayerUp",
		"scope": "source.lua"
	},
	"setPlayerMood": {
		"body": "setPlayerMood(${1:player},${2:flag},${3:time})",
		"description": "GTA SA\nsetPlayerMood(Player player, int flag, int time)\n",
		"prefix": "setPlayerMood",
		"scope": "source.lua"
	},
	"requestCollision": {
		"body": "requestCollision(${1:X},${2:Y})",
		"description": "GTA SA\nrequestCollision(float X, float Y)\n",
		"prefix": "requestCollision",
		"scope": "source.lua"
	},
	"locateObject2d": {
		"body": "locateObject2d(${1:object},${2:X},${3:Y},${4:radiusX},${5:radiusY},${6:sphere})",
		"description": "GTA SA\nbool result = locateObject2d(Object object, float X, float Y, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateObject2d",
		"scope": "source.lua"
	},
	"locateObject3d": {
		"body": "locateObject3d(${1:object},${2:X},${3:Y},${4:Z},${5:radiusX},${6:radiusY},${7:radiusZ},${8:flag})",
		"description": "GTA SA\nbool result = locateObject3d(Object object, float X, float Y, float Z, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateObject3d",
		"scope": "source.lua"
	},
	"isObjectInWater": {
		"body": "isObjectInWater(${1:object})",
		"description": "GTA SA\nbool result = isObjectInWater(Object object)\n",
		"prefix": "isObjectInWater",
		"scope": "source.lua"
	},
	"isObjectInArea2d": {
		"body": "isObjectInArea2d(${1:object},${2:cornerAX},${3:cornerAY},${4:cornerBX},${5:cornerBY},${6:sphere})",
		"description": "GTA SA\nbool result = isObjectInArea2d(Object object, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isObjectInArea2d",
		"scope": "source.lua"
	},
	"isObjectInArea3d": {
		"body": "isObjectInArea3d(${1:object},${2:cornerAX},${3:cornerAY},${4:cornerAZ},${5:cornerBX},${6:cornerBY},${7:cornerBZ},${8:flag})",
		"description": "GTA SA\nbool result = isObjectInArea3d(Object object, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool flag)\n",
		"prefix": "isObjectInArea3d",
		"scope": "source.lua"
	},
	"taskToggleDuck": {
		"body": "taskToggleDuck(${1:ped},${2:crouch})",
		"description": "GTA SA\ntaskToggleDuck(Ped ped, bool crouch)\n",
		"prefix": "taskToggleDuck",
		"scope": "source.lua"
	},
	"requestAnimation": {
		"body": "requestAnimation(${1:animation})",
		"description": "GTA SA\nrequestAnimation(string animation)\n",
		"prefix": "requestAnimation",
		"scope": "source.lua"
	},
	"hasAnimationLoaded": {
		"body": "hasAnimationLoaded(${1:animation})",
		"description": "GTA SA\nbool result = hasAnimationLoaded(string animation)\n",
		"prefix": "hasAnimationLoaded",
		"scope": "source.lua"
	},
	"removeAnimation": {
		"body": "removeAnimation(${1:animation})",
		"description": "GTA SA\nremoveAnimation(string animation)\n",
		"prefix": "removeAnimation",
		"scope": "source.lua"
	},
	"isCharWaitingForWorldCollision": {
		"body": "isCharWaitingForWorldCollision(${1:ped})",
		"description": "GTA SA\nbool result = isCharWaitingForWorldCollision(Ped ped)\n",
		"prefix": "isCharWaitingForWorldCollision",
		"scope": "source.lua"
	},
	"isCarWaitingForWorldCollision": {
		"body": "isCarWaitingForWorldCollision(${1:car})",
		"description": "GTA SA\nbool result = isCarWaitingForWorldCollision(Vehicle car)\n",
		"prefix": "isCarWaitingForWorldCollision",
		"scope": "source.lua"
	},
	"attachCharToObject": {
		"body": "attachCharToObject(${1:ped},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:orientation},${7:angle},${8:lockWeapon})",
		"description": "GTA SA\nattachCharToObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int orientation, float angle, int lockWeapon)\n",
		"prefix": "attachCharToObject",
		"scope": "source.lua"
	},
	"displayNthOnscreenCounterWithString": {
		"body": "displayNthOnscreenCounterWithString(${1:text},${2:type},${3:line},${4:gxtString})",
		"description": "GTA SA\ndisplayNthOnscreenCounterWithString(VarId text, int type, int line, GxtString gxtString)\n",
		"prefix": "displayNthOnscreenCounterWithString",
		"scope": "source.lua"
	},
	"addSetPiece": {
		"body": "addSetPiece(${1:type},${2:rectX1},${3:rectY1},${4:rectX2},${5:rectY2},${6:spawnAX},${7:spawnAY},${8:headedTowards1X},${9:headedTowards1Y},${10:spawnBX},${11:spawnBY},${12:headedTowards2X},${13:headedTowards2Y})",
		"description": "GTA SA\naddSetPiece(int type, float rectX1, float rectY1, float rectX2, float rectY2, float spawnAX, float spawnAY, float headedTowards1X, float headedTowards1Y, float spawnBX, float spawnBY, float headedTowards2X, float headedTowards2Y)\n",
		"prefix": "addSetPiece",
		"scope": "source.lua"
	},
	"setExtraColours": {
		"body": "setExtraColours(${1:color},${2:fade})",
		"description": "GTA SA\nsetExtraColours(int color, bool fade)\n",
		"prefix": "setExtraColours",
		"scope": "source.lua"
	},
	"clearExtraColours": {
		"body": "clearExtraColours(${1:fade})",
		"description": "GTA SA\nclearExtraColours(bool fade)\n",
		"prefix": "clearExtraColours",
		"scope": "source.lua"
	},
	"getWheelieStats": {
		"body": "getWheelieStats(${1:player})",
		"description": "GTA SA\nint twowheelstime, float twowheelsdistance, int wheelietime, float wheelieDistance, int stoppieTime, float stoppieDistance = getWheelieStats(Player player)\n",
		"prefix": "getWheelieStats",
		"scope": "source.lua"
	},
	"burstCarTire": {
		"body": "burstCarTire(${1:car},${2:tire})",
		"description": "GTA SA\nburstCarTire(Vehicle car, int tire)\n",
		"prefix": "burstCarTire",
		"scope": "source.lua"
	},
	"isPlayerWearing": {
		"body": "isPlayerWearing(${1:player},${2:bodypart},${3:skin})",
		"description": "GTA SA\nbool result = isPlayerWearing(Player player, string bodypart, int skin)\n",
		"prefix": "isPlayerWearing",
		"scope": "source.lua"
	},
	"setPlayerCanDoDriveBy": {
		"body": "setPlayerCanDoDriveBy(${1:player},${2:mode})",
		"description": "GTA SA\nsetPlayerCanDoDriveBy(Player player, bool mode)\n",
		"prefix": "setPlayerCanDoDriveBy",
		"scope": "source.lua"
	},
	"createSwatRope": {
		"body": "createSwatRope(${1:pedtype},${2:modelId},${3:X},${4:Y},${5:Z})",
		"description": "GTA SA\nint handleAs = createSwatRope(int pedtype, Model modelId, float X, float Y, float Z)\n",
		"prefix": "createSwatRope",
		"scope": "source.lua"
	},
	"setCarModelComponents": {
		"body": "setCarModelComponents(${1:car},${2:variation1},${3:variation2})",
		"description": "GTA SA\nsetCarModelComponents(Model car, int variation1, int variation2)\n",
		"prefix": "setCarModelComponents",
		"scope": "source.lua"
	},
	"closeAllCarDoors": {
		"body": "closeAllCarDoors(${1:car})",
		"description": "GTA SA\ncloseAllCarDoors(Vehicle car)\n",
		"prefix": "closeAllCarDoors",
		"scope": "source.lua"
	},
	"getDistanceBetweenCoords2d": {
		"body": "getDistanceBetweenCoords2d(${1:x1},${2:y1},${3:x2},${4:y2})",
		"description": "GTA SA\nfloat distance = getDistanceBetweenCoords2d(float x1, float y1, float x2, float y2)\n",
		"prefix": "getDistanceBetweenCoords2d",
		"scope": "source.lua"
	},
	"getDistanceBetweenCoords3d": {
		"body": "getDistanceBetweenCoords3d(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2})",
		"description": "GTA SA\nfloat distance = getDistanceBetweenCoords3d(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getDistanceBetweenCoords3d",
		"scope": "source.lua"
	},
	"sortOutObjectCollisionWithCar": {
		"body": "sortOutObjectCollisionWithCar(${1:object},${2:car})",
		"description": "GTA SA\nsortOutObjectCollisionWithCar(Object object, Vehicle car)\n",
		"prefix": "sortOutObjectCollisionWithCar",
		"scope": "source.lua"
	},
	"getMaxWantedLevel": {
		"body": "getMaxWantedLevel()",
		"description": "GTA SA\nint level = getMaxWantedLevel()\n",
		"prefix": "getMaxWantedLevel",
		"scope": "source.lua"
	},
	"printHelpForever": {
		"body": "printHelpForever(${1:text})",
		"description": "GTA SA\nprintHelpForever(GxtString text)\n",
		"prefix": "printHelpForever",
		"scope": "source.lua"
	},
	"printHelpForeverWithNumber": {
		"body": "printHelpForeverWithNumber(${1:text},${2:number})",
		"description": "GTA SA\nprintHelpForeverWithNumber(GxtString text, int number)\n",
		"prefix": "printHelpForeverWithNumber",
		"scope": "source.lua"
	},
	"createLockedPropertyPickup": {
		"body": "createLockedPropertyPickup(${1:pX},${2:pY},${3:pZ},${4:gxtString})",
		"description": "GTA SA\nPickup pickup = createLockedPropertyPickup(float pX, float pY, float pZ, GxtString gxtString)\n",
		"prefix": "createLockedPropertyPickup",
		"scope": "source.lua"
	},
	"createForsalePropertyPickup": {
		"body": "createForsalePropertyPickup(${1:pX},${2:pY},${3:pZ},${4:price},${5:gxtString})",
		"description": "GTA SA\nPickup pickup = createForsalePropertyPickup(float pX, float pY, float pZ, int price, GxtString gxtString)\n",
		"prefix": "createForsalePropertyPickup",
		"scope": "source.lua"
	},
	"freezeCarPosition": {
		"body": "freezeCarPosition(${1:car},${2:locked})",
		"description": "GTA SA\nfreezeCarPosition(Vehicle car, bool locked)\n",
		"prefix": "freezeCarPosition",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByChar": {
		"body": "hasCharBeenDamagedByChar(${1:ped},${2:byActor})",
		"description": "GTA SA\nbool result = hasCharBeenDamagedByChar(Ped ped, Ped byActor)\n",
		"prefix": "hasCharBeenDamagedByChar",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByCar": {
		"body": "hasCharBeenDamagedByCar(${1:ped},${2:byCar})",
		"description": "GTA SA\nbool result = hasCharBeenDamagedByCar(Ped ped, Vehicle byCar)\n",
		"prefix": "hasCharBeenDamagedByCar",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByChar": {
		"body": "hasCarBeenDamagedByChar(${1:car},${2:byActor})",
		"description": "GTA SA\nbool result = hasCarBeenDamagedByChar(Vehicle car, Ped byActor)\n",
		"prefix": "hasCarBeenDamagedByChar",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByCar": {
		"body": "hasCarBeenDamagedByCar(${1:car},${2:byCar})",
		"description": "GTA SA\nbool result = hasCarBeenDamagedByCar(Vehicle car, Vehicle byCar)\n",
		"prefix": "hasCarBeenDamagedByCar",
		"scope": "source.lua"
	},
	"getRadioChannel": {
		"body": "getRadioChannel()",
		"description": "GTA SA\nint radio = getRadioChannel()\n",
		"prefix": "getRadioChannel",
		"scope": "source.lua"
	},
	"setCharStayInCarWhenJacked": {
		"body": "setCharStayInCarWhenJacked(${1:ped},${2:stay})",
		"description": "GTA SA\nsetCharStayInCarWhenJacked(Ped ped, bool stay)\n",
		"prefix": "setCharStayInCarWhenJacked",
		"scope": "source.lua"
	},
	"setPlayerDrunkenness": {
		"body": "setPlayerDrunkenness(${1:player},${2:drunk})",
		"description": "GTA SA\nsetPlayerDrunkenness(Player player, int drunk)\n",
		"prefix": "setPlayerDrunkenness",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAreaNoSave": {
		"body": "getRandomCarOfTypeInAreaNoSave(${1:x1},${2:y1},${3:x2},${4:y2},${5:modelId})",
		"description": "GTA SA\nVehicle car = getRandomCarOfTypeInAreaNoSave(float x1, float y1, float x2, float y2, Model modelId)\n",
		"prefix": "getRandomCarOfTypeInAreaNoSave",
		"scope": "source.lua"
	},
	"setCanBurstCarTires": {
		"body": "setCanBurstCarTires(${1:car},${2:vulnerability})",
		"description": "GTA SA\nsetCanBurstCarTires(Vehicle car, bool vulnerability)\n",
		"prefix": "setCanBurstCarTires",
		"scope": "source.lua"
	},
	"fireHunterGun": {
		"body": "fireHunterGun(${1:car})",
		"description": "GTA SA\nfireHunterGun(Vehicle car)\n",
		"prefix": "fireHunterGun",
		"scope": "source.lua"
	},
	"isCharTouchingVehicle": {
		"body": "isCharTouchingVehicle(${1:ped},${2:car})",
		"description": "GTA SA\nbool result = isCharTouchingVehicle(Ped ped, Vehicle car)\n",
		"prefix": "isCharTouchingVehicle",
		"scope": "source.lua"
	},
	"setCharCanBeShotInVehicle": {
		"body": "setCharCanBeShotInVehicle(${1:ped},${2:can})",
		"description": "GTA SA\nsetCharCanBeShotInVehicle(Ped ped, bool can)\n",
		"prefix": "setCharCanBeShotInVehicle",
		"scope": "source.lua"
	},
	"loadMissionText": {
		"body": "loadMissionText(${1:table})",
		"description": "GTA SA\nloadMissionText(GxtString table)\n",
		"prefix": "loadMissionText",
		"scope": "source.lua"
	},
	"clearCharLastDamageEntity": {
		"body": "clearCharLastDamageEntity(${1:ped})",
		"description": "GTA SA\nclearCharLastDamageEntity(Ped ped)\n",
		"prefix": "clearCharLastDamageEntity",
		"scope": "source.lua"
	},
	"clearCarLastDamageEntity": {
		"body": "clearCarLastDamageEntity(${1:car})",
		"description": "GTA SA\nclearCarLastDamageEntity(Vehicle car)\n",
		"prefix": "clearCarLastDamageEntity",
		"scope": "source.lua"
	},
	"freezeObjectPosition": {
		"body": "freezeObjectPosition(${1:object},${2:freeze})",
		"description": "GTA SA\nfreezeObjectPosition(Object object, bool freeze)\n",
		"prefix": "freezeObjectPosition",
		"scope": "source.lua"
	},
	"removeWeaponFromChar": {
		"body": "removeWeaponFromChar(${1:ped},${2:weapon})",
		"description": "GTA SA\nremoveWeaponFromChar(Ped ped, int weapon)\n",
		"prefix": "removeWeaponFromChar",
		"scope": "source.lua"
	},
	"makePlayerFireProof": {
		"body": "makePlayerFireProof(${1:player},${2:fireproof})",
		"description": "GTA SA\nmakePlayerFireProof(Player player, bool fireproof)\n",
		"prefix": "makePlayerFireProof",
		"scope": "source.lua"
	},
	"increasePlayerMaxHealth": {
		"body": "increasePlayerMaxHealth(${1:player},${2:increase})",
		"description": "GTA SA\nincreasePlayerMaxHealth(Player player, int increase)\n",
		"prefix": "increasePlayerMaxHealth",
		"scope": "source.lua"
	},
	"increasePlayerMaxArmour": {
		"body": "increasePlayerMaxArmour(${1:player},${2:increase})",
		"description": "GTA SA\nincreasePlayerMaxArmour(Player player, int increase)\n",
		"prefix": "increasePlayerMaxArmour",
		"scope": "source.lua"
	},
	"createRandomCharAsDriver": {
		"body": "createRandomCharAsDriver(${1:car})",
		"description": "GTA SA\nPed ped = createRandomCharAsDriver(Vehicle car)\n",
		"prefix": "createRandomCharAsDriver",
		"scope": "source.lua"
	},
	"createRandomCharAsPassenger": {
		"body": "createRandomCharAsPassenger(${1:car},${2:seat})",
		"description": "GTA SA\nPed ped = createRandomCharAsPassenger(Vehicle car, int seat)\n",
		"prefix": "createRandomCharAsPassenger",
		"scope": "source.lua"
	},
	"ensurePlayerHasDriveByWeapon": {
		"body": "ensurePlayerHasDriveByWeapon(${1:player},${2:ammo})",
		"description": "GTA SA\nensurePlayerHasDriveByWeapon(Player player, int ammo)\n",
		"prefix": "ensurePlayerHasDriveByWeapon",
		"scope": "source.lua"
	},
	"makeHeliComeCrashingDown": {
		"body": "makeHeliComeCrashingDown(${1:heli})",
		"description": "GTA SA\nmakeHeliComeCrashingDown(Vehicle heli)\n",
		"prefix": "makeHeliComeCrashingDown",
		"scope": "source.lua"
	},
	"addExplosionNoSound": {
		"body": "addExplosionNoSound(${1:pX},${2:pY},${3:pZ},${4:type})",
		"description": "GTA SA\naddExplosionNoSound(float pX, float pY, float pZ, int type)\n",
		"prefix": "addExplosionNoSound",
		"scope": "source.lua"
	},
	"linkObjectToInterior": {
		"body": "linkObjectToInterior(${1:object},${2:interior})",
		"description": "GTA SA\nlinkObjectToInterior(Object object, int interior)\n",
		"prefix": "linkObjectToInterior",
		"scope": "source.lua"
	},
	"setCharNeverTargetted": {
		"body": "setCharNeverTargetted(${1:ped},${2:untargetable})",
		"description": "GTA SA\nsetCharNeverTargetted(Ped ped, bool untargetable)\n",
		"prefix": "setCharNeverTargetted",
		"scope": "source.lua"
	},
	"wasCutsceneSkipped": {
		"body": "wasCutsceneSkipped()",
		"description": "GTA SA\nbool result = wasCutsceneSkipped()\n",
		"prefix": "wasCutsceneSkipped",
		"scope": "source.lua"
	},
	"isCharInAnyPoliceVehicle": {
		"body": "isCharInAnyPoliceVehicle(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyPoliceVehicle(Ped ped)\n",
		"prefix": "isCharInAnyPoliceVehicle",
		"scope": "source.lua"
	},
	"doesCharExist": {
		"body": "doesCharExist(${1:ped})",
		"description": "GTA SA\nbool result = doesCharExist(Ped ped)\n",
		"prefix": "doesCharExist",
		"scope": "source.lua"
	},
	"doesVehicleExist": {
		"body": "doesVehicleExist(${1:car})",
		"description": "GTA SA\nbool result = doesVehicleExist(Vehicle car)\n",
		"prefix": "doesVehicleExist",
		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForContactPoint": {
		"body": "addShortRangeSpriteBlipForContactPoint(${1:pX},${2:pY},${3:pZ},${4:icon})",
		"description": "GTA SA\nMarker blip = addShortRangeSpriteBlipForContactPoint(float pX, float pY, float pZ, int icon)\n",
		"prefix": "addShortRangeSpriteBlipForContactPoint",
		"scope": "source.lua"
	},
	"setAllTaxisHaveNitro": {
		"body": "setAllTaxisHaveNitro(${1:toggle})",
		"description": "GTA SA\nsetAllTaxisHaveNitro(bool toggle)\n",
		"prefix": "setAllTaxisHaveNitro",
		"scope": "source.lua"
	},
	"freezeCarPositionAndDontLoadCollision": {
		"body": "freezeCarPositionAndDontLoadCollision(${1:car},${2:keep})",
		"description": "GTA SA\nfreezeCarPositionAndDontLoadCollision(Vehicle car, bool keep)\n",
		"prefix": "freezeCarPositionAndDontLoadCollision",
		"scope": "source.lua"
	},
	"freezeCharPositionAndDontLoadCollision": {
		"body": "freezeCharPositionAndDontLoadCollision(${1:ped},${2:keep})",
		"description": "GTA SA\nfreezeCharPositionAndDontLoadCollision(Ped ped, bool keep)\n",
		"prefix": "freezeCharPositionAndDontLoadCollision",
		"scope": "source.lua"
	},
	"setPlayerIsInStadium": {
		"body": "setPlayerIsInStadium(${1:set})",
		"description": "GTA SA\nsetPlayerIsInStadium(bool set)\n",
		"prefix": "setPlayerIsInStadium",
		"scope": "source.lua"
	},
	"displayRadar": {
		"body": "displayRadar(${1:enable})",
		"description": "GTA SA\ndisplayRadar(bool enable)\n",
		"prefix": "displayRadar",
		"scope": "source.lua"
	},
	"registerBestPosition": {
		"body": "registerBestPosition(${1:stat},${2:float})",
		"description": "GTA SA\nregisterBestPosition(int stat, float float)\n",
		"prefix": "registerBestPosition",
		"scope": "source.lua"
	},
	"isPlayerInInfoZone": {
		"body": "isPlayerInInfoZone(${1:player},${2:zone})",
		"description": "GTA SA\nbool result = isPlayerInInfoZone(Player player, GxtString zone)\n",
		"prefix": "isPlayerInInfoZone",
		"scope": "source.lua"
	},
	"setLoadCollisionForCarFlag": {
		"body": "setLoadCollisionForCarFlag(${1:car},${2:enable})",
		"description": "GTA SA\nsetLoadCollisionForCarFlag(Vehicle car, bool enable)\n",
		"prefix": "setLoadCollisionForCarFlag",
		"scope": "source.lua"
	},
	"setLoadCollisionForCharFlag": {
		"body": "setLoadCollisionForCharFlag(${1:ped},${2:enable})",
		"description": "GTA SA\nsetLoadCollisionForCharFlag(Ped ped, bool enable)\n",
		"prefix": "setLoadCollisionForCharFlag",
		"scope": "source.lua"
	},
	"addBigGunFlash": {
		"body": "addBigGunFlash(${1:fromX},${2:fromY},${3:fromZ},${4:toX},${5:toY},${6:toZ})",
		"description": "GTA SA\naddBigGunFlash(float fromX, float fromY, float fromZ, float toX, float toY, float toZ)\n",
		"prefix": "addBigGunFlash",
		"scope": "source.lua"
	},
	"getProgressPercentage": {
		"body": "getProgressPercentage()",
		"description": "GTA SA\nfloat progress = getProgressPercentage()\n",
		"prefix": "getProgressPercentage",
		"scope": "source.lua"
	},
	"setVehicleToFadeIn": {
		"body": "setVehicleToFadeIn(${1:car},${2:flag})",
		"description": "GTA SA\nsetVehicleToFadeIn(Vehicle car, int flag)\n",
		"prefix": "setVehicleToFadeIn",
		"scope": "source.lua"
	},
	"registerOddjobMissionPassed": {
		"body": "registerOddjobMissionPassed()",
		"description": "GTA SA\nregisterOddjobMissionPassed()\n",
		"prefix": "registerOddjobMissionPassed",
		"scope": "source.lua"
	},
	"isPlayerInShortcutTaxi": {
		"body": "isPlayerInShortcutTaxi(${1:player})",
		"description": "GTA SA\nbool result = isPlayerInShortcutTaxi(Player player)\n",
		"prefix": "isPlayerInShortcutTaxi",
		"scope": "source.lua"
	},
	"isCharDucking": {
		"body": "isCharDucking(${1:ped})",
		"description": "GTA SA\nbool result = isCharDucking(Ped ped)\n",
		"prefix": "isCharDucking",
		"scope": "source.lua"
	},
	"setOnscreenCounterFlashWhenFirstDisplayed": {
		"body": "setOnscreenCounterFlashWhenFirstDisplayed(${1:text},${2:flashing})",
		"description": "GTA SA\nsetOnscreenCounterFlashWhenFirstDisplayed(VarId text, bool flashing)\n",
		"prefix": "setOnscreenCounterFlashWhenFirstDisplayed",
		"scope": "source.lua"
	},
	"shuffleCardDecks": {
		"body": "shuffleCardDecks(${1:shuffle})",
		"description": "GTA SA\nshuffleCardDecks(bool shuffle)\n",
		"prefix": "shuffleCardDecks",
		"scope": "source.lua"
	},
	"fetchNextCard": {
		"body": "fetchNextCard()",
		"description": "GTA SA\nint card = fetchNextCard()\n",
		"prefix": "fetchNextCard",
		"scope": "source.lua"
	},
	"getObjectVelocity": {
		"body": "getObjectVelocity(${1:object})",
		"description": "GTA SA\nfloat vecX, float vecY, float vecZ = getObjectVelocity(Object object)\n",
		"prefix": "getObjectVelocity",
		"scope": "source.lua"
	},
	"isDebugCameraOn": {
		"body": "isDebugCameraOn()",
		"description": "GTA SA\nbool result = isDebugCameraOn()\n",
		"prefix": "isDebugCameraOn",
		"scope": "source.lua"
	},
	"addToObjectRotationVelocity": {
		"body": "addToObjectRotationVelocity(${1:object},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\naddToObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "addToObjectRotationVelocity",
		"scope": "source.lua"
	},
	"setObjectRotationVelocity": {
		"body": "setObjectRotationVelocity(${1:object},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\nsetObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "setObjectRotationVelocity",
		"scope": "source.lua"
	},
	"isObjectStatic": {
		"body": "isObjectStatic(${1:object})",
		"description": "GTA SA\nbool result = isObjectStatic(Object object)\n",
		"prefix": "isObjectStatic",
		"scope": "source.lua"
	},
	"getAngleBetween2dVectors": {
		"body": "getAngleBetween2dVectors(${1:vecX},${2:vecY},${3:vecX},${4:vecY})",
		"description": "GTA SA\nfloat angle = getAngleBetween2dVectors(float vecX, float vecY, float vecX, float vecY)\n",
		"prefix": "getAngleBetween2dVectors",
		"scope": "source.lua"
	},
	"do2dRectanglesCollide": {
		"body": "do2dRectanglesCollide(${1:areaX},${2:areaY},${3:scaleX},${4:scaleY},${5:overlapareaX},${6:overlapareaY},${7:overlapscaleX},${8:overlapscaleY})",
		"description": "GTA SA\nbool result = do2dRectanglesCollide(float areaX, float areaY, float scaleX, float scaleY, float overlapareaX, float overlapareaY, float overlapscaleX, float overlapscaleY)\n",
		"prefix": "do2dRectanglesCollide",
		"scope": "source.lua"
	},
	"getObjectRotationVelocity": {
		"body": "getObjectRotationVelocity(${1:object})",
		"description": "GTA SA\nfloat axisX, float axisY, float axisZ = getObjectRotationVelocity(Object object)\n",
		"prefix": "getObjectRotationVelocity",
		"scope": "source.lua"
	},
	"addVelocityRelativeToObjectVelocity": {
		"body": "addVelocityRelativeToObjectVelocity(${1:object},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\naddVelocityRelativeToObjectVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "addVelocityRelativeToObjectVelocity",
		"scope": "source.lua"
	},
	"getObjectSpeed": {
		"body": "getObjectSpeed(${1:object})",
		"description": "GTA SA\nfloat speed = getObjectSpeed(Object object)\n",
		"prefix": "getObjectSpeed",
		"scope": "source.lua"
	},
	"get2dLinesIntersectPoint": {
		"body": "get2dLinesIntersectPoint(${1:l1x1},${2:l1y1},${3:l1x2},${4:l1y2},${5:l2x1},${6:l2y1},${7:l2x2},${8:l2y2})",
		"description": "GTA SA\nbool result, float X, float Y = get2dLinesIntersectPoint(float l1x1, float l1y1, float l1x2, float l1y2, float l2x1, float l2y1, float l2x2, float l2y2)\n",
		"prefix": "get2dLinesIntersectPoint",
		"scope": "source.lua"
	},
	"taskPause": {
		"body": "taskPause(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskPause(Ped ped, int timeMS)\n",
		"prefix": "taskPause",
		"scope": "source.lua"
	},
	"taskStandStill": {
		"body": "taskStandStill(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskStandStill(Ped ped, int timeMS)\n",
		"prefix": "taskStandStill",
		"scope": "source.lua"
	},
	"taskFallAndGetUp": {
		"body": "taskFallAndGetUp(${1:ped},${2:int2},${3:time})",
		"description": "GTA SA\ntaskFallAndGetUp(Ped ped, bool int2, int time)\n",
		"prefix": "taskFallAndGetUp",
		"scope": "source.lua"
	},
	"taskJump": {
		"body": "taskJump(${1:ped},${2:jump})",
		"description": "GTA SA\ntaskJump(Ped ped, bool jump)\n",
		"prefix": "taskJump",
		"scope": "source.lua"
	},
	"taskTired": {
		"body": "taskTired(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskTired(Ped ped, int timeMS)\n",
		"prefix": "taskTired",
		"scope": "source.lua"
	},
	"taskDie": {
		"body": "taskDie(${1:ped})",
		"description": "GTA SA\ntaskDie(Ped ped)\n",
		"prefix": "taskDie",
		"scope": "source.lua"
	},
	"taskLookAtChar": {
		"body": "taskLookAtChar(${1:ped},${2:lookAt},${3:timeMS})",
		"description": "GTA SA\ntaskLookAtChar(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtChar",
		"scope": "source.lua"
	},
	"taskLookAtVehicle": {
		"body": "taskLookAtVehicle(${1:ped},${2:lookAt},${3:timeMS})",
		"description": "GTA SA\ntaskLookAtVehicle(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtVehicle",
		"scope": "source.lua"
	},
	"taskSay": {
		"body": "taskSay(${1:ped},${2:audio})",
		"description": "GTA SA\ntaskSay(Ped ped, int audio)\n",
		"prefix": "taskSay",
		"scope": "source.lua"
	},
	"taskShakeFist": {
		"body": "taskShakeFist(${1:ped})",
		"description": "GTA SA\ntaskShakeFist(Ped ped)\n",
		"prefix": "taskShakeFist",
		"scope": "source.lua"
	},
	"taskCower": {
		"body": "taskCower(${1:ped})",
		"description": "GTA SA\ntaskCower(Ped ped)\n",
		"prefix": "taskCower",
		"scope": "source.lua"
	},
	"taskHandsUp": {
		"body": "taskHandsUp(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskHandsUp(Ped ped, int timeMS)\n",
		"prefix": "taskHandsUp",
		"scope": "source.lua"
	},
	"taskDuck": {
		"body": "taskDuck(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskDuck(Ped ped, int timeMS)\n",
		"prefix": "taskDuck",
		"scope": "source.lua"
	},
	"taskUseAtm": {
		"body": "taskUseAtm(${1:ped})",
		"description": "GTA SA\ntaskUseAtm(Ped ped)\n",
		"prefix": "taskUseAtm",
		"scope": "source.lua"
	},
	"taskScratchHead": {
		"body": "taskScratchHead(${1:ped})",
		"description": "GTA SA\ntaskScratchHead(Ped ped)\n",
		"prefix": "taskScratchHead",
		"scope": "source.lua"
	},
	"taskLookAbout": {
		"body": "taskLookAbout(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskLookAbout(Ped ped, int timeMS)\n",
		"prefix": "taskLookAbout",
		"scope": "source.lua"
	},
	"taskEnterCarAsPassenger": {
		"body": "taskEnterCarAsPassenger(${1:ped},${2:car},${3:time},${4:passengerSeat})",
		"description": "GTA SA\ntaskEnterCarAsPassenger(Ped ped, Vehicle car, int time, int passengerSeat)\n",
		"prefix": "taskEnterCarAsPassenger",
		"scope": "source.lua"
	},
	"taskEnterCarAsDriver": {
		"body": "taskEnterCarAsDriver(${1:ped},${2:car},${3:timeMS})",
		"description": "GTA SA\ntaskEnterCarAsDriver(Ped ped, Vehicle car, int timeMS)\n",
		"prefix": "taskEnterCarAsDriver",
		"scope": "source.lua"
	},
	"taskLeaveCar": {
		"body": "taskLeaveCar(${1:ped},${2:car})",
		"description": "GTA SA\ntaskLeaveCar(Ped ped, Vehicle car)\n",
		"prefix": "taskLeaveCar",
		"scope": "source.lua"
	},
	"taskLeaveCarAndFlee": {
		"body": "taskLeaveCarAndFlee(${1:ped},${2:car},${3:X},${4:Y},${5:Z})",
		"description": "GTA SA\ntaskLeaveCarAndFlee(Ped ped, Vehicle car, float X, float Y, float Z)\n",
		"prefix": "taskLeaveCarAndFlee",
		"scope": "source.lua"
	},
	"taskCarDriveToCoord": {
		"body": "taskCarDriveToCoord(${1:ped},${2:car},${3:toX},${4:toY},${5:toZ},${6:speed},${7:int7},${8:model},${9:int9})",
		"description": "GTA SA\ntaskCarDriveToCoord(Ped ped, Vehicle car, float toX, float toY, float toZ, float speed, int int7, int model, int int9)\n",
		"prefix": "taskCarDriveToCoord",
		"scope": "source.lua"
	},
	"taskCarDriveWander": {
		"body": "taskCarDriveWander(${1:ped},${2:hijackCar},${3:searchRadius},${4:trafficBehavior})",
		"description": "GTA SA\ntaskCarDriveWander(Ped ped, Vehicle hijackCar, float searchRadius, int trafficBehavior)\n",
		"prefix": "taskCarDriveWander",
		"scope": "source.lua"
	},
	"taskGoStraightToCoord": {
		"body": "taskGoStraightToCoord(${1:ped},${2:toX},${3:toY},${4:toZ},${5:mode},${6:time})",
		"description": "GTA SA\ntaskGoStraightToCoord(Ped ped, float toX, float toY, float toZ, int mode, int time)\n",
		"prefix": "taskGoStraightToCoord",
		"scope": "source.lua"
	},
	"taskAchieveHeading": {
		"body": "taskAchieveHeading(${1:ped},${2:angle})",
		"description": "GTA SA\ntaskAchieveHeading(Ped ped, float angle)\n",
		"prefix": "taskAchieveHeading",
		"scope": "source.lua"
	},
	"flushRoute": {
		"body": "flushRoute()",
		"description": "GTA SA\nflushRoute()\n",
		"prefix": "flushRoute",
		"scope": "source.lua"
	},
	"extendRoute": {
		"body": "extendRoute(${1:pointX},${2:pointY},${3:pointZ})",
		"description": "GTA SA\nextendRoute(float pointX, float pointY, float pointZ)\n",
		"prefix": "extendRoute",
		"scope": "source.lua"
	},
	"taskFollowPointRoute": {
		"body": "taskFollowPointRoute(${1:ped},${2:flags1},${3:flags2})",
		"description": "GTA SA\ntaskFollowPointRoute(Ped ped, int flags1, int flags2)\n",
		"prefix": "taskFollowPointRoute",
		"scope": "source.lua"
	},
	"taskGotoChar": {
		"body": "taskGotoChar(${1:ped},${2:toActor},${3:timelimit},${4:stopWithinRadius})",
		"description": "GTA SA\ntaskGotoChar(Ped ped, Ped toActor, int timelimit, float stopWithinRadius)\n",
		"prefix": "taskGotoChar",
		"scope": "source.lua"
	},
	"taskFleePoint": {
		"body": "taskFleePoint(${1:ped},${2:fromX},${3:fromY},${4:fromZ},${5:awayRadius},${6:timelimit})",
		"description": "GTA SA\ntaskFleePoint(Ped ped, float fromX, float fromY, float fromZ, float awayRadius, int timelimit)\n",
		"prefix": "taskFleePoint",
		"scope": "source.lua"
	},
	"taskFleeChar": {
		"body": "taskFleeChar(${1:ped},${2:fromActor},${3:radius},${4:timelimit})",
		"description": "GTA SA\ntaskFleeChar(Ped ped, Ped fromActor, float radius, int timelimit)\n",
		"prefix": "taskFleeChar",
		"scope": "source.lua"
	},
	"taskSmartFleePoint": {
		"body": "taskSmartFleePoint(${1:ped},${2:fromX},${3:fromY},${4:fromZ},${5:stopAtRadius},${6:timelimit})",
		"description": "GTA SA\ntaskSmartFleePoint(Ped ped, float fromX, float fromY, float fromZ, float stopAtRadius, int timelimit)\n",
		"prefix": "taskSmartFleePoint",
		"scope": "source.lua"
	},
	"taskSmartFleeChar": {
		"body": "taskSmartFleeChar(${1:ped},${2:fromActor},${3:originRadius},${4:timelimit})",
		"description": "GTA SA\ntaskSmartFleeChar(Ped ped, Ped fromActor, float originRadius, int timelimit)\n",
		"prefix": "taskSmartFleeChar",
		"scope": "source.lua"
	},
	"taskWanderStandard": {
		"body": "taskWanderStandard(${1:ped})",
		"description": "GTA SA\ntaskWanderStandard(Ped ped)\n",
		"prefix": "taskWanderStandard",
		"scope": "source.lua"
	},
	"taskKillCharOnFoot": {
		"body": "taskKillCharOnFoot(${1:ped},${2:killActor})",
		"description": "GTA SA\ntaskKillCharOnFoot(Ped ped, Ped killActor)\n",
		"prefix": "taskKillCharOnFoot",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCar": {
		"body": "startPlaybackRecordedCar(${1:car},${2:path})",
		"description": "GTA SA\nstartPlaybackRecordedCar(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"stopPlaybackRecordedCar": {
		"body": "stopPlaybackRecordedCar(${1:car})",
		"description": "GTA SA\nstopPlaybackRecordedCar(Vehicle car)\n",
		"prefix": "stopPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"pausePlaybackRecordedCar": {
		"body": "pausePlaybackRecordedCar(${1:car})",
		"description": "GTA SA\npausePlaybackRecordedCar(Vehicle car)\n",
		"prefix": "pausePlaybackRecordedCar",
		"scope": "source.lua"
	},
	"unpausePlaybackRecordedCar": {
		"body": "unpausePlaybackRecordedCar(${1:car})",
		"description": "GTA SA\nunpausePlaybackRecordedCar(Vehicle car)\n",
		"prefix": "unpausePlaybackRecordedCar",
		"scope": "source.lua"
	},
	"setCarEscortCarLeft": {
		"body": "setCarEscortCarLeft(${1:car},${2:followCar})",
		"description": "GTA SA\nsetCarEscortCarLeft(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarLeft",
		"scope": "source.lua"
	},
	"setCarEscortCarRight": {
		"body": "setCarEscortCarRight(${1:car},${2:followCar})",
		"description": "GTA SA\nsetCarEscortCarRight(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarRight",
		"scope": "source.lua"
	},
	"setCarEscortCarRear": {
		"body": "setCarEscortCarRear(${1:car},${2:followCar})",
		"description": "GTA SA\nsetCarEscortCarRear(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarRear",
		"scope": "source.lua"
	},
	"setCarEscortCarFront": {
		"body": "setCarEscortCarFront(${1:car},${2:followCar})",
		"description": "GTA SA\nsetCarEscortCarFront(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarFront",
		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoord": {
		"body": "taskFollowPathNodesToCoord(${1:ped},${2:pathX},${3:pathY},${4:pathZ},${5:mode},${6:time})",
		"description": "GTA SA\ntaskFollowPathNodesToCoord(Ped ped, float pathX, float pathY, float pathZ, int mode, int time)\n",
		"prefix": "taskFollowPathNodesToCoord",
		"scope": "source.lua"
	},
	"isCharInAngledArea2d": {
		"body": "isCharInAngledArea2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:angle},${7:sphere})",
		"description": "GTA SA\nbool result = isCharInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledArea2d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot2d": {
		"body": "isCharInAngledAreaOnFoot2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:angle},${7:sphere})",
		"description": "GTA SA\nbool result = isCharInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar2d": {
		"body": "isCharInAngledAreaInCar2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:angle},${7:sphere})",
		"description": "GTA SA\nbool result = isCharInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea2d": {
		"body": "isCharStoppedInAngledArea2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:height},${7:flag})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)\n",
		"prefix": "isCharStoppedInAngledArea2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot2d": {
		"body": "isCharStoppedInAngledAreaOnFoot2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:angle},${7:sphere})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharStoppedInAngledAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar2d": {
		"body": "isCharStoppedInAngledAreaInCar2d(${1:ped},${2:x1},${3:y1},${4:x2},${5:y2},${6:height},${7:flag})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharInAngledArea3d": {
		"body": "isCharInAngledArea3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:angle},${9:sphere})",
		"description": "GTA SA\nbool result = isCharInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledArea3d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot3d": {
		"body": "isCharInAngledAreaOnFoot3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:angle},${9:sphere})",
		"description": "GTA SA\nbool result = isCharInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar3d": {
		"body": "isCharInAngledAreaInCar3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:depth},${9:flag})",
		"description": "GTA SA\nbool result = isCharInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharInAngledAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea3d": {
		"body": "isCharStoppedInAngledArea3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:depth},${9:flag})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledArea3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot3d": {
		"body": "isCharStoppedInAngledAreaOnFoot3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:depth},${9:flag})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar3d": {
		"body": "isCharStoppedInAngledAreaInCar3d(${1:ped},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:depth},${9:flag})",
		"description": "GTA SA\nbool result = isCharStoppedInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharInTaxi": {
		"body": "isCharInTaxi(${1:ped})",
		"description": "GTA SA\nbool result = isCharInTaxi(Ped ped)\n",
		"prefix": "isCharInTaxi",
		"scope": "source.lua"
	},
	"taskGoToCoordAnyMeans": {
		"body": "taskGoToCoordAnyMeans(${1:ped},${2:toX},${3:toY},${4:toZ},${5:mode},${6:useCar})",
		"description": "GTA SA\ntaskGoToCoordAnyMeans(Ped ped, float toX, float toY, float toZ, int mode, Vehicle useCar)\n",
		"prefix": "taskGoToCoordAnyMeans",
		"scope": "source.lua"
	},
	"getHeadingFromVector2d": {
		"body": "getHeadingFromVector2d(${1:pX},${2:pY})",
		"description": "GTA SA\nfloat zAngle = getHeadingFromVector2d(float pX, float pY)\n",
		"prefix": "getHeadingFromVector2d",
		"scope": "source.lua"
	},
	"taskPlayAnim": {
		"body": "taskPlayAnim(${1:ped},${2:animation},${3:IFP},${4:framedelta},${5:loop},${6:lockX},${7:lockY},${8:lockF},${9:time})",
		"description": "GTA SA\ntaskPlayAnim(Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnim",
		"scope": "source.lua"
	},
	"loadPathNodesInArea": {
		"body": "loadPathNodesInArea(${1:x1},${2:y1},${3:x2},${4:y2})",
		"description": "GTA SA\nloadPathNodesInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "loadPathNodesInArea",
		"scope": "source.lua"
	},
	"releasePathNodes": {
		"body": "releasePathNodes()",
		"description": "GTA SA\nreleasePathNodes()\n",
		"prefix": "releasePathNodes",
		"scope": "source.lua"
	},
	"loadCharDecisionMaker": {
		"body": "loadCharDecisionMaker(${1:type})",
		"description": "GTA SA\nint maker = loadCharDecisionMaker(int type)\n",
		"prefix": "loadCharDecisionMaker",
		"scope": "source.lua"
	},
	"setCharDecisionMaker": {
		"body": "setCharDecisionMaker(${1:ped},${2:maker})",
		"description": "GTA SA\nsetCharDecisionMaker(Ped ped, int maker)\n",
		"prefix": "setCharDecisionMaker",
		"scope": "source.lua"
	},
	"setTextDropshadow": {
		"body": "setTextDropshadow(${1:shadow},${2:r},${3:g},${4:b},${5:a})",
		"description": "GTA SA\nsetTextDropshadow(int shadow, int r, int g, int b, int a)\n",
		"prefix": "setTextDropshadow",
		"scope": "source.lua"
	},
	"isPlaybackGoingOnForCar": {
		"body": "isPlaybackGoingOnForCar(${1:car})",
		"description": "GTA SA\nbool result = isPlaybackGoingOnForCar(Vehicle car)\n",
		"prefix": "isPlaybackGoingOnForCar",
		"scope": "source.lua"
	},
	"setSenseRange": {
		"body": "setSenseRange(${1:ped},${2:accuracy})",
		"description": "GTA SA\nsetSenseRange(Ped ped, float accuracy)\n",
		"prefix": "setSenseRange",
		"scope": "source.lua"
	},
	"isCharPlayingAnim": {
		"body": "isCharPlayingAnim(${1:ped},${2:animation})",
		"description": "GTA SA\nbool result = isCharPlayingAnim(Ped ped, string animation)\n",
		"prefix": "isCharPlayingAnim",
		"scope": "source.lua"
	},
	"setCharAnimPlayingFlag": {
		"body": "setCharAnimPlayingFlag(${1:ped},${2:animation},${3:flag})",
		"description": "GTA SA\nsetCharAnimPlayingFlag(Ped ped, string animation, bool flag)\n",
		"prefix": "setCharAnimPlayingFlag",
		"scope": "source.lua"
	},
	"getCharAnimCurrentTime": {
		"body": "getCharAnimCurrentTime(${1:ped},${2:animation})",
		"description": "GTA SA\nfloat time = getCharAnimCurrentTime(Ped ped, string animation)\n",
		"prefix": "getCharAnimCurrentTime",
		"scope": "source.lua"
	},
	"setCharAnimCurrentTime": {
		"body": "setCharAnimCurrentTime(${1:ped},${2:animation},${3:time})",
		"description": "GTA SA\nsetCharAnimCurrentTime(Ped ped, string animation, float time)\n",
		"prefix": "setCharAnimCurrentTime",
		"scope": "source.lua"
	},
	"openSequenceTask": {
		"body": "openSequenceTask()",
		"description": "GTA SA\nint task = openSequenceTask()\n",
		"prefix": "openSequenceTask",
		"scope": "source.lua"
	},
	"closeSequenceTask": {
		"body": "closeSequenceTask(${1:task})",
		"description": "GTA SA\ncloseSequenceTask(int task)\n",
		"prefix": "closeSequenceTask",
		"scope": "source.lua"
	},
	"performSequenceTask": {
		"body": "performSequenceTask(${1:ped},${2:task})",
		"description": "GTA SA\nperformSequenceTask(Ped ped, int task)\n",
		"prefix": "performSequenceTask",
		"scope": "source.lua"
	},
	"setCharCollision": {
		"body": "setCharCollision(${1:ped},${2:enable})",
		"description": "GTA SA\nsetCharCollision(Ped ped, bool enable)\n",
		"prefix": "setCharCollision",
		"scope": "source.lua"
	},
	"getCharAnimTotalTime": {
		"body": "getCharAnimTotalTime(${1:ped},${2:animation})",
		"description": "GTA SA\nfloat totalTime = getCharAnimTotalTime(Ped ped, string animation)\n",
		"prefix": "getCharAnimTotalTime",
		"scope": "source.lua"
	},
	"clearSequenceTask": {
		"body": "clearSequenceTask(${1:task})",
		"description": "GTA SA\nclearSequenceTask(int task)\n",
		"prefix": "clearSequenceTask",
		"scope": "source.lua"
	},
	"addAttractor": {
		"body": "addAttractor(${1:originX},${2:originY},${3:originZ},${4:zAngle},${5:unknownAngle},${6:taskSequence})",
		"description": "GTA SA\nint handle = addAttractor(float originX, float originY, float originZ, float zAngle, float unknownAngle, int taskSequence)\n",
		"prefix": "addAttractor",
		"scope": "source.lua"
	},
	"clearAttractor": {
		"body": "clearAttractor(${1:handle})",
		"description": "GTA SA\nclearAttractor(int handle)\n",
		"prefix": "clearAttractor",
		"scope": "source.lua"
	},
	"createCharAtAttractor": {
		"body": "createCharAtAttractor(${1:pedtype},${2:modelId},${3:ASOrigin},${4:task})",
		"description": "GTA SA\nPed ped = createCharAtAttractor(int pedtype, Model modelId, int ASOrigin, int task)\n",
		"prefix": "createCharAtAttractor",
		"scope": "source.lua"
	},
	"taskLeaveCarImmediately": {
		"body": "taskLeaveCarImmediately(${1:ped},${2:car})",
		"description": "GTA SA\ntaskLeaveCarImmediately(Ped ped, Vehicle car)\n",
		"prefix": "taskLeaveCarImmediately",
		"scope": "source.lua"
	},
	"incrementIntStat": {
		"body": "incrementIntStat(${1:stat},${2:add})",
		"description": "GTA SA\nincrementIntStat(int stat, int add)\n",
		"prefix": "incrementIntStat",
		"scope": "source.lua"
	},
	"incrementFloatStat": {
		"body": "incrementFloatStat(${1:stat},${2:add})",
		"description": "GTA SA\nincrementFloatStat(int stat, float add)\n",
		"prefix": "incrementFloatStat",
		"scope": "source.lua"
	},
	"decrementIntStat": {
		"body": "decrementIntStat(${1:stat},${2:int})",
		"description": "GTA SA\ndecrementIntStat(int stat, int int)\n",
		"prefix": "decrementIntStat",
		"scope": "source.lua"
	},
	"decrementFloatStat": {
		"body": "decrementFloatStat(${1:stat},${2:float})",
		"description": "GTA SA\ndecrementFloatStat(int stat, float float)\n",
		"prefix": "decrementFloatStat",
		"scope": "source.lua"
	},
	"registerIntStat": {
		"body": "registerIntStat(${1:stat},${2:int})",
		"description": "GTA SA\nregisterIntStat(int stat, int int)\n",
		"prefix": "registerIntStat",
		"scope": "source.lua"
	},
	"registerFloatStat": {
		"body": "registerFloatStat(${1:stat},${2:value})",
		"description": "GTA SA\nregisterFloatStat(int stat, float value)\n",
		"prefix": "registerFloatStat",
		"scope": "source.lua"
	},
	"setIntStat": {
		"body": "setIntStat(${1:stat},${2:int})",
		"description": "GTA SA\nsetIntStat(int stat, int int)\n",
		"prefix": "setIntStat",
		"scope": "source.lua"
	},
	"setFloatStat": {
		"body": "setFloatStat(${1:stat},${2:float})",
		"description": "GTA SA\nsetFloatStat(int stat, float float)\n",
		"prefix": "setFloatStat",
		"scope": "source.lua"
	},
	"getScriptTaskStatus": {
		"body": "getScriptTaskStatus(${1:ped},${2:task})",
		"description": "GTA SA\nint status = getScriptTaskStatus(Ped ped, int task)\n",
		"prefix": "getScriptTaskStatus",
		"scope": "source.lua"
	},
	"createGroup": {
		"body": "createGroup(${1:type})",
		"description": "GTA SA\nint group = createGroup(int type)\n",
		"prefix": "createGroup",
		"scope": "source.lua"
	},
	"setGroupLeader": {
		"body": "setGroupLeader(${1:group},${2:ped})",
		"description": "GTA SA\nsetGroupLeader(int group, Ped ped)\n",
		"prefix": "setGroupLeader",
		"scope": "source.lua"
	},
	"setGroupMember": {
		"body": "setGroupMember(${1:group},${2:ped})",
		"description": "GTA SA\nsetGroupMember(int group, Ped ped)\n",
		"prefix": "setGroupMember",
		"scope": "source.lua"
	},
	"removeGroup": {
		"body": "removeGroup(${1:group})",
		"description": "GTA SA\nremoveGroup(int group)\n",
		"prefix": "removeGroup",
		"scope": "source.lua"
	},
	"taskLeaveAnyCar": {
		"body": "taskLeaveAnyCar(${1:ped})",
		"description": "GTA SA\ntaskLeaveAnyCar(Ped ped)\n",
		"prefix": "taskLeaveAnyCar",
		"scope": "source.lua"
	},
	"taskKillCharOnFootWhileDucking": {
		"body": "taskKillCharOnFootWhileDucking(${1:ped},${2:weapon},${3:flags},${4:time},${5:chance})",
		"description": "GTA SA\ntaskKillCharOnFootWhileDucking(Ped ped, int weapon, int flags, int time, int chance)\n",
		"prefix": "taskKillCharOnFootWhileDucking",
		"scope": "source.lua"
	},
	"taskAimGunAtChar": {
		"body": "taskAimGunAtChar(${1:ped},${2:aimAt},${3:timeMS})",
		"description": "GTA SA\ntaskAimGunAtChar(Ped ped, int aimAt, int timeMS)\n",
		"prefix": "taskAimGunAtChar",
		"scope": "source.lua"
	},
	"taskGoToCoordWhileShooting": {
		"body": "taskGoToCoordWhileShooting(${1:ped},${2:toX},${3:toY},${4:toZ},${5:mode},${6:turnRadius},${7:stopRadius},${8:lookAtActor})",
		"description": "GTA SA\ntaskGoToCoordWhileShooting(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, int lookAtActor)\n",
		"prefix": "taskGoToCoordWhileShooting",
		"scope": "source.lua"
	},
	"taskStayInSamePlace": {
		"body": "taskStayInSamePlace(${1:ped},${2:stay})",
		"description": "GTA SA\ntaskStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "taskStayInSamePlace",
		"scope": "source.lua"
	},
	"taskTurnCharToFaceChar": {
		"body": "taskTurnCharToFaceChar(${1:ped},${2:rotateTo})",
		"description": "GTA SA\ntaskTurnCharToFaceChar(Ped ped, int rotateTo)\n",
		"prefix": "taskTurnCharToFaceChar",
		"scope": "source.lua"
	},
	"isCharAtScriptedAttractor": {
		"body": "isCharAtScriptedAttractor(${1:ped},${2:origin})",
		"description": "GTA SA\nbool result = isCharAtScriptedAttractor(Ped ped, int origin)\n",
		"prefix": "isCharAtScriptedAttractor",
		"scope": "source.lua"
	},
	"setSequenceToRepeat": {
		"body": "setSequenceToRepeat(${1:pack},${2:loop})",
		"description": "GTA SA\nsetSequenceToRepeat(int pack, bool loop)\n",
		"prefix": "setSequenceToRepeat",
		"scope": "source.lua"
	},
	"getSequenceProgress": {
		"body": "getSequenceProgress(${1:ped})",
		"description": "GTA SA\nint progess = getSequenceProgress(Ped ped)\n",
		"prefix": "getSequenceProgress",
		"scope": "source.lua"
	},
	"clearLookAt": {
		"body": "clearLookAt(${1:ped})",
		"description": "GTA SA\nclearLookAt(Ped ped)\n",
		"prefix": "clearLookAt",
		"scope": "source.lua"
	},
	"setFollowNodeThresholdDistance": {
		"body": "setFollowNodeThresholdDistance(${1:ped},${2:dist})",
		"description": "GTA SA\nsetFollowNodeThresholdDistance(Ped ped, float dist)\n",
		"prefix": "setFollowNodeThresholdDistance",
		"scope": "source.lua"
	},
	"createFxSystem": {
		"body": "createFxSystem(${1:particle},${2:pX},${3:pY},${4:pZ},${5:type})",
		"description": "GTA SA\nParticle particle = createFxSystem(string particle, float pX, float pY, float pZ, int type)\n",
		"prefix": "createFxSystem",
		"scope": "source.lua"
	},
	"playFxSystem": {
		"body": "playFxSystem(${1:particle})",
		"description": "GTA SA\nplayFxSystem(Particle particle)\n",
		"prefix": "playFxSystem",
		"scope": "source.lua"
	},
	"stopFxSystem": {
		"body": "stopFxSystem(${1:particle})",
		"description": "GTA SA\nstopFxSystem(Particle particle)\n",
		"prefix": "stopFxSystem",
		"scope": "source.lua"
	},
	"playAndKillFxSystem": {
		"body": "playAndKillFxSystem(${1:particle})",
		"description": "GTA SA\nplayAndKillFxSystem(Particle particle)\n",
		"prefix": "playAndKillFxSystem",
		"scope": "source.lua"
	},
	"killFxSystem": {
		"body": "killFxSystem(${1:particle})",
		"description": "GTA SA\nkillFxSystem(Particle particle)\n",
		"prefix": "killFxSystem",
		"scope": "source.lua"
	},
	"getIntStat": {
		"body": "getIntStat(${1:stat})",
		"description": "GTA SA\nint stat = getIntStat(int stat)\n",
		"prefix": "getIntStat",
		"scope": "source.lua"
	},
	"getFloatStat": {
		"body": "getFloatStat(${1:stat})",
		"description": "GTA SA\nfloat stat = getFloatStat(int stat)\n",
		"prefix": "getFloatStat",
		"scope": "source.lua"
	},
	"setObjectRenderScorched": {
		"body": "setObjectRenderScorched(${1:object},${2:fireproof})",
		"description": "GTA SA\nsetObjectRenderScorched(Object object, bool fireproof)\n",
		"prefix": "setObjectRenderScorched",
		"scope": "source.lua"
	},
	"taskLookAtObject": {
		"body": "taskLookAtObject(${1:ped},${2:lookAt},${3:timeMS})",
		"description": "GTA SA\ntaskLookAtObject(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtObject",
		"scope": "source.lua"
	},
	"limitAngle": {
		"body": "limitAngle(${1:angle})",
		"description": "GTA SA\nfloat float = limitAngle(float angle)\n",
		"prefix": "limitAngle",
		"scope": "source.lua"
	},
	"openCarDoor": {
		"body": "openCarDoor(${1:car},${2:door})",
		"description": "GTA SA\nopenCarDoor(Vehicle car, int door)\n",
		"prefix": "openCarDoor",
		"scope": "source.lua"
	},
	"getPickupCoordinates": {
		"body": "getPickupCoordinates(${1:pickup})",
		"description": "GTA SA\nfloat X, float Y, float Z = getPickupCoordinates(Pickup pickup)\n",
		"prefix": "getPickupCoordinates",
		"scope": "source.lua"
	},
	"removeDecisionMaker": {
		"body": "removeDecisionMaker(${1:maker})",
		"description": "GTA SA\nremoveDecisionMaker(int maker)\n",
		"prefix": "removeDecisionMaker",
		"scope": "source.lua"
	},
	"getCharModel": {
		"body": "getCharModel(${1:ped})",
		"description": "GTA SA\nModel modelId = getCharModel(Ped ped)\n",
		"prefix": "getCharModel",
		"scope": "source.lua"
	},
	"taskAimGunAtCoord": {
		"body": "taskAimGunAtCoord(${1:ped},${2:atX},${3:atY},${4:atZ},${5:timeMS})",
		"description": "GTA SA\ntaskAimGunAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)\n",
		"prefix": "taskAimGunAtCoord",
		"scope": "source.lua"
	},
	"taskShootAtCoord": {
		"body": "taskShootAtCoord(${1:ped},${2:atX},${3:atY},${4:atZ},${5:timeMS})",
		"description": "GTA SA\ntaskShootAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)\n",
		"prefix": "taskShootAtCoord",
		"scope": "source.lua"
	},
	"createFxSystemOnChar": {
		"body": "createFxSystemOnChar(${1:particle},${2:ped},${3:offsetX},${4:offsetY},${5:offsetZ},${6:type})",
		"description": "GTA SA\nParticle particle = createFxSystemOnChar(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnChar",
		"scope": "source.lua"
	},
	"createFxSystemOnCharWithDirection": {
		"body": "createFxSystemOnCharWithDirection(${1:particle},${2:ped},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ},${9:type})",
		"description": "GTA SA\nParticle particle = createFxSystemOnCharWithDirection(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)\n",
		"prefix": "createFxSystemOnCharWithDirection",
		"scope": "source.lua"
	},
	"createFxSystemOnCar": {
		"body": "createFxSystemOnCar(${1:particle},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ},${6:type})",
		"description": "GTA SA\nParticle particle = createFxSystemOnCar(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnCar",
		"scope": "source.lua"
	},
	"createFxSystemOnCarWithDirection": {
		"body": "createFxSystemOnCarWithDirection(${1:particle},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ},${9:type})",
		"description": "GTA SA\nParticle particle = createFxSystemOnCarWithDirection(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)\n",
		"prefix": "createFxSystemOnCarWithDirection",
		"scope": "source.lua"
	},
	"createFxSystemOnObject": {
		"body": "createFxSystemOnObject(${1:particle},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:type})",
		"description": "GTA SA\nParticle particle = createFxSystemOnObject(string particle, Object object, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnObject",
		"scope": "source.lua"
	},
	"createFxSystemOnObjectWithDirection": {
		"body": "createFxSystemOnObjectWithDirection(${1:particle},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ},${9:flag})",
		"description": "GTA SA\nParticle particle = createFxSystemOnObjectWithDirection(string particle, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int flag)\n",
		"prefix": "createFxSystemOnObjectWithDirection",
		"scope": "source.lua"
	},
	"taskDestroyCar": {
		"body": "taskDestroyCar(${1:ped},${2:car})",
		"description": "GTA SA\ntaskDestroyCar(Ped ped, Vehicle car)\n",
		"prefix": "taskDestroyCar",
		"scope": "source.lua"
	},
	"taskDiveAndGetUp": {
		"body": "taskDiveAndGetUp(${1:ped},${2:toOffsetX},${3:toOffsetY},${4:time})",
		"description": "GTA SA\ntaskDiveAndGetUp(Ped ped, float toOffsetX, float toOffsetY, int time)\n",
		"prefix": "taskDiveAndGetUp",
		"scope": "source.lua"
	},
	"customPlateForNextCar": {
		"body": "customPlateForNextCar(${1:modelId},${2:numberplate})",
		"description": "GTA SA\ncustomPlateForNextCar(Model modelId, string numberplate)\n",
		"prefix": "customPlateForNextCar",
		"scope": "source.lua"
	},
	"taskShuffleToNextCarSeat": {
		"body": "taskShuffleToNextCarSeat(${1:ped},${2:car})",
		"description": "GTA SA\ntaskShuffleToNextCarSeat(Ped ped, Vehicle car)\n",
		"prefix": "taskShuffleToNextCarSeat",
		"scope": "source.lua"
	},
	"taskChatWithChar": {
		"body": "taskChatWithChar(${1:ped},${2:withActor},${3:flag},${4:unknownFlag})",
		"description": "GTA SA\ntaskChatWithChar(Ped ped, int withActor, bool flag, int unknownFlag)\n",
		"prefix": "taskChatWithChar",
		"scope": "source.lua"
	},
	"attachCameraToVehicle": {
		"body": "attachCameraToVehicle(${1:car},${2:offsetX},${3:offsetY},${4:offsetZ},${5:rotationX},${6:rotationY},${7:rotationZ},${8:tilt},${9:switchstyle})",
		"description": "GTA SA\nattachCameraToVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicle",
		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtVehicle": {
		"body": "attachCameraToVehicleLookAtVehicle(${1:car},${2:offsetX},${3:offsetY},${4:offsetZ},${5:toCar},${6:tilt},${7:switchstyle})",
		"description": "GTA SA\nattachCameraToVehicleLookAtVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, int toCar, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicleLookAtVehicle",
		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtChar": {
		"body": "attachCameraToVehicleLookAtChar(${1:car},${2:offsetX},${3:offsetY},${4:offsetZ},${5:ped},${6:tilt},${7:switchstyle})",
		"description": "GTA SA\nattachCameraToVehicleLookAtChar(Vehicle car, float offsetX, float offsetY, float offsetZ, Ped ped, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicleLookAtChar",
		"scope": "source.lua"
	},
	"attachCameraToChar": {
		"body": "attachCameraToChar(${1:ped},${2:offsetX},${3:offsetY},${4:offsetZ},${5:rotationX},${6:rotationY},${7:rotationZ},${8:tilt},${9:switchstyle})",
		"description": "GTA SA\nattachCameraToChar(Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToChar",
		"scope": "source.lua"
	},
	"attachCameraToCharLookAtChar": {
		"body": "attachCameraToCharLookAtChar(${1:ped},${2:offsetX},${3:offsetY},${4:offsetZ},${5:targetActor},${6:tilt},${7:switchstyle})",
		"description": "GTA SA\nattachCameraToCharLookAtChar(Ped ped, float offsetX, float offsetY, float offsetZ, int targetActor, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToCharLookAtChar",
		"scope": "source.lua"
	},
	"forceCarLights": {
		"body": "forceCarLights(${1:car},${2:lights})",
		"description": "GTA SA\nforceCarLights(Vehicle car, int lights)\n",
		"prefix": "forceCarLights",
		"scope": "source.lua"
	},
	"addPedtypeAsAttractorUser": {
		"body": "addPedtypeAsAttractorUser(${1:ASOrigin},${2:pedtype})",
		"description": "GTA SA\naddPedtypeAsAttractorUser(int ASOrigin, int pedtype)\n",
		"prefix": "addPedtypeAsAttractorUser",
		"scope": "source.lua"
	},
	"attachObjectToCar": {
		"body": "attachObjectToCar(${1:object},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ})",
		"description": "GTA SA\nattachObjectToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToCar",
		"scope": "source.lua"
	},
	"detachObject": {
		"body": "detachObject(${1:object},${2:X},${3:Y},${4:Z},${5:collisionDetection})",
		"description": "GTA SA\ndetachObject(Object object, float X, float Y, float Z, bool collisionDetection)\n",
		"prefix": "detachObject",
		"scope": "source.lua"
	},
	"attachCarToCar": {
		"body": "attachCarToCar(${1:car},${2:toCar},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ})",
		"description": "GTA SA\nattachCarToCar(Vehicle car, int toCar, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachCarToCar",
		"scope": "source.lua"
	},
	"detachCar": {
		"body": "detachCar(${1:car},${2:X},${3:Y},${4:Z},${5:collisionDetection})",
		"description": "GTA SA\ndetachCar(Vehicle car, float X, float Y, float Z, bool collisionDetection)\n",
		"prefix": "detachCar",
		"scope": "source.lua"
	},
	"isObjectAttached": {
		"body": "isObjectAttached(${1:object})",
		"description": "GTA SA\nbool result = isObjectAttached(Object object)\n",
		"prefix": "isObjectAttached",
		"scope": "source.lua"
	},
	"isVehicleAttached": {
		"body": "isVehicleAttached(${1:car})",
		"description": "GTA SA\nbool result = isVehicleAttached(Vehicle car)\n",
		"prefix": "isVehicleAttached",
		"scope": "source.lua"
	},
	"clearCharTasks": {
		"body": "clearCharTasks(${1:ped})",
		"description": "GTA SA\nclearCharTasks(Ped ped)\n",
		"prefix": "clearCharTasks",
		"scope": "source.lua"
	},
	"taskTogglePedThreatScanner": {
		"body": "taskTogglePedThreatScanner(${1:ped},${2:unknownFlag1},${3:unknownFlag2},${4:unknownFlag3})",
		"description": "GTA SA\ntaskTogglePedThreatScanner(Ped ped, bool unknownFlag1, bool unknownFlag2, bool unknownFlag3)\n",
		"prefix": "taskTogglePedThreatScanner",
		"scope": "source.lua"
	},
	"popCarDoor": {
		"body": "popCarDoor(${1:car},${2:door},${3:visible})",
		"description": "GTA SA\npopCarDoor(Vehicle car, int door, bool visible)\n",
		"prefix": "popCarDoor",
		"scope": "source.lua"
	},
	"fixCarDoor": {
		"body": "fixCarDoor(${1:car},${2:door})",
		"description": "GTA SA\nfixCarDoor(Vehicle car, int door)\n",
		"prefix": "fixCarDoor",
		"scope": "source.lua"
	},
	"taskEveryoneLeaveCar": {
		"body": "taskEveryoneLeaveCar(${1:car})",
		"description": "GTA SA\ntaskEveryoneLeaveCar(Vehicle car)\n",
		"prefix": "taskEveryoneLeaveCar",
		"scope": "source.lua"
	},
	"isPlayerTargettingAnything": {
		"body": "isPlayerTargettingAnything(${1:player})",
		"description": "GTA SA\nbool result = isPlayerTargettingAnything(Player player)\n",
		"prefix": "isPlayerTargettingAnything",
		"scope": "source.lua"
	},
	"getActiveCameraCoordinates": {
		"body": "getActiveCameraCoordinates()",
		"description": "GTA SA\nfloat X, float Y, float Z = getActiveCameraCoordinates()\n",
		"prefix": "getActiveCameraCoordinates",
		"scope": "source.lua"
	},
	"getActiveCameraPointAt": {
		"body": "getActiveCameraPointAt()",
		"description": "GTA SA\nfloat X, float Y, float Z = getActiveCameraPointAt()\n",
		"prefix": "getActiveCameraPointAt",
		"scope": "source.lua"
	},
	"popCarPanel": {
		"body": "popCarPanel(${1:car},${2:component},${3:effectFlag})",
		"description": "GTA SA\npopCarPanel(Vehicle car, int component, bool effectFlag)\n",
		"prefix": "popCarPanel",
		"scope": "source.lua"
	},
	"fixCarPanel": {
		"body": "fixCarPanel(${1:car},${2:componentB})",
		"description": "GTA SA\nfixCarPanel(Vehicle car, int componentB)\n",
		"prefix": "fixCarPanel",
		"scope": "source.lua"
	},
	"fixCarTire": {
		"body": "fixCarTire(${1:car},${2:tire})",
		"description": "GTA SA\nfixCarTire(Vehicle car, int tire)\n",
		"prefix": "fixCarTire",
		"scope": "source.lua"
	},
	"attachObjectToObject": {
		"body": "attachObjectToObject(${1:object},${2:toObject},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ})",
		"description": "GTA SA\nattachObjectToObject(Object object, int toObject, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToObject",
		"scope": "source.lua"
	},
	"attachObjectToChar": {
		"body": "attachObjectToChar(${1:object},${2:ped},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ})",
		"description": "GTA SA\nattachObjectToChar(Object object, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToChar",
		"scope": "source.lua"
	},
	"getCarSpeedVector": {
		"body": "getCarSpeedVector(${1:car})",
		"description": "GTA SA\nfloat vecX, float vecY, float vecZ = getCarSpeedVector(Vehicle car)\n",
		"prefix": "getCarSpeedVector",
		"scope": "source.lua"
	},
	"getCarMass": {
		"body": "getCarMass(${1:car})",
		"description": "GTA SA\nfloat mass = getCarMass(Vehicle car)\n",
		"prefix": "getCarMass",
		"scope": "source.lua"
	},
	"taskDiveFromAttachmentAndGetUp": {
		"body": "taskDiveFromAttachmentAndGetUp(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskDiveFromAttachmentAndGetUp(Ped ped, int timeMS)\n",
		"prefix": "taskDiveFromAttachmentAndGetUp",
		"scope": "source.lua"
	},
	"attachCharToBike": {
		"body": "attachCharToBike(${1:ped},${2:car},${3:offsetX},${4:offsetY},${5:offsetZ},${6:position},${7:shootingAngle1},${8:shootingAngle2},${9:weapon})",
		"description": "GTA SA\nattachCharToBike(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngle1, float shootingAngle2, int weapon)\n",
		"prefix": "attachCharToBike",
		"scope": "source.lua"
	},
	"taskGotoCharOffset": {
		"body": "taskGotoCharOffset(${1:ped},${2:toActor},${3:timelimit},${4:approachDistance},${5:approachAngle})",
		"description": "GTA SA\ntaskGotoCharOffset(Ped ped, int toActor, int timelimit, float approachDistance, float approachAngle)\n",
		"prefix": "taskGotoCharOffset",
		"scope": "source.lua"
	},
	"taskLookAtCoord": {
		"body": "taskLookAtCoord(${1:ped},${2:toX},${3:toY},${4:toZ},${5:timeMS})",
		"description": "GTA SA\ntaskLookAtCoord(Ped ped, float toX, float toY, float toZ, int timeMS)\n",
		"prefix": "taskLookAtCoord",
		"scope": "source.lua"
	},
	"hideCharWeaponForScriptedCutscene": {
		"body": "hideCharWeaponForScriptedCutscene(${1:ped},${2:hide})",
		"description": "GTA SA\nhideCharWeaponForScriptedCutscene(Ped ped, bool hide)\n",
		"prefix": "hideCharWeaponForScriptedCutscene",
		"scope": "source.lua"
	},
	"getCharSpeed": {
		"body": "getCharSpeed(${1:ped})",
		"description": "GTA SA\nfloat speed = getCharSpeed(Ped ped)\n",
		"prefix": "getCharSpeed",
		"scope": "source.lua"
	},
	"setGroupDecisionMaker": {
		"body": "setGroupDecisionMaker(${1:group},${2:maker})",
		"description": "GTA SA\nsetGroupDecisionMaker(int group, int maker)\n",
		"prefix": "setGroupDecisionMaker",
		"scope": "source.lua"
	},
	"loadGroupDecisionMaker": {
		"body": "loadGroupDecisionMaker(${1:type})",
		"description": "GTA SA\nint maker = loadGroupDecisionMaker(int type)\n",
		"prefix": "loadGroupDecisionMaker",
		"scope": "source.lua"
	},
	"disablePlayerSprint": {
		"body": "disablePlayerSprint(${1:player},${2:mode})",
		"description": "GTA SA\ndisablePlayerSprint(Player player, bool mode)\n",
		"prefix": "disablePlayerSprint",
		"scope": "source.lua"
	},
	"taskSitDown": {
		"body": "taskSitDown(${1:ped},${2:timeMS})",
		"description": "GTA SA\ntaskSitDown(Ped ped, int timeMS)\n",
		"prefix": "taskSitDown",
		"scope": "source.lua"
	},
	"createSearchlight": {
		"body": "createSearchlight(${1:atX},${2:atY},${3:atZ},${4:targetX},${5:targetY},${6:targetZ},${7:radius1},${8:radius2})",
		"description": "GTA SA\nSearchlight searchlight = createSearchlight(float atX, float atY, float atZ, float targetX, float targetY, float targetZ, float radius1, float radius2)\n",
		"prefix": "createSearchlight",
		"scope": "source.lua"
	},
	"deleteSearchlight": {
		"body": "deleteSearchlight(${1:searchlight})",
		"description": "GTA SA\ndeleteSearchlight(Searchlight searchlight)\n",
		"prefix": "deleteSearchlight",
		"scope": "source.lua"
	},
	"doesSearchlightExist": {
		"body": "doesSearchlightExist(${1:searchlight})",
		"description": "GTA SA\nbool result = doesSearchlightExist(Searchlight searchlight)\n",
		"prefix": "doesSearchlightExist",
		"scope": "source.lua"
	},
	"moveSearchlightBetweenCoords": {
		"body": "moveSearchlightBetweenCoords(${1:searchlight},${2:fromX},${3:fromY},${4:fromZ},${5:toX},${6:toY},${7:toZ},${8:speed})",
		"description": "GTA SA\nmoveSearchlightBetweenCoords(Searchlight searchlight, float fromX, float fromY, float fromZ, float toX, float toY, float toZ, float speed)\n",
		"prefix": "moveSearchlightBetweenCoords",
		"scope": "source.lua"
	},
	"pointSearchlightAtCoord": {
		"body": "pointSearchlightAtCoord(${1:searchlight},${2:toX},${3:toY},${4:toZ},${5:speed})",
		"description": "GTA SA\npointSearchlightAtCoord(Searchlight searchlight, float toX, float toY, float toZ, float speed)\n",
		"prefix": "pointSearchlightAtCoord",
		"scope": "source.lua"
	},
	"pointSearchlightAtChar": {
		"body": "pointSearchlightAtChar(${1:searchlight},${2:ped},${3:speed})",
		"description": "GTA SA\npointSearchlightAtChar(Searchlight searchlight, Ped ped, float speed)\n",
		"prefix": "pointSearchlightAtChar",
		"scope": "source.lua"
	},
	"isCharInSearchlight": {
		"body": "isCharInSearchlight(${1:searchlight},${2:ped})",
		"description": "GTA SA\nbool result = isCharInSearchlight(Searchlight searchlight, Ped ped)\n",
		"prefix": "isCharInSearchlight",
		"scope": "source.lua"
	},
	"hasCutsceneLoaded": {
		"body": "hasCutsceneLoaded()",
		"description": "GTA SA\nbool result = hasCutsceneLoaded()\n",
		"prefix": "hasCutsceneLoaded",
		"scope": "source.lua"
	},
	"taskTurnCharToFaceCoord": {
		"body": "taskTurnCharToFaceCoord(${1:ped},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\ntaskTurnCharToFaceCoord(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "taskTurnCharToFaceCoord",
		"scope": "source.lua"
	},
	"taskDrivePointRoute": {
		"body": "taskDrivePointRoute(${1:ped},${2:car},${3:speed})",
		"description": "GTA SA\ntaskDrivePointRoute(Ped ped, Vehicle car, float speed)\n",
		"prefix": "taskDrivePointRoute",
		"scope": "source.lua"
	},
	"fireSingleBullet": {
		"body": "fireSingleBullet(${1:fromX},${2:fromY},${3:fromZ},${4:targetX},${5:targetY},${6:targetZ},${7:energy})",
		"description": "GTA SA\nfireSingleBullet(float fromX, float fromY, float fromZ, float targetX, float targetY, float targetZ, int energy)\n",
		"prefix": "fireSingleBullet",
		"scope": "source.lua"
	},
	"isLineOfSightClear": {
		"body": "isLineOfSightClear(${1:fromX},${2:fromY},${3:fromZ},${4:toX},${5:toY},${6:toZ},${7:checkBuildings},${8:checkVehicles},${9:checkActors},${10:checkObjects},${11:checkParticles})",
		"description": "GTA SA\nbool result = isLineOfSightClear(float fromX, float fromY, float fromZ, float toX, float toY, float toZ, bool checkBuildings, bool checkVehicles, bool checkActors, bool checkObjects, bool checkParticles)\n",
		"prefix": "isLineOfSightClear",
		"scope": "source.lua"
	},
	"getCarRoll": {
		"body": "getCarRoll(${1:car})",
		"description": "GTA SA\nfloat roll = getCarRoll(Vehicle car)\n",
		"prefix": "getCarRoll",
		"scope": "source.lua"
	},
	"pointSearchlightAtVehicle": {
		"body": "pointSearchlightAtVehicle(${1:searchlight},${2:car},${3:speed})",
		"description": "GTA SA\npointSearchlightAtVehicle(Searchlight searchlight, Vehicle car, float speed)\n",
		"prefix": "pointSearchlightAtVehicle",
		"scope": "source.lua"
	},
	"isVehicleInSearchlight": {
		"body": "isVehicleInSearchlight(${1:int},${2:car})",
		"description": "GTA SA\nbool result = isVehicleInSearchlight(int int, Vehicle car)\n",
		"prefix": "isVehicleInSearchlight",
		"scope": "source.lua"
	},
	"createSearchlightOnVehicle": {
		"body": "createSearchlightOnVehicle(${1:car},${2:offsetX},${3:offsetY},${4:offsetZ},${5:targetX},${6:targetY},${7:targetZ},${8:radius},${9:radius})",
		"description": "GTA SA\nSearchlight searchlight = createSearchlightOnVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float targetX, float targetY, float targetZ, float radius, float radius)\n",
		"prefix": "createSearchlightOnVehicle",
		"scope": "source.lua"
	},
	"taskGoToCoordWhileAiming": {
		"body": "taskGoToCoordWhileAiming(${1:ped},${2:toX},${3:toY},${4:toZ},${5:mode},${6:turnRadius},${7:stopRadius},${8:ped},${9:offsetX},${10:offsetY},${11:offsetZ})",
		"description": "GTA SA\ntaskGoToCoordWhileAiming(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, Ped ped, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "taskGoToCoordWhileAiming",
		"scope": "source.lua"
	},
	"getNumberOfFiresInRange": {
		"body": "getNumberOfFiresInRange(${1:atX},${2:atY},${3:atZ},${4:radius})",
		"description": "GTA SA\nint num = getNumberOfFiresInRange(float atX, float atY, float atZ, float radius)\n",
		"prefix": "getNumberOfFiresInRange",
		"scope": "source.lua"
	},
	"addBlipForSearchlight": {
		"body": "addBlipForSearchlight(${1:searchlight})",
		"description": "GTA SA\nMarker marker = addBlipForSearchlight(Searchlight searchlight)\n",
		"prefix": "addBlipForSearchlight",
		"scope": "source.lua"
	},
	"skipToEndAndStopPlaybackRecordedCar": {
		"body": "skipToEndAndStopPlaybackRecordedCar(${1:car})",
		"description": "GTA SA\nskipToEndAndStopPlaybackRecordedCar(Vehicle car)\n",
		"prefix": "skipToEndAndStopPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"taskCarTempAction": {
		"body": "taskCarTempAction(${1:ped},${2:car},${3:performAction},${4:timelimit})",
		"description": "GTA SA\ntaskCarTempAction(Ped ped, Vehicle car, int performAction, int timelimit)\n",
		"prefix": "taskCarTempAction",
		"scope": "source.lua"
	},
	"setLaRiots": {
		"body": "setLaRiots(${1:enable})",
		"description": "GTA SA\nsetLaRiots(bool enable)\n",
		"prefix": "setLaRiots",
		"scope": "source.lua"
	},
	"removeCharFromGroup": {
		"body": "removeCharFromGroup(${1:ped})",
		"description": "GTA SA\nremoveCharFromGroup(Ped ped)\n",
		"prefix": "removeCharFromGroup",
		"scope": "source.lua"
	},
	"attachSearchlightToSearchlightObject": {
		"body": "attachSearchlightToSearchlightObject(${1:searchlight},${2:tower},${3:housing},${4:bulb},${5:offsetX},${6:offsetY},${7:offsetZ})",
		"description": "GTA SA\nattachSearchlightToSearchlightObject(Searchlight searchlight, int tower, int housing, int bulb, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "attachSearchlightToSearchlightObject",
		"scope": "source.lua"
	},
	"switchEmergencyServices": {
		"body": "switchEmergencyServices(${1:enable})",
		"description": "GTA SA\nswitchEmergencyServices(bool enable)\n",
		"prefix": "switchEmergencyServices",
		"scope": "source.lua"
	},
	"createCheckpoint": {
		"body": "createCheckpoint(${1:type},${2:atX},${3:atY},${4:atZ},${5:pointX},${6:pointY},${7:pointZ},${8:radius})",
		"description": "GTA SA\nCheckpoint checkpoint = createCheckpoint(int type, float atX, float atY, float atZ, float pointX, float pointY, float pointZ, float radius)\n",
		"prefix": "createCheckpoint",
		"scope": "source.lua"
	},
	"deleteCheckpoint": {
		"body": "deleteCheckpoint(${1:checkpoint})",
		"description": "GTA SA\ndeleteCheckpoint(Checkpoint checkpoint)\n",
		"prefix": "deleteCheckpoint",
		"scope": "source.lua"
	},
	"switchRandomTrains": {
		"body": "switchRandomTrains(${1:enable})",
		"description": "GTA SA\nswitchRandomTrains(bool enable)\n",
		"prefix": "switchRandomTrains",
		"scope": "source.lua"
	},
	"createMissionTrain": {
		"body": "createMissionTrain(${1:type},${2:atX},${3:atY},${4:atZ},${5:direction})",
		"description": "GTA SA\nVehicle train = createMissionTrain(int type, float atX, float atY, float atZ, bool direction)\n",
		"prefix": "createMissionTrain",
		"scope": "source.lua"
	},
	"deleteMissionTrains": {
		"body": "deleteMissionTrains()",
		"description": "GTA SA\ndeleteMissionTrains()\n",
		"prefix": "deleteMissionTrains",
		"scope": "source.lua"
	},
	"markMissionTrainsAsNoLongerNeeded": {
		"body": "markMissionTrainsAsNoLongerNeeded()",
		"description": "GTA SA\nmarkMissionTrainsAsNoLongerNeeded()\n",
		"prefix": "markMissionTrainsAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"deleteAllTrains": {
		"body": "deleteAllTrains()",
		"description": "GTA SA\ndeleteAllTrains()\n",
		"prefix": "deleteAllTrains",
		"scope": "source.lua"
	},
	"setTrainSpeed": {
		"body": "setTrainSpeed(${1:train},${2:speed})",
		"description": "GTA SA\nsetTrainSpeed(Vehicle train, float speed)\n",
		"prefix": "setTrainSpeed",
		"scope": "source.lua"
	},
	"setTrainCruiseSpeed": {
		"body": "setTrainCruiseSpeed(${1:train},${2:speed})",
		"description": "GTA SA\nsetTrainCruiseSpeed(Vehicle train, float speed)\n",
		"prefix": "setTrainCruiseSpeed",
		"scope": "source.lua"
	},
	"getTrainCaboose": {
		"body": "getTrainCaboose(${1:train})",
		"description": "GTA SA\nint caboose = getTrainCaboose(Vehicle train)\n",
		"prefix": "getTrainCaboose",
		"scope": "source.lua"
	},
	"deletePlayer": {
		"body": "deletePlayer(${1:player})",
		"description": "GTA SA\ndeletePlayer(Player player)\n",
		"prefix": "deletePlayer",
		"scope": "source.lua"
	},
	"setTwoPlayerCameraMode": {
		"body": "setTwoPlayerCameraMode(${1:mode})",
		"description": "GTA SA\nsetTwoPlayerCameraMode(bool mode)\n",
		"prefix": "setTwoPlayerCameraMode",
		"scope": "source.lua"
	},
	"taskCarMission": {
		"body": "taskCarMission(${1:ped},${2:car},${3:targetCar},${4:order},${5:maxSpeed},${6:trafficFlag})",
		"description": "GTA SA\ntaskCarMission(Ped ped, Vehicle car, int targetCar, int order, float maxSpeed, int trafficFlag)\n",
		"prefix": "taskCarMission",
		"scope": "source.lua"
	},
	"taskGoToObject": {
		"body": "taskGoToObject(${1:ped},${2:toObject},${3:timelimit},${4:stopWithinRadius})",
		"description": "GTA SA\ntaskGoToObject(Ped ped, int toObject, int timelimit, float stopWithinRadius)\n",
		"prefix": "taskGoToObject",
		"scope": "source.lua"
	},
	"taskWeaponRoll": {
		"body": "taskWeaponRoll(${1:ped},${2:roll})",
		"description": "GTA SA\ntaskWeaponRoll(Ped ped, bool roll)\n",
		"prefix": "taskWeaponRoll",
		"scope": "source.lua"
	},
	"taskCharArrestChar": {
		"body": "taskCharArrestChar(${1:ped},${2:bustActor})",
		"description": "GTA SA\ntaskCharArrestChar(Ped ped, int bustActor)\n",
		"prefix": "taskCharArrestChar",
		"scope": "source.lua"
	},
	"getAvailableVehicleMod": {
		"body": "getAvailableVehicleMod(${1:car},${2:poolIndex})",
		"description": "GTA SA\nModel itemID = getAvailableVehicleMod(Vehicle car, int poolIndex)\n",
		"prefix": "getAvailableVehicleMod",
		"scope": "source.lua"
	},
	"getVehicleModType": {
		"body": "getVehicleModType(${1:component})",
		"description": "GTA SA\nint type = getVehicleModType(Model component)\n",
		"prefix": "getVehicleModType",
		"scope": "source.lua"
	},
	"addVehicleMod": {
		"body": "addVehicleMod(${1:car},${2:component})",
		"description": "GTA SA\nint componentId = addVehicleMod(Vehicle car, Model component)\n",
		"prefix": "addVehicleMod",
		"scope": "source.lua"
	},
	"removeVehicleMod": {
		"body": "removeVehicleMod(${1:car},${2:componentId})",
		"description": "GTA SA\nremoveVehicleMod(Vehicle car, int componentId)\n",
		"prefix": "removeVehicleMod",
		"scope": "source.lua"
	},
	"requestVehicleMod": {
		"body": "requestVehicleMod(${1:component})",
		"description": "GTA SA\nrequestVehicleMod(Model component)\n",
		"prefix": "requestVehicleMod",
		"scope": "source.lua"
	},
	"hasVehicleModLoaded": {
		"body": "hasVehicleModLoaded(${1:component})",
		"description": "GTA SA\nbool result = hasVehicleModLoaded(Model component)\n",
		"prefix": "hasVehicleModLoaded",
		"scope": "source.lua"
	},
	"markVehicleModAsNoLongerNeeded": {
		"body": "markVehicleModAsNoLongerNeeded(${1:component})",
		"description": "GTA SA\nmarkVehicleModAsNoLongerNeeded(Model component)\n",
		"prefix": "markVehicleModAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"getNumAvailablePaintjobs": {
		"body": "getNumAvailablePaintjobs(${1:car})",
		"description": "GTA SA\nint num = getNumAvailablePaintjobs(Vehicle car)\n",
		"prefix": "getNumAvailablePaintjobs",
		"scope": "source.lua"
	},
	"giveVehiclePaintjob": {
		"body": "giveVehiclePaintjob(${1:set},${2:paintjob})",
		"description": "GTA SA\ngiveVehiclePaintjob(int set, int paintjob)\n",
		"prefix": "giveVehiclePaintjob",
		"scope": "source.lua"
	},
	"isGroupMember": {
		"body": "isGroupMember(${1:ped},${2:group})",
		"description": "GTA SA\nbool result = isGroupMember(Ped ped, int group)\n",
		"prefix": "isGroupMember",
		"scope": "source.lua"
	},
	"isGroupLeader": {
		"body": "isGroupLeader(${1:ped},${2:group})",
		"description": "GTA SA\nbool result = isGroupLeader(Ped ped, int group)\n",
		"prefix": "isGroupLeader",
		"scope": "source.lua"
	},
	"setGroupSeparationRange": {
		"body": "setGroupSeparationRange(${1:group},${2:range})",
		"description": "GTA SA\nsetGroupSeparationRange(int group, float range)\n",
		"prefix": "setGroupSeparationRange",
		"scope": "source.lua"
	},
	"limitTwoPlayerDistance": {
		"body": "limitTwoPlayerDistance(${1:distance})",
		"description": "GTA SA\nlimitTwoPlayerDistance(float distance)\n",
		"prefix": "limitTwoPlayerDistance",
		"scope": "source.lua"
	},
	"releaseTwoPlayerDistance": {
		"body": "releaseTwoPlayerDistance()",
		"description": "GTA SA\nreleaseTwoPlayerDistance()\n",
		"prefix": "releaseTwoPlayerDistance",
		"scope": "source.lua"
	},
	"setPlayerPlayerTargetting": {
		"body": "setPlayerPlayerTargetting(${1:can})",
		"description": "GTA SA\nsetPlayerPlayerTargetting(bool can)\n",
		"prefix": "setPlayerPlayerTargetting",
		"scope": "source.lua"
	},
	"getScriptFireCoords": {
		"body": "getScriptFireCoords(${1:fire})",
		"description": "GTA SA\nfloat X, float Y, float Z = getScriptFireCoords(int fire)\n",
		"prefix": "getScriptFireCoords",
		"scope": "source.lua"
	},
	"getNthClosestCarNodeWithHeading": {
		"body": "getNthClosestCarNodeWithHeading(${1:forX},${2:forY},${3:forZ},${4:direction})",
		"description": "GTA SA\nfloat X, float Y, float Z, float ZAngle = getNthClosestCarNodeWithHeading(float forX, float forY, float forZ, int direction)\n",
		"prefix": "getNthClosestCarNodeWithHeading",
		"scope": "source.lua"
	},
	"setPlayersCanBeInSeparateCars": {
		"body": "setPlayersCanBeInSeparateCars(${1:allow})",
		"description": "GTA SA\nsetPlayersCanBeInSeparateCars(bool allow)\n",
		"prefix": "setPlayersCanBeInSeparateCars",
		"scope": "source.lua"
	},
	"doesCarHaveStuckCarCheck": {
		"body": "doesCarHaveStuckCarCheck(${1:car})",
		"description": "GTA SA\nbool result = doesCarHaveStuckCarCheck(Vehicle car)\n",
		"prefix": "doesCarHaveStuckCarCheck",
		"scope": "source.lua"
	},
	"setPlaybackSpeed": {
		"body": "setPlaybackSpeed(${1:car},${2:speed})",
		"description": "GTA SA\nsetPlaybackSpeed(Vehicle car, float speed)\n",
		"prefix": "setPlaybackSpeed",
		"scope": "source.lua"
	},
	"areAnyCharsNearChar": {
		"body": "areAnyCharsNearChar(${1:ped},${2:range})",
		"description": "GTA SA\nbool result = areAnyCharsNearChar(Ped ped, float range)\n",
		"prefix": "areAnyCharsNearChar",
		"scope": "source.lua"
	},
	"skipCutsceneEnd": {
		"body": "skipCutsceneEnd()",
		"description": "GTA SA\nskipCutsceneEnd()\n",
		"prefix": "skipCutsceneEnd",
		"scope": "source.lua"
	},
	"getPercentageTaggedInArea": {
		"body": "getPercentageTaggedInArea(${1:x1},${2:y1},${3:x2},${4:y2})",
		"description": "GTA SA\nint percentage = getPercentageTaggedInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "getPercentageTaggedInArea",
		"scope": "source.lua"
	},
	"setTagStatusInArea": {
		"body": "setTagStatusInArea(${1:x1},${2:y1},${3:x2},${4:y2},${5:value})",
		"description": "GTA SA\nsetTagStatusInArea(float x1, float y1, float x2, float y2, bool value)\n",
		"prefix": "setTagStatusInArea",
		"scope": "source.lua"
	},
	"carGotoCoordinatesRacing": {
		"body": "carGotoCoordinatesRacing(${1:car},${2:toX},${3:toY},${4:toZ})",
		"description": "GTA SA\ncarGotoCoordinatesRacing(Vehicle car, float toX, float toY, float toZ)\n",
		"prefix": "carGotoCoordinatesRacing",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCarUsingAi": {
		"body": "startPlaybackRecordedCarUsingAi(${1:car},${2:path})",
		"description": "GTA SA\nstartPlaybackRecordedCarUsingAi(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCarUsingAi",
		"scope": "source.lua"
	},
	"skipInPlaybackRecordedCar": {
		"body": "skipInPlaybackRecordedCar(${1:car},${2:path})",
		"description": "GTA SA\nskipInPlaybackRecordedCar(Vehicle car, float path)\n",
		"prefix": "skipInPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"clearCharDecisionMakerEventResponse": {
		"body": "clearCharDecisionMakerEventResponse(${1:maker},${2:event})",
		"description": "GTA SA\nclearCharDecisionMakerEventResponse(int maker, int event)\n",
		"prefix": "clearCharDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"addCharDecisionMakerEventResponse": {
		"body": "addCharDecisionMakerEventResponse(${1:maker},${2:event},${3:taskID},${4:respect},${5:hate},${6:like},${7:dislike},${8:inCar},${9:onFoot})",
		"description": "GTA SA\naddCharDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)\n",
		"prefix": "addCharDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"taskPickUpObject": {
		"body": "taskPickUpObject(${1:ped},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:boneId1},${7:boneId2},${8:performAnimation},${9:IFPFile},${10:time})",
		"description": "GTA SA\ntaskPickUpObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int boneId1, int boneId2, string performAnimation, int IFPFile, int time)\n",
		"prefix": "taskPickUpObject",
		"scope": "source.lua"
	},
	"dropObject": {
		"body": "dropObject(${1:ped},${2:object})",
		"description": "GTA SA\ndropObject(Ped ped, bool object)\n",
		"prefix": "dropObject",
		"scope": "source.lua"
	},
	"explodeCarInCutscene": {
		"body": "explodeCarInCutscene(${1:car})",
		"description": "GTA SA\nexplodeCarInCutscene(Vehicle car)\n",
		"prefix": "explodeCarInCutscene",
		"scope": "source.lua"
	},
	"buildPlayerModel": {
		"body": "buildPlayerModel(${1:player})",
		"description": "GTA SA\nbuildPlayerModel(Player player)\n",
		"prefix": "buildPlayerModel",
		"scope": "source.lua"
	},
	"planeAttackPlayer": {
		"body": "planeAttackPlayer(${1:hydra},${2:car},${3:radius})",
		"description": "GTA SA\nplaneAttackPlayer(int hydra, Vehicle car, float radius)\n",
		"prefix": "planeAttackPlayer",
		"scope": "source.lua"
	},
	"planeFlyInDirection": {
		"body": "planeFlyInDirection(${1:plane},${2:direction},${3:altitudemin},${4:altitudemax})",
		"description": "GTA SA\nplaneFlyInDirection(int plane, float direction, float altitudemin, float altitudemax)\n",
		"prefix": "planeFlyInDirection",
		"scope": "source.lua"
	},
	"planeFollowEntity": {
		"body": "planeFollowEntity(${1:plane},${2:ped},${3:car},${4:radius})",
		"description": "GTA SA\nplaneFollowEntity(int plane, Ped ped, Vehicle car, float radius)\n",
		"prefix": "planeFollowEntity",
		"scope": "source.lua"
	},
	"taskDriveBy": {
		"body": "taskDriveBy(${1:ped},${2:drivebyActor},${3:car},${4:pX},${5:pY},${6:pZ},${7:radiusX},${8:radiusY},${9:radiusZ},${10:firingRate})",
		"description": "GTA SA\ntaskDriveBy(Ped ped, int drivebyActor, Vehicle car, float pX, float pY, float pZ, float radiusX, int radiusY, bool radiusZ, int firingRate)\n",
		"prefix": "taskDriveBy",
		"scope": "source.lua"
	},
	"setCarStayInSlowLane": {
		"body": "setCarStayInSlowLane(${1:car},${2:stay})",
		"description": "GTA SA\nsetCarStayInSlowLane(Vehicle car, bool stay)\n",
		"prefix": "setCarStayInSlowLane",
		"scope": "source.lua"
	},
	"takeRemoteControlOfCar": {
		"body": "takeRemoteControlOfCar(${1:player},${2:car})",
		"description": "GTA SA\ntakeRemoteControlOfCar(Player player, Vehicle car)\n",
		"prefix": "takeRemoteControlOfCar",
		"scope": "source.lua"
	},
	"isClosestObjectOfTypeSmashedOrDamaged": {
		"body": "isClosestObjectOfTypeSmashedOrDamaged(${1:object},${2:atX},${3:atY},${4:atZ},${5:radius},${6:smashed},${7:damaged})",
		"description": "GTA SA\nbool result = isClosestObjectOfTypeSmashedOrDamaged(Model object, float atX, float atY, float atZ, float radius, bool smashed, bool damaged)\n",
		"prefix": "isClosestObjectOfTypeSmashedOrDamaged",
		"scope": "source.lua"
	},
	"startSettingUpConversation": {
		"body": "startSettingUpConversation(${1:ped})",
		"description": "GTA SA\nstartSettingUpConversation(Ped ped)\n",
		"prefix": "startSettingUpConversation",
		"scope": "source.lua"
	},
	"finishSettingUpConversation": {
		"body": "finishSettingUpConversation()",
		"description": "GTA SA\nfinishSettingUpConversation()\n",
		"prefix": "finishSettingUpConversation",
		"scope": "source.lua"
	},
	"isConversationAtNode": {
		"body": "isConversationAtNode(${1:ped},${2:gxtString})",
		"description": "GTA SA\nbool result = isConversationAtNode(Ped ped, GxtString gxtString)\n",
		"prefix": "isConversationAtNode",
		"scope": "source.lua"
	},
	"getObjectHealth": {
		"body": "getObjectHealth(${1:object})",
		"description": "GTA SA\nint health = getObjectHealth(Object object)\n",
		"prefix": "getObjectHealth",
		"scope": "source.lua"
	},
	"setObjectHealth": {
		"body": "setObjectHealth(${1:object},${2:health})",
		"description": "GTA SA\nsetObjectHealth(Object object, int health)\n",
		"prefix": "setObjectHealth",
		"scope": "source.lua"
	},
	"breakObject": {
		"body": "breakObject(${1:object},${2:intensity})",
		"description": "GTA SA\nbreakObject(Object object, int intensity)\n",
		"prefix": "breakObject",
		"scope": "source.lua"
	},
	"heliAttackPlayer": {
		"body": "heliAttackPlayer(${1:heli},${2:player},${3:radius})",
		"description": "GTA SA\nheliAttackPlayer(Vehicle heli, Player player, float radius)\n",
		"prefix": "heliAttackPlayer",
		"scope": "source.lua"
	},
	"heliFollowEntity": {
		"body": "heliFollowEntity(${1:heli},${2:ped},${3:car},${4:radius})",
		"description": "GTA SA\nheliFollowEntity(Vehicle heli, Ped ped, Vehicle car, float radius)\n",
		"prefix": "heliFollowEntity",
		"scope": "source.lua"
	},
	"policeHeliChaseEntity": {
		"body": "policeHeliChaseEntity(${1:heli},${2:ped},${3:car},${4:radius})",
		"description": "GTA SA\npoliceHeliChaseEntity(Vehicle heli, Ped ped, Vehicle car, float radius)\n",
		"prefix": "policeHeliChaseEntity",
		"scope": "source.lua"
	},
	"taskUseMobilePhone": {
		"body": "taskUseMobilePhone(${1:ped},${2:hold})",
		"description": "GTA SA\ntaskUseMobilePhone(Ped ped, bool hold)\n",
		"prefix": "taskUseMobilePhone",
		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsDriver": {
		"body": "taskWarpCharIntoCarAsDriver(${1:ped},${2:car})",
		"description": "GTA SA\ntaskWarpCharIntoCarAsDriver(Ped ped, Vehicle car)\n",
		"prefix": "taskWarpCharIntoCarAsDriver",
		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsPassenger": {
		"body": "taskWarpCharIntoCarAsPassenger(${1:ped},${2:car},${3:passengerseat})",
		"description": "GTA SA\ntaskWarpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerseat)\n",
		"prefix": "taskWarpCharIntoCarAsPassenger",
		"scope": "source.lua"
	},
	"switchCopsOnBikes": {
		"body": "switchCopsOnBikes(${1:generate})",
		"description": "GTA SA\nswitchCopsOnBikes(bool generate)\n",
		"prefix": "switchCopsOnBikes",
		"scope": "source.lua"
	},
	"isFlameInAngledArea2d": {
		"body": "isFlameInAngledArea2d(${1:x1},${2:y1},${3:x2},${4:y2},${5:angle},${6:sphere})",
		"description": "GTA SA\nbool result = isFlameInAngledArea2d(float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isFlameInAngledArea2d",
		"scope": "source.lua"
	},
	"isFlameInAngledArea3d": {
		"body": "isFlameInAngledArea3d(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2},${7:angle},${8:sphere})",
		"description": "GTA SA\nbool result = isFlameInAngledArea3d(float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isFlameInAngledArea3d",
		"scope": "source.lua"
	},
	"addStuckCarCheckWithWarp": {
		"body": "addStuckCarCheckWithWarp(${1:car},${2:checkDistance},${3:time},${4:stuck},${5:flipped},${6:warp},${7:path})",
		"description": "GTA SA\naddStuckCarCheckWithWarp(Vehicle car, float checkDistance, int time, bool stuck, bool flipped, bool warp, int path)\n",
		"prefix": "addStuckCarCheckWithWarp",
		"scope": "source.lua"
	},
	"damageCarPanel": {
		"body": "damageCarPanel(${1:car},${2:door})",
		"description": "GTA SA\ndamageCarPanel(Vehicle car, int door)\n",
		"prefix": "damageCarPanel",
		"scope": "source.lua"
	},
	"setCarRoll": {
		"body": "setCarRoll(${1:car},${2:roll})",
		"description": "GTA SA\nsetCarRoll(Vehicle car, float roll)\n",
		"prefix": "setCarRoll",
		"scope": "source.lua"
	},
	"suppressCarModel": {
		"body": "suppressCarModel(${1:modelId})",
		"description": "GTA SA\nbool result = suppressCarModel(Model modelId)\n",
		"prefix": "suppressCarModel",
		"scope": "source.lua"
	},
	"dontSuppressCarModel": {
		"body": "dontSuppressCarModel(${1:modelId})",
		"description": "GTA SA\ndontSuppressCarModel(Model modelId)\n",
		"prefix": "dontSuppressCarModel",
		"scope": "source.lua"
	},
	"dontSuppressAnyCarModels": {
		"body": "dontSuppressAnyCarModels()",
		"description": "GTA SA\ndontSuppressAnyCarModels()\n",
		"prefix": "dontSuppressAnyCarModels",
		"scope": "source.lua"
	},
	"isPs2KeyboardKeyPressed": {
		"body": "isPs2KeyboardKeyPressed(${1:key})",
		"description": "GTA SA\nbool result = isPs2KeyboardKeyPressed(int key)\n",
		"prefix": "isPs2KeyboardKeyPressed",
		"scope": "source.lua"
	},
	"isPs2KeyboardKeyJustPressed": {
		"body": "isPs2KeyboardKeyJustPressed(${1:key})",
		"description": "GTA SA\nbool result = isPs2KeyboardKeyJustPressed(int key)\n",
		"prefix": "isPs2KeyboardKeyJustPressed",
		"scope": "source.lua"
	},
	"isCharHoldingObject": {
		"body": "isCharHoldingObject(${1:ped},${2:liftingObject})",
		"description": "GTA SA\nbool result = isCharHoldingObject(Ped ped, int liftingObject)\n",
		"prefix": "isCharHoldingObject",
		"scope": "source.lua"
	},
	"setCarCanGoAgainstTraffic": {
		"body": "setCarCanGoAgainstTraffic(${1:car},${2:can})",
		"description": "GTA SA\nsetCarCanGoAgainstTraffic(Vehicle car, bool can)\n",
		"prefix": "setCarCanGoAgainstTraffic",
		"scope": "source.lua"
	},
	"damageCarDoor": {
		"body": "damageCarDoor(${1:car},${2:door})",
		"description": "GTA SA\ndamageCarDoor(Vehicle car, int door)\n",
		"prefix": "damageCarDoor",
		"scope": "source.lua"
	},
	"getRandomCarInSphereNoSave": {
		"body": "getRandomCarInSphereNoSave(${1:X},${2:Y},${3:Z},${4:radius},${5:model})",
		"description": "GTA SA\nVehicle car = getRandomCarInSphereNoSave(float X, float Y, float Z, float radius, int model)\n",
		"prefix": "getRandomCarInSphereNoSave",
		"scope": "source.lua"
	},
	"getRandomCharInSphere": {
		"body": "getRandomCharInSphere(${1:X},${2:Y},${3:Z},${4:radius},${5:pedtypeCivilian},${6:gang},${7:prostitute})",
		"description": "GTA SA\nPed ped = getRandomCharInSphere(float X, float Y, float Z, float radius, bool pedtypeCivilian, bool gang, bool prostitute)\n",
		"prefix": "getRandomCharInSphere",
		"scope": "source.lua"
	},
	"hasCharBeenArrested": {
		"body": "hasCharBeenArrested(${1:ped})",
		"description": "GTA SA\nbool result = hasCharBeenArrested(Ped ped)\n",
		"prefix": "hasCharBeenArrested",
		"scope": "source.lua"
	},
	"setPlaneThrottle": {
		"body": "setPlaneThrottle(${1:plane},${2:throttle})",
		"description": "GTA SA\nsetPlaneThrottle(int plane, float throttle)\n",
		"prefix": "setPlaneThrottle",
		"scope": "source.lua"
	},
	"heliLandAtCoords": {
		"body": "heliLandAtCoords(${1:heli},${2:X},${3:Y},${4:Z},${5:minaltitude},${6:maxaltitude})",
		"description": "GTA SA\nheliLandAtCoords(Vehicle heli, float X, float Y, float Z, float minaltitude, float maxaltitude)\n",
		"prefix": "heliLandAtCoords",
		"scope": "source.lua"
	},
	"planeStartsInAir": {
		"body": "planeStartsInAir(${1:hydra})",
		"description": "GTA SA\nplaneStartsInAir(int hydra)\n",
		"prefix": "planeStartsInAir",
		"scope": "source.lua"
	},
	"setRelationship": {
		"body": "setRelationship(${1:acquaintance},${2:pedtype},${3:toPedtype})",
		"description": "GTA SA\nsetRelationship(int acquaintance, int pedtype, int toPedtype)\n",
		"prefix": "setRelationship",
		"scope": "source.lua"
	},
	"clearRelationship": {
		"body": "clearRelationship(${1:acquaintance},${2:pedtype},${3:toPedtype})",
		"description": "GTA SA\nclearRelationship(int acquaintance, int pedtype, int toPedtype)\n",
		"prefix": "clearRelationship",
		"scope": "source.lua"
	},
	"clearGroupDecisionMakerEventResponse": {
		"body": "clearGroupDecisionMakerEventResponse(${1:maker},${2:event})",
		"description": "GTA SA\nclearGroupDecisionMakerEventResponse(int maker, int event)\n",
		"prefix": "clearGroupDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"addGroupDecisionMakerEventResponse": {
		"body": "addGroupDecisionMakerEventResponse(${1:maker},${2:event},${3:taskID},${4:respect},${5:hate},${6:like},${7:dislike},${8:inCar},${9:onFoot})",
		"description": "GTA SA\naddGroupDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)\n",
		"prefix": "addGroupDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"drawSpriteWithRotation": {
		"body": "drawSpriteWithRotation(${1:texture},${2:x},${3:y},${4:scaleX},${5:scaleY},${6:angle},${7:r},${8:g},${9:b},${10:a})",
		"description": "GTA SA\ndrawSpriteWithRotation(int texture, float x, float y, float scaleX, float scaleY, float angle, int r, int g, int b, int a)\n",
		"prefix": "drawSpriteWithRotation",
		"scope": "source.lua"
	},
	"taskUseAttractor": {
		"body": "taskUseAttractor(${1:ped},${2:attractor})",
		"description": "GTA SA\ntaskUseAttractor(Ped ped, int attractor)\n",
		"prefix": "taskUseAttractor",
		"scope": "source.lua"
	},
	"taskShootAtChar": {
		"body": "taskShootAtChar(${1:ped},${2:atActor},${3:timelimit})",
		"description": "GTA SA\ntaskShootAtChar(Ped ped, int atActor, int timelimit)\n",
		"prefix": "taskShootAtChar",
		"scope": "source.lua"
	},
	"setInformRespectedFriends": {
		"body": "setInformRespectedFriends(${1:flags},${2:radius},${3:pedsToScan})",
		"description": "GTA SA\nsetInformRespectedFriends(int flags, float radius, int pedsToScan)\n",
		"prefix": "setInformRespectedFriends",
		"scope": "source.lua"
	},
	"isCharRespondingToEvent": {
		"body": "isCharRespondingToEvent(${1:ped},${2:event})",
		"description": "GTA SA\nbool result = isCharRespondingToEvent(Ped ped, int event)\n",
		"prefix": "isCharRespondingToEvent",
		"scope": "source.lua"
	},
	"setObjectVisible": {
		"body": "setObjectVisible(${1:object},${2:visibility})",
		"description": "GTA SA\nsetObjectVisible(Object object, bool visibility)\n",
		"prefix": "setObjectVisible",
		"scope": "source.lua"
	},
	"taskFleeCharAnyMeans": {
		"body": "taskFleeCharAnyMeans(${1:ped},${2:fleeFrom},${3:runDistance},${4:time},${5:changeCourse},${6:unkTime1},${7:unkTime2},${8:awayRadius})",
		"description": "GTA SA\ntaskFleeCharAnyMeans(Ped ped, int fleeFrom, float runDistance, int time, bool changeCourse, int unkTime1, int unkTime2, float awayRadius)\n",
		"prefix": "taskFleeCharAnyMeans",
		"scope": "source.lua"
	},
	"flushPatrolRoute": {
		"body": "flushPatrolRoute()",
		"description": "GTA SA\nflushPatrolRoute()\n",
		"prefix": "flushPatrolRoute",
		"scope": "source.lua"
	},
	"extendPatrolRoute": {
		"body": "extendPatrolRoute(${1:X},${2:Y},${3:Z},${4:animation},${5:IFPFile})",
		"description": "GTA SA\nextendPatrolRoute(float X, float Y, float Z, string animation, string IFPFile)\n",
		"prefix": "extendPatrolRoute",
		"scope": "source.lua"
	},
	"playObjectAnim": {
		"body": "playObjectAnim(${1:object},${2:animation},${3:IFPFile},${4:framedelta},${5:lockF},${6:loop})",
		"description": "GTA SA\nbool result = playObjectAnim(Object object, string animation, string IFPFile, float framedelta, bool lockF, bool loop)\n",
		"prefix": "playObjectAnim",
		"scope": "source.lua"
	},
	"setRadarZoom": {
		"body": "setRadarZoom(${1:zoom})",
		"description": "GTA SA\nsetRadarZoom(int zoom)\n",
		"prefix": "setRadarZoom",
		"scope": "source.lua"
	},
	"doesBlipExist": {
		"body": "doesBlipExist(${1:marker})",
		"description": "GTA SA\nbool result = doesBlipExist(Marker marker)\n",
		"prefix": "doesBlipExist",
		"scope": "source.lua"
	},
	"loadPrices": {
		"body": "loadPrices(${1:shopping})",
		"description": "GTA SA\nloadPrices(GxtString shopping)\n",
		"prefix": "loadPrices",
		"scope": "source.lua"
	},
	"loadShop": {
		"body": "loadShop(${1:shopping})",
		"description": "GTA SA\nloadShop(GxtString shopping)\n",
		"prefix": "loadShop",
		"scope": "source.lua"
	},
	"getNumberOfItemsInShop": {
		"body": "getNumberOfItemsInShop()",
		"description": "GTA SA\nint num = getNumberOfItemsInShop()\n",
		"prefix": "getNumberOfItemsInShop",
		"scope": "source.lua"
	},
	"getItemInShop": {
		"body": "getItemInShop(${1:index})",
		"description": "GTA SA\nint item = getItemInShop(int index)\n",
		"prefix": "getItemInShop",
		"scope": "source.lua"
	},
	"getPriceOfItem": {
		"body": "getPriceOfItem(${1:item})",
		"description": "GTA SA\nint price = getPriceOfItem(int item)\n",
		"prefix": "getPriceOfItem",
		"scope": "source.lua"
	},
	"taskDead": {
		"body": "taskDead(${1:ped})",
		"description": "GTA SA\ntaskDead(Ped ped)\n",
		"prefix": "taskDead",
		"scope": "source.lua"
	},
	"setCarAsMissionCar": {
		"body": "setCarAsMissionCar(${1:car})",
		"description": "GTA SA\nsetCarAsMissionCar(Vehicle car)\n",
		"prefix": "setCarAsMissionCar",
		"scope": "source.lua"
	},
	"setZonePopulationType": {
		"body": "setZonePopulationType(${1:zone},${2:popcycle})",
		"description": "GTA SA\nsetZonePopulationType(GxtString zone, int popcycle)\n",
		"prefix": "setZonePopulationType",
		"scope": "source.lua"
	},
	"setZoneDealerStrength": {
		"body": "setZoneDealerStrength(${1:zone},${2:density})",
		"description": "GTA SA\nsetZoneDealerStrength(GxtString zone, int density)\n",
		"prefix": "setZoneDealerStrength",
		"scope": "source.lua"
	},
	"getZoneDealerStrength": {
		"body": "getZoneDealerStrength(${1:zone})",
		"description": "GTA SA\nint strength = getZoneDealerStrength(GxtString zone)\n",
		"prefix": "getZoneDealerStrength",
		"scope": "source.lua"
	},
	"setZoneGangStrength": {
		"body": "setZoneGangStrength(${1:zone},${2:gang},${3:density})",
		"description": "GTA SA\nsetZoneGangStrength(GxtString zone, int gang, int density)\n",
		"prefix": "setZoneGangStrength",
		"scope": "source.lua"
	},
	"getZoneGangStrength": {
		"body": "getZoneGangStrength(${1:zone},${2:gang})",
		"description": "GTA SA\nint density = getZoneGangStrength(GxtString zone, int gang)\n",
		"prefix": "getZoneGangStrength",
		"scope": "source.lua"
	},
	"isMessageBeingDisplayed": {
		"body": "isMessageBeingDisplayed()",
		"description": "GTA SA\nbool result = isMessageBeingDisplayed()\n",
		"prefix": "isMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"setCharIsTargetPriority": {
		"body": "setCharIsTargetPriority(${1:ped},${2:targetPriority})",
		"description": "GTA SA\nsetCharIsTargetPriority(Ped ped, bool targetPriority)\n",
		"prefix": "setCharIsTargetPriority",
		"scope": "source.lua"
	},
	"customPlateDesignForNextCar": {
		"body": "customPlateDesignForNextCar(${1:modelNumplate},${2:townTexture})",
		"description": "GTA SA\ncustomPlateDesignForNextCar(Model modelNumplate, int townTexture)\n",
		"prefix": "customPlateDesignForNextCar",
		"scope": "source.lua"
	},
	"taskGotoCar": {
		"body": "taskGotoCar(${1:ped},${2:car},${3:timeMS},${4:stopAtDistance})",
		"description": "GTA SA\ntaskGotoCar(Ped ped, Vehicle car, int timeMS, float stopAtDistance)\n",
		"prefix": "taskGotoCar",
		"scope": "source.lua"
	},
	"requestIpl": {
		"body": "requestIpl(${1:group})",
		"description": "GTA SA\nrequestIpl(string group)\n",
		"prefix": "requestIpl",
		"scope": "source.lua"
	},
	"removeIpl": {
		"body": "removeIpl(${1:group})",
		"description": "GTA SA\nremoveIpl(string group)\n",
		"prefix": "removeIpl",
		"scope": "source.lua"
	},
	"removeIplDiscreetly": {
		"body": "removeIplDiscreetly(${1:group})",
		"description": "GTA SA\nremoveIplDiscreetly(string group)\n",
		"prefix": "removeIplDiscreetly",
		"scope": "source.lua"
	},
	"setCharRelationship": {
		"body": "setCharRelationship(${1:ped},${2:acquaintance},${3:pedtype})",
		"description": "GTA SA\nsetCharRelationship(Ped ped, int acquaintance, int pedtype)\n",
		"prefix": "setCharRelationship",
		"scope": "source.lua"
	},
	"clearCharRelationship": {
		"body": "clearCharRelationship(${1:ped},${2:acquaintance},${3:pedtype})",
		"description": "GTA SA\nclearCharRelationship(Ped ped, int acquaintance, int pedtype)\n",
		"prefix": "clearCharRelationship",
		"scope": "source.lua"
	},
	"clearAllCharRelationships": {
		"body": "clearAllCharRelationships(${1:ped},${2:acquaintance})",
		"description": "GTA SA\nclearAllCharRelationships(Ped ped, int acquaintance)\n",
		"prefix": "clearAllCharRelationships",
		"scope": "source.lua"
	},
	"getCarPitch": {
		"body": "getCarPitch(${1:car})",
		"description": "GTA SA\nfloat pitch = getCarPitch(Vehicle car)\n",
		"prefix": "getCarPitch",
		"scope": "source.lua"
	},
	"getActiveInterior": {
		"body": "getActiveInterior()",
		"description": "GTA SA\nint interior = getActiveInterior()\n",
		"prefix": "getActiveInterior",
		"scope": "source.lua"
	},
	"heliKeepEntityInView": {
		"body": "heliKeepEntityInView(${1:heli},${2:ped},${3:car},${4:minaltitude},${5:maxaltitude})",
		"description": "GTA SA\nheliKeepEntityInView(Vehicle heli, Ped ped, Vehicle car, float minaltitude, float maxaltitude)\n",
		"prefix": "heliKeepEntityInView",
		"scope": "source.lua"
	},
	"getWeapontypeModel": {
		"body": "getWeapontypeModel(${1:id})",
		"description": "GTA SA\nint model = getWeapontypeModel(int id)\n",
		"prefix": "getWeapontypeModel",
		"scope": "source.lua"
	},
	"getWeapontypeSlot": {
		"body": "getWeapontypeSlot(${1:id})",
		"description": "GTA SA\nint slot = getWeapontypeSlot(int id)\n",
		"prefix": "getWeapontypeSlot",
		"scope": "source.lua"
	},
	"getShoppingExtraInfo": {
		"body": "getShoppingExtraInfo(${1:item},${2:flag})",
		"description": "GTA SA\nint info = getShoppingExtraInfo(int item, int flag)\n",
		"prefix": "getShoppingExtraInfo",
		"scope": "source.lua"
	},
	"givePlayerClothes": {
		"body": "givePlayerClothes(${1:player},${2:texture},${3:model},${4:bodypart})",
		"description": "GTA SA\ngivePlayerClothes(Player player, int texture, int model, int bodypart)\n",
		"prefix": "givePlayerClothes",
		"scope": "source.lua"
	},
	"getNumberOfFiresInArea": {
		"body": "getNumberOfFiresInArea(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2})",
		"description": "GTA SA\nint num = getNumberOfFiresInArea(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getNumberOfFiresInArea",
		"scope": "source.lua"
	},
	"attachWinchToHeli": {
		"body": "attachWinchToHeli(${1:heli},${2:magnet})",
		"description": "GTA SA\nattachWinchToHeli(Vehicle heli, bool magnet)\n",
		"prefix": "attachWinchToHeli",
		"scope": "source.lua"
	},
	"releaseEntityFromWinch": {
		"body": "releaseEntityFromWinch(${1:heli})",
		"description": "GTA SA\nreleaseEntityFromWinch(Vehicle heli)\n",
		"prefix": "releaseEntityFromWinch",
		"scope": "source.lua"
	},
	"getTrainCarriage": {
		"body": "getTrainCarriage(${1:train},${2:handle})",
		"description": "GTA SA\nint carriage = getTrainCarriage(Vehicle train, int handle)\n",
		"prefix": "getTrainCarriage",
		"scope": "source.lua"
	},
	"grabEntityOnWinch": {
		"body": "grabEntityOnWinch(${1:heli})",
		"description": "GTA SA\nVehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnWinch(Vehicle heli)\n",
		"prefix": "grabEntityOnWinch",
		"scope": "source.lua"
	},
	"getNameOfItem": {
		"body": "getNameOfItem(${1:item})",
		"description": "GTA SA\nGxtString name = getNameOfItem(int item)\n",
		"prefix": "getNameOfItem",
		"scope": "source.lua"
	},
	"taskClimb": {
		"body": "taskClimb(${1:ped},${2:climb})",
		"description": "GTA SA\ntaskClimb(Ped ped, bool climb)\n",
		"prefix": "taskClimb",
		"scope": "source.lua"
	},
	"buyItem": {
		"body": "buyItem(${1:item})",
		"description": "GTA SA\nbuyItem(int item)\n",
		"prefix": "buyItem",
		"scope": "source.lua"
	},
	"clearCharTasksImmediately": {
		"body": "clearCharTasksImmediately(${1:ped})",
		"description": "GTA SA\nclearCharTasksImmediately(Ped ped)\n",
		"prefix": "clearCharTasksImmediately",
		"scope": "source.lua"
	},
	"storeClothesState": {
		"body": "storeClothesState()",
		"description": "GTA SA\nstoreClothesState()\n",
		"prefix": "storeClothesState",
		"scope": "source.lua"
	},
	"restoreClothesState": {
		"body": "restoreClothesState()",
		"description": "GTA SA\nrestoreClothesState()\n",
		"prefix": "restoreClothesState",
		"scope": "source.lua"
	},
	"getRopeHeightForObject": {
		"body": "getRopeHeightForObject(${1:magnet})",
		"description": "GTA SA\nfloat length = getRopeHeightForObject(int magnet)\n",
		"prefix": "getRopeHeightForObject",
		"scope": "source.lua"
	},
	"setRopeHeightForObject": {
		"body": "setRopeHeightForObject(${1:magnet},${2:length})",
		"description": "GTA SA\nsetRopeHeightForObject(int magnet, float length)\n",
		"prefix": "setRopeHeightForObject",
		"scope": "source.lua"
	},
	"grabEntityOnRopeForObject": {
		"body": "grabEntityOnRopeForObject(${1:magnet})",
		"description": "GTA SA\nVehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnRopeForObject(int magnet)\n",
		"prefix": "grabEntityOnRopeForObject",
		"scope": "source.lua"
	},
	"releaseEntityFromRopeForObject": {
		"body": "releaseEntityFromRopeForObject(${1:magnet})",
		"description": "GTA SA\nreleaseEntityFromRopeForObject(int magnet)\n",
		"prefix": "releaseEntityFromRopeForObject",
		"scope": "source.lua"
	},
	"playerEnteredDockCrane": {
		"body": "playerEnteredDockCrane()",
		"description": "GTA SA\nplayerEnteredDockCrane()\n",
		"prefix": "playerEnteredDockCrane",
		"scope": "source.lua"
	},
	"playerEnteredBuildingsiteCrane": {
		"body": "playerEnteredBuildingsiteCrane()",
		"description": "GTA SA\nplayerEnteredBuildingsiteCrane()\n",
		"prefix": "playerEnteredBuildingsiteCrane",
		"scope": "source.lua"
	},
	"playerLeftCrane": {
		"body": "playerLeftCrane()",
		"description": "GTA SA\nplayerLeftCrane()\n",
		"prefix": "playerLeftCrane",
		"scope": "source.lua"
	},
	"performSequenceTaskFromProgress": {
		"body": "performSequenceTaskFromProgress(${1:ped},${2:sequence},${3:unkProgress1},${4:unkProgress2})",
		"description": "GTA SA\nperformSequenceTaskFromProgress(Ped ped, int sequence, int unkProgress1, int unkProgress2)\n",
		"prefix": "performSequenceTaskFromProgress",
		"scope": "source.lua"
	},
	"setNextDesiredMoveState": {
		"body": "setNextDesiredMoveState(${1:speed})",
		"description": "GTA SA\nsetNextDesiredMoveState(int speed)\n",
		"prefix": "setNextDesiredMoveState",
		"scope": "source.lua"
	},
	"taskGotoCharAiming": {
		"body": "taskGotoCharAiming(${1:ped},${2:followActor},${3:minradius},${4:maxradius})",
		"description": "GTA SA\ntaskGotoCharAiming(Ped ped, int followActor, float minradius, float maxradius)\n",
		"prefix": "taskGotoCharAiming",
		"scope": "source.lua"
	},
	"getSequenceProgressRecursive": {
		"body": "getSequenceProgressRecursive(${1:ped})",
		"description": "GTA SA\nint unkProgress1, int unkProgress2 = getSequenceProgressRecursive(Ped ped)\n",
		"prefix": "getSequenceProgressRecursive",
		"scope": "source.lua"
	},
	"taskKillCharOnFootTimed": {
		"body": "taskKillCharOnFootTimed(${1:ped},${2:attackActor},${3:time})",
		"description": "GTA SA\ntaskKillCharOnFootTimed(Ped ped, int attackActor, int time)\n",
		"prefix": "taskKillCharOnFootTimed",
		"scope": "source.lua"
	},
	"getNearestTagPosition": {
		"body": "getNearestTagPosition(${1:X},${2:Y},${3:Z})",
		"description": "GTA SA\nfloat X, float Y, float Z = getNearestTagPosition(float X, float Y, float Z)\n",
		"prefix": "getNearestTagPosition",
		"scope": "source.lua"
	},
	"taskJetpack": {
		"body": "taskJetpack(${1:ped})",
		"description": "GTA SA\ntaskJetpack(Ped ped)\n",
		"prefix": "taskJetpack",
		"scope": "source.lua"
	},
	"setArea51SamSite": {
		"body": "setArea51SamSite(${1:enable})",
		"description": "GTA SA\nsetArea51SamSite(bool enable)\n",
		"prefix": "setArea51SamSite",
		"scope": "source.lua"
	},
	"isCharInAnySearchlight": {
		"body": "isCharInAnySearchlight(${1:ped})",
		"description": "GTA SA\nbool result, Searchlight searchlight = isCharInAnySearchlight(Ped ped)\n",
		"prefix": "isCharInAnySearchlight",
		"scope": "source.lua"
	},
	"isTrailerAttachedToCab": {
		"body": "isTrailerAttachedToCab(${1:car},${2:trailer})",
		"description": "GTA SA\nbool result = isTrailerAttachedToCab(Vehicle car, int trailer)\n",
		"prefix": "isTrailerAttachedToCab",
		"scope": "source.lua"
	},
	"detachTrailerFromCab": {
		"body": "detachTrailerFromCab(${1:trailer},${2:cab})",
		"description": "GTA SA\ndetachTrailerFromCab(int trailer, int cab)\n",
		"prefix": "detachTrailerFromCab",
		"scope": "source.lua"
	},
	"getPlayerGroup": {
		"body": "getPlayerGroup(${1:player})",
		"description": "GTA SA\nint group = getPlayerGroup(Player player)\n",
		"prefix": "getPlayerGroup",
		"scope": "source.lua"
	},
	"getLoadedShop": {
		"body": "getLoadedShop()",
		"description": "GTA SA\nGxtString shop = getLoadedShop()\n",
		"prefix": "getLoadedShop",
		"scope": "source.lua"
	},
	"getBeatProximity": {
		"body": "getBeatProximity(${1:track})",
		"description": "GTA SA\nint int2, int int3, int int4 = getBeatProximity(int track)\n",
		"prefix": "getBeatProximity",
		"scope": "source.lua"
	},
	"setGroupDefaultTaskAllocator": {
		"body": "setGroupDefaultTaskAllocator(${1:group},${2:command})",
		"description": "GTA SA\nsetGroupDefaultTaskAllocator(int group, int command)\n",
		"prefix": "setGroupDefaultTaskAllocator",
		"scope": "source.lua"
	},
	"setPlayerGroupRecruitment": {
		"body": "setPlayerGroupRecruitment(${1:player},${2:enabled})",
		"description": "GTA SA\nsetPlayerGroupRecruitment(Player player, bool enabled)\n",
		"prefix": "setPlayerGroupRecruitment",
		"scope": "source.lua"
	},
	"activateHeliSpeedCheat": {
		"body": "activateHeliSpeedCheat(${1:heli},${2:power})",
		"description": "GTA SA\nactivateHeliSpeedCheat(Vehicle heli, int power)\n",
		"prefix": "activateHeliSpeedCheat",
		"scope": "source.lua"
	},
	"taskSetCharDecisionMaker": {
		"body": "taskSetCharDecisionMaker(${1:ped},${2:maker})",
		"description": "GTA SA\ntaskSetCharDecisionMaker(Ped ped, int maker)\n",
		"prefix": "taskSetCharDecisionMaker",
		"scope": "source.lua"
	},
	"deleteMissionTrain": {
		"body": "deleteMissionTrain(${1:train})",
		"description": "GTA SA\ndeleteMissionTrain(Vehicle train)\n",
		"prefix": "deleteMissionTrain",
		"scope": "source.lua"
	},
	"markMissionTrainAsNoLongerNeeded": {
		"body": "markMissionTrainAsNoLongerNeeded(${1:train})",
		"description": "GTA SA\nmarkMissionTrainAsNoLongerNeeded(Vehicle train)\n",
		"prefix": "markMissionTrainAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"setBlipAlwaysDisplayOnZoomedRadar": {
		"body": "setBlipAlwaysDisplayOnZoomedRadar(${1:marker},${2:displayAlways})",
		"description": "GTA SA\nsetBlipAlwaysDisplayOnZoomedRadar(Marker marker, bool displayAlways)\n",
		"prefix": "setBlipAlwaysDisplayOnZoomedRadar",
		"scope": "source.lua"
	},
	"requestCarRecording": {
		"body": "requestCarRecording(${1:path})",
		"description": "GTA SA\nrequestCarRecording(int path)\n",
		"prefix": "requestCarRecording",
		"scope": "source.lua"
	},
	"hasCarRecordingBeenLoaded": {
		"body": "hasCarRecordingBeenLoaded(${1:path})",
		"description": "GTA SA\nbool result = hasCarRecordingBeenLoaded(int path)\n",
		"prefix": "hasCarRecordingBeenLoaded",
		"scope": "source.lua"
	},
	"getObjectQuaternion": {
		"body": "getObjectQuaternion(${1:object})",
		"description": "GTA SA\nfloat x, float y, float z, float w = getObjectQuaternion(Object object)\n",
		"prefix": "getObjectQuaternion",
		"scope": "source.lua"
	},
	"setObjectQuaternion": {
		"body": "setObjectQuaternion(${1:object},${2:x},${3:y},${4:z},${5:w})",
		"description": "GTA SA\nsetObjectQuaternion(Object object, float x, float y, float z, float w)\n",
		"prefix": "setObjectQuaternion",
		"scope": "source.lua"
	},
	"getVehicleQuaternion": {
		"body": "getVehicleQuaternion(${1:car})",
		"description": "GTA SA\nfloat x, float y, float z, float w = getVehicleQuaternion(Vehicle car)\n",
		"prefix": "getVehicleQuaternion",
		"scope": "source.lua"
	},
	"setVehicleQuaternion": {
		"body": "setVehicleQuaternion(${1:car},${2:x},${3:y},${4:z},${5:w})",
		"description": "GTA SA\nsetVehicleQuaternion(Vehicle car, float x, float y, float z, float w)\n",
		"prefix": "setVehicleQuaternion",
		"scope": "source.lua"
	},
	"setMissionTrainCoordinates": {
		"body": "setMissionTrainCoordinates(${1:train},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nsetMissionTrainCoordinates(Vehicle train, float X, float Y, float Z)\n",
		"prefix": "setMissionTrainCoordinates",
		"scope": "source.lua"
	},
	"taskComplexPickupObject": {
		"body": "taskComplexPickupObject(${1:ped},${2:object})",
		"description": "GTA SA\ntaskComplexPickupObject(Ped ped, Object object)\n",
		"prefix": "taskComplexPickupObject",
		"scope": "source.lua"
	},
	"listenToPlayerGroupCommands": {
		"body": "listenToPlayerGroupCommands(${1:ped},${2:listen})",
		"description": "GTA SA\nlistenToPlayerGroupCommands(Ped ped, bool listen)\n",
		"prefix": "listenToPlayerGroupCommands",
		"scope": "source.lua"
	},
	"setPlayerEnterCarButton": {
		"body": "setPlayerEnterCarButton(${1:player},${2:can})",
		"description": "GTA SA\nsetPlayerEnterCarButton(Player player, bool can)\n",
		"prefix": "setPlayerEnterCarButton",
		"scope": "source.lua"
	},
	"taskCharSlideToCoord": {
		"body": "taskCharSlideToCoord(${1:ped},${2:toX},${3:toY},${4:toZ},${5:angle},${6:withinRadius})",
		"description": "GTA SA\ntaskCharSlideToCoord(Ped ped, float toX, float toY, float toZ, float angle, float withinRadius)\n",
		"prefix": "taskCharSlideToCoord",
		"scope": "source.lua"
	},
	"getCurrentDayOfWeek": {
		"body": "getCurrentDayOfWeek()",
		"description": "GTA SA\nint weekday = getCurrentDayOfWeek()\n",
		"prefix": "getCurrentDayOfWeek",
		"scope": "source.lua"
	},
	"registerScriptBrainForCodeUse": {
		"body": "registerScriptBrainForCodeUse(${1:id},${2:gxtString})",
		"description": "GTA SA\nregisterScriptBrainForCodeUse(int id, GxtString gxtString)\n",
		"prefix": "registerScriptBrainForCodeUse",
		"scope": "source.lua"
	},
	"applyForceToCar": {
		"body": "applyForceToCar(${1:car},${2:vecX},${3:vecY},${4:vecZ},${5:rotationX},${6:rotationY},${7:rotationZ})",
		"description": "GTA SA\napplyForceToCar(Vehicle car, float vecX, float vecY, float vecZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "applyForceToCar",
		"scope": "source.lua"
	},
	"addToCarRotationVelocity": {
		"body": "addToCarRotationVelocity(${1:car},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\naddToCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)\n",
		"prefix": "addToCarRotationVelocity",
		"scope": "source.lua"
	},
	"setCarRotationVelocity": {
		"body": "setCarRotationVelocity(${1:car},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\nsetCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCarRotationVelocity",
		"scope": "source.lua"
	},
	"setCharShootRate": {
		"body": "setCharShootRate(${1:ped},${2:rate})",
		"description": "GTA SA\nsetCharShootRate(Ped ped, int rate)\n",
		"prefix": "setCharShootRate",
		"scope": "source.lua"
	},
	"isModelInCdimage": {
		"body": "isModelInCdimage(${1:modelId})",
		"description": "GTA SA\nbool result = isModelInCdimage(Model modelId)\n",
		"prefix": "isModelInCdimage",
		"scope": "source.lua"
	},
	"removeOilPuddlesInArea": {
		"body": "removeOilPuddlesInArea(${1:x1},${2:y1},${3:x2},${4:y2})",
		"description": "GTA SA\nremoveOilPuddlesInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "removeOilPuddlesInArea",
		"scope": "source.lua"
	},
	"setBlipAsFriendly": {
		"body": "setBlipAsFriendly(${1:marker},${2:type})",
		"description": "GTA SA\nsetBlipAsFriendly(Marker marker, bool type)\n",
		"prefix": "setBlipAsFriendly",
		"scope": "source.lua"
	},
	"taskSwimToCoord": {
		"body": "taskSwimToCoord(${1:ped},${2:toX},${3:toY},${4:toZ})",
		"description": "GTA SA\ntaskSwimToCoord(Ped ped, float toX, float toY, float toZ)\n",
		"prefix": "taskSwimToCoord",
		"scope": "source.lua"
	},
	"getModelDimensions": {
		"body": "getModelDimensions(${1:modelId})",
		"description": "GTA SA\nfloat x1, float y1, float z1, float x2, float y2, float z2 = getModelDimensions(Model modelId)\n",
		"prefix": "getModelDimensions",
		"scope": "source.lua"
	},
	"copyCharDecisionMaker": {
		"body": "copyCharDecisionMaker(${1:ped})",
		"description": "GTA SA\nint maker = copyCharDecisionMaker(Ped ped)\n",
		"prefix": "copyCharDecisionMaker",
		"scope": "source.lua"
	},
	"copyGroupDecisionMaker": {
		"body": "copyGroupDecisionMaker(${1:group})",
		"description": "GTA SA\nint maker = copyGroupDecisionMaker(int group)\n",
		"prefix": "copyGroupDecisionMaker",
		"scope": "source.lua"
	},
	"taskDrivePointRouteAdvanced": {
		"body": "taskDrivePointRouteAdvanced(${1:ped},${2:car},${3:speed},${4:flag1},${5:flag2},${6:flag3})",
		"description": "GTA SA\ntaskDrivePointRouteAdvanced(Ped ped, Vehicle car, float speed, int flag1, int flag2, int flag3)\n",
		"prefix": "taskDrivePointRouteAdvanced",
		"scope": "source.lua"
	},
	"isRelationshipSet": {
		"body": "isRelationshipSet(${1:acquaintance},${2:ofActors},${3:toActors})",
		"description": "GTA SA\nbool result = isRelationshipSet(int acquaintance, int ofActors, int toActors)\n",
		"prefix": "isRelationshipSet",
		"scope": "source.lua"
	},
	"setCarAlwaysCreateSkids": {
		"body": "setCarAlwaysCreateSkids(${1:car},${2:enable})",
		"description": "GTA SA\nsetCarAlwaysCreateSkids(Vehicle car, bool enable)\n",
		"prefix": "setCarAlwaysCreateSkids",
		"scope": "source.lua"
	},
	"getCityFromCoords": {
		"body": "getCityFromCoords(${1:X},${2:Y},${3:Z})",
		"description": "GTA SA\nint city = getCityFromCoords(float X, float Y, float Z)\n",
		"prefix": "getCityFromCoords",
		"scope": "source.lua"
	},
	"hasObjectOfTypeBeenSmashed": {
		"body": "hasObjectOfTypeBeenSmashed(${1:X},${2:Y},${3:Z},${4:radius},${5:modelId})",
		"description": "GTA SA\nbool result = hasObjectOfTypeBeenSmashed(float X, float Y, float Z, float radius, Model modelId)\n",
		"prefix": "hasObjectOfTypeBeenSmashed",
		"scope": "source.lua"
	},
	"isPlayerPerformingWheelie": {
		"body": "isPlayerPerformingWheelie(${1:player})",
		"description": "GTA SA\nbool result = isPlayerPerformingWheelie(Player player)\n",
		"prefix": "isPlayerPerformingWheelie",
		"scope": "source.lua"
	},
	"isPlayerPerformingStoppie": {
		"body": "isPlayerPerformingStoppie(${1:player})",
		"description": "GTA SA\nbool result = isPlayerPerformingStoppie(Player player)\n",
		"prefix": "isPlayerPerformingStoppie",
		"scope": "source.lua"
	},
	"setCheckpointCoords": {
		"body": "setCheckpointCoords(${1:checkpoint},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nsetCheckpointCoords(Checkpoint checkpoint, float X, float Y, float Z)\n",
		"prefix": "setCheckpointCoords",
		"scope": "source.lua"
	},
	"controlCarHydraulics": {
		"body": "controlCarHydraulics(${1:car},${2:f1},${3:f2},${4:f3},${5:f4})",
		"description": "GTA SA\ncontrolCarHydraulics(Vehicle car, float f1, float f2, float f3, float f4)\n",
		"prefix": "controlCarHydraulics",
		"scope": "source.lua"
	},
	"getGroupSize": {
		"body": "getGroupSize(${1:group})",
		"description": "GTA SA\nint numberOfLeaders, int numberOfMembers = getGroupSize(int group)\n",
		"prefix": "getGroupSize",
		"scope": "source.lua"
	},
	"setObjectCollisionDamageEffect": {
		"body": "setObjectCollisionDamageEffect(${1:object},${2:destructible})",
		"description": "GTA SA\nsetObjectCollisionDamageEffect(Object object, bool destructible)\n",
		"prefix": "setObjectCollisionDamageEffect",
		"scope": "source.lua"
	},
	"setCarFollowCar": {
		"body": "setCarFollowCar(${1:car},${2:followCar},${3:radius})",
		"description": "GTA SA\nsetCarFollowCar(Vehicle car, int followCar, float radius)\n",
		"prefix": "setCarFollowCar",
		"scope": "source.lua"
	},
	"playerEnteredQuarryCrane": {
		"body": "playerEnteredQuarryCrane()",
		"description": "GTA SA\nplayerEnteredQuarryCrane()\n",
		"prefix": "playerEnteredQuarryCrane",
		"scope": "source.lua"
	},
	"playerEnteredLasVegasCrane": {
		"body": "playerEnteredLasVegasCrane()",
		"description": "GTA SA\nplayerEnteredLasVegasCrane()\n",
		"prefix": "playerEnteredLasVegasCrane",
		"scope": "source.lua"
	},
	"switchEntryExit": {
		"body": "switchEntryExit(${1:interior},${2:access})",
		"description": "GTA SA\nswitchEntryExit(GxtString interior, bool access)\n",
		"prefix": "switchEntryExit",
		"scope": "source.lua"
	},
	"displayTextWithFloat": {
		"body": "displayTextWithFloat(${1:X},${2:Y},${3:GXT},${4:value},${5:flag})",
		"description": "GTA SA\ndisplayTextWithFloat(float X, float Y, GxtString GXT, float value, int flag)\n",
		"prefix": "displayTextWithFloat",
		"scope": "source.lua"
	},
	"doesGroupExist": {
		"body": "doesGroupExist(${1:group})",
		"description": "GTA SA\nbool result = doesGroupExist(int group)\n",
		"prefix": "doesGroupExist",
		"scope": "source.lua"
	},
	"giveMeleeAttackToChar": {
		"body": "giveMeleeAttackToChar(${1:ped},${2:fightingStyle},${3:moves})",
		"description": "GTA SA\ngiveMeleeAttackToChar(Ped ped, int fightingStyle, int moves)\n",
		"prefix": "giveMeleeAttackToChar",
		"scope": "source.lua"
	},
	"setCarHydraulics": {
		"body": "setCarHydraulics(${1:car},${2:hydraulics})",
		"description": "GTA SA\nsetCarHydraulics(Vehicle car, bool hydraulics)\n",
		"prefix": "setCarHydraulics",
		"scope": "source.lua"
	},
	"is2playerGameGoingOn": {
		"body": "is2playerGameGoingOn()",
		"description": "GTA SA\nbool result = is2playerGameGoingOn()\n",
		"prefix": "is2playerGameGoingOn",
		"scope": "source.lua"
	},
	"getCameraFov": {
		"body": "getCameraFov()",
		"description": "GTA SA\nfloat fov = getCameraFov()\n",
		"prefix": "getCameraFov",
		"scope": "source.lua"
	},
	"doesCarHaveHydraulics": {
		"body": "doesCarHaveHydraulics(${1:car})",
		"description": "GTA SA\nbool result = doesCarHaveHydraulics(Vehicle car)\n",
		"prefix": "doesCarHaveHydraulics",
		"scope": "source.lua"
	},
	"taskCharSlideToCoordAndPlayAnim": {
		"body": "taskCharSlideToCoordAndPlayAnim(${1:ped},${2:toX},${3:toY},${4:toZ},${5:angle},${6:radius},${7:animation},${8:ifp1},${9:ifp2},${10:LA},${11:LX},${12:LY},${13:LF},${14:LT})",
		"description": "GTA SA\ntaskCharSlideToCoordAndPlayAnim(Ped ped, float toX, float toY, float toZ, float angle, float radius, string animation, int ifp1, float ifp2, bool LA, bool LX, bool LY, bool LF, int LT)\n",
		"prefix": "taskCharSlideToCoordAndPlayAnim",
		"scope": "source.lua"
	},
	"getTotalNumberOfPedsKilledByPlayer": {
		"body": "getTotalNumberOfPedsKilledByPlayer(${1:player})",
		"description": "GTA SA\nint number = getTotalNumberOfPedsKilledByPlayer(Player player)\n",
		"prefix": "getTotalNumberOfPedsKilledByPlayer",
		"scope": "source.lua"
	},
	"getLevelDesignCoordsForObject": {
		"body": "getLevelDesignCoordsForObject(${1:object},${2:spoot})",
		"description": "GTA SA\nfloat X, float Y, float Z = getLevelDesignCoordsForObject(Object object, int spoot)\n",
		"prefix": "getLevelDesignCoordsForObject",
		"scope": "source.lua"
	},
	"getCharHighestPriorityEvent": {
		"body": "getCharHighestPriorityEvent(${1:ped})",
		"description": "GTA SA\nint event = getCharHighestPriorityEvent(Ped ped)\n",
		"prefix": "getCharHighestPriorityEvent",
		"scope": "source.lua"
	},
	"getParkingNodeInArea": {
		"body": "getParkingNodeInArea(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2})",
		"description": "GTA SA\nfloat X, float Y, float Z = getParkingNodeInArea(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getParkingNodeInArea",
		"scope": "source.lua"
	},
	"getCarCharIsUsing": {
		"body": "getCarCharIsUsing(${1:ped})",
		"description": "GTA SA\nVehicle car = getCarCharIsUsing(Ped ped)\n",
		"prefix": "getCarCharIsUsing",
		"scope": "source.lua"
	},
	"taskPlayAnimNonInterruptable": {
		"body": "taskPlayAnimNonInterruptable(${1:ped},${2:animation},${3:IFP},${4:framedelta},${5:loopA},${6:lockX},${7:lockY},${8:lockF},${9:time})",
		"description": "GTA SA\ntaskPlayAnimNonInterruptable(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnimNonInterruptable",
		"scope": "source.lua"
	},
	"addStuntJump": {
		"body": "addStuntJump(${1:startX},${2:startY},${3:startZ},${4:radiusX},${5:radiusY},${6:radiusZ},${7:goalX},${8:goalY},${9:goalZ},${10:radius2X},${11:radius2Y},${12:radius2Z},${13:cameraX},${14:cameraY},${15:cameraZ},${16:reward})",
		"description": "GTA SA\naddStuntJump(float startX, float startY, float startZ, float radiusX, float radiusY, float radiusZ, float goalX, float goalY, float goalZ, float radius2X, float radius2Y, float radius2Z, float cameraX, float cameraY, float cameraZ, int reward)\n",
		"prefix": "addStuntJump",
		"scope": "source.lua"
	},
	"setObjectCoordinatesAndVelocity": {
		"body": "setObjectCoordinatesAndVelocity(${1:object},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nsetObjectCoordinatesAndVelocity(Object object, float X, float Y, float Z)\n",
		"prefix": "setObjectCoordinatesAndVelocity",
		"scope": "source.lua"
	},
	"setCharKindaStayInSamePlace": {
		"body": "setCharKindaStayInSamePlace(${1:ped},${2:stay})",
		"description": "GTA SA\nsetCharKindaStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "setCharKindaStayInSamePlace",
		"scope": "source.lua"
	},
	"taskFollowPatrolRoute": {
		"body": "taskFollowPatrolRoute(${1:ped},${2:walkMode},${3:routeMode})",
		"description": "GTA SA\ntaskFollowPatrolRoute(Ped ped, int walkMode, int routeMode)\n",
		"prefix": "taskFollowPatrolRoute",
		"scope": "source.lua"
	},
	"isCharInAir": {
		"body": "isCharInAir(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAir(Ped ped)\n",
		"prefix": "isCharInAir",
		"scope": "source.lua"
	},
	"getCharHeightAboveGround": {
		"body": "getCharHeightAboveGround(${1:ped})",
		"description": "GTA SA\nfloat height = getCharHeightAboveGround(Ped ped)\n",
		"prefix": "getCharHeightAboveGround",
		"scope": "source.lua"
	},
	"setCharWeaponSkill": {
		"body": "setCharWeaponSkill(${1:ped},${2:skill})",
		"description": "GTA SA\nsetCharWeaponSkill(Ped ped, int skill)\n",
		"prefix": "setCharWeaponSkill",
		"scope": "source.lua"
	},
	"setTextEdge": {
		"body": "setTextEdge(${1:size},${2:r},${3:g},${4:b},${5:a})",
		"description": "GTA SA\nsetTextEdge(int size, int r, int g, int b, int a)\n",
		"prefix": "setTextEdge",
		"scope": "source.lua"
	},
	"setCarEngineBroken": {
		"body": "setCarEngineBroken(${1:car},${2:broken})",
		"description": "GTA SA\nsetCarEngineBroken(Vehicle car, bool broken)\n",
		"prefix": "setCarEngineBroken",
		"scope": "source.lua"
	},
	"isThisModelABoat": {
		"body": "isThisModelABoat(${1:modelId})",
		"description": "GTA SA\nbool result = isThisModelABoat(Model modelId)\n",
		"prefix": "isThisModelABoat",
		"scope": "source.lua"
	},
	"isThisModelAPlane": {
		"body": "isThisModelAPlane(${1:modelId})",
		"description": "GTA SA\nbool result = isThisModelAPlane(Model modelId)\n",
		"prefix": "isThisModelAPlane",
		"scope": "source.lua"
	},
	"isThisModelAHeli": {
		"body": "isThisModelAHeli(${1:modelId})",
		"description": "GTA SA\nbool result = isThisModelAHeli(Model modelId)\n",
		"prefix": "isThisModelAHeli",
		"scope": "source.lua"
	},
	"setFirstPersonInCarCameraMode": {
		"body": "setFirstPersonInCarCameraMode(${1:enable})",
		"description": "GTA SA\nsetFirstPersonInCarCameraMode(bool enable)\n",
		"prefix": "setFirstPersonInCarCameraMode",
		"scope": "source.lua"
	},
	"taskGreetPartner": {
		"body": "taskGreetPartner(${1:ped},${2:ped2},${3:unk1},${4:unk2})",
		"description": "GTA SA\ntaskGreetPartner(Ped ped, Ped ped2, float unk1, int unk2)\n",
		"prefix": "taskGreetPartner",
		"scope": "source.lua"
	},
	"setHeliBladesFullSpeed": {
		"body": "setHeliBladesFullSpeed(${1:heli})",
		"description": "GTA SA\nsetHeliBladesFullSpeed(Vehicle heli)\n",
		"prefix": "setHeliBladesFullSpeed",
		"scope": "source.lua"
	},
	"displayHud": {
		"body": "displayHud(${1:enable})",
		"description": "GTA SA\ndisplayHud(bool enable)\n",
		"prefix": "displayHud",
		"scope": "source.lua"
	},
	"connectLods": {
		"body": "connectLods(${1:object},${2:lod})",
		"description": "GTA SA\nconnectLods(Object object, int lod)\n",
		"prefix": "connectLods",
		"scope": "source.lua"
	},
	"setMaxFireGenerations": {
		"body": "setMaxFireGenerations(${1:max})",
		"description": "GTA SA\nsetMaxFireGenerations(int max)\n",
		"prefix": "setMaxFireGenerations",
		"scope": "source.lua"
	},
	"taskDieNamedAnim": {
		"body": "taskDieNamedAnim(${1:ped},${2:animation},${3:ifp1},${4:ifp2},${5:time})",
		"description": "GTA SA\ntaskDieNamedAnim(Ped ped, string animation, string ifp1, float ifp2, int time)\n",
		"prefix": "taskDieNamedAnim",
		"scope": "source.lua"
	},
	"setPlayerDuckButton": {
		"body": "setPlayerDuckButton(${1:player},${2:able})",
		"description": "GTA SA\nsetPlayerDuckButton(Player player, bool able)\n",
		"prefix": "setPlayerDuckButton",
		"scope": "source.lua"
	},
	"setPoolTableCoords": {
		"body": "setPoolTableCoords(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2})",
		"description": "GTA SA\nsetPoolTableCoords(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "setPoolTableCoords",
		"scope": "source.lua"
	},
	"hasObjectBeenPhotographed": {
		"body": "hasObjectBeenPhotographed(${1:object})",
		"description": "GTA SA\nbool result = hasObjectBeenPhotographed(Object object)\n",
		"prefix": "hasObjectBeenPhotographed",
		"scope": "source.lua"
	},
	"doCameraBump": {
		"body": "doCameraBump(${1:rotationZ},${2:rotationY})",
		"description": "GTA SA\ndoCameraBump(float rotationZ, float rotationY)\n",
		"prefix": "doCameraBump",
		"scope": "source.lua"
	},
	"getCurrentDate": {
		"body": "getCurrentDate()",
		"description": "GTA SA\nint day, int month = getCurrentDate()\n",
		"prefix": "getCurrentDate",
		"scope": "source.lua"
	},
	"setObjectAnimSpeed": {
		"body": "setObjectAnimSpeed(${1:object},${2:animation},${3:speed})",
		"description": "GTA SA\nsetObjectAnimSpeed(Object object, string animation, float speed)\n",
		"prefix": "setObjectAnimSpeed",
		"scope": "source.lua"
	},
	"isObjectPlayingAnim": {
		"body": "isObjectPlayingAnim(${1:object},${2:anim})",
		"description": "GTA SA\nbool result = isObjectPlayingAnim(Object object, string anim)\n",
		"prefix": "isObjectPlayingAnim",
		"scope": "source.lua"
	},
	"getObjectAnimCurrentTime": {
		"body": "getObjectAnimCurrentTime(${1:object},${2:animation})",
		"description": "GTA SA\nfloat progress = getObjectAnimCurrentTime(Object object, string animation)\n",
		"prefix": "getObjectAnimCurrentTime",
		"scope": "source.lua"
	},
	"setObjectAnimCurrentTime": {
		"body": "setObjectAnimCurrentTime(${1:object},${2:animation},${3:progress})",
		"description": "GTA SA\nsetObjectAnimCurrentTime(Object object, string animation, float progress)\n",
		"prefix": "setObjectAnimCurrentTime",
		"scope": "source.lua"
	},
	"setCharVelocity": {
		"body": "setCharVelocity(${1:ped},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\nsetCharVelocity(Ped ped, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCharVelocity",
		"scope": "source.lua"
	},
	"getCharVelocity": {
		"body": "getCharVelocity(${1:ped})",
		"description": "GTA SA\nfloat vecX, float vecY, float vecZ = getCharVelocity(Ped ped)\n",
		"prefix": "getCharVelocity",
		"scope": "source.lua"
	},
	"setCharRotation": {
		"body": "setCharRotation(${1:ped},${2:vecX},${3:vecY},${4:vecZ})",
		"description": "GTA SA\nsetCharRotation(Ped ped, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCharRotation",
		"scope": "source.lua"
	},
	"getCarUprightValue": {
		"body": "getCarUprightValue(${1:car})",
		"description": "GTA SA\nfloat value = getCarUprightValue(Vehicle car)\n",
		"prefix": "getCarUprightValue",
		"scope": "source.lua"
	},
	"setVehicleInterior": {
		"body": "setVehicleInterior(${1:car},${2:interior})",
		"description": "GTA SA\nsetVehicleInterior(Vehicle car, int interior)\n",
		"prefix": "setVehicleInterior",
		"scope": "source.lua"
	},
	"selectWeaponsForVehicle": {
		"body": "selectWeaponsForVehicle(${1:car},${2:gun})",
		"description": "GTA SA\nselectWeaponsForVehicle(Vehicle car, bool gun)\n",
		"prefix": "selectWeaponsForVehicle",
		"scope": "source.lua"
	},
	"getCityPlayerIsIn": {
		"body": "getCityPlayerIsIn(${1:player})",
		"description": "GTA SA\nint city = getCityPlayerIsIn(Player player)\n",
		"prefix": "getCityPlayerIsIn",
		"scope": "source.lua"
	},
	"getNameOfZone": {
		"body": "getNameOfZone(${1:X},${2:Y},${3:Z})",
		"description": "GTA SA\nGxtString name = getNameOfZone(float X, float Y, float Z)\n",
		"prefix": "getNameOfZone",
		"scope": "source.lua"
	},
	"activateInteriorPeds": {
		"body": "activateInteriorPeds(${1:activate})",
		"description": "GTA SA\nactivateInteriorPeds(bool activate)\n",
		"prefix": "activateInteriorPeds",
		"scope": "source.lua"
	},
	"setVehicleCanBeTargetted": {
		"body": "setVehicleCanBeTargetted(${1:car},${2:unk})",
		"description": "GTA SA\nsetVehicleCanBeTargetted(Vehicle car, bool unk)\n",
		"prefix": "setVehicleCanBeTargetted",
		"scope": "source.lua"
	},
	"taskFollowFootsteps": {
		"body": "taskFollowFootsteps(${1:ped},${2:followActor})",
		"description": "GTA SA\ntaskFollowFootsteps(Ped ped, int followActor)\n",
		"prefix": "taskFollowFootsteps",
		"scope": "source.lua"
	},
	"damageChar": {
		"body": "damageChar(${1:ped},${2:health},${3:affectArmour})",
		"description": "GTA SA\ndamageChar(Ped ped, int health, bool affectArmour)\n",
		"prefix": "damageChar",
		"scope": "source.lua"
	},
	"setCarCanBeVisiblyDamaged": {
		"body": "setCarCanBeVisiblyDamaged(${1:car},${2:can})",
		"description": "GTA SA\nsetCarCanBeVisiblyDamaged(Vehicle car, bool can)\n",
		"prefix": "setCarCanBeVisiblyDamaged",
		"scope": "source.lua"
	},
	"setHeliReachedTargetDistance": {
		"body": "setHeliReachedTargetDistance(${1:heli},${2:dist})",
		"description": "GTA SA\nsetHeliReachedTargetDistance(Vehicle heli, int dist)\n",
		"prefix": "setHeliReachedTargetDistance",
		"scope": "source.lua"
	},
	"getSoundLevelAtCoords": {
		"body": "getSoundLevelAtCoords(${1:ped},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nfloat level = getSoundLevelAtCoords(Ped ped, float X, float Y, float Z)\n",
		"prefix": "getSoundLevelAtCoords",
		"scope": "source.lua"
	},
	"setCharAllowedToDuck": {
		"body": "setCharAllowedToDuck(${1:ped},${2:enable})",
		"description": "GTA SA\nsetCharAllowedToDuck(Ped ped, bool enable)\n",
		"prefix": "setCharAllowedToDuck",
		"scope": "source.lua"
	},
	"setHeadingForAttachedPlayer": {
		"body": "setHeadingForAttachedPlayer(${1:player},${2:toAngle},${3:rotationSpeed})",
		"description": "GTA SA\nsetHeadingForAttachedPlayer(Player player, float toAngle, float rotationSpeed)\n",
		"prefix": "setHeadingForAttachedPlayer",
		"scope": "source.lua"
	},
	"taskWalkAlongsideChar": {
		"body": "taskWalkAlongsideChar(${1:ped},${2:alongisdeActor})",
		"description": "GTA SA\ntaskWalkAlongsideChar(Ped ped, int alongisdeActor)\n",
		"prefix": "taskWalkAlongsideChar",
		"scope": "source.lua"
	},
	"createEmergencyServicesCar": {
		"body": "createEmergencyServicesCar(${1:car},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\ncreateEmergencyServicesCar(Model car, float X, float Y, float Z)\n",
		"prefix": "createEmergencyServicesCar",
		"scope": "source.lua"
	},
	"taskKindaStayInSamePlace": {
		"body": "taskKindaStayInSamePlace(${1:ped},${2:stay})",
		"description": "GTA SA\ntaskKindaStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "taskKindaStayInSamePlace",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCarLooped": {
		"body": "startPlaybackRecordedCarLooped(${1:car},${2:path})",
		"description": "GTA SA\nstartPlaybackRecordedCarLooped(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCarLooped",
		"scope": "source.lua"
	},
	"setCharInterior": {
		"body": "setCharInterior(${1:ped},${2:interior})",
		"description": "GTA SA\nsetCharInterior(Ped ped, int interior)\n",
		"prefix": "setCharInterior",
		"scope": "source.lua"
	},
	"isAttachedPlayerHeadingAchieved": {
		"body": "isAttachedPlayerHeadingAchieved(${1:player})",
		"description": "GTA SA\nbool result = isAttachedPlayerHeadingAchieved(Player player)\n",
		"prefix": "isAttachedPlayerHeadingAchieved",
		"scope": "source.lua"
	},
	"enableEntryExitPlayerGroupWarping": {
		"body": "enableEntryExitPlayerGroupWarping(${1:X},${2:Y},${3:radius},${4:access})",
		"description": "GTA SA\nenableEntryExitPlayerGroupWarping(float X, float Y, float radius, bool access)\n",
		"prefix": "enableEntryExitPlayerGroupWarping",
		"scope": "source.lua"
	},
	"getClosestStealableObject": {
		"body": "getClosestStealableObject(${1:X},${2:Y},${3:Z},${4:radius})",
		"description": "GTA SA\nObject object = getClosestStealableObject(float X, float Y, float Z, float radius)\n",
		"prefix": "getClosestStealableObject",
		"scope": "source.lua"
	},
	"isProceduralInteriorActive": {
		"body": "isProceduralInteriorActive(${1:interior})",
		"description": "GTA SA\nbool result = isProceduralInteriorActive(int interior)\n",
		"prefix": "isProceduralInteriorActive",
		"scope": "source.lua"
	},
	"removeCarRecording": {
		"body": "removeCarRecording(${1:path})",
		"description": "GTA SA\nremoveCarRecording(int path)\n",
		"prefix": "removeCarRecording",
		"scope": "source.lua"
	},
	"setZonePopulationRace": {
		"body": "setZonePopulationRace(${1:zone},${2:popcycle})",
		"description": "GTA SA\nsetZonePopulationRace(GxtString zone, int popcycle)\n",
		"prefix": "setZonePopulationRace",
		"scope": "source.lua"
	},
	"setObjectOnlyDamagedByPlayer": {
		"body": "setObjectOnlyDamagedByPlayer(${1:object},${2:player})",
		"description": "GTA SA\nsetObjectOnlyDamagedByPlayer(Object object, bool player)\n",
		"prefix": "setObjectOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"createBirds": {
		"body": "createBirds(${1:x1},${2:y1},${3:z1},${4:x2},${5:y2},${6:z2},${7:flag1},${8:flag2})",
		"description": "GTA SA\ncreateBirds(float x1, float y1, float z1, float x2, float y2, float z2, int flag1, int flag2)\n",
		"prefix": "createBirds",
		"scope": "source.lua"
	},
	"setVehicleDirtLevel": {
		"body": "setVehicleDirtLevel(${1:car},${2:level})",
		"description": "GTA SA\nsetVehicleDirtLevel(Vehicle car, float level)\n",
		"prefix": "setVehicleDirtLevel",
		"scope": "source.lua"
	},
	"setGangWarsActive": {
		"body": "setGangWarsActive(${1:enable})",
		"description": "GTA SA\nsetGangWarsActive(bool enable)\n",
		"prefix": "setGangWarsActive",
		"scope": "source.lua"
	},
	"isGangWarGoingOn": {
		"body": "isGangWarGoingOn()",
		"description": "GTA SA\nbool result = isGangWarGoingOn()\n",
		"prefix": "isGangWarGoingOn",
		"scope": "source.lua"
	},
	"givePlayerClothesOutsideShop": {
		"body": "givePlayerClothesOutsideShop(${1:player},${2:clothes},${3:model},${4:bodyPart})",
		"description": "GTA SA\ngivePlayerClothesOutsideShop(Player player, string clothes, string model, int bodyPart)\n",
		"prefix": "givePlayerClothesOutsideShop",
		"scope": "source.lua"
	},
	"clearLoadedShop": {
		"body": "clearLoadedShop()",
		"description": "GTA SA\nclearLoadedShop()\n",
		"prefix": "clearLoadedShop",
		"scope": "source.lua"
	},
	"setGroupSequence": {
		"body": "setGroupSequence(${1:group},${2:Aspack})",
		"description": "GTA SA\nsetGroupSequence(int group, int Aspack)\n",
		"prefix": "setGroupSequence",
		"scope": "source.lua"
	},
	"setCharDropsWeaponsWhenDead": {
		"body": "setCharDropsWeaponsWhenDead(${1:ped},${2:droppable})",
		"description": "GTA SA\nsetCharDropsWeaponsWhenDead(Ped ped, bool droppable)\n",
		"prefix": "setCharDropsWeaponsWhenDead",
		"scope": "source.lua"
	},
	"setCharNeverLeavesGroup": {
		"body": "setCharNeverLeavesGroup(${1:ped},${2:set})",
		"description": "GTA SA\nsetCharNeverLeavesGroup(Ped ped, bool set)\n",
		"prefix": "setCharNeverLeavesGroup",
		"scope": "source.lua"
	},
	"setPlayerFireButton": {
		"body": "setPlayerFireButton(${1:player},${2:able})",
		"description": "GTA SA\nsetPlayerFireButton(Player player, bool able)\n",
		"prefix": "setPlayerFireButton",
		"scope": "source.lua"
	},
	"attachFxSystemToCharBone": {
		"body": "attachFxSystemToCharBone(${1:particle},${2:ped},${3:mode})",
		"description": "GTA SA\nattachFxSystemToCharBone(Particle particle, Ped ped, int mode)\n",
		"prefix": "attachFxSystemToCharBone",
		"scope": "source.lua"
	},
	"registerAttractorScriptBrainForCodeUse": {
		"body": "registerAttractorScriptBrainForCodeUse(${1:handle},${2:script})",
		"description": "GTA SA\nregisterAttractorScriptBrainForCodeUse(int handle, GxtString script)\n",
		"prefix": "registerAttractorScriptBrainForCodeUse",
		"scope": "source.lua"
	},
	"setHeadingLimitForAttachedChar": {
		"body": "setHeadingLimitForAttachedChar(${1:ped},${2:orientation},${3:limit})",
		"description": "GTA SA\nsetHeadingLimitForAttachedChar(Ped ped, int orientation, float limit)\n",
		"prefix": "setHeadingLimitForAttachedChar",
		"scope": "source.lua"
	},
	"addBlipForDeadChar": {
		"body": "addBlipForDeadChar(${1:ped})",
		"description": "GTA SA\nMarker blip = addBlipForDeadChar(Ped ped)\n",
		"prefix": "addBlipForDeadChar",
		"scope": "source.lua"
	},
	"getDeadCharCoordinates": {
		"body": "getDeadCharCoordinates(${1:ped})",
		"description": "GTA SA\nfloat X, float Y, float Z = getDeadCharCoordinates(Ped ped)\n",
		"prefix": "getDeadCharCoordinates",
		"scope": "source.lua"
	},
	"taskPlayAnimWithFlags": {
		"body": "taskPlayAnimWithFlags(${1:ped},${2:animation},${3:ifp},${4:framedelta},${5:loopA},${6:lockX},${7:lockY},${8:lockF},${9:time},${10:force},${11:lockZ})",
		"description": "GTA SA\ntaskPlayAnimWithFlags(Ped ped, string animation, string ifp, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time, bool force, bool lockZ)\n",
		"prefix": "taskPlayAnimWithFlags",
		"scope": "source.lua"
	},
	"setVehicleAirResistanceMultiplier": {
		"body": "setVehicleAirResistanceMultiplier(${1:car},${2:multiplier})",
		"description": "GTA SA\nsetVehicleAirResistanceMultiplier(Vehicle car, float multiplier)\n",
		"prefix": "setVehicleAirResistanceMultiplier",
		"scope": "source.lua"
	},
	"setCarCoordinatesNoOffset": {
		"body": "setCarCoordinatesNoOffset(${1:car},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nsetCarCoordinatesNoOffset(Vehicle car, float X, float Y, float Z)\n",
		"prefix": "setCarCoordinatesNoOffset",
		"scope": "source.lua"
	},
	"setUsesCollisionOfClosestObjectOfType": {
		"body": "setUsesCollisionOfClosestObjectOfType(${1:X},${2:Y},${3:Z},${4:radius},${5:modelId},${6:collisionDetection})",
		"description": "GTA SA\nsetUsesCollisionOfClosestObjectOfType(float X, float Y, float Z, float radius, Model modelId, bool collisionDetection)\n",
		"prefix": "setUsesCollisionOfClosestObjectOfType",
		"scope": "source.lua"
	},
	"setTimeOneDayForward": {
		"body": "setTimeOneDayForward()",
		"description": "GTA SA\nsetTimeOneDayForward()\n",
		"prefix": "setTimeOneDayForward",
		"scope": "source.lua"
	},
	"setTimerBeepCountdownTime": {
		"body": "setTimerBeepCountdownTime(${1:timer},${2:reach})",
		"description": "GTA SA\nsetTimerBeepCountdownTime(VarId timer, int reach)\n",
		"prefix": "setTimerBeepCountdownTime",
		"scope": "source.lua"
	},
	"attachTrailerToCab": {
		"body": "attachTrailerToCab(${1:trailer},${2:cab})",
		"description": "GTA SA\nattachTrailerToCab(int trailer, int cab)\n",
		"prefix": "attachTrailerToCab",
		"scope": "source.lua"
	},
	"isVehicleTouchingObject": {
		"body": "isVehicleTouchingObject(${1:car},${2:object})",
		"description": "GTA SA\nbool result = isVehicleTouchingObject(Vehicle car, Object object)\n",
		"prefix": "isVehicleTouchingObject",
		"scope": "source.lua"
	},
	"enableCraneControls": {
		"body": "enableCraneControls(${1:UP},${2:DOWN},${3:RELEASE})",
		"description": "GTA SA\nenableCraneControls(bool UP, bool DOWN, bool RELEASE)\n",
		"prefix": "enableCraneControls",
		"scope": "source.lua"
	},
	"isPlayerInPositionForConversation": {
		"body": "isPlayerInPositionForConversation(${1:ped})",
		"description": "GTA SA\nbool result = isPlayerInPositionForConversation(Ped ped)\n",
		"prefix": "isPlayerInPositionForConversation",
		"scope": "source.lua"
	},
	"enableConversation": {
		"body": "enableConversation(${1:ped},${2:enable})",
		"description": "GTA SA\nenableConversation(Ped ped, bool enable)\n",
		"prefix": "enableConversation",
		"scope": "source.lua"
	},
	"getRandomCharInSphereOnlyDrugsBuyers": {
		"body": "getRandomCharInSphereOnlyDrugsBuyers(${1:X},${2:Y},${3:Z},${4:radius})",
		"description": "GTA SA\nPed ped = getRandomCharInSphereOnlyDrugsBuyers(float X, float Y, float Z, float radius)\n",
		"prefix": "getRandomCharInSphereOnlyDrugsBuyers",
		"scope": "source.lua"
	},
	"getPedType": {
		"body": "getPedType(${1:ped})",
		"description": "GTA SA\nint pedtype = getPedType(Ped ped)\n",
		"prefix": "getPedType",
		"scope": "source.lua"
	},
	"taskUseClosestMapAttractor": {
		"body": "taskUseClosestMapAttractor(${1:ped},${2:radius},${3:nearModel},${4:offsetX},${5:offsetY},${6:offsetZ},${7:scriptNamed})",
		"description": "GTA SA\nbool result = taskUseClosestMapAttractor(Ped ped, float radius, Model nearModel, float offsetX, float offsetY, float offsetZ, string scriptNamed)\n",
		"prefix": "taskUseClosestMapAttractor",
		"scope": "source.lua"
	},
	"planeAttackPlayerUsingDogFight": {
		"body": "planeAttackPlayerUsingDogFight(${1:hydra},${2:player},${3:radius})",
		"description": "GTA SA\nplaneAttackPlayerUsingDogFight(int hydra, Player player, float radius)\n",
		"prefix": "planeAttackPlayerUsingDogFight",
		"scope": "source.lua"
	},
	"canTriggerGangWarWhenOnAMission": {
		"body": "canTriggerGangWarWhenOnAMission(${1:can})",
		"description": "GTA SA\ncanTriggerGangWarWhenOnAMission(bool can)\n",
		"prefix": "canTriggerGangWarWhenOnAMission",
		"scope": "source.lua"
	},
	"controlMovableVehiclePart": {
		"body": "controlMovableVehiclePart(${1:car},${2:angle})",
		"description": "GTA SA\ncontrolMovableVehiclePart(Vehicle car, float angle)\n",
		"prefix": "controlMovableVehiclePart",
		"scope": "source.lua"
	},
	"winchCanPickVehicleUp": {
		"body": "winchCanPickVehicleUp(${1:car},${2:attractive})",
		"description": "GTA SA\nwinchCanPickVehicleUp(Vehicle car, bool attractive)\n",
		"prefix": "winchCanPickVehicleUp",
		"scope": "source.lua"
	},
	"openCarDoorABit": {
		"body": "openCarDoorABit(${1:car},${2:door},${3:rotation})",
		"description": "GTA SA\nopenCarDoorABit(Vehicle car, int door, float rotation)\n",
		"prefix": "openCarDoorABit",
		"scope": "source.lua"
	},
	"isCarDoorFullyOpen": {
		"body": "isCarDoorFullyOpen(${1:car},${2:door})",
		"description": "GTA SA\nbool result = isCarDoorFullyOpen(Vehicle car, int door)\n",
		"prefix": "isCarDoorFullyOpen",
		"scope": "source.lua"
	},
	"setAlwaysDraw3dMarkers": {
		"body": "setAlwaysDraw3dMarkers(${1:set})",
		"description": "GTA SA\nsetAlwaysDraw3dMarkers(bool set)\n",
		"prefix": "setAlwaysDraw3dMarkers",
		"scope": "source.lua"
	},
	"streamScript": {
		"body": "streamScript(${1:script})",
		"description": "GTA SA\nstreamScript(int script)\n",
		"prefix": "streamScript",
		"scope": "source.lua"
	},
	"hasStreamedScriptLoaded": {
		"body": "hasStreamedScriptLoaded(${1:script})",
		"description": "GTA SA\nbool result = hasStreamedScriptLoaded(int script)\n",
		"prefix": "hasStreamedScriptLoaded",
		"scope": "source.lua"
	},
	"setGangWarsTrainingMission": {
		"body": "setGangWarsTrainingMission(${1:set})",
		"description": "GTA SA\nsetGangWarsTrainingMission(bool set)\n",
		"prefix": "setGangWarsTrainingMission",
		"scope": "source.lua"
	},
	"setCharHasUsedEntryExit": {
		"body": "setCharHasUsedEntryExit(${1:ped},${2:X},${3:Y},${4:radius})",
		"description": "GTA SA\nsetCharHasUsedEntryExit(Ped ped, float X, float Y, float radius)\n",
		"prefix": "setCharHasUsedEntryExit",
		"scope": "source.lua"
	},
	"setCharMaxHealth": {
		"body": "setCharMaxHealth(${1:ped},${2:health})",
		"description": "GTA SA\nsetCharMaxHealth(Ped ped, int health)\n",
		"prefix": "setCharMaxHealth",
		"scope": "source.lua"
	},
	"setNightVision": {
		"body": "setNightVision(${1:enable})",
		"description": "GTA SA\nsetNightVision(bool enable)\n",
		"prefix": "setNightVision",
		"scope": "source.lua"
	},
	"setInfraredVision": {
		"body": "setInfraredVision(${1:enable})",
		"description": "GTA SA\nsetInfraredVision(bool enable)\n",
		"prefix": "setInfraredVision",
		"scope": "source.lua"
	},
	"setZoneForGangWarsTraining": {
		"body": "setZoneForGangWarsTraining(${1:zone})",
		"description": "GTA SA\nsetZoneForGangWarsTraining(GxtString zone)\n",
		"prefix": "setZoneForGangWarsTraining",
		"scope": "source.lua"
	},
	"setCharCanBeKnockedOffBike": {
		"body": "setCharCanBeKnockedOffBike(${1:ped},${2:can})",
		"description": "GTA SA\nsetCharCanBeKnockedOffBike(Ped ped, bool can)\n",
		"prefix": "setCharCanBeKnockedOffBike",
		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGang": {
		"body": "setCharCoordinatesDontWarpGang(${1:ped},${2:X},${3:Y},${4:Z})",
		"description": "GTA SA\nsetCharCoordinatesDontWarpGang(Ped ped, float X, float Y, float Z)\n",
		"prefix": "setCharCoordinatesDontWarpGang",
		"scope": "source.lua"
	},
	"addPriceModifier": {
		"body": "addPriceModifier(${1:item},${2:price})",
		"description": "GTA SA\naddPriceModifier(int item, int price)\n",
		"prefix": "addPriceModifier",
		"scope": "source.lua"
	},
	"removePriceModifier": {
		"body": "removePriceModifier(${1:item})",
		"description": "GTA SA\nremovePriceModifier(int item)\n",
		"prefix": "removePriceModifier",
		"scope": "source.lua"
	},
	"initZonePopulationSettings": {
		"body": "initZonePopulationSettings()",
		"description": "GTA SA\ninitZonePopulationSettings()\n",
		"prefix": "initZonePopulationSettings",
		"scope": "source.lua"
	},
	"explodeCarInCutsceneShakeAndBits": {
		"body": "explodeCarInCutsceneShakeAndBits(${1:car},${2:shake},${3:effect},${4:sound})",
		"description": "GTA SA\nexplodeCarInCutsceneShakeAndBits(Vehicle car, bool shake, bool effect, bool sound)\n",
		"prefix": "explodeCarInCutsceneShakeAndBits",
		"scope": "source.lua"
	},
	"isSkipCutsceneButtonPressed": {
		"body": "isSkipCutsceneButtonPressed()",
		"description": "GTA SA\nbool result = isSkipCutsceneButtonPressed()\n",
		"prefix": "isSkipCutsceneButtonPressed",
		"scope": "source.lua"
	},
	"getCutsceneOffset": {
		"body": "getCutsceneOffset()",
		"description": "GTA SA\nbool result, float X, float Y, float Z = getCutsceneOffset()\n",
		"prefix": "getCutsceneOffset",
		"scope": "source.lua"
	},
	"setObjectScale": {
		"body": "setObjectScale(${1:object},${2:scale})",
		"description": "GTA SA\nsetObjectScale(Object object, float scale)\n",
		"prefix": "setObjectScale",
		"scope": "source.lua"
	},
	"getCurrentPopulationZoneType": {
		"body": "getCurrentPopulationZoneType()",
		"description": "GTA SA\nint popcycle = getCurrentPopulationZoneType()\n",
		"prefix": "getCurrentPopulationZoneType",
		"scope": "source.lua"
	},
	"createMenu": {
		"body": "createMenu(${1:title},${2:posX},${3:posY},${4:width},${5:columns},${6:interactive},${7:background},${8:alignment})",
		"description": "GTA SA\nint menu = createMenu(GxtString title, float posX, float posY, float width, int columns, bool interactive, bool background, int alignment)\n",
		"prefix": "createMenu",
		"scope": "source.lua"
	},
	"setMenuColumnOrientation": {
		"body": "setMenuColumnOrientation(${1:menu},${2:column},${3:alignment})",
		"description": "GTA SA\nsetMenuColumnOrientation(int menu, int column, int alignment)\n",
		"prefix": "setMenuColumnOrientation",
		"scope": "source.lua"
	},
	"getMenuItemSelected": {
		"body": "getMenuItemSelected(${1:menu})",
		"description": "GTA SA\nint item = getMenuItemSelected(int menu)\n",
		"prefix": "getMenuItemSelected",
		"scope": "source.lua"
	},
	"getMenuItemAccepted": {
		"body": "getMenuItemAccepted(${1:menu})",
		"description": "GTA SA\nint item = getMenuItemAccepted(int menu)\n",
		"prefix": "getMenuItemAccepted",
		"scope": "source.lua"
	},
	"activateMenuItem": {
		"body": "activateMenuItem(${1:menu},${2:row},${3:enable})",
		"description": "GTA SA\nactivateMenuItem(int menu, int row, bool enable)\n",
		"prefix": "activateMenuItem",
		"scope": "source.lua"
	},
	"deleteMenu": {
		"body": "deleteMenu(${1:menu})",
		"description": "GTA SA\ndeleteMenu(int menu)\n",
		"prefix": "deleteMenu",
		"scope": "source.lua"
	},
	"setMenuColumn": {
		"body": "setMenuColumn(${1:menu},${2:column},${3:header},${4:data1},${5:data2},${6:data3},${7:data4},${8:data5},${9:data6},${10:data7},${11:data8},${12:data9},${13:data10},${14:data11},${15:data12})",
		"description": "GTA SA\nsetMenuColumn(int menu, int column, GxtString header, GxtString data1, GxtString data2, GxtString data3, GxtString data4, GxtString data5, GxtString data6, GxtString data7, GxtString data8, GxtString data9, GxtString data10, GxtString data11, GxtString data12)\n",
		"prefix": "setMenuColumn",
		"scope": "source.lua"
	},
	"setBlipEntryExit": {
		"body": "setBlipEntryExit(${1:marker},${2:X},${3:Y},${4:radius})",
		"description": "GTA SA\nsetBlipEntryExit(Marker marker, float X, float Y, float radius)\n",
		"prefix": "setBlipEntryExit",
		"scope": "source.lua"
	},
	"switchDeathPenalties": {
		"body": "switchDeathPenalties(${1:lose})",
		"description": "GTA SA\nswitchDeathPenalties(bool lose)\n",
		"prefix": "switchDeathPenalties",
		"scope": "source.lua"
	},
	"switchArrestPenalties": {
		"body": "switchArrestPenalties(${1:lose})",
		"description": "GTA SA\nswitchArrestPenalties(bool lose)\n",
		"prefix": "switchArrestPenalties",
		"scope": "source.lua"
	},
	"setExtraHospitalRestartPoint": {
		"body": "setExtraHospitalRestartPoint(${1:X},${2:Y},${3:Z},${4:radius},${5:angle})",
		"description": "GTA SA\nsetExtraHospitalRestartPoint(float X, float Y, float Z, float radius, float angle)\n",
		"prefix": "setExtraHospitalRestartPoint",
		"scope": "source.lua"
	},
	"setExtraPoliceStationRestartPoint": {
		"body": "setExtraPoliceStationRestartPoint(${1:X},${2:Y},${3:Z},${4:radius},${5:angle})",
		"description": "GTA SA\nsetExtraPoliceStationRestartPoint(float X, float Y, float Z, float radius, float angle)\n",
		"prefix": "setExtraPoliceStationRestartPoint",
		"scope": "source.lua"
	},
	"findNumberTagsTagged": {
		"body": "findNumberTagsTagged()",
		"description": "GTA SA\nint num = findNumberTagsTagged()\n",
		"prefix": "findNumberTagsTagged",
		"scope": "source.lua"
	},
	"getTerritoryUnderControlPercentage": {
		"body": "getTerritoryUnderControlPercentage()",
		"description": "GTA SA\nint percentage = getTerritoryUnderControlPercentage()\n",
		"prefix": "getTerritoryUnderControlPercentage",
		"scope": "source.lua"
	},
	"isObjectInAngledArea2d": {
		"body": "isObjectInAngledArea2d(${1:object},${2:x1},${3:y1},${4:x2},${5:y2},${6:radius},${7:sphere})",
		"description": "GTA SA\nbool result = isObjectInAngledArea2d(Object object, float x1, float y1, float x2, float y2, float radius, bool sphere)\n",
		"prefix": "isObjectInAngledArea2d",
		"scope": "source.lua"
	},
	"isObjectInAngledArea3d": {
		"body": "isObjectInAngledArea3d(${1:object},${2:x1},${3:y1},${4:z1},${5:x2},${6:y2},${7:z2},${8:depth},${9:flag})",
		"description": "GTA SA\nbool result = isObjectInAngledArea3d(Object object, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isObjectInAngledArea3d",
		"scope": "source.lua"
	},
	"getRandomCharInSphereNoBrain": {
		"body": "getRandomCharInSphereNoBrain(${1:X},${2:Y},${3:Z},${4:radius})",
		"description": "GTA SA\nPed ped = getRandomCharInSphereNoBrain(float X, float Y, float Z, float radius)\n",
		"prefix": "getRandomCharInSphereNoBrain",
		"scope": "source.lua"
	},
	"setPlaneUndercarriageUp": {
		"body": "setPlaneUndercarriageUp(${1:plane},${2:set})",
		"description": "GTA SA\nsetPlaneUndercarriageUp(int plane, bool set)\n",
		"prefix": "setPlaneUndercarriageUp",
		"scope": "source.lua"
	},
	"disableAllEntryExits": {
		"body": "disableAllEntryExits(${1:disable})",
		"description": "GTA SA\ndisableAllEntryExits(bool disable)\n",
		"prefix": "disableAllEntryExits",
		"scope": "source.lua"
	},
	"attachAnimsToModel": {
		"body": "attachAnimsToModel(${1:modelId},${2:externalScript})",
		"description": "GTA SA\nattachAnimsToModel(Model modelId, GxtString externalScript)\n",
		"prefix": "attachAnimsToModel",
		"scope": "source.lua"
	},
	"setObjectAsStealable": {
		"body": "setObjectAsStealable(${1:object},${2:liftable})",
		"description": "GTA SA\nsetObjectAsStealable(Object object, bool liftable)\n",
		"prefix": "setObjectAsStealable",
		"scope": "source.lua"
	},
	"setCreateRandomGangMembers": {
		"body": "setCreateRandomGangMembers(${1:enable})",
		"description": "GTA SA\nsetCreateRandomGangMembers(bool enable)\n",
		"prefix": "setCreateRandomGangMembers",
		"scope": "source.lua"
	},
	"addSparks": {
		"body": "addSparks(${1:posX},${2:posY},${3:posZ},${4:vecX},${5:vecY},${6:vecZ},${7:density})",
		"description": "GTA SA\naddSparks(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, int density)\n",
		"prefix": "addSparks",
		"scope": "source.lua"
	},
	"getVehicleClass": {
		"body": "getVehicleClass(${1:car})",
		"description": "GTA SA\nint class = getVehicleClass(Vehicle car)\n",
		"prefix": "getVehicleClass",
		"scope": "source.lua"
	},
	"clearConversationForChar": {
		"body": "clearConversationForChar(${1:ped})",
		"description": "GTA SA\nclearConversationForChar(Ped ped)\n",
		"prefix": "clearConversationForChar",
		"scope": "source.lua"
	},
	"setMenuItemWithNumber": {
		"body": "setMenuItemWithNumber(${1:panel},${2:column},${3:row},${4:gxtString},${5:number})",
		"description": "GTA SA\nsetMenuItemWithNumber(int panel, int column, int row, GxtString gxtString, int number)\n",
		"prefix": "setMenuItemWithNumber",
		"scope": "source.lua"
	},
	"setMenuItemWith2Numbers": {
		"body": "setMenuItemWith2Numbers(${1:panel},${2:column},${3:row},${4:gxtString},${5:numbers1},${6:numbers2})",
		"description": "GTA SA\nsetMenuItemWith2Numbers(int panel, int column, int row, GxtString gxtString, int numbers1, int numbers2)\n",
		"prefix": "setMenuItemWith2Numbers",
		"scope": "source.lua"
	},
	"setCutsceneModelTexture": {
		"body": "setCutsceneModelTexture(${1:cutsceneModel},${2:textureName})",
		"description": "GTA SA\nsetCutsceneModelTexture(GxtString cutsceneModel, GxtString textureName)\n",
		"prefix": "setCutsceneModelTexture",
		"scope": "source.lua"
	},
	"getNameOfInfoZone": {
		"body": "getNameOfInfoZone(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nGxtString nameB = getNameOfInfoZone(float atX, float atY, float atZ)\n",
		"prefix": "getNameOfInfoZone",
		"scope": "source.lua"
	},
	"vehicleCanBeTargettedByHsMissile": {
		"body": "vehicleCanBeTargettedByHsMissile(${1:car},${2:targetable})",
		"description": "GTA SA\nvehicleCanBeTargettedByHsMissile(Vehicle car, bool targetable)\n",
		"prefix": "vehicleCanBeTargettedByHsMissile",
		"scope": "source.lua"
	},
	"setFreebiesInVehicle": {
		"body": "setFreebiesInVehicle(${1:car},${2:containsGoodies})",
		"description": "GTA SA\nsetFreebiesInVehicle(Vehicle car, bool containsGoodies)\n",
		"prefix": "setFreebiesInVehicle",
		"scope": "source.lua"
	},
	"setScriptLimitToGangSize": {
		"body": "setScriptLimitToGangSize(${1:max})",
		"description": "GTA SA\nsetScriptLimitToGangSize(bool max)\n",
		"prefix": "setScriptLimitToGangSize",
		"scope": "source.lua"
	},
	"makePlayerGangDisappear": {
		"body": "makePlayerGangDisappear()",
		"description": "GTA SA\nmakePlayerGangDisappear()\n",
		"prefix": "makePlayerGangDisappear",
		"scope": "source.lua"
	},
	"makePlayerGangReappear": {
		"body": "makePlayerGangReappear()",
		"description": "GTA SA\nmakePlayerGangReappear()\n",
		"prefix": "makePlayerGangReappear",
		"scope": "source.lua"
	},
	"getClothesItem": {
		"body": "getClothesItem(${1:player},${2:bodypart})",
		"description": "GTA SA\nint textureCRC, int modelCRC = getClothesItem(Player player, int bodypart)\n",
		"prefix": "getClothesItem",
		"scope": "source.lua"
	},
	"showUpdateStats": {
		"body": "showUpdateStats(${1:display})",
		"description": "GTA SA\nshowUpdateStats(bool display)\n",
		"prefix": "showUpdateStats",
		"scope": "source.lua"
	},
	"setCoordBlipAppearance": {
		"body": "setCoordBlipAppearance(${1:checkpoint},${2:type})",
		"description": "GTA SA\nsetCoordBlipAppearance(Checkpoint checkpoint, int type)\n",
		"prefix": "setCoordBlipAppearance",
		"scope": "source.lua"
	},
	"setHeathazeEffect": {
		"body": "setHeathazeEffect(${1:enable})",
		"description": "GTA SA\nsetHeathazeEffect(bool enable)\n",
		"prefix": "setHeathazeEffect",
		"scope": "source.lua"
	},
	"isHelpMessageBeingDisplayed": {
		"body": "isHelpMessageBeingDisplayed()",
		"description": "GTA SA\nbool result = isHelpMessageBeingDisplayed()\n",
		"prefix": "isHelpMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"hasObjectBeenDamagedByWeapon": {
		"body": "hasObjectBeenDamagedByWeapon(${1:object},${2:type})",
		"description": "GTA SA\nbool result = hasObjectBeenDamagedByWeapon(Object object, int type)\n",
		"prefix": "hasObjectBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"clearObjectLastWeaponDamage": {
		"body": "clearObjectLastWeaponDamage(${1:object})",
		"description": "GTA SA\nclearObjectLastWeaponDamage(Object object)\n",
		"prefix": "clearObjectLastWeaponDamage",
		"scope": "source.lua"
	},
	"setPlayerJumpButton": {
		"body": "setPlayerJumpButton(${1:player},${2:enable})",
		"description": "GTA SA\nsetPlayerJumpButton(Player player, bool enable)\n",
		"prefix": "setPlayerJumpButton",
		"scope": "source.lua"
	},
	"getHudColour": {
		"body": "getHudColour(${1:interface})",
		"description": "GTA SA\nint r, int g, int b, int a = getHudColour(int interface)\n",
		"prefix": "getHudColour",
		"scope": "source.lua"
	},
	"lockDoor": {
		"body": "lockDoor(${1:door},${2:lock})",
		"description": "GTA SA\nlockDoor(int door, bool lock)\n",
		"prefix": "lockDoor",
		"scope": "source.lua"
	},
	"setObjectMass": {
		"body": "setObjectMass(${1:object},${2:mass})",
		"description": "GTA SA\nsetObjectMass(Object object, float mass)\n",
		"prefix": "setObjectMass",
		"scope": "source.lua"
	},
	"getObjectMass": {
		"body": "getObjectMass(${1:int})",
		"description": "GTA SA\nfloat mass = getObjectMass(int int)\n",
		"prefix": "getObjectMass",
		"scope": "source.lua"
	},
	"setObjectTurnMass": {
		"body": "setObjectTurnMass(${1:object},${2:turnMass})",
		"description": "GTA SA\nsetObjectTurnMass(Object object, float turnMass)\n",
		"prefix": "setObjectTurnMass",
		"scope": "source.lua"
	},
	"getObjectTurnMass": {
		"body": "getObjectTurnMass(${1:object})",
		"description": "GTA SA\nfloat turnMass = getObjectTurnMass(Object object)\n",
		"prefix": "getObjectTurnMass",
		"scope": "source.lua"
	},
	"setSpecificZoneToTriggerGangWar": {
		"body": "setSpecificZoneToTriggerGangWar(${1:zone})",
		"description": "GTA SA\nsetSpecificZoneToTriggerGangWar(GxtString zone)\n",
		"prefix": "setSpecificZoneToTriggerGangWar",
		"scope": "source.lua"
	},
	"clearSpecificZonesToTriggerGangWar": {
		"body": "clearSpecificZonesToTriggerGangWar()",
		"description": "GTA SA\nclearSpecificZonesToTriggerGangWar()\n",
		"prefix": "clearSpecificZonesToTriggerGangWar",
		"scope": "source.lua"
	},
	"setActiveMenuItem": {
		"body": "setActiveMenuItem(${1:panel},${2:activeRow})",
		"description": "GTA SA\nsetActiveMenuItem(int panel, int activeRow)\n",
		"prefix": "setActiveMenuItem",
		"scope": "source.lua"
	},
	"markStreamedScriptAsNoLongerNeeded": {
		"body": "markStreamedScriptAsNoLongerNeeded(${1:externalScript})",
		"description": "GTA SA\nmarkStreamedScriptAsNoLongerNeeded(int externalScript)\n",
		"prefix": "markStreamedScriptAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"removeStreamedScript": {
		"body": "removeStreamedScript(${1:externalScript})",
		"description": "GTA SA\nremoveStreamedScript(int externalScript)\n",
		"prefix": "removeStreamedScript",
		"scope": "source.lua"
	},
	"setMessageFormatting": {
		"body": "setMessageFormatting(${1:priority},${2:leftmargin},${3:maxwidth})",
		"description": "GTA SA\nsetMessageFormatting(bool priority, int leftmargin, int maxwidth)\n",
		"prefix": "setMessageFormatting",
		"scope": "source.lua"
	},
	"startNewStreamedScript": {
		"body": "startNewStreamedScript(${1:externalScript},${2:args})",
		"description": "GTA SA\nstartNewStreamedScript(int externalScript, table args)\n",
		"prefix": "startNewStreamedScript",
		"scope": "source.lua"
	},
	"setWeatherToAppropriateTypeNow": {
		"body": "setWeatherToAppropriateTypeNow()",
		"description": "GTA SA\nsetWeatherToAppropriateTypeNow()\n",
		"prefix": "setWeatherToAppropriateTypeNow",
		"scope": "source.lua"
	},
	"winchCanPickObjectUp": {
		"body": "winchCanPickObjectUp(${1:object},${2:enable})",
		"description": "GTA SA\nwinchCanPickObjectUp(Object object, bool enable)\n",
		"prefix": "winchCanPickObjectUp",
		"scope": "source.lua"
	},
	"switchAudioZone": {
		"body": "switchAudioZone(${1:zone},${2:enableSound})",
		"description": "GTA SA\nswitchAudioZone(GxtString zone, bool enableSound)\n",
		"prefix": "switchAudioZone",
		"scope": "source.lua"
	},
	"setCarEngineOn": {
		"body": "setCarEngineOn(${1:car},${2:on})",
		"description": "GTA SA\nsetCarEngineOn(Vehicle car, bool on)\n",
		"prefix": "setCarEngineOn",
		"scope": "source.lua"
	},
	"setCarLightsOn": {
		"body": "setCarLightsOn(${1:car},${2:lights})",
		"description": "GTA SA\nsetCarLightsOn(Vehicle car, bool lights)\n",
		"prefix": "setCarLightsOn",
		"scope": "source.lua"
	},
	"getUserOfClosestMapAttractor": {
		"body": "getUserOfClosestMapAttractor(${1:sphereX},${2:sphereY},${3:sphereZ},${4:radius},${5:modelId},${6:externalScriptNamed})",
		"description": "GTA SA\nPed ped = getUserOfClosestMapAttractor(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, string externalScriptNamed)\n",
		"prefix": "getUserOfClosestMapAttractor",
		"scope": "source.lua"
	},
	"switchRoadsBackToOriginal": {
		"body": "switchRoadsBackToOriginal(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nswitchRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsBackToOriginal",
		"scope": "source.lua"
	},
	"switchPedRoadsBackToOriginal": {
		"body": "switchPedRoadsBackToOriginal(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nswitchPedRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsBackToOriginal",
		"scope": "source.lua"
	},
	"getPlaneUndercarriagePosition": {
		"body": "getPlaneUndercarriagePosition(${1:plane})",
		"description": "GTA SA\nint landingGearStatus = getPlaneUndercarriagePosition(int plane)\n",
		"prefix": "getPlaneUndercarriagePosition",
		"scope": "source.lua"
	},
	"cameraSetVectorTrack": {
		"body": "cameraSetVectorTrack(${1:pointX},${2:pointY},${3:pointZ},${4:transverseX},${5:transverseY},${6:transverseZ},${7:time},${8:smooth})",
		"description": "GTA SA\ncameraSetVectorTrack(float pointX, float pointY, float pointZ, float transverseX, float transverseY, float transverseZ, int time, bool smooth)\n",
		"prefix": "cameraSetVectorTrack",
		"scope": "source.lua"
	},
	"cameraSetLerpFov": {
		"body": "cameraSetLerpFov(${1:from},${2:to},${3:timelimit},${4:smoothTransition})",
		"description": "GTA SA\ncameraSetLerpFov(float from, float to, int timelimit, bool smoothTransition)\n",
		"prefix": "cameraSetLerpFov",
		"scope": "source.lua"
	},
	"switchAmbientPlanes": {
		"body": "switchAmbientPlanes(${1:enable})",
		"description": "GTA SA\nswitchAmbientPlanes(bool enable)\n",
		"prefix": "switchAmbientPlanes",
		"scope": "source.lua"
	},
	"setDarknessEffect": {
		"body": "setDarknessEffect(${1:enable},${2:value})",
		"description": "GTA SA\nsetDarknessEffect(bool enable, int value)\n",
		"prefix": "setDarknessEffect",
		"scope": "source.lua"
	},
	"cameraResetNewScriptables": {
		"body": "cameraResetNewScriptables()",
		"description": "GTA SA\ncameraResetNewScriptables()\n",
		"prefix": "cameraResetNewScriptables",
		"scope": "source.lua"
	},
	"getNumberOfInstancesOfStreamedScript": {
		"body": "getNumberOfInstancesOfStreamedScript(${1:externalScript})",
		"description": "GTA SA\nint value = getNumberOfInstancesOfStreamedScript(int externalScript)\n",
		"prefix": "getNumberOfInstancesOfStreamedScript",
		"scope": "source.lua"
	},
	"allocateStreamedScriptToRandomPed": {
		"body": "allocateStreamedScriptToRandomPed(${1:externalScript},${2:actorModel},${3:priority})",
		"description": "GTA SA\nallocateStreamedScriptToRandomPed(int externalScript, Model actorModel, int priority)\n",
		"prefix": "allocateStreamedScriptToRandomPed",
		"scope": "source.lua"
	},
	"allocateStreamedScriptToObject": {
		"body": "allocateStreamedScriptToObject(${1:externalScript},${2:objectModel},${3:priority},${4:radius},${5:type})",
		"description": "GTA SA\nallocateStreamedScriptToObject(int externalScript, Model objectModel, int priority, float radius, int type)\n",
		"prefix": "allocateStreamedScriptToObject",
		"scope": "source.lua"
	},
	"getGroupMember": {
		"body": "getGroupMember(${1:group},${2:member})",
		"description": "GTA SA\nint handle = getGroupMember(int group, int member)\n",
		"prefix": "getGroupMember",
		"scope": "source.lua"
	},
	"getWaterHeightAtCoords": {
		"body": "getWaterHeightAtCoords(${1:atX},${2:atY},${3:ignoreWaves})",
		"description": "GTA SA\nfloat height = getWaterHeightAtCoords(float atX, float atY, bool ignoreWaves)\n",
		"prefix": "getWaterHeightAtCoords",
		"scope": "source.lua"
	},
	"cameraPersistTrack": {
		"body": "cameraPersistTrack(${1:lock})",
		"description": "GTA SA\ncameraPersistTrack(bool lock)\n",
		"prefix": "cameraPersistTrack",
		"scope": "source.lua"
	},
	"cameraPersistPos": {
		"body": "cameraPersistPos(${1:lock})",
		"description": "GTA SA\ncameraPersistPos(bool lock)\n",
		"prefix": "cameraPersistPos",
		"scope": "source.lua"
	},
	"cameraPersistFov": {
		"body": "cameraPersistFov(${1:lock})",
		"description": "GTA SA\ncameraPersistFov(bool lock)\n",
		"prefix": "cameraPersistFov",
		"scope": "source.lua"
	},
	"cameraIsVectorMoveRunning": {
		"body": "cameraIsVectorMoveRunning()",
		"description": "GTA SA\nbool result = cameraIsVectorMoveRunning()\n",
		"prefix": "cameraIsVectorMoveRunning",
		"scope": "source.lua"
	},
	"cameraIsVectorTrackRunning": {
		"body": "cameraIsVectorTrackRunning()",
		"description": "GTA SA\nbool result = cameraIsVectorTrackRunning()\n",
		"prefix": "cameraIsVectorTrackRunning",
		"scope": "source.lua"
	},
	"cameraSetVectorMove": {
		"body": "cameraSetVectorMove(${1:cameraX},${2:cameraY},${3:cameraZ},${4:positionX},${5:positionY},${6:positionZ},${7:time},${8:smoothTransition})",
		"description": "GTA SA\ncameraSetVectorMove(float cameraX, float cameraY, float cameraZ, float positionX, float positionY, float positionZ, int time, bool smoothTransition)\n",
		"prefix": "cameraSetVectorMove",
		"scope": "source.lua"
	},
	"drawWindow": {
		"body": "drawWindow(${1:cornerAX},${2:cornerAY},${3:cornerBX},${4:cornerBY},${5:gxtString},${6:style})",
		"description": "GTA SA\ndrawWindow(float cornerAX, float cornerAY, float cornerBX, float cornerBY, GxtString gxtString, int style)\n",
		"prefix": "drawWindow",
		"scope": "source.lua"
	},
	"attachCarToObject": {
		"body": "attachCarToObject(${1:car},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:rotationX},${7:rotationY},${8:rotationZ})",
		"description": "GTA SA\nattachCarToObject(Vehicle car, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachCarToObject",
		"scope": "source.lua"
	},
	"setGarageResprayFree": {
		"body": "setGarageResprayFree(${1:garage},${2:free})",
		"description": "GTA SA\nsetGarageResprayFree(GxtString garage, bool free)\n",
		"prefix": "setGarageResprayFree",
		"scope": "source.lua"
	},
	"setCharBulletproofVest": {
		"body": "setCharBulletproofVest(${1:ped},${2:enable})",
		"description": "GTA SA\nsetCharBulletproofVest(Ped ped, bool enable)\n",
		"prefix": "setCharBulletproofVest",
		"scope": "source.lua"
	},
	"setCinemaCamera": {
		"body": "setCinemaCamera(${1:lock})",
		"description": "GTA SA\nsetCinemaCamera(bool lock)\n",
		"prefix": "setCinemaCamera",
		"scope": "source.lua"
	},
	"setCharFireDamageMultiplier": {
		"body": "setCharFireDamageMultiplier(${1:ped},${2:multiplier})",
		"description": "GTA SA\nsetCharFireDamageMultiplier(Ped ped, float multiplier)\n",
		"prefix": "setCharFireDamageMultiplier",
		"scope": "source.lua"
	},
	"setGroupFollowStatus": {
		"body": "setGroupFollowStatus(${1:group},${2:status})",
		"description": "GTA SA\nsetGroupFollowStatus(int group, bool status)\n",
		"prefix": "setGroupFollowStatus",
		"scope": "source.lua"
	},
	"setSearchlightClipIfColliding": {
		"body": "setSearchlightClipIfColliding(${1:searchlight},${2:flag})",
		"description": "GTA SA\nsetSearchlightClipIfColliding(Searchlight searchlight, bool flag)\n",
		"prefix": "setSearchlightClipIfColliding",
		"scope": "source.lua"
	},
	"hasPlayerBoughtItem": {
		"body": "hasPlayerBoughtItem(${1:item})",
		"description": "GTA SA\nbool result = hasPlayerBoughtItem(int item)\n",
		"prefix": "hasPlayerBoughtItem",
		"scope": "source.lua"
	},
	"setCameraInFrontOfChar": {
		"body": "setCameraInFrontOfChar(${1:ped})",
		"description": "GTA SA\nsetCameraInFrontOfChar(Ped ped)\n",
		"prefix": "setCameraInFrontOfChar",
		"scope": "source.lua"
	},
	"getPlayerMaxArmour": {
		"body": "getPlayerMaxArmour(${1:player})",
		"description": "GTA SA\nint maxArmour = getPlayerMaxArmour(Player player)\n",
		"prefix": "getPlayerMaxArmour",
		"scope": "source.lua"
	},
	"setCharUsesUpperbodyDamageAnimsOnly": {
		"body": "setCharUsesUpperbodyDamageAnimsOnly(${1:ped},${2:uninterupted})",
		"description": "GTA SA\nsetCharUsesUpperbodyDamageAnimsOnly(Ped ped, bool uninterupted)\n",
		"prefix": "setCharUsesUpperbodyDamageAnimsOnly",
		"scope": "source.lua"
	},
	"setCharSayContext": {
		"body": "setCharSayContext(${1:ped},${2:speech})",
		"description": "GTA SA\nint spokenPhrase = setCharSayContext(Ped ped, int speech)\n",
		"prefix": "setCharSayContext",
		"scope": "source.lua"
	},
	"addExplosionVariableShake": {
		"body": "addExplosionVariableShake(${1:atX},${2:atY},${3:atZ},${4:type},${5:cameraShake})",
		"description": "GTA SA\naddExplosionVariableShake(float atX, float atY, float atZ, int type, float cameraShake)\n",
		"prefix": "addExplosionVariableShake",
		"scope": "source.lua"
	},
	"attachMissionAudioToChar": {
		"body": "attachMissionAudioToChar(${1:id},${2:ped})",
		"description": "GTA SA\nattachMissionAudioToChar(int id, Ped ped)\n",
		"prefix": "attachMissionAudioToChar",
		"scope": "source.lua"
	},
	"updatePickupMoneyPerDay": {
		"body": "updatePickupMoneyPerDay(${1:pickup},${2:cash})",
		"description": "GTA SA\nupdatePickupMoneyPerDay(Pickup pickup, int cash)\n",
		"prefix": "updatePickupMoneyPerDay",
		"scope": "source.lua"
	},
	"getNameOfEntryExitCharUsed": {
		"body": "getNameOfEntryExitCharUsed(${1:ped})",
		"description": "GTA SA\nGxtString interiorName = getNameOfEntryExitCharUsed(Ped ped)\n",
		"prefix": "getNameOfEntryExitCharUsed",
		"scope": "source.lua"
	},
	"getPositionOfEntryExitCharUsed": {
		"body": "getPositionOfEntryExitCharUsed(${1:ped})",
		"description": "GTA SA\nfloat coordX, float coordY, float coordZ, int number = getPositionOfEntryExitCharUsed(Ped ped)\n",
		"prefix": "getPositionOfEntryExitCharUsed",
		"scope": "source.lua"
	},
	"isCharTalking": {
		"body": "isCharTalking(${1:ped})",
		"description": "GTA SA\nbool result = isCharTalking(Ped ped)\n",
		"prefix": "isCharTalking",
		"scope": "source.lua"
	},
	"disableCharSpeech": {
		"body": "disableCharSpeech(${1:ped},${2:disable})",
		"description": "GTA SA\ndisableCharSpeech(Ped ped, bool disable)\n",
		"prefix": "disableCharSpeech",
		"scope": "source.lua"
	},
	"enableCharSpeech": {
		"body": "enableCharSpeech(${1:ped})",
		"description": "GTA SA\nenableCharSpeech(Ped ped)\n",
		"prefix": "enableCharSpeech",
		"scope": "source.lua"
	},
	"setUpSkip": {
		"body": "setUpSkip(${1:posX},${2:posY},${3:posZ},${4:angle})",
		"description": "GTA SA\nsetUpSkip(float posX, float posY, float posZ, float angle)\n",
		"prefix": "setUpSkip",
		"scope": "source.lua"
	},
	"clearSkip": {
		"body": "clearSkip()",
		"description": "GTA SA\nclearSkip()\n",
		"prefix": "clearSkip",
		"scope": "source.lua"
	},
	"preloadBeatTrack": {
		"body": "preloadBeatTrack(${1:soundtrack})",
		"description": "GTA SA\npreloadBeatTrack(int soundtrack)\n",
		"prefix": "preloadBeatTrack",
		"scope": "source.lua"
	},
	"getBeatTrackStatus": {
		"body": "getBeatTrackStatus()",
		"description": "GTA SA\nint status = getBeatTrackStatus()\n",
		"prefix": "getBeatTrackStatus",
		"scope": "source.lua"
	},
	"playBeatTrack": {
		"body": "playBeatTrack()",
		"description": "GTA SA\nplayBeatTrack()\n",
		"prefix": "playBeatTrack",
		"scope": "source.lua"
	},
	"stopBeatTrack": {
		"body": "stopBeatTrack()",
		"description": "GTA SA\nstopBeatTrack()\n",
		"prefix": "stopBeatTrack",
		"scope": "source.lua"
	},
	"findMaxNumberOfGroupMembers": {
		"body": "findMaxNumberOfGroupMembers()",
		"description": "GTA SA\nint max = findMaxNumberOfGroupMembers()\n",
		"prefix": "findMaxNumberOfGroupMembers",
		"scope": "source.lua"
	},
	"vehicleDoesProvideCover": {
		"body": "vehicleDoesProvideCover(${1:car},${2:providesCover})",
		"description": "GTA SA\nvehicleDoesProvideCover(Vehicle car, bool providesCover)\n",
		"prefix": "vehicleDoesProvideCover",
		"scope": "source.lua"
	},
	"createSnapshotPickup": {
		"body": "createSnapshotPickup(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nPickup pickup = createSnapshotPickup(float atX, float atY, float atZ)\n",
		"prefix": "createSnapshotPickup",
		"scope": "source.lua"
	},
	"createHorseshoePickup": {
		"body": "createHorseshoePickup(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nPickup pickup = createHorseshoePickup(float atX, float atY, float atZ)\n",
		"prefix": "createHorseshoePickup",
		"scope": "source.lua"
	},
	"createOysterPickup": {
		"body": "createOysterPickup(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nPickup pickup = createOysterPickup(float atX, float atY, float atZ)\n",
		"prefix": "createOysterPickup",
		"scope": "source.lua"
	},
	"hasObjectBeenUprooted": {
		"body": "hasObjectBeenUprooted(${1:object})",
		"description": "GTA SA\nbool result = hasObjectBeenUprooted(Object object)\n",
		"prefix": "hasObjectBeenUprooted",
		"scope": "source.lua"
	},
	"addSmokeParticle": {
		"body": "addSmokeParticle(${1:atX},${2:atY},${3:atZ},${4:velocityX},${5:velocityY},${6:velocityZ},${7:r},${8:g},${9:b},${10:a},${11:size},${12:factor})",
		"description": "GTA SA\naddSmokeParticle(float atX, float atY, float atZ, float velocityX, float velocityY, float velocityZ, int r, int g, int b, int a, float size, float factor)\n",
		"prefix": "addSmokeParticle",
		"scope": "source.lua"
	},
	"isCharStuckUnderCar": {
		"body": "isCharStuckUnderCar(${1:ped})",
		"description": "GTA SA\nbool result = isCharStuckUnderCar(Ped ped)\n",
		"prefix": "isCharStuckUnderCar",
		"scope": "source.lua"
	},
	"controlCarDoor": {
		"body": "controlCarDoor(${1:car},${2:door},${3:unlatch},${4:angle})",
		"description": "GTA SA\ncontrolCarDoor(Vehicle car, int door, int unlatch, float angle)\n",
		"prefix": "controlCarDoor",
		"scope": "source.lua"
	},
	"getDoorAngleRatio": {
		"body": "getDoorAngleRatio(${1:car},${2:door})",
		"description": "GTA SA\nfloat angle = getDoorAngleRatio(Vehicle car, int door)\n",
		"prefix": "getDoorAngleRatio",
		"scope": "source.lua"
	},
	"setPlayerDisplayVitalStatsButton": {
		"body": "setPlayerDisplayVitalStatsButton(${1:player},${2:display})",
		"description": "GTA SA\nsetPlayerDisplayVitalStatsButton(Player player, bool display)\n",
		"prefix": "setPlayerDisplayVitalStatsButton",
		"scope": "source.lua"
	},
	"setCharKeepTask": {
		"body": "setCharKeepTask(${1:ped},${2:keepTasks})",
		"description": "GTA SA\nsetCharKeepTask(Ped ped, bool keepTasks)\n",
		"prefix": "setCharKeepTask",
		"scope": "source.lua"
	},
	"createMenuGrid": {
		"body": "createMenuGrid(${1:gxtString},${2:positionX},${3:positionY},${4:width},${5:columns},${6:interactive},${7:background},${8:alignment})",
		"description": "GTA SA\nint id = createMenuGrid(GxtString gxtString, int positionX, int positionY, float width, int columns, bool interactive, bool background, int alignment)\n",
		"prefix": "createMenuGrid",
		"scope": "source.lua"
	},
	"isCharSwimming": {
		"body": "isCharSwimming(${1:ped})",
		"description": "GTA SA\nbool result = isCharSwimming(Ped ped)\n",
		"prefix": "isCharSwimming",
		"scope": "source.lua"
	},
	"getCharSwimState": {
		"body": "getCharSwimState(${1:ped})",
		"description": "GTA SA\nint status = getCharSwimState(Ped ped)\n",
		"prefix": "getCharSwimState",
		"scope": "source.lua"
	},
	"startCharFacialTalk": {
		"body": "startCharFacialTalk(${1:ped},${2:time})",
		"description": "GTA SA\nstartCharFacialTalk(Ped ped, int time)\n",
		"prefix": "startCharFacialTalk",
		"scope": "source.lua"
	},
	"stopCharFacialTalk": {
		"body": "stopCharFacialTalk(${1:ped})",
		"description": "GTA SA\nstopCharFacialTalk(Ped ped)\n",
		"prefix": "stopCharFacialTalk",
		"scope": "source.lua"
	},
	"isBigVehicle": {
		"body": "isBigVehicle(${1:car})",
		"description": "GTA SA\nbool result = isBigVehicle(Vehicle car)\n",
		"prefix": "isBigVehicle",
		"scope": "source.lua"
	},
	"switchPoliceHelis": {
		"body": "switchPoliceHelis(${1:enable})",
		"description": "GTA SA\nswitchPoliceHelis(bool enable)\n",
		"prefix": "switchPoliceHelis",
		"scope": "source.lua"
	},
	"storeCarModState": {
		"body": "storeCarModState()",
		"description": "GTA SA\nstoreCarModState()\n",
		"prefix": "storeCarModState",
		"scope": "source.lua"
	},
	"restoreCarModState": {
		"body": "restoreCarModState()",
		"description": "GTA SA\nrestoreCarModState()\n",
		"prefix": "restoreCarModState",
		"scope": "source.lua"
	},
	"getCurrentCarMod": {
		"body": "getCurrentCarMod(${1:car},${2:slot})",
		"description": "GTA SA\nModel modelId = getCurrentCarMod(Vehicle car, int slot)\n",
		"prefix": "getCurrentCarMod",
		"scope": "source.lua"
	},
	"isCarLowRider": {
		"body": "isCarLowRider(${1:car})",
		"description": "GTA SA\nbool result = isCarLowRider(Vehicle car)\n",
		"prefix": "isCarLowRider",
		"scope": "source.lua"
	},
	"isCarStreetRacer": {
		"body": "isCarStreetRacer(${1:car})",
		"description": "GTA SA\nbool result = isCarStreetRacer(Vehicle car)\n",
		"prefix": "isCarStreetRacer",
		"scope": "source.lua"
	},
	"forceDeathRestart": {
		"body": "forceDeathRestart()",
		"description": "GTA SA\nforceDeathRestart()\n",
		"prefix": "forceDeathRestart",
		"scope": "source.lua"
	},
	"syncWater": {
		"body": "syncWater()",
		"description": "GTA SA\nsyncWater()\n",
		"prefix": "syncWater",
		"scope": "source.lua"
	},
	"setCharCoordinatesNoOffset": {
		"body": "setCharCoordinatesNoOffset(${1:ped},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nsetCharCoordinatesNoOffset(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "setCharCoordinatesNoOffset",
		"scope": "source.lua"
	},
	"doesScriptFireExist": {
		"body": "doesScriptFireExist(${1:fire})",
		"description": "GTA SA\nbool result = doesScriptFireExist(int fire)\n",
		"prefix": "doesScriptFireExist",
		"scope": "source.lua"
	},
	"resetStuffUponResurrection": {
		"body": "resetStuffUponResurrection()",
		"description": "GTA SA\nresetStuffUponResurrection()\n",
		"prefix": "resetStuffUponResurrection",
		"scope": "source.lua"
	},
	"isEmergencyServicesVehicle": {
		"body": "isEmergencyServicesVehicle(${1:car})",
		"description": "GTA SA\nbool result = isEmergencyServicesVehicle(Vehicle car)\n",
		"prefix": "isEmergencyServicesVehicle",
		"scope": "source.lua"
	},
	"killFxSystemNow": {
		"body": "killFxSystemNow(${1:particle})",
		"description": "GTA SA\nkillFxSystemNow(Particle particle)\n",
		"prefix": "killFxSystemNow",
		"scope": "source.lua"
	},
	"isObjectWithinBrainActivationRange": {
		"body": "isObjectWithinBrainActivationRange(${1:player})",
		"description": "GTA SA\nbool result = isObjectWithinBrainActivationRange(Player player)\n",
		"prefix": "isObjectWithinBrainActivationRange",
		"scope": "source.lua"
	},
	"copySharedCharDecisionMaker": {
		"body": "copySharedCharDecisionMaker(${1:from})",
		"description": "GTA SA\nint to = copySharedCharDecisionMaker(int from)\n",
		"prefix": "copySharedCharDecisionMaker",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtPosition": {
		"body": "reportMissionAudioEventAtPosition(${1:atX},${2:atY},${3:atZ},${4:event})",
		"description": "GTA SA\nreportMissionAudioEventAtPosition(float atX, float atY, float atZ, int event)\n",
		"prefix": "reportMissionAudioEventAtPosition",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtObject": {
		"body": "reportMissionAudioEventAtObject(${1:at},${2:event})",
		"description": "GTA SA\nreportMissionAudioEventAtObject(int at, int event)\n",
		"prefix": "reportMissionAudioEventAtObject",
		"scope": "source.lua"
	},
	"attachMissionAudioToObject": {
		"body": "attachMissionAudioToObject(${1:id},${2:object})",
		"description": "GTA SA\nattachMissionAudioToObject(int id, Object object)\n",
		"prefix": "attachMissionAudioToObject",
		"scope": "source.lua"
	},
	"getNumCarColours": {
		"body": "getNumCarColours(${1:car})",
		"description": "GTA SA\nint colours = getNumCarColours(Vehicle car)\n",
		"prefix": "getNumCarColours",
		"scope": "source.lua"
	},
	"extinguishFireAtPoint": {
		"body": "extinguishFireAtPoint(${1:atX},${2:atY},${3:atZ},${4:radius})",
		"description": "GTA SA\nextinguishFireAtPoint(float atX, float atY, float atZ, float radius)\n",
		"prefix": "extinguishFireAtPoint",
		"scope": "source.lua"
	},
	"hasTrainDerailed": {
		"body": "hasTrainDerailed(${1:train})",
		"description": "GTA SA\nbool result = hasTrainDerailed(Vehicle train)\n",
		"prefix": "hasTrainDerailed",
		"scope": "source.lua"
	},
	"setCharForceDieInCar": {
		"body": "setCharForceDieInCar(${1:ped},${2:stayInCarWhenDead})",
		"description": "GTA SA\nsetCharForceDieInCar(Ped ped, bool stayInCarWhenDead)\n",
		"prefix": "setCharForceDieInCar",
		"scope": "source.lua"
	},
	"setOnlyCreateGangMembers": {
		"body": "setOnlyCreateGangMembers(${1:enable})",
		"description": "GTA SA\nsetOnlyCreateGangMembers(bool enable)\n",
		"prefix": "setOnlyCreateGangMembers",
		"scope": "source.lua"
	},
	"getObjectModel": {
		"body": "getObjectModel(${1:object})",
		"description": "GTA SA\nModel modelId = getObjectModel(Object object)\n",
		"prefix": "getObjectModel",
		"scope": "source.lua"
	},
	"setCharUsesCollisionClosestObjectOfType": {
		"body": "setCharUsesCollisionClosestObjectOfType(${1:sphereX},${2:sphereY},${3:sphereZ},${4:radius},${5:modelId},${6:solid},${7:forActor})",
		"description": "GTA SA\nsetCharUsesCollisionClosestObjectOfType(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, bool solid, int forActor)\n",
		"prefix": "setCharUsesCollisionClosestObjectOfType",
		"scope": "source.lua"
	},
	"clearAllScriptFireFlags": {
		"body": "clearAllScriptFireFlags()",
		"description": "GTA SA\nclearAllScriptFireFlags()\n",
		"prefix": "clearAllScriptFireFlags",
		"scope": "source.lua"
	},
	"getCarBlockingCar": {
		"body": "getCarBlockingCar(${1:car})",
		"description": "GTA SA\nint blockingCar = getCarBlockingCar(Vehicle car)\n",
		"prefix": "getCarBlockingCar",
		"scope": "source.lua"
	},
	"getCurrentVehiclePaintjob": {
		"body": "getCurrentVehiclePaintjob(${1:car})",
		"description": "GTA SA\nint paintjob = getCurrentVehiclePaintjob(Vehicle car)\n",
		"prefix": "getCurrentVehiclePaintjob",
		"scope": "source.lua"
	},
	"setHelpMessageBoxSize": {
		"body": "setHelpMessageBoxSize(${1:width})",
		"description": "GTA SA\nsetHelpMessageBoxSize(int width)\n",
		"prefix": "setHelpMessageBoxSize",
		"scope": "source.lua"
	},
	"setGunshotSenseRangeForRiot2": {
		"body": "setGunshotSenseRangeForRiot2(${1:range})",
		"description": "GTA SA\nsetGunshotSenseRangeForRiot2(float range)\n",
		"prefix": "setGunshotSenseRangeForRiot2",
		"scope": "source.lua"
	},
	"getCarMovingComponentOffset": {
		"body": "getCarMovingComponentOffset(${1:car})",
		"description": "GTA SA\nfloat angle = getCarMovingComponentOffset(Vehicle car)\n",
		"prefix": "getCarMovingComponentOffset",
		"scope": "source.lua"
	},
	"setNamedEntryExitFlag": {
		"body": "setNamedEntryExitFlag(${1:interior},${2:bitmask},${3:flag})",
		"description": "GTA SA\nsetNamedEntryExitFlag(GxtString interior, int bitmask, bool flag)\n",
		"prefix": "setNamedEntryExitFlag",
		"scope": "source.lua"
	},
	"pauseCurrentBeatTrack": {
		"body": "pauseCurrentBeatTrack(${1:paused})",
		"description": "GTA SA\npauseCurrentBeatTrack(bool paused)\n",
		"prefix": "pauseCurrentBeatTrack",
		"scope": "source.lua"
	},
	"setPlayerWeaponsScrollable": {
		"body": "setPlayerWeaponsScrollable(${1:player},${2:scrollable})",
		"description": "GTA SA\nsetPlayerWeaponsScrollable(Player player, bool scrollable)\n",
		"prefix": "setPlayerWeaponsScrollable",
		"scope": "source.lua"
	},
	"markRoadNodeAsDontWander": {
		"body": "markRoadNodeAsDontWander(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nmarkRoadNodeAsDontWander(float atX, float atY, float atZ)\n",
		"prefix": "markRoadNodeAsDontWander",
		"scope": "source.lua"
	},
	"unmarkAllRoadNodesAsDontWander": {
		"body": "unmarkAllRoadNodesAsDontWander()",
		"description": "GTA SA\nunmarkAllRoadNodesAsDontWander()\n",
		"prefix": "unmarkAllRoadNodesAsDontWander",
		"scope": "source.lua"
	},
	"setCheckpointHeading": {
		"body": "setCheckpointHeading(${1:checkpoint},${2:angle})",
		"description": "GTA SA\nsetCheckpointHeading(Checkpoint checkpoint, float angle)\n",
		"prefix": "setCheckpointHeading",
		"scope": "source.lua"
	},
	"setMissionRespectTotal": {
		"body": "setMissionRespectTotal(${1:respect})",
		"description": "GTA SA\nsetMissionRespectTotal(int respect)\n",
		"prefix": "setMissionRespectTotal",
		"scope": "source.lua"
	},
	"awardPlayerMissionRespect": {
		"body": "awardPlayerMissionRespect(${1:respect})",
		"description": "GTA SA\nawardPlayerMissionRespect(int respect)\n",
		"prefix": "awardPlayerMissionRespect",
		"scope": "source.lua"
	},
	"setCarCollision": {
		"body": "setCarCollision(${1:car},${2:collision})",
		"description": "GTA SA\nsetCarCollision(Vehicle car, bool collision)\n",
		"prefix": "setCarCollision",
		"scope": "source.lua"
	},
	"changePlaybackToUseAi": {
		"body": "changePlaybackToUseAi(${1:car})",
		"description": "GTA SA\nchangePlaybackToUseAi(Vehicle car)\n",
		"prefix": "changePlaybackToUseAi",
		"scope": "source.lua"
	},
	"cameraSetShakeSimulationSimple": {
		"body": "cameraSetShakeSimulationSimple(${1:type},${2:timelimit},${3:intensity})",
		"description": "GTA SA\ncameraSetShakeSimulationSimple(int type, float timelimit, float intensity)\n",
		"prefix": "cameraSetShakeSimulationSimple",
		"scope": "source.lua"
	},
	"isNightVisionActive": {
		"body": "isNightVisionActive()",
		"description": "GTA SA\nbool result = isNightVisionActive()\n",
		"prefix": "isNightVisionActive",
		"scope": "source.lua"
	},
	"setCreateRandomCops": {
		"body": "setCreateRandomCops(${1:enable})",
		"description": "GTA SA\nsetCreateRandomCops(bool enable)\n",
		"prefix": "setCreateRandomCops",
		"scope": "source.lua"
	},
	"taskSetIgnoreWeaponRangeFlag": {
		"body": "taskSetIgnoreWeaponRangeFlag(${1:ped},${2:ignore})",
		"description": "GTA SA\ntaskSetIgnoreWeaponRangeFlag(Ped ped, bool ignore)\n",
		"prefix": "taskSetIgnoreWeaponRangeFlag",
		"scope": "source.lua"
	},
	"taskPickUpSecondObject": {
		"body": "taskPickUpSecondObject(${1:ped},${2:object},${3:offsetX},${4:offsetY},${5:offsetZ},${6:bone},${7:int7},${8:animation},${9:file},${10:time})",
		"description": "GTA SA\ntaskPickUpSecondObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int bone, int int7, string animation, string file, int time)\n",
		"prefix": "taskPickUpSecondObject",
		"scope": "source.lua"
	},
	"dropSecondObject": {
		"body": "dropSecondObject(${1:ped},${2:to})",
		"description": "GTA SA\ndropSecondObject(Ped ped, bool to)\n",
		"prefix": "dropSecondObject",
		"scope": "source.lua"
	},
	"removeObjectElegantly": {
		"body": "removeObjectElegantly(${1:object})",
		"description": "GTA SA\nremoveObjectElegantly(Object object)\n",
		"prefix": "removeObjectElegantly",
		"scope": "source.lua"
	},
	"drawCrosshair": {
		"body": "drawCrosshair(${1:draw})",
		"description": "GTA SA\ndrawCrosshair(bool draw)\n",
		"prefix": "drawCrosshair",
		"scope": "source.lua"
	},
	"setUpConversationNodeWithSpeech": {
		"body": "setUpConversationNodeWithSpeech(${1:question},${2:answerY},${3:answerN},${4:questionWav},${5:answerYWav},${6:answerNWav})",
		"description": "GTA SA\nsetUpConversationNodeWithSpeech(GxtString question, GxtString answerY, GxtString answerN, int questionWav, int answerYWav, int answerNWav)\n",
		"prefix": "setUpConversationNodeWithSpeech",
		"scope": "source.lua"
	},
	"showBlipsOnAllLevels": {
		"body": "showBlipsOnAllLevels(${1:enable})",
		"description": "GTA SA\nshowBlipsOnAllLevels(bool enable)\n",
		"prefix": "showBlipsOnAllLevels",
		"scope": "source.lua"
	},
	"setCharDruggedUp": {
		"body": "setCharDruggedUp(${1:ped},${2:druggedUp})",
		"description": "GTA SA\nsetCharDruggedUp(Ped ped, bool druggedUp)\n",
		"prefix": "setCharDruggedUp",
		"scope": "source.lua"
	},
	"isCharHeadMissing": {
		"body": "isCharHeadMissing(${1:ped})",
		"description": "GTA SA\nbool result = isCharHeadMissing(Ped ped)\n",
		"prefix": "isCharHeadMissing",
		"scope": "source.lua"
	},
	"getHashKey": {
		"body": "getHashKey(${1:string})",
		"description": "GTA SA\nint CRC32 = getHashKey(string string)\n",
		"prefix": "getHashKey",
		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithSpeech": {
		"body": "setUpConversationEndNodeWithSpeech(${1:gxtString},${2:speech})",
		"description": "GTA SA\nsetUpConversationEndNodeWithSpeech(GxtString gxtString, int speech)\n",
		"prefix": "setUpConversationEndNodeWithSpeech",
		"scope": "source.lua"
	},
	"randomPassengerSay": {
		"body": "randomPassengerSay(${1:passengers},${2:audioTable})",
		"description": "GTA SA\nrandomPassengerSay(int passengers, int audioTable)\n",
		"prefix": "randomPassengerSay",
		"scope": "source.lua"
	},
	"hideAllFrontendBlips": {
		"body": "hideAllFrontendBlips(${1:hide})",
		"description": "GTA SA\nhideAllFrontendBlips(bool hide)\n",
		"prefix": "hideAllFrontendBlips",
		"scope": "source.lua"
	},
	"setPlayerInCarCameraMode": {
		"body": "setPlayerInCarCameraMode(${1:mode})",
		"description": "GTA SA\nsetPlayerInCarCameraMode(int mode)\n",
		"prefix": "setPlayerInCarCameraMode",
		"scope": "source.lua"
	},
	"isCharInAnyTrain": {
		"body": "isCharInAnyTrain(${1:ped})",
		"description": "GTA SA\nbool result = isCharInAnyTrain(Ped ped)\n",
		"prefix": "isCharInAnyTrain",
		"scope": "source.lua"
	},
	"setUpSkipAfterMission": {
		"body": "setUpSkipAfterMission(${1:posX},${2:posY},${3:posZ},${4:angle})",
		"description": "GTA SA\nsetUpSkipAfterMission(float posX, float posY, float posZ, float angle)\n",
		"prefix": "setUpSkipAfterMission",
		"scope": "source.lua"
	},
	"setVehicleIsConsideredByPlayer": {
		"body": "setVehicleIsConsideredByPlayer(${1:car},${2:accessible})",
		"description": "GTA SA\nsetVehicleIsConsideredByPlayer(Vehicle car, bool accessible)\n",
		"prefix": "setVehicleIsConsideredByPlayer",
		"scope": "source.lua"
	},
	"getRandomCarModelInMemory": {
		"body": "getRandomCarModelInMemory(${1:unk})",
		"description": "GTA SA\nModel modelId, int class = getRandomCarModelInMemory(bool unk)\n",
		"prefix": "getRandomCarModelInMemory",
		"scope": "source.lua"
	},
	"getCarDoorLockStatus": {
		"body": "getCarDoorLockStatus(${1:car})",
		"description": "GTA SA\nint doorStatus = getCarDoorLockStatus(Vehicle car)\n",
		"prefix": "getCarDoorLockStatus",
		"scope": "source.lua"
	},
	"setClosestEntryExitFlag": {
		"body": "setClosestEntryExitFlag(${1:atX},${2:atY},${3:radius},${4:bitmask},${5:flag})",
		"description": "GTA SA\nsetClosestEntryExitFlag(float atX, float atY, float radius, int bitmask, bool flag)\n",
		"prefix": "setClosestEntryExitFlag",
		"scope": "source.lua"
	},
	"setCharSignalAfterKill": {
		"body": "setCharSignalAfterKill(${1:ped},${2:signal})",
		"description": "GTA SA\nsetCharSignalAfterKill(Ped ped, bool signal)\n",
		"prefix": "setCharSignalAfterKill",
		"scope": "source.lua"
	},
	"setCharWantedByPolice": {
		"body": "setCharWantedByPolice(${1:ped},${2:wanted})",
		"description": "GTA SA\nsetCharWantedByPolice(Ped ped, bool wanted)\n",
		"prefix": "setCharWantedByPolice",
		"scope": "source.lua"
	},
	"setZoneNoCops": {
		"body": "setZoneNoCops(${1:zone},${2:disableCops})",
		"description": "GTA SA\nsetZoneNoCops(GxtString zone, bool disableCops)\n",
		"prefix": "setZoneNoCops",
		"scope": "source.lua"
	},
	"addBlood": {
		"body": "addBlood(${1:atX},${2:atY},${3:atZ},${4:offsetX},${5:offsetY},${6:offsetZ},${7:density},${8:onActor})",
		"description": "GTA SA\naddBlood(float atX, float atY, float atZ, float offsetX, float offsetY, float offsetZ, int density, int onActor)\n",
		"prefix": "addBlood",
		"scope": "source.lua"
	},
	"displayCarNames": {
		"body": "displayCarNames(${1:show})",
		"description": "GTA SA\ndisplayCarNames(bool show)\n",
		"prefix": "displayCarNames",
		"scope": "source.lua"
	},
	"displayZoneNames": {
		"body": "displayZoneNames(${1:show})",
		"description": "GTA SA\ndisplayZoneNames(bool show)\n",
		"prefix": "displayZoneNames",
		"scope": "source.lua"
	},
	"isCarDoorDamaged": {
		"body": "isCarDoorDamaged(${1:car},${2:door})",
		"description": "GTA SA\nbool result = isCarDoorDamaged(Vehicle car, int door)\n",
		"prefix": "isCarDoorDamaged",
		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGangNoOffset": {
		"body": "setCharCoordinatesDontWarpGangNoOffset(${1:ped},${2:atX},${3:atY},${4:atZ})",
		"description": "GTA SA\nsetCharCoordinatesDontWarpGangNoOffset(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "setCharCoordinatesDontWarpGangNoOffset",
		"scope": "source.lua"
	},
	"setMinigameInProgress": {
		"body": "setMinigameInProgress(${1:enable})",
		"description": "GTA SA\nsetMinigameInProgress(bool enable)\n",
		"prefix": "setMinigameInProgress",
		"scope": "source.lua"
	},
	"isMinigameInProgress": {
		"body": "isMinigameInProgress()",
		"description": "GTA SA\nbool result = isMinigameInProgress()\n",
		"prefix": "isMinigameInProgress",
		"scope": "source.lua"
	},
	"setForceRandomCarModel": {
		"body": "setForceRandomCarModel(${1:modelId})",
		"description": "GTA SA\nsetForceRandomCarModel(Model modelId)\n",
		"prefix": "setForceRandomCarModel",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAngledAreaNoSave": {
		"body": "getRandomCarOfTypeInAngledAreaNoSave(${1:x1},${2:y1},${3:x2},${4:y2},${5:angle},${6:int6})",
		"description": "GTA SA\nVehicle car = getRandomCarOfTypeInAngledAreaNoSave(float x1, float y1, float x2, float y2, float angle, int int6)\n",
		"prefix": "getRandomCarOfTypeInAngledAreaNoSave",
		"scope": "source.lua"
	},
	"addNextMessageToPreviousBriefs": {
		"body": "addNextMessageToPreviousBriefs(${1:int1})",
		"description": "GTA SA\naddNextMessageToPreviousBriefs(bool int1)\n",
		"prefix": "addNextMessageToPreviousBriefs",
		"scope": "source.lua"
	},
	"failKillFrenzy": {
		"body": "failKillFrenzy()",
		"description": "GTA SA\nfailKillFrenzy()\n",
		"prefix": "failKillFrenzy",
		"scope": "source.lua"
	},
	"isCopVehicleInArea3dNoSave": {
		"body": "isCopVehicleInArea3dNoSave(${1:cornerAX},${2:cornerAY},${3:cornerAZ},${4:cornerBX},${5:cornerBY},${6:cornerBZ})",
		"description": "GTA SA\nbool result = isCopVehicleInArea3dNoSave(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isCopVehicleInArea3dNoSave",
		"scope": "source.lua"
	},
	"setPetrolTankWeakpoint": {
		"body": "setPetrolTankWeakpoint(${1:car},${2:enabled})",
		"description": "GTA SA\nsetPetrolTankWeakpoint(Vehicle car, bool enabled)\n",
		"prefix": "setPetrolTankWeakpoint",
		"scope": "source.lua"
	},
	"isCharUsingMapAttractor": {
		"body": "isCharUsingMapAttractor(${1:ped})",
		"description": "GTA SA\nbool result = isCharUsingMapAttractor(Ped ped)\n",
		"prefix": "isCharUsingMapAttractor",
		"scope": "source.lua"
	},
	"setPlayerModel": {
		"body": "setPlayerModel(${1:player},${2:modelId})",
		"description": "GTA SA\nsetPlayerModel(Player player, Model modelId)\n",
		"prefix": "setPlayerModel",
		"scope": "source.lua"
	},
	"areSubtitlesSwitchedOn": {
		"body": "areSubtitlesSwitchedOn()",
		"description": "GTA SA\nbool result = areSubtitlesSwitchedOn()\n",
		"prefix": "areSubtitlesSwitchedOn",
		"scope": "source.lua"
	},
	"removeCharFromCarMaintainPosition": {
		"body": "removeCharFromCarMaintainPosition(${1:ped},${2:car})",
		"description": "GTA SA\nremoveCharFromCarMaintainPosition(Ped ped, Vehicle car)\n",
		"prefix": "removeCharFromCarMaintainPosition",
		"scope": "source.lua"
	},
	"setObjectProofs": {
		"body": "setObjectProofs(${1:object},${2:BP},${3:FP},${4:EP},${5:CP},${6:MP})",
		"description": "GTA SA\nsetObjectProofs(Object object, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setObjectProofs",
		"scope": "source.lua"
	},
	"isCarTouchingCar": {
		"body": "isCarTouchingCar(${1:car1},${2:car2})",
		"description": "GTA SA\nbool result = isCarTouchingCar(Vehicle car1, Vehicle car2)\n",
		"prefix": "isCarTouchingCar",
		"scope": "source.lua"
	},
	"doesObjectHaveThisModel": {
		"body": "doesObjectHaveThisModel(${1:object},${2:modelId})",
		"description": "GTA SA\nbool result = doesObjectHaveThisModel(Object object, Model modelId)\n",
		"prefix": "doesObjectHaveThisModel",
		"scope": "source.lua"
	},
	"setTrainForcedToSlowDown": {
		"body": "setTrainForcedToSlowDown(${1:train},${2:forced})",
		"description": "GTA SA\nsetTrainForcedToSlowDown(Vehicle train, bool forced)\n",
		"prefix": "setTrainForcedToSlowDown",
		"scope": "source.lua"
	},
	"isVehicleOnAllWheels": {
		"body": "isVehicleOnAllWheels(${1:car})",
		"description": "GTA SA\nbool result = isVehicleOnAllWheels(Vehicle car)\n",
		"prefix": "isVehicleOnAllWheels",
		"scope": "source.lua"
	},
	"doesPickupExist": {
		"body": "doesPickupExist(${1:pickup})",
		"description": "GTA SA\nbool result = doesPickupExist(Pickup pickup)\n",
		"prefix": "doesPickupExist",
		"scope": "source.lua"
	},
	"enableAmbientCrime": {
		"body": "enableAmbientCrime(${1:enable})",
		"description": "GTA SA\nenableAmbientCrime(bool enable)\n",
		"prefix": "enableAmbientCrime",
		"scope": "source.lua"
	},
	"clearWantedLevelInGarage": {
		"body": "clearWantedLevelInGarage()",
		"description": "GTA SA\nclearWantedLevelInGarage()\n",
		"prefix": "clearWantedLevelInGarage",
		"scope": "source.lua"
	},
	"setCharSayContextImportant": {
		"body": "setCharSayContextImportant(${1:ped},${2:soundslot},${3:flags1},${4:flags2},${5:flags3})",
		"description": "GTA SA\nint unk = setCharSayContextImportant(Ped ped, int soundslot, bool flags1, bool flags2, bool flags3)\n",
		"prefix": "setCharSayContextImportant",
		"scope": "source.lua"
	},
	"setCharSayScript": {
		"body": "setCharSayScript(${1:ped},${2:sound},${3:flags1},${4:flags2},${5:flags3})",
		"description": "GTA SA\nsetCharSayScript(Ped ped, int sound, bool flags1, bool flags2, bool flags3)\n",
		"prefix": "setCharSayScript",
		"scope": "source.lua"
	},
	"forceInteriorLightingForPlayer": {
		"body": "forceInteriorLightingForPlayer(${1:player},${2:force})",
		"description": "GTA SA\nforceInteriorLightingForPlayer(Player player, bool force)\n",
		"prefix": "forceInteriorLightingForPlayer",
		"scope": "source.lua"
	},
	"useDetonator": {
		"body": "useDetonator()",
		"description": "GTA SA\nuseDetonator()\n",
		"prefix": "useDetonator",
		"scope": "source.lua"
	},
	"isMoneyPickupAtCoords": {
		"body": "isMoneyPickupAtCoords(${1:atX},${2:atY},${3:atZ})",
		"description": "GTA SA\nbool result = isMoneyPickupAtCoords(float atX, float atY, float atZ)\n",
		"prefix": "isMoneyPickupAtCoords",
		"scope": "source.lua"
	},
	"setMenuColumnWidth": {
		"body": "setMenuColumnWidth(${1:panel},${2:column},${3:width})",
		"description": "GTA SA\nsetMenuColumnWidth(int panel, int column, int width)\n",
		"prefix": "setMenuColumnWidth",
		"scope": "source.lua"
	},
	"makeRoomInPlayerGangForMissionPeds": {
		"body": "makeRoomInPlayerGangForMissionPeds(${1:group})",
		"description": "GTA SA\nmakeRoomInPlayerGangForMissionPeds(int group)\n",
		"prefix": "makeRoomInPlayerGangForMissionPeds",
		"scope": "source.lua"
	},
	"isCharGettingInToACar": {
		"body": "isCharGettingInToACar(${1:ped})",
		"description": "GTA SA\nbool result = isCharGettingInToACar(Ped ped)\n",
		"prefix": "isCharGettingInToACar",
		"scope": "source.lua"
	},
	"setUpSkipForSpecificVehicle": {
		"body": "setUpSkipForSpecificVehicle(${1:posX},${2:posY},${3:posZ},${4:angle},${5:car})",
		"description": "GTA SA\nsetUpSkipForSpecificVehicle(float posX, float posY, float posZ, float angle, Vehicle car)\n",
		"prefix": "setUpSkipForSpecificVehicle",
		"scope": "source.lua"
	},
	"getCarModelValue": {
		"body": "getCarModelValue(${1:modelId})",
		"description": "GTA SA\nint price = getCarModelValue(Model modelId)\n",
		"prefix": "getCarModelValue",
		"scope": "source.lua"
	},
	"createCarGeneratorWithPlate": {
		"body": "createCarGeneratorWithPlate(${1:atX},${2:atY},${3:atZ},${4:angle},${5:modelId},${6:color1},${7:color2},${8:forceSpawn},${9:alarm},${10:doorLock},${11:minDelay},${12:maxDelay},${13:plate})",
		"description": "GTA SA\nint generator = createCarGeneratorWithPlate(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay, string plate)\n",
		"prefix": "createCarGeneratorWithPlate",
		"scope": "source.lua"
	},
	"findTrainDirection": {
		"body": "findTrainDirection(${1:train})",
		"description": "GTA SA\nbool result = findTrainDirection(Vehicle train)\n",
		"prefix": "findTrainDirection",
		"scope": "source.lua"
	},
	"setAircraftCarrierSamSite": {
		"body": "setAircraftCarrierSamSite(${1:enable})",
		"description": "GTA SA\nsetAircraftCarrierSamSite(bool enable)\n",
		"prefix": "setAircraftCarrierSamSite",
		"scope": "source.lua"
	},
	"drawLightWithRange": {
		"body": "drawLightWithRange(${1:atX},${2:atY},${3:atZ},${4:r},${5:g},${6:b},${7:radius})",
		"description": "GTA SA\ndrawLightWithRange(float atX, float atY, float atZ, int r, int g, int b, float radius)\n",
		"prefix": "drawLightWithRange",
		"scope": "source.lua"
	},
	"enableBurglaryHouses": {
		"body": "enableBurglaryHouses(${1:enable})",
		"description": "GTA SA\nenableBurglaryHouses(bool enable)\n",
		"prefix": "enableBurglaryHouses",
		"scope": "source.lua"
	},
	"isPlayerControlOn": {
		"body": "isPlayerControlOn(${1:player})",
		"description": "GTA SA\nbool result = isPlayerControlOn(Player player)\n",
		"prefix": "isPlayerControlOn",
		"scope": "source.lua"
	},
	"getCharActiveInterior": {
		"body": "getCharActiveInterior(${1:ped})",
		"description": "GTA SA\nint interior = getCharActiveInterior(Ped ped)\n",
		"prefix": "getCharActiveInterior",
		"scope": "source.lua"
	},
	"giveNonPlayerCarNitro": {
		"body": "giveNonPlayerCarNitro(${1:car})",
		"description": "GTA SA\ngiveNonPlayerCarNitro(Vehicle car)\n",
		"prefix": "giveNonPlayerCarNitro",
		"scope": "source.lua"
	},
	"playerTakeOffGoggles": {
		"body": "playerTakeOffGoggles(${1:player},${2:useAnim})",
		"description": "GTA SA\nplayerTakeOffGoggles(Player player, bool useAnim)\n",
		"prefix": "playerTakeOffGoggles",
		"scope": "source.lua"
	},
	"allowFixedCameraCollision": {
		"body": "allowFixedCameraCollision(${1:allow})",
		"description": "GTA SA\nallowFixedCameraCollision(bool allow)\n",
		"prefix": "allowFixedCameraCollision",
		"scope": "source.lua"
	},
	"hasCharSpottedCharInFront": {
		"body": "hasCharSpottedCharInFront(${1:ped},${2:ped2})",
		"description": "GTA SA\nbool result = hasCharSpottedCharInFront(Ped ped, Ped ped2)\n",
		"prefix": "hasCharSpottedCharInFront",
		"scope": "source.lua"
	},
	"forceBigMessageAndCounter": {
		"body": "forceBigMessageAndCounter(${1:stayOnScreen})",
		"description": "GTA SA\nforceBigMessageAndCounter(bool stayOnScreen)\n",
		"prefix": "forceBigMessageAndCounter",
		"scope": "source.lua"
	},
	"setVehicleCameraTweak": {
		"body": "setVehicleCameraTweak(${1:carModel},${2:distance},${3:altitudeMultiplier},${4:angleX})",
		"description": "GTA SA\nsetVehicleCameraTweak(Model carModel, float distance, float altitudeMultiplier, float angleX)\n",
		"prefix": "setVehicleCameraTweak",
		"scope": "source.lua"
	},
	"resetVehicleCameraTweak": {
		"body": "resetVehicleCameraTweak()",
		"description": "GTA SA\nresetVehicleCameraTweak()\n",
		"prefix": "resetVehicleCameraTweak",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtChar": {
		"body": "reportMissionAudioEventAtChar(${1:ped},${2:event})",
		"description": "GTA SA\nreportMissionAudioEventAtChar(Ped ped, int event)\n",
		"prefix": "reportMissionAudioEventAtChar",
		"scope": "source.lua"
	},
	"doesDecisionMakerExist": {
		"body": "doesDecisionMakerExist(${1:maker})",
		"description": "GTA SA\nbool result = doesDecisionMakerExist(int maker)\n",
		"prefix": "doesDecisionMakerExist",
		"scope": "source.lua"
	},
	"ignoreHeightDifferenceFollowingNodes": {
		"body": "ignoreHeightDifferenceFollowingNodes(${1:ped},${2:ignore})",
		"description": "GTA SA\nignoreHeightDifferenceFollowingNodes(Ped ped, bool ignore)\n",
		"prefix": "ignoreHeightDifferenceFollowingNodes",
		"scope": "source.lua"
	},
	"shutAllCharsUp": {
		"body": "shutAllCharsUp(${1:enable})",
		"description": "GTA SA\nshutAllCharsUp(bool enable)\n",
		"prefix": "shutAllCharsUp",
		"scope": "source.lua"
	},
	"setCharGetOutUpsideDownCar": {
		"body": "setCharGetOutUpsideDownCar(${1:ped},${2:canGetOut})",
		"description": "GTA SA\nsetCharGetOutUpsideDownCar(Ped ped, bool canGetOut)\n",
		"prefix": "setCharGetOutUpsideDownCar",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtCar": {
		"body": "reportMissionAudioEventAtCar(${1:car},${2:event})",
		"description": "GTA SA\nreportMissionAudioEventAtCar(Vehicle car, int event)\n",
		"prefix": "reportMissionAudioEventAtCar",
		"scope": "source.lua"
	},
	"doWeaponStuffAtStartOf2pGame": {
		"body": "doWeaponStuffAtStartOf2pGame()",
		"description": "GTA SA\ndoWeaponStuffAtStartOf2pGame()\n",
		"prefix": "doWeaponStuffAtStartOf2pGame",
		"scope": "source.lua"
	},
	"hasGameJustReturnedFromFrontend": {
		"body": "hasGameJustReturnedFromFrontend()",
		"description": "GTA SA\nbool result = hasGameJustReturnedFromFrontend()\n",
		"prefix": "hasGameJustReturnedFromFrontend",
		"scope": "source.lua"
	},
	"getCurrentLanguage": {
		"body": "getCurrentLanguage()",
		"description": "GTA SA\nint language = getCurrentLanguage()\n",
		"prefix": "getCurrentLanguage",
		"scope": "source.lua"
	},
	"isObjectIntersectingWorld": {
		"body": "isObjectIntersectingWorld(${1:object})",
		"description": "GTA SA\nbool result = isObjectIntersectingWorld(Object object)\n",
		"prefix": "isObjectIntersectingWorld",
		"scope": "source.lua"
	},
	"getStringWidth": {
		"body": "getStringWidth(${1:gxtString})",
		"description": "GTA SA\nint width = getStringWidth(GxtString gxtString)\n",
		"prefix": "getStringWidth",
		"scope": "source.lua"
	},
	"resetVehicleHydraulics": {
		"body": "resetVehicleHydraulics(${1:car})",
		"description": "GTA SA\nresetVehicleHydraulics(Vehicle car)\n",
		"prefix": "resetVehicleHydraulics",
		"scope": "source.lua"
	},
	"setRespawnPointForDurationOfMission": {
		"body": "setRespawnPointForDurationOfMission(${1:posX},${2:posY},${3:posZ})",
		"description": "GTA SA\nsetRespawnPointForDurationOfMission(float posX, float posY, float posZ)\n",
		"prefix": "setRespawnPointForDurationOfMission",
		"scope": "source.lua"
	},
	"isThisModelACar": {
		"body": "isThisModelACar(${1:modelId})",
		"description": "GTA SA\nbool result = isThisModelACar(Model modelId)\n",
		"prefix": "isThisModelACar",
		"scope": "source.lua"
	},
	"switchOnGroundSearchlight": {
		"body": "switchOnGroundSearchlight(${1:searchlight},${2:lightsThroughObstacles})",
		"description": "GTA SA\nswitchOnGroundSearchlight(Searchlight searchlight, bool lightsThroughObstacles)\n",
		"prefix": "switchOnGroundSearchlight",
		"scope": "source.lua"
	},
	"isGangWarFightingGoingOn": {
		"body": "isGangWarFightingGoingOn()",
		"description": "GTA SA\nbool result = isGangWarFightingGoingOn()\n",
		"prefix": "isGangWarFightingGoingOn",
		"scope": "source.lua"
	},
	"isNextStationAllowed": {
		"body": "isNextStationAllowed(${1:train})",
		"description": "GTA SA\nbool result = isNextStationAllowed(Vehicle train)\n",
		"prefix": "isNextStationAllowed",
		"scope": "source.lua"
	},
	"skipToNextAllowedStation": {
		"body": "skipToNextAllowedStation(${1:train})",
		"description": "GTA SA\nskipToNextAllowedStation(Vehicle train)\n",
		"prefix": "skipToNextAllowedStation",
		"scope": "source.lua"
	},
	"getStringWidthWithNumber": {
		"body": "getStringWidthWithNumber(${1:gxtString},${2:number})",
		"description": "GTA SA\nint width = getStringWidthWithNumber(GxtString gxtString, int number)\n",
		"prefix": "getStringWidthWithNumber",
		"scope": "source.lua"
	},
	"shutCharUpForScriptedSpeech": {
		"body": "shutCharUpForScriptedSpeech(${1:ped},${2:muted})",
		"description": "GTA SA\nshutCharUpForScriptedSpeech(Ped ped, bool muted)\n",
		"prefix": "shutCharUpForScriptedSpeech",
		"scope": "source.lua"
	},
	"enableDisabledAttractorsOnObject": {
		"body": "enableDisabledAttractorsOnObject(${1:object},${2:enable})",
		"description": "GTA SA\nenableDisabledAttractorsOnObject(Object object, bool enable)\n",
		"prefix": "enableDisabledAttractorsOnObject",
		"scope": "source.lua"
	},
	"loadSceneInDirection": {
		"body": "loadSceneInDirection(${1:coordX},${2:coordY},${3:coordZ},${4:angle})",
		"description": "GTA SA\nloadSceneInDirection(float coordX, float coordY, float coordZ, float angle)\n",
		"prefix": "loadSceneInDirection",
		"scope": "source.lua"
	},
	"isPlayerUsingJetpack": {
		"body": "isPlayerUsingJetpack(${1:player})",
		"description": "GTA SA\nbool result = isPlayerUsingJetpack(Player player)\n",
		"prefix": "isPlayerUsingJetpack",
		"scope": "source.lua"
	},
	"clearThisPrintBigNow": {
		"body": "clearThisPrintBigNow(${1:style})",
		"description": "GTA SA\nclearThisPrintBigNow(int style)\n",
		"prefix": "clearThisPrintBigNow",
		"scope": "source.lua"
	},
	"hasLanguageChanged": {
		"body": "hasLanguageChanged()",
		"description": "GTA SA\nbool result = hasLanguageChanged()\n",
		"prefix": "hasLanguageChanged",
		"scope": "source.lua"
	},
	"incrementIntStatNoMessage": {
		"body": "incrementIntStatNoMessage(${1:stat},${2:value})",
		"description": "GTA SA\nincrementIntStatNoMessage(int stat, int value)\n",
		"prefix": "incrementIntStatNoMessage",
		"scope": "source.lua"
	},
	"setExtraCarColours": {
		"body": "setExtraCarColours(${1:car},${2:tertiaryColor},${3:quaternaryColor})",
		"description": "GTA SA\nsetExtraCarColours(Vehicle car, int tertiaryColor, int quaternaryColor)\n",
		"prefix": "setExtraCarColours",
		"scope": "source.lua"
	},
	"getExtraCarColours": {
		"body": "getExtraCarColours(${1:car})",
		"description": "GTA SA\nint tertiaryColor, int quaternaryColor = getExtraCarColours(Vehicle car)\n",
		"prefix": "getExtraCarColours",
		"scope": "source.lua"
	},
	"manageAllPopulation": {
		"body": "manageAllPopulation()",
		"description": "GTA SA\nmanageAllPopulation()\n",
		"prefix": "manageAllPopulation",
		"scope": "source.lua"
	},
	"setNoResprays": {
		"body": "setNoResprays(${1:enable})",
		"description": "GTA SA\nsetNoResprays(bool enable)\n",
		"prefix": "setNoResprays",
		"scope": "source.lua"
	},
	"hasCarBeenResprayed": {
		"body": "hasCarBeenResprayed(${1:car})",
		"description": "GTA SA\nbool result = hasCarBeenResprayed(Vehicle car)\n",
		"prefix": "hasCarBeenResprayed",
		"scope": "source.lua"
	},
	"attachMissionAudioToCar": {
		"body": "attachMissionAudioToCar(${1:audioId},${2:car})",
		"description": "GTA SA\nattachMissionAudioToCar(int audioId, Vehicle car)\n",
		"prefix": "attachMissionAudioToCar",
		"scope": "source.lua"
	},
	"setHasBeenOwnedForCarGenerator": {
		"body": "setHasBeenOwnedForCarGenerator(${1:generator},${2:owned})",
		"description": "GTA SA\nsetHasBeenOwnedForCarGenerator(int generator, bool owned)\n",
		"prefix": "setHasBeenOwnedForCarGenerator",
		"scope": "source.lua"
	},
	"setUpConversationNodeWithScriptedSpeech": {
		"body": "setUpConversationNodeWithScriptedSpeech(${1:questionGXT},${2:answerYesGXT},${3:answerNoGXT},${4:questionWAV},${5:answerYesWAV},${6:answerNoWAV})",
		"description": "GTA SA\nsetUpConversationNodeWithScriptedSpeech(GxtString questionGXT, GxtString answerYesGXT, GxtString answerNoGXT, int questionWAV, int answerYesWAV, int answerNoWAV)\n",
		"prefix": "setUpConversationNodeWithScriptedSpeech",
		"scope": "source.lua"
	},
	"setAreaName": {
		"body": "setAreaName(${1:gxtString})",
		"description": "GTA SA\nsetAreaName(GxtString gxtString)\n",
		"prefix": "setAreaName",
		"scope": "source.lua"
	},
	"taskPlayAnimSecondary": {
		"body": "taskPlayAnimSecondary(${1:ped},${2:animation},${3:IFP},${4:framedelta},${5:loopA},${6:lockX},${7:lockY},${8:lockF},${9:time})",
		"description": "GTA SA\ntaskPlayAnimSecondary(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnimSecondary",
		"scope": "source.lua"
	},
	"isCharTouchingChar": {
		"body": "isCharTouchingChar(${1:ped},${2:ped2})",
		"description": "GTA SA\nbool result = isCharTouchingChar(Ped ped, Ped ped2)\n",
		"prefix": "isCharTouchingChar",
		"scope": "source.lua"
	},
	"disableHeliAudio": {
		"body": "disableHeliAudio(${1:helicopter},${2:disable})",
		"description": "GTA SA\ndisableHeliAudio(Vehicle helicopter, bool disable)\n",
		"prefix": "disableHeliAudio",
		"scope": "source.lua"
	},
	"taskHandGesture": {
		"body": "taskHandGesture(${1:ped},${2:ped2})",
		"description": "GTA SA\ntaskHandGesture(Ped ped, Ped ped2)\n",
		"prefix": "taskHandGesture",
		"scope": "source.lua"
	},
	"takePhoto": {
		"body": "takePhoto(${1:unk})",
		"description": "GTA SA\ntakePhoto(bool unk)\n",
		"prefix": "takePhoto",
		"scope": "source.lua"
	},
	"incrementFloatStatNoMessage": {
		"body": "incrementFloatStatNoMessage(${1:stat},${2:value})",
		"description": "GTA SA\nincrementFloatStatNoMessage(int stat, float value)\n",
		"prefix": "incrementFloatStatNoMessage",
		"scope": "source.lua"
	},
	"setPlayerGroupToFollowAlways": {
		"body": "setPlayerGroupToFollowAlways(${1:player},${2:followAlways})",
		"description": "GTA SA\nsetPlayerGroupToFollowAlways(Player player, bool followAlways)\n",
		"prefix": "setPlayerGroupToFollowAlways",
		"scope": "source.lua"
	},
	"improveCarByCheating": {
		"body": "improveCarByCheating(${1:car},${2:affectedByCheats})",
		"description": "GTA SA\nimproveCarByCheating(Vehicle car, bool affectedByCheats)\n",
		"prefix": "improveCarByCheating",
		"scope": "source.lua"
	},
	"changeCarColourFromMenu": {
		"body": "changeCarColourFromMenu(${1:panelID},${2:car},${3:colorslot},${4:activeRow})",
		"description": "GTA SA\nchangeCarColourFromMenu(int panelID, Vehicle car, int colorslot, int activeRow)\n",
		"prefix": "changeCarColourFromMenu",
		"scope": "source.lua"
	},
	"highlightMenuItem": {
		"body": "highlightMenuItem(${1:panel},${2:row},${3:highlight})",
		"description": "GTA SA\nhighlightMenuItem(int panel, int row, bool highlight)\n",
		"prefix": "highlightMenuItem",
		"scope": "source.lua"
	},
	"setDisableMilitaryZones": {
		"body": "setDisableMilitaryZones(${1:disable})",
		"description": "GTA SA\nsetDisableMilitaryZones(bool disable)\n",
		"prefix": "setDisableMilitaryZones",
		"scope": "source.lua"
	},
	"setCameraPositionUnfixed": {
		"body": "setCameraPositionUnfixed(${1:xAngle},${2:zAngle})",
		"description": "GTA SA\nsetCameraPositionUnfixed(float xAngle, float zAngle)\n",
		"prefix": "setCameraPositionUnfixed",
		"scope": "source.lua"
	},
	"setRadioToPlayersFavouriteStation": {
		"body": "setRadioToPlayersFavouriteStation()",
		"description": "GTA SA\nsetRadioToPlayersFavouriteStation()\n",
		"prefix": "setRadioToPlayersFavouriteStation",
		"scope": "source.lua"
	},
	"setDeathWeaponsPersist": {
		"body": "setDeathWeaponsPersist(${1:ped},${2:persist})",
		"description": "GTA SA\nsetDeathWeaponsPersist(Ped ped, bool persist)\n",
		"prefix": "setDeathWeaponsPersist",
		"scope": "source.lua"
	},
	"setCharSwimSpeed": {
		"body": "setCharSwimSpeed(${1:ped},${2:speed})",
		"description": "GTA SA\nsetCharSwimSpeed(Ped ped, float speed)\n",
		"prefix": "setCharSwimSpeed",
		"scope": "source.lua"
	},
	"isPlayerClimbing": {
		"body": "isPlayerClimbing(${1:player})",
		"description": "GTA SA\nbool result = isPlayerClimbing(Player player)\n",
		"prefix": "isPlayerClimbing",
		"scope": "source.lua"
	},
	"isThisHelpMessageBeingDisplayed": {
		"body": "isThisHelpMessageBeingDisplayed(${1:gxtString})",
		"description": "GTA SA\nbool result = isThisHelpMessageBeingDisplayed(GxtString gxtString)\n",
		"prefix": "isThisHelpMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"isWidescreenOnInOptions": {
		"body": "isWidescreenOnInOptions()",
		"description": "GTA SA\nbool result = isWidescreenOnInOptions()\n",
		"prefix": "isWidescreenOnInOptions",
		"scope": "source.lua"
	},
	"drawSubtitlesBeforeFade": {
		"body": "drawSubtitlesBeforeFade(${1:flag})",
		"description": "GTA SA\ndrawSubtitlesBeforeFade(bool flag)\n",
		"prefix": "drawSubtitlesBeforeFade",
		"scope": "source.lua"
	},
	"drawOddjobTitleBeforeFade": {
		"body": "drawOddjobTitleBeforeFade(${1:flag})",
		"description": "GTA SA\ndrawOddjobTitleBeforeFade(bool flag)\n",
		"prefix": "drawOddjobTitleBeforeFade",
		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoordWithRadius": {
		"body": "taskFollowPathNodesToCoordWithRadius(${1:ped},${2:toX},${3:toY},${4:toZ},${5:mode},${6:time},${7:stopRadius})",
		"description": "GTA SA\ntaskFollowPathNodesToCoordWithRadius(Ped ped, float toX, float toY, float toZ, int mode, int time, float stopRadius)\n",
		"prefix": "taskFollowPathNodesToCoordWithRadius",
		"scope": "source.lua"
	},
	"setPhotoCameraEffect": {
		"body": "setPhotoCameraEffect(${1:firstPersonView})",
		"description": "GTA SA\nsetPhotoCameraEffect(bool firstPersonView)\n",
		"prefix": "setPhotoCameraEffect",
		"scope": "source.lua"
	},
	"fixCar": {
		"body": "fixCar(${1:car})",
		"description": "GTA SA\nfixCar(Vehicle car)\n",
		"prefix": "fixCar",
		"scope": "source.lua"
	},
	"setPlayerGroupToFollowNever": {
		"body": "setPlayerGroupToFollowNever(${1:player},${2:neverFollow})",
		"description": "GTA SA\nsetPlayerGroupToFollowNever(Player player, bool neverFollow)\n",
		"prefix": "setPlayerGroupToFollowNever",
		"scope": "source.lua"
	},
	"isCharAttachedToAnyCar": {
		"body": "isCharAttachedToAnyCar(${1:ped})",
		"description": "GTA SA\nbool result = isCharAttachedToAnyCar(Ped ped)\n",
		"prefix": "isCharAttachedToAnyCar",
		"scope": "source.lua"
	},
	"storeCarCharIsAttachedToNoSave": {
		"body": "storeCarCharIsAttachedToNoSave(${1:car})",
		"description": "GTA SA\nPed ped = storeCarCharIsAttachedToNoSave(Vehicle car)\n",
		"prefix": "storeCarCharIsAttachedToNoSave",
		"scope": "source.lua"
	},
	"setUpSkipForVehicleFinishedByScript": {
		"body": "setUpSkipForVehicleFinishedByScript(${1:posX},${2:posY},${3:posZ},${4:angle},${5:car})",
		"description": "GTA SA\nsetUpSkipForVehicleFinishedByScript(float posX, float posY, float posZ, float angle, Vehicle car)\n",
		"prefix": "setUpSkipForVehicleFinishedByScript",
		"scope": "source.lua"
	},
	"isSkipWaitingForScriptToFadeIn": {
		"body": "isSkipWaitingForScriptToFadeIn()",
		"description": "GTA SA\nbool result = isSkipWaitingForScriptToFadeIn()\n",
		"prefix": "isSkipWaitingForScriptToFadeIn",
		"scope": "source.lua"
	},
	"forceAllVehicleLightsOff": {
		"body": "forceAllVehicleLightsOff(${1:off})",
		"description": "GTA SA\nforceAllVehicleLightsOff(bool off)\n",
		"prefix": "forceAllVehicleLightsOff",
		"scope": "source.lua"
	},
	"getPlayerInCarCameraMode": {
		"body": "getPlayerInCarCameraMode()",
		"description": "GTA SA\nint mode = getPlayerInCarCameraMode()\n",
		"prefix": "getPlayerInCarCameraMode",
		"scope": "source.lua"
	},
	"isLastBuildingModelShotByPlayer": {
		"body": "isLastBuildingModelShotByPlayer(${1:player},${2:modelId})",
		"description": "GTA SA\nbool result = isLastBuildingModelShotByPlayer(Player player, Model modelId)\n",
		"prefix": "isLastBuildingModelShotByPlayer",
		"scope": "source.lua"
	},
	"clearLastBuildingModelShotByPlayer": {
		"body": "clearLastBuildingModelShotByPlayer(${1:player})",
		"description": "GTA SA\nclearLastBuildingModelShotByPlayer(Player player)\n",
		"prefix": "clearLastBuildingModelShotByPlayer",
		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithScriptedSpeech": {
		"body": "setUpConversationEndNodeWithScriptedSpeech(${1:dialogueGxt},${2:wav})",
		"description": "GTA SA\nsetUpConversationEndNodeWithScriptedSpeech(GxtString dialogueGxt, int wav)\n",
		"prefix": "setUpConversationEndNodeWithScriptedSpeech",
		"scope": "source.lua"
	},
	"activatePimpCheat": {
		"body": "activatePimpCheat(${1:enable})",
		"description": "GTA SA\nactivatePimpCheat(bool enable)\n",
		"prefix": "activatePimpCheat",
		"scope": "source.lua"
	},
	"getRandomCharInAreaOffsetNoSave": {
		"body": "getRandomCharInAreaOffsetNoSave(${1:sphereX},${2:sphereY},${3:sphereZ},${4:radiusX},${5:radiusY},${6:radiusZ})",
		"description": "GTA SA\nPed ped = getRandomCharInAreaOffsetNoSave(float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ)\n",
		"prefix": "getRandomCharInAreaOffsetNoSave",
		"scope": "source.lua"
	},
	"setScriptCoopGame": {
		"body": "setScriptCoopGame(${1:enable})",
		"description": "GTA SA\nsetScriptCoopGame(bool enable)\n",
		"prefix": "setScriptCoopGame",
		"scope": "source.lua"
	},
	"createUser3dMarker": {
		"body": "createUser3dMarker(${1:atX},${2:atY},${3:atZ},${4:color})",
		"description": "GTA SA\nMarker marker = createUser3dMarker(float atX, float atY, float atZ, int color)\n",
		"prefix": "createUser3dMarker",
		"scope": "source.lua"
	},
	"removeUser3dMarker": {
		"body": "removeUser3dMarker(${1:marker})",
		"description": "GTA SA\nremoveUser3dMarker(Marker marker)\n",
		"prefix": "removeUser3dMarker",
		"scope": "source.lua"
	},
	"getRidOfPlayerProstitute": {
		"body": "getRidOfPlayerProstitute()",
		"description": "GTA SA\ngetRidOfPlayerProstitute()\n",
		"prefix": "getRidOfPlayerProstitute",
		"scope": "source.lua"
	},
	"displayNonMinigameHelpMessages": {
		"body": "displayNonMinigameHelpMessages(${1:display})",
		"description": "GTA SA\ndisplayNonMinigameHelpMessages(bool display)\n",
		"prefix": "displayNonMinigameHelpMessages",
		"scope": "source.lua"
	},
	"setRailtrackResistanceMult": {
		"body": "setRailtrackResistanceMult(${1:tracksFriction})",
		"description": "GTA SA\nsetRailtrackResistanceMult(float tracksFriction)\n",
		"prefix": "setRailtrackResistanceMult",
		"scope": "source.lua"
	},
	"switchObjectBrains": {
		"body": "switchObjectBrains(${1:externalScript},${2:canBeStreamedIn})",
		"description": "GTA SA\nswitchObjectBrains(int externalScript, bool canBeStreamedIn)\n",
		"prefix": "switchObjectBrains",
		"scope": "source.lua"
	},
	"finishSettingUpConversationNoSubtitles": {
		"body": "finishSettingUpConversationNoSubtitles()",
		"description": "GTA SA\nfinishSettingUpConversationNoSubtitles()\n",
		"prefix": "finishSettingUpConversationNoSubtitles",
		"scope": "source.lua"
	},
	"allowPauseInWidescreen": {
		"body": "allowPauseInWidescreen(${1:enable})",
		"description": "GTA SA\nallowPauseInWidescreen(bool enable)\n",
		"prefix": "allowPauseInWidescreen",
		"scope": "source.lua"
	},
	"getPcMouseMovement": {
		"body": "getPcMouseMovement()",
		"description": "GTA SA\nfloat x, float y = getPcMouseMovement()\n",
		"prefix": "getPcMouseMovement",
		"scope": "source.lua"
	},
	"isPcUsingJoypad": {
		"body": "isPcUsingJoypad()",
		"description": "GTA SA\nbool result = isPcUsingJoypad()\n",
		"prefix": "isPcUsingJoypad",
		"scope": "source.lua"
	},
	"isMouseUsingVerticalInversion": {
		"body": "isMouseUsingVerticalInversion()",
		"description": "GTA SA\nbool result = isMouseUsingVerticalInversion()\n",
		"prefix": "isMouseUsingVerticalInversion",
		"scope": "source.lua"
	},
	"startNewCustomScript": {
		"body": "startNewCustomScript(${1:filepath},${2:args})",
		"description": "GTA SA\nbool result = startNewCustomScript(zstring filepath, table args)\n",
		"prefix": "startNewCustomScript",
		"scope": "source.lua"
	},
	"launchCustomMission": {
		"body": "launchCustomMission(${1:filepath},${2:args})",
		"description": "GTA SA\nlaunchCustomMission(zstring filepath, table args)\n",
		"prefix": "launchCustomMission",
		"scope": "source.lua"
	},
	"getScmThreadStructNamed": {
		"body": "getScmThreadStructNamed(${1:thread})",
		"description": "GTA SA\nint handle = getScmThreadStructNamed(GxtString thread)\n",
		"prefix": "getScmThreadStructNamed",
		"scope": "source.lua"
	},
	"loadAudioStream": {
		"body": "loadAudioStream(${1:audio})",
		"description": "GTA SA\nbool result, int handle = loadAudioStream(zstring audio)\n",
		"prefix": "loadAudioStream",
		"scope": "source.lua"
	},
	"setAudioStreamState": {
		"body": "setAudioStreamState(${1:handle},${2:state})",
		"description": "GTA SA\nsetAudioStreamState(int handle, int state)\n",
		"prefix": "setAudioStreamState",
		"scope": "source.lua"
	},
	"releaseAudioStream": {
		"body": "releaseAudioStream(${1:handle})",
		"description": "GTA SA\nreleaseAudioStream(int handle)\n",
		"prefix": "releaseAudioStream",
		"scope": "source.lua"
	},
	"getAudioStreamLength": {
		"body": "getAudioStreamLength(${1:handle})",
		"description": "GTA SA\nint length = getAudioStreamLength(int handle)\n",
		"prefix": "getAudioStreamLength",
		"scope": "source.lua"
	},
	"setCleoSharedVar": {
		"body": "setCleoSharedVar(${1:var},${2:value})",
		"description": "GTA SA\nsetCleoSharedVar(int var, int value)\n",
		"prefix": "setCleoSharedVar",
		"scope": "source.lua"
	},
	"getCleoSharedVar": {
		"body": "getCleoSharedVar(${1:var})",
		"description": "GTA SA\nint value = getCleoSharedVar(int var)\n",
		"prefix": "getCleoSharedVar",
		"scope": "source.lua"
	},
	"getAudioStreamState": {
		"body": "getAudioStreamState(${1:handle})",
		"description": "GTA SA\nint state = getAudioStreamState(int handle)\n",
		"prefix": "getAudioStreamState",
		"scope": "source.lua"
	},
	"getAudioStreamVolume": {
		"body": "getAudioStreamVolume(${1:audio})",
		"description": "GTA SA\nfloat volume = getAudioStreamVolume(int audio)\n",
		"prefix": "getAudioStreamVolume",
		"scope": "source.lua"
	},
	"setAudioStreamVolume": {
		"body": "setAudioStreamVolume(${1:audio},${2:volume})",
		"description": "GTA SA\nsetAudioStreamVolume(int audio, float volume)\n",
		"prefix": "setAudioStreamVolume",
		"scope": "source.lua"
	},
	"setAudioStreamLooped": {
		"body": "setAudioStreamLooped(${1:audio},${2:loop})",
		"description": "GTA SA\nsetAudioStreamLooped(int audio, bool loop)\n",
		"prefix": "setAudioStreamLooped",
		"scope": "source.lua"
	},
	"load3dAudioStream": {
		"body": "load3dAudioStream(${1:audio})",
		"description": "GTA SA\nint handle = load3dAudioStream(zstring audio)\n",
		"prefix": "load3dAudioStream",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCoordinates": {
		"body": "setPlay3dAudioStreamAtCoordinates(${1:handle},${2:posX},${3:posY},${4:posZ})",
		"description": "GTA SA\nsetPlay3dAudioStreamAtCoordinates(int handle, float posX, float posY, float posZ)\n",
		"prefix": "setPlay3dAudioStreamAtCoordinates",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtObject": {
		"body": "setPlay3dAudioStreamAtObject(${1:audio},${2:object})",
		"description": "GTA SA\nsetPlay3dAudioStreamAtObject(int audio, Object object)\n",
		"prefix": "setPlay3dAudioStreamAtObject",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtChar": {
		"body": "setPlay3dAudioStreamAtChar(${1:audio},${2:ped})",
		"description": "GTA SA\nsetPlay3dAudioStreamAtChar(int audio, Ped ped)\n",
		"prefix": "setPlay3dAudioStreamAtChar",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCar": {
		"body": "setPlay3dAudioStreamAtCar(${1:audio},${2:car})",
		"description": "GTA SA\nsetPlay3dAudioStreamAtCar(int audio, Vehicle car)\n",
		"prefix": "setPlay3dAudioStreamAtCar",
		"scope": "source.lua"
	},
	"sampSpawnPlayer": {
		"body": "sampSpawnPlayer()",
		"description": "GTA SA\nsampSpawnPlayer()\n",
		"prefix": "sampSpawnPlayer",
		"scope": "source.lua"
	},
	"sampGetBase": {
		"body": "sampGetBase()",
		"description": "GTA SA\nint handle = sampGetBase()\n",
		"prefix": "sampGetBase",
		"scope": "source.lua"
	},
	"sampAddChatMessage": {
		"body": "sampAddChatMessage(${1:text},${2:color})",
		"description": "GTA SA\nsampAddChatMessage(zstring text, int color)\n",
		"prefix": "sampAddChatMessage",
		"scope": "source.lua"
	},
	"sampSendChat": {
		"body": "sampSendChat(${1:text})",
		"description": "GTA SA\nsampSendChat(zstring text)\n",
		"prefix": "sampSendChat",
		"scope": "source.lua"
	},
	"isSampAvailable": {
		"body": "isSampAvailable()",
		"description": "GTA SA\nbool result = isSampAvailable()\n",
		"prefix": "isSampAvailable",
		"scope": "source.lua"
	},
	"sampRequestClass": {
		"body": "sampRequestClass(${1:class})",
		"description": "GTA SA\nsampRequestClass(int class)\n",
		"prefix": "sampRequestClass",
		"scope": "source.lua"
	},
	"sampSendScmEvent": {
		"body": "sampSendScmEvent(${1:event},${2:id},${3:param1},${4:param2})",
		"description": "GTA SA\nsampSendScmEvent(int event, int id, int param1, int param2)\n",
		"prefix": "sampSendScmEvent",
		"scope": "source.lua"
	},
	"sampSetSpecialAction": {
		"body": "sampSetSpecialAction(${1:action})",
		"description": "GTA SA\nsampSetSpecialAction(int action)\n",
		"prefix": "sampSetSpecialAction",
		"scope": "source.lua"
	},
	"sampSendDeathByPlayer": {
		"body": "sampSendDeathByPlayer(${1:playerId},${2:reason})",
		"description": "GTA SA\nsampSendDeathByPlayer(int playerId, int reason)\n",
		"prefix": "sampSendDeathByPlayer",
		"scope": "source.lua"
	},
	"sampGetCarHandleBySampVehicleId": {
		"body": "sampGetCarHandleBySampVehicleId(${1:id})",
		"description": "GTA SA\nbool result, Vehicle car = sampGetCarHandleBySampVehicleId(int id)\n",
		"prefix": "sampGetCarHandleBySampVehicleId",
		"scope": "source.lua"
	},
	"sampGetCharHandleBySampPlayerId": {
		"body": "sampGetCharHandleBySampPlayerId(${1:id})",
		"description": "GTA SA\nbool result, Ped ped = sampGetCharHandleBySampPlayerId(int id)\n",
		"prefix": "sampGetCharHandleBySampPlayerId",
		"scope": "source.lua"
	},
	"sampIsChatInputActive": {
		"body": "sampIsChatInputActive()",
		"description": "GTA SA\nbool result = sampIsChatInputActive()\n",
		"prefix": "sampIsChatInputActive",
		"scope": "source.lua"
	},
	"sampSetSendrate": {
		"body": "sampSetSendrate(${1:type},${2:rate})",
		"description": "GTA SA\nsampSetSendrate(int type, int rate)\n",
		"prefix": "sampSetSendrate",
		"scope": "source.lua"
	},
	"sampIsPlayerConnected": {
		"body": "sampIsPlayerConnected(${1:id})",
		"description": "GTA SA\nbool result = sampIsPlayerConnected(int id)\n",
		"prefix": "sampIsPlayerConnected",
		"scope": "source.lua"
	},
	"sampGetPlayerStructPtr": {
		"body": "sampGetPlayerStructPtr(${1:id})",
		"description": "GTA SA\nint structPtr = sampGetPlayerStructPtr(int id)\n",
		"prefix": "sampGetPlayerStructPtr",
		"scope": "source.lua"
	},
	"sampGetPlayerHealth": {
		"body": "sampGetPlayerHealth(${1:id})",
		"description": "GTA SA\nint health = sampGetPlayerHealth(int id)\n",
		"prefix": "sampGetPlayerHealth",
		"scope": "source.lua"
	},
	"sampGetPlayerArmor": {
		"body": "sampGetPlayerArmor(${1:id})",
		"description": "GTA SA\nint armor = sampGetPlayerArmor(int id)\n",
		"prefix": "sampGetPlayerArmor",
		"scope": "source.lua"
	},
	"sampSetGamestate": {
		"body": "sampSetGamestate(${1:gamestate})",
		"description": "GTA SA\nsampSetGamestate(int gamestate)\n",
		"prefix": "sampSetGamestate",
		"scope": "source.lua"
	},
	"sampDisconnectWithReason": {
		"body": "sampDisconnectWithReason(${1:timeout})",
		"description": "GTA SA\nsampDisconnectWithReason(bool timeout)\n",
		"prefix": "sampDisconnectWithReason",
		"scope": "source.lua"
	},
	"sampSetLocalPlayerName": {
		"body": "sampSetLocalPlayerName(${1:name})",
		"description": "GTA SA\nsampSetLocalPlayerName(zstring name)\n",
		"prefix": "sampSetLocalPlayerName",
		"scope": "source.lua"
	},
	"sampGetPlayerPing": {
		"body": "sampGetPlayerPing(${1:id})",
		"description": "GTA SA\nint ping = sampGetPlayerPing(int id)\n",
		"prefix": "sampGetPlayerPing",
		"scope": "source.lua"
	},
	"sampGetPlayerIdByCharHandle": {
		"body": "sampGetPlayerIdByCharHandle(${1:handle})",
		"description": "GTA SA\nbool result, int id = sampGetPlayerIdByCharHandle(Ped handle)\n",
		"prefix": "sampGetPlayerIdByCharHandle",
		"scope": "source.lua"
	},
	"sampGetVehicleIdByCarHandle": {
		"body": "sampGetVehicleIdByCarHandle(${1:car})",
		"description": "GTA SA\nbool result, int id = sampGetVehicleIdByCarHandle(Vehicle car)\n",
		"prefix": "sampGetVehicleIdByCarHandle",
		"scope": "source.lua"
	},
	"sampGetStreamedOutPlayerPos": {
		"body": "sampGetStreamedOutPlayerPos(${1:id})",
		"description": "GTA SA\nbool result, float posX, float posY, float posZ = sampGetStreamedOutPlayerPos(int id)\n",
		"prefix": "sampGetStreamedOutPlayerPos",
		"scope": "source.lua"
	},
	"sampSendEnterVehicle": {
		"body": "sampSendEnterVehicle(${1:id},${2:passenger})",
		"description": "GTA SA\nsampSendEnterVehicle(int id, bool passenger)\n",
		"prefix": "sampSendEnterVehicle",
		"scope": "source.lua"
	},
	"sampSendExitVehicle": {
		"body": "sampSendExitVehicle(${1:id})",
		"description": "GTA SA\nsampSendExitVehicle(int id)\n",
		"prefix": "sampSendExitVehicle",
		"scope": "source.lua"
	},
	"sampSendSpawn": {
		"body": "sampSendSpawn()",
		"description": "GTA SA\nsampSendSpawn()\n",
		"prefix": "sampSendSpawn",
		"scope": "source.lua"
	},
	"sampSendDamageVehicle": {
		"body": "sampSendDamageVehicle(${1:car},${2:panel},${3:doors},${4:lights},${5:tires})",
		"description": "GTA SA\nsampSendDamageVehicle(Vehicle car, int panel, int doors, int lights, int tires)\n",
		"prefix": "sampSendDamageVehicle",
		"scope": "source.lua"
	},
	"sampRegisterChatCommand": {
		"body": "sampRegisterChatCommand(${1:cmd},${2:func})",
		"description": "GTA SA\nbool result = sampRegisterChatCommand(zstring cmd, function func)\n",
		"prefix": "sampRegisterChatCommand",
		"scope": "source.lua"
	},
	"sampGetPlayerNickname": {
		"body": "sampGetPlayerNickname(${1:id})",
		"description": "GTA SA\nzstring name = sampGetPlayerNickname(int id)\n",
		"prefix": "sampGetPlayerNickname",
		"scope": "source.lua"
	},
	"sampGetPlayerColor": {
		"body": "sampGetPlayerColor(${1:id})",
		"description": "GTA SA\nint color = sampGetPlayerColor(int id)\n",
		"prefix": "sampGetPlayerColor",
		"scope": "source.lua"
	},
	"sampConnectToServer": {
		"body": "sampConnectToServer(${1:ip},${2:port})",
		"description": "GTA SA\nsampConnectToServer(zstring ip, int port)\n",
		"prefix": "sampConnectToServer",
		"scope": "source.lua"
	},
	"sampGetCurrentServerAddress": {
		"body": "sampGetCurrentServerAddress()",
		"description": "GTA SA\nzstring ip, int port = sampGetCurrentServerAddress()\n",
		"prefix": "sampGetCurrentServerAddress",
		"scope": "source.lua"
	},
	"sampGetCurrentServerName": {
		"body": "sampGetCurrentServerName()",
		"description": "GTA SA\nzstring name = sampGetCurrentServerName()\n",
		"prefix": "sampGetCurrentServerName",
		"scope": "source.lua"
	},
	"sampShowDialog": {
		"body": "sampShowDialog(${1:id},${2:caption},${3:text},${4:button1},${5:button2},${6:style})",
		"description": "GTA SA\nsampShowDialog(int id, zstring caption, zstring text, zstring button1, zstring button2, int style)\n",
		"prefix": "sampShowDialog",
		"scope": "source.lua"
	},
	"sampHasDialogRespond": {
		"body": "sampHasDialogRespond(${1:id})",
		"description": "GTA SA\nbool result, int button, int list, zstring input = sampHasDialogRespond(int id)\n",
		"prefix": "sampHasDialogRespond",
		"scope": "source.lua"
	},
	"raknetNewBitStream": {
		"body": "raknetNewBitStream()",
		"description": "GTA SA\nBitstream bs = raknetNewBitStream()\n",
		"prefix": "raknetNewBitStream",
		"scope": "source.lua"
	},
	"raknetDeleteBitStream": {
		"body": "raknetDeleteBitStream(${1:bs})",
		"description": "GTA SA\nraknetDeleteBitStream(Bitstream bs)\n",
		"prefix": "raknetDeleteBitStream",
		"scope": "source.lua"
	},
	"raknetResetBitStream": {
		"body": "raknetResetBitStream(${1:bs})",
		"description": "GTA SA\nraknetResetBitStream(Bitstream bs)\n",
		"prefix": "raknetResetBitStream",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBool": {
		"body": "raknetBitStreamWriteBool(${1:bs},${2:value})",
		"description": "GTA SA\nraknetBitStreamWriteBool(Bitstream bs, bool value)\n",
		"prefix": "raknetBitStreamWriteBool",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt8": {
		"body": "raknetBitStreamWriteInt8(${1:bs},${2:value})",
		"description": "GTA SA\nraknetBitStreamWriteInt8(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt8",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt16": {
		"body": "raknetBitStreamWriteInt16(${1:bs},${2:value})",
		"description": "GTA SA\nraknetBitStreamWriteInt16(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt16",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt32": {
		"body": "raknetBitStreamWriteInt32(${1:bs},${2:value})",
		"description": "GTA SA\nraknetBitStreamWriteInt32(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt32",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteFloat": {
		"body": "raknetBitStreamWriteFloat(${1:bs},${2:value})",
		"description": "GTA SA\nraknetBitStreamWriteFloat(Bitstream bs, float value)\n",
		"prefix": "raknetBitStreamWriteFloat",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBuffer": {
		"body": "raknetBitStreamWriteBuffer(${1:bs},${2:dest},${3:size})",
		"description": "GTA SA\nraknetBitStreamWriteBuffer(Bitstream bs, int dest, int size)\n",
		"prefix": "raknetBitStreamWriteBuffer",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBitStream": {
		"body": "raknetBitStreamWriteBitStream(${1:bs},${2:bitStream})",
		"description": "GTA SA\nraknetBitStreamWriteBitStream(Bitstream bs, Bitstream bitStream)\n",
		"prefix": "raknetBitStreamWriteBitStream",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteString": {
		"body": "raknetBitStreamWriteString(${1:bs},${2:str})",
		"description": "GTA SA\nraknetBitStreamWriteString(Bitstream bs, string str)\n",
		"prefix": "raknetBitStreamWriteString",
		"scope": "source.lua"
	},
	"raknetSendRpcEx": {
		"body": "raknetSendRpcEx(${1:rpc},${2:bs},${3:priority},${4:reliability},${5:channel},${6:timestamp})",
		"description": "GTA SA\nraknetSendRpcEx(int rpc, Bitstream bs, int priority, int reliability, int channel, bool timestamp)\n",
		"prefix": "raknetSendRpcEx",
		"scope": "source.lua"
	},
	"raknetSendBitStreamEx": {
		"body": "raknetSendBitStreamEx(${1:bs},${2:priority},${3:reliability},${4:channel})",
		"description": "GTA SA\nraknetSendBitStreamEx(Bitstream bs, int priority, int reliability, int channel)\n",
		"prefix": "raknetSendBitStreamEx",
		"scope": "source.lua"
	},
	"sampCreate3dText": {
		"body": "sampCreate3dText(${1:text},${2:color},${3:posX},${4:posY},${5:posZ},${6:distance},${7:ignoreWalls},${8:playerId},${9:vehicleId})",
		"description": "GTA SA\nint textlabel = sampCreate3dText(zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)\n",
		"prefix": "sampCreate3dText",
		"scope": "source.lua"
	},
	"sampDestroy3dText": {
		"body": "sampDestroy3dText(${1:textlabel})",
		"description": "GTA SA\nsampDestroy3dText(int textlabel)\n",
		"prefix": "sampDestroy3dText",
		"scope": "source.lua"
	},
	"sampIs3dTextDefined": {
		"body": "sampIs3dTextDefined(${1:3dText})",
		"description": "GTA SA\nbool result = sampIs3dTextDefined(int 3dText)\n",
		"prefix": "sampIs3dTextDefined",
		"scope": "source.lua"
	},
	"sampCloseCurrentDialogWithButton": {
		"body": "sampCloseCurrentDialogWithButton(${1:button})",
		"description": "GTA SA\nsampCloseCurrentDialogWithButton(int button)\n",
		"prefix": "sampCloseCurrentDialogWithButton",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogListItem": {
		"body": "sampGetCurrentDialogListItem()",
		"description": "GTA SA\nint list = sampGetCurrentDialogListItem()\n",
		"prefix": "sampGetCurrentDialogListItem",
		"scope": "source.lua"
	},
	"sampSetCurrentDialogListItem": {
		"body": "sampSetCurrentDialogListItem(${1:list})",
		"description": "GTA SA\nsampSetCurrentDialogListItem(int list)\n",
		"prefix": "sampSetCurrentDialogListItem",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogEditboxText": {
		"body": "sampGetCurrentDialogEditboxText()",
		"description": "GTA SA\nzstring text = sampGetCurrentDialogEditboxText()\n",
		"prefix": "sampGetCurrentDialogEditboxText",
		"scope": "source.lua"
	},
	"sampSetCurrentDialogEditboxText": {
		"body": "sampSetCurrentDialogEditboxText(${1:text})",
		"description": "GTA SA\nsampSetCurrentDialogEditboxText(zstring text)\n",
		"prefix": "sampSetCurrentDialogEditboxText",
		"scope": "source.lua"
	},
	"sampIsDialogActive": {
		"body": "sampIsDialogActive()",
		"description": "GTA SA\nbool result = sampIsDialogActive()\n",
		"prefix": "sampIsDialogActive",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogType": {
		"body": "sampGetCurrentDialogType()",
		"description": "GTA SA\nint type = sampGetCurrentDialogType()\n",
		"prefix": "sampGetCurrentDialogType",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogId": {
		"body": "sampGetCurrentDialogId()",
		"description": "GTA SA\nint id = sampGetCurrentDialogId()\n",
		"prefix": "sampGetCurrentDialogId",
		"scope": "source.lua"
	},
	"sampGetGamestate": {
		"body": "sampGetGamestate()",
		"description": "GTA SA\nint gamestate = sampGetGamestate()\n",
		"prefix": "sampGetGamestate",
		"scope": "source.lua"
	},
	"sampGetObjectHandleBySampId": {
		"body": "sampGetObjectHandleBySampId(${1:id})",
		"description": "GTA SA\nObject object = sampGetObjectHandleBySampId(int id)\n",
		"prefix": "sampGetObjectHandleBySampId",
		"scope": "source.lua"
	},
	"sampGetPickupHandleBySampId": {
		"body": "sampGetPickupHandleBySampId(${1:id})",
		"description": "GTA SA\nPickup pickup = sampGetPickupHandleBySampId(int id)\n",
		"prefix": "sampGetPickupHandleBySampId",
		"scope": "source.lua"
	},
	"sampGetObjectSampIdByHandle": {
		"body": "sampGetObjectSampIdByHandle(${1:object})",
		"description": "GTA SA\nint objectId = sampGetObjectSampIdByHandle(Object object)\n",
		"prefix": "sampGetObjectSampIdByHandle",
		"scope": "source.lua"
	},
	"sampGetPickupSampIdByHandle": {
		"body": "sampGetPickupSampIdByHandle(${1:pickup})",
		"description": "GTA SA\nint pickupId = sampGetPickupSampIdByHandle(Pickup pickup)\n",
		"prefix": "sampGetPickupSampIdByHandle",
		"scope": "source.lua"
	},
	"sampGetListboxItemsCount": {
		"body": "sampGetListboxItemsCount()",
		"description": "GTA SA\nint count = sampGetListboxItemsCount()\n",
		"prefix": "sampGetListboxItemsCount",
		"scope": "source.lua"
	},
	"sampGetPlayerAnimationId": {
		"body": "sampGetPlayerAnimationId(${1:playerId})",
		"description": "GTA SA\nint animid = sampGetPlayerAnimationId(int playerId)\n",
		"prefix": "sampGetPlayerAnimationId",
		"scope": "source.lua"
	},
	"sampGetAnimationNameAndFile": {
		"body": "sampGetAnimationNameAndFile(${1:animid})",
		"description": "GTA SA\nzstring name, zstring file = sampGetAnimationNameAndFile(int animid)\n",
		"prefix": "sampGetAnimationNameAndFile",
		"scope": "source.lua"
	},
	"sampFindAnimationIdByNameAndFile": {
		"body": "sampFindAnimationIdByNameAndFile(${1:name},${2:file})",
		"description": "GTA SA\nint id = sampFindAnimationIdByNameAndFile(zstring name, zstring file)\n",
		"prefix": "sampFindAnimationIdByNameAndFile",
		"scope": "source.lua"
	},
	"getScreenResolution": {
		"body": "getScreenResolution()",
		"description": "GTA SA\nint resX, int resY = getScreenResolution()\n",
		"prefix": "getScreenResolution",
		"scope": "source.lua"
	},
	"sampGetListboxItemText": {
		"body": "sampGetListboxItemText(${1:item})",
		"description": "GTA SA\nzstring text = sampGetListboxItemText(int item)\n",
		"prefix": "sampGetListboxItemText",
		"scope": "source.lua"
	},
	"sampIsPlayerPaused": {
		"body": "sampIsPlayerPaused(${1:id})",
		"description": "GTA SA\nbool result = sampIsPlayerPaused(int id)\n",
		"prefix": "sampIsPlayerPaused",
		"scope": "source.lua"
	},
	"sampToggleCursor": {
		"body": "sampToggleCursor(${1:show})",
		"description": "GTA SA\nsampToggleCursor(bool show)\n",
		"prefix": "sampToggleCursor",
		"scope": "source.lua"
	},
	"sampIsLocalPlayerSpawned": {
		"body": "sampIsLocalPlayerSpawned()",
		"description": "GTA SA\nbool result = sampIsLocalPlayerSpawned()\n",
		"prefix": "sampIsLocalPlayerSpawned",
		"scope": "source.lua"
	},
	"sampGetPlayerSpecialAction": {
		"body": "sampGetPlayerSpecialAction(${1:id})",
		"description": "GTA SA\nint action = sampGetPlayerSpecialAction(int id)\n",
		"prefix": "sampGetPlayerSpecialAction",
		"scope": "source.lua"
	},
	"sampUnregisterChatCommand": {
		"body": "sampUnregisterChatCommand(${1:cmd})",
		"description": "GTA SA\nbool result = sampUnregisterChatCommand(zstring cmd)\n",
		"prefix": "sampUnregisterChatCommand",
		"scope": "source.lua"
	},
	"sampIsPlayerNpc": {
		"body": "sampIsPlayerNpc(${1:id})",
		"description": "GTA SA\nbool result = sampIsPlayerNpc(int id)\n",
		"prefix": "sampIsPlayerNpc",
		"scope": "source.lua"
	},
	"sampGetPlayerScore": {
		"body": "sampGetPlayerScore(${1:id})",
		"description": "GTA SA\nint score = sampGetPlayerScore(int id)\n",
		"prefix": "sampGetPlayerScore",
		"scope": "source.lua"
	},
	"renderDrawLine": {
		"body": "renderDrawLine(${1:pos1X},${2:pos1Y},${3:pos2X},${4:pos2Y},${5:width},${6:color})",
		"description": "GTA SA\nrenderDrawLine(int pos1X, int pos1Y, int pos2X, int pos2Y, int width, int color)\n",
		"prefix": "renderDrawLine",
		"scope": "source.lua"
	},
	"renderDrawBox": {
		"body": "renderDrawBox(${1:posX},${2:posY},${3:sizeX},${4:sizeY},${5:color})",
		"description": "GTA SA\nrenderDrawBox(int posX, int posY, int sizeX, int sizeY, int color)\n",
		"prefix": "renderDrawBox",
		"scope": "source.lua"
	},
	"renderDrawBoxWithBorder": {
		"body": "renderDrawBoxWithBorder(${1:posX},${2:posY},${3:sizeX},${4:sizeY},${5:color},${6:bsize},${7:bcolor})",
		"description": "GTA SA\nrenderDrawBoxWithBorder(int posX, int posY, int sizeX, int sizeY, int color, int bsize, int bcolor)\n",
		"prefix": "renderDrawBoxWithBorder",
		"scope": "source.lua"
	},
	"renderGetFontDrawTextLength": {
		"body": "renderGetFontDrawTextLength(${1:font},${2:text})",
		"description": "GTA SA\nint length = renderGetFontDrawTextLength(int font, zstring text)\n",
		"prefix": "renderGetFontDrawTextLength",
		"scope": "source.lua"
	},
	"renderGetFontDrawHeight": {
		"body": "renderGetFontDrawHeight(${1:font})",
		"description": "GTA SA\nint height = renderGetFontDrawHeight(int font)\n",
		"prefix": "renderGetFontDrawHeight",
		"scope": "source.lua"
	},
	"renderCreateFont": {
		"body": "renderCreateFont(${1:font},${2:height},${3:flags})",
		"description": "GTA SA\nint font = renderCreateFont(zstring font, int height, int flags)\n",
		"prefix": "renderCreateFont",
		"scope": "source.lua"
	},
	"renderReleaseFont": {
		"body": "renderReleaseFont(${1:font})",
		"description": "GTA SA\nrenderReleaseFont(int font)\n",
		"prefix": "renderReleaseFont",
		"scope": "source.lua"
	},
	"renderFontDrawText": {
		"body": "renderFontDrawText(${1:font},${2:text},${3:posX},${4:posY},${5:color})",
		"description": "GTA SA\nrenderFontDrawText(int font, zstring text, int posX, int posY, int color)\n",
		"prefix": "renderFontDrawText",
		"scope": "source.lua"
	},
	"renderDrawPolygon": {
		"body": "renderDrawPolygon(${1:posX},${2:posY},${3:sizeX},${4:sizeY},${5:corners},${6:rotation},${7:color})",
		"description": "GTA SA\nrenderDrawPolygon(int posX, int posY, int sizeX, int sizeY, int corners, float rotation, int color)\n",
		"prefix": "renderDrawPolygon",
		"scope": "source.lua"
	},
	"renderLoadTextureFromFile": {
		"body": "renderLoadTextureFromFile(${1:file})",
		"description": "GTA SA\nint texture = renderLoadTextureFromFile(zstring file)\n",
		"prefix": "renderLoadTextureFromFile",
		"scope": "source.lua"
	},
	"renderReleaseTexture": {
		"body": "renderReleaseTexture(${1:texture})",
		"description": "GTA SA\nrenderReleaseTexture(int texture)\n",
		"prefix": "renderReleaseTexture",
		"scope": "source.lua"
	},
	"renderDrawTexture": {
		"body": "renderDrawTexture(${1:texture},${2:posX},${3:posY},${4:sizeX},${5:sizeY},${6:rotation},${7:color})",
		"description": "GTA SA\nrenderDrawTexture(int texture, int posX, int posY, int sizeX, int sizeY, float rotation, int color)\n",
		"prefix": "renderDrawTexture",
		"scope": "source.lua"
	},
	"sampSetChatString": {
		"body": "sampSetChatString(${1:id},${2:text},${3:prefix},${4:color},${5:pcolor})",
		"description": "GTA SA\nsampSetChatString(int id, zstring text, zstring prefix, int color, int pcolor)\n",
		"prefix": "sampSetChatString",
		"scope": "source.lua"
	},
	"sampGetChatString": {
		"body": "sampGetChatString(${1:id})",
		"description": "GTA SA\nzstring text, zstring prefix, int color, int pcolor = sampGetChatString(int id)\n",
		"prefix": "sampGetChatString",
		"scope": "source.lua"
	},
	"sampSetChatInputText": {
		"body": "sampSetChatInputText(${1:text})",
		"description": "GTA SA\nsampSetChatInputText(zstring text)\n",
		"prefix": "sampSetChatInputText",
		"scope": "source.lua"
	},
	"sampGetChatInputText": {
		"body": "sampGetChatInputText()",
		"description": "GTA SA\nzstring text = sampGetChatInputText()\n",
		"prefix": "sampGetChatInputText",
		"scope": "source.lua"
	},
	"sampfuncsLog": {
		"body": "sampfuncsLog(${1:msg})",
		"description": "GTA SA\nsampfuncsLog(zstring msg)\n",
		"prefix": "sampfuncsLog",
		"scope": "source.lua"
	},
	"sampSetChatInputEnabled": {
		"body": "sampSetChatInputEnabled(${1:enabled})",
		"description": "GTA SA\nsampSetChatInputEnabled(bool enabled)\n",
		"prefix": "sampSetChatInputEnabled",
		"scope": "source.lua"
	},
	"sampGetRakclientInterface": {
		"body": "sampGetRakclientInterface()",
		"description": "GTA SA\nint rakInt = sampGetRakclientInterface()\n",
		"prefix": "sampGetRakclientInterface",
		"scope": "source.lua"
	},
	"sampGetRakpeer": {
		"body": "sampGetRakpeer()",
		"description": "GTA SA\nint rakpeer = sampGetRakpeer()\n",
		"prefix": "sampGetRakpeer",
		"scope": "source.lua"
	},
	"sampGetRakclientFuncAddressByIndex": {
		"body": "sampGetRakclientFuncAddressByIndex(${1:index})",
		"description": "GTA SA\nint address = sampGetRakclientFuncAddressByIndex(int index)\n",
		"prefix": "sampGetRakclientFuncAddressByIndex",
		"scope": "source.lua"
	},
	"sampGetRpcCallbackByRpcId": {
		"body": "sampGetRpcCallbackByRpcId(${1:index})",
		"description": "GTA SA\nint callback = sampGetRpcCallbackByRpcId(int index)\n",
		"prefix": "sampGetRpcCallbackByRpcId",
		"scope": "source.lua"
	},
	"sampGetRpcNodeByRpcId": {
		"body": "sampGetRpcNodeByRpcId(${1:index})",
		"description": "GTA SA\nint node = sampGetRpcNodeByRpcId(int index)\n",
		"prefix": "sampGetRpcNodeByRpcId",
		"scope": "source.lua"
	},
	"sampGetSampInfoPtr": {
		"body": "sampGetSampInfoPtr()",
		"description": "GTA SA\nint sampPtr = sampGetSampInfoPtr()\n",
		"prefix": "sampGetSampInfoPtr",
		"scope": "source.lua"
	},
	"dxutCreateDialog": {
		"body": "dxutCreateDialog(${1:name})",
		"description": "GTA SA\nDxutDialog dialog = dxutCreateDialog(zstring name)\n",
		"prefix": "dxutCreateDialog",
		"scope": "source.lua"
	},
	"dxutPopEvent": {
		"body": "dxutPopEvent(${1:dialog})",
		"description": "GTA SA\nbool result, int event, int id = dxutPopEvent(DxutDialog dialog)\n",
		"prefix": "dxutPopEvent",
		"scope": "source.lua"
	},
	"dxutAddButton": {
		"body": "dxutAddButton(${1:dialog},${2:id},${3:text},${4:posX},${5:posY},${6:sizeX},${7:sizeY})",
		"description": "GTA SA\ndxutAddButton(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddButton",
		"scope": "source.lua"
	},
	"dxutAddCheckbox": {
		"body": "dxutAddCheckbox(${1:dialog},${2:id},${3:text},${4:posX},${5:posY},${6:sizeX},${7:sizeY})",
		"description": "GTA SA\ndxutAddCheckbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddCheckbox",
		"scope": "source.lua"
	},
	"dxutSetDialogPos": {
		"body": "dxutSetDialogPos(${1:dialog},${2:posX},${3:posY},${4:sizeX},${5:sizeY})",
		"description": "GTA SA\ndxutSetDialogPos(DxutDialog dialog, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutSetDialogPos",
		"scope": "source.lua"
	},
	"dxutGetDialogPosAndSize": {
		"body": "dxutGetDialogPosAndSize(${1:dialog})",
		"description": "GTA SA\nint posX, int posY, int sizeX, int sizeY = dxutGetDialogPosAndSize(DxutDialog dialog)\n",
		"prefix": "dxutGetDialogPosAndSize",
		"scope": "source.lua"
	},
	"dxutSetDialogVisible": {
		"body": "dxutSetDialogVisible(${1:dialog},${2:visible})",
		"description": "GTA SA\ndxutSetDialogVisible(DxutDialog dialog, bool visible)\n",
		"prefix": "dxutSetDialogVisible",
		"scope": "source.lua"
	},
	"dxutIsDialogVisible": {
		"body": "dxutIsDialogVisible(${1:dialog})",
		"description": "GTA SA\nbool result = dxutIsDialogVisible(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogVisible",
		"scope": "source.lua"
	},
	"dxutAddEditbox": {
		"body": "dxutAddEditbox(${1:dialog},${2:id},${3:text},${4:posX},${5:posY},${6:sizeX},${7:sizeY})",
		"description": "GTA SA\ndxutAddEditbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddEditbox",
		"scope": "source.lua"
	},
	"dxutGetControlText": {
		"body": "dxutGetControlText(${1:dialog},${2:id})",
		"description": "GTA SA\nzstring text = dxutGetControlText(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlText",
		"scope": "source.lua"
	},
	"raknetSendRpc": {
		"body": "raknetSendRpc(${1:rpc},${2:bs})",
		"description": "GTA SA\nraknetSendRpc(int rpc, Bitstream bs)\n",
		"prefix": "raknetSendRpc",
		"scope": "source.lua"
	},
	"raknetSendBitStream": {
		"body": "raknetSendBitStream(${1:bs})",
		"description": "GTA SA\nraknetSendBitStream(Bitstream bs)\n",
		"prefix": "raknetSendBitStream",
		"scope": "source.lua"
	},
	"sampIsCursorActive": {
		"body": "sampIsCursorActive()",
		"description": "GTA SA\nbool result = sampIsCursorActive()\n",
		"prefix": "sampIsCursorActive",
		"scope": "source.lua"
	},
	"sampSetCursorMode": {
		"body": "sampSetCursorMode(${1:mode})",
		"description": "GTA SA\nsampSetCursorMode(int mode)\n",
		"prefix": "sampSetCursorMode",
		"scope": "source.lua"
	},
	"sampGetCursorMode": {
		"body": "sampGetCursorMode()",
		"description": "GTA SA\nint mode = sampGetCursorMode()\n",
		"prefix": "sampGetCursorMode",
		"scope": "source.lua"
	},
	"dxutSetControlVisible": {
		"body": "dxutSetControlVisible(${1:dialog},${2:id},${3:visible})",
		"description": "GTA SA\ndxutSetControlVisible(DxutDialog dialog, int id, bool visible)\n",
		"prefix": "dxutSetControlVisible",
		"scope": "source.lua"
	},
	"dxutAddStatic": {
		"body": "dxutAddStatic(${1:dialog},${2:id},${3:text},${4:posX},${5:posY},${6:sizeX},${7:sizeY})",
		"description": "GTA SA\ndxutAddStatic(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddStatic",
		"scope": "source.lua"
	},
	"dxutIsCheckboxChecked": {
		"body": "dxutIsCheckboxChecked(${1:dialog},${2:id})",
		"description": "GTA SA\nbool result = dxutIsCheckboxChecked(DxutDialog dialog, int id)\n",
		"prefix": "dxutIsCheckboxChecked",
		"scope": "source.lua"
	},
	"dxutSetDialogBackgroundColor": {
		"body": "dxutSetDialogBackgroundColor(${1:dialog},${2:color})",
		"description": "GTA SA\ndxutSetDialogBackgroundColor(DxutDialog dialog, int color)\n",
		"prefix": "dxutSetDialogBackgroundColor",
		"scope": "source.lua"
	},
	"dxutSetControlText": {
		"body": "dxutSetControlText(${1:dialog},${2:id},${3:text})",
		"description": "GTA SA\ndxutSetControlText(DxutDialog dialog, int id, zstring text)\n",
		"prefix": "dxutSetControlText",
		"scope": "source.lua"
	},
	"dxutControlIsVisible": {
		"body": "dxutControlIsVisible(${1:dialog},${2:id})",
		"description": "GTA SA\nbool result = dxutControlIsVisible(DxutDialog dialog, int id)\n",
		"prefix": "dxutControlIsVisible",
		"scope": "source.lua"
	},
	"dxutAddSlider": {
		"body": "dxutAddSlider(${1:dialog},${2:id},${3:posX},${4:posY},${5:sizeX},${6:sizeY},${7:max})",
		"description": "GTA SA\ndxutAddSlider(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY, int max)\n",
		"prefix": "dxutAddSlider",
		"scope": "source.lua"
	},
	"dxutGetSliderValue": {
		"body": "dxutGetSliderValue(${1:dialog},${2:id})",
		"description": "GTA SA\nint value = dxutGetSliderValue(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetSliderValue",
		"scope": "source.lua"
	},
	"dxutSetSliderValue": {
		"body": "dxutSetSliderValue(${1:dialog},${2:id},${3:value})",
		"description": "GTA SA\ndxutSetSliderValue(DxutDialog dialog, int id, int value)\n",
		"prefix": "dxutSetSliderValue",
		"scope": "source.lua"
	},
	"dxutAddListbox": {
		"body": "dxutAddListbox(${1:dialog},${2:id},${3:posX},${4:posY},${5:sizeX},${6:sizeY})",
		"description": "GTA SA\ndxutAddListbox(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddListbox",
		"scope": "source.lua"
	},
	"dxutListboxInsertItem": {
		"body": "dxutListboxInsertItem(${1:dialog},${2:id},${3:element},${4:data},${5:after})",
		"description": "GTA SA\ndxutListboxInsertItem(DxutDialog dialog, int id, zstring element, int data, int after)\n",
		"prefix": "dxutListboxInsertItem",
		"scope": "source.lua"
	},
	"dxutGetListboxSelectedItemAndCount": {
		"body": "dxutGetListboxSelectedItemAndCount(${1:dialog},${2:id})",
		"description": "GTA SA\nint element, int count = dxutGetListboxSelectedItemAndCount(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetListboxSelectedItemAndCount",
		"scope": "source.lua"
	},
	"dxutListboxDeleteItem": {
		"body": "dxutListboxDeleteItem(${1:dialog},${2:id},${3:element})",
		"description": "GTA SA\ndxutListboxDeleteItem(DxutDialog dialog, int id, int element)\n",
		"prefix": "dxutListboxDeleteItem",
		"scope": "source.lua"
	},
	"dxutGetListboxItemTextAndData": {
		"body": "dxutGetListboxItemTextAndData(${1:dialog},${2:id},${3:element})",
		"description": "GTA SA\nzstring text, int data = dxutGetListboxItemTextAndData(DxutDialog dialog, int id, int element)\n",
		"prefix": "dxutGetListboxItemTextAndData",
		"scope": "source.lua"
	},
	"dxutCheckboxSetChecked": {
		"body": "dxutCheckboxSetChecked(${1:dialog},${2:id},${3:checked})",
		"description": "GTA SA\ndxutCheckboxSetChecked(DxutDialog dialog, int id, bool checked)\n",
		"prefix": "dxutCheckboxSetChecked",
		"scope": "source.lua"
	},
	"dxutEnableDialogCaption": {
		"body": "dxutEnableDialogCaption(${1:dialog},${2:enable})",
		"description": "GTA SA\ndxutEnableDialogCaption(DxutDialog dialog, int enable)\n",
		"prefix": "dxutEnableDialogCaption",
		"scope": "source.lua"
	},
	"dxutIsDialogCaptionEnabled": {
		"body": "dxutIsDialogCaptionEnabled(${1:dialog})",
		"description": "GTA SA\nbool result = dxutIsDialogCaptionEnabled(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogCaptionEnabled",
		"scope": "source.lua"
	},
	"dxutSetDialogMinimized": {
		"body": "dxutSetDialogMinimized(${1:dialog},${2:minimized})",
		"description": "GTA SA\ndxutSetDialogMinimized(DxutDialog dialog, bool minimized)\n",
		"prefix": "dxutSetDialogMinimized",
		"scope": "source.lua"
	},
	"dxutIsDialogMinimized": {
		"body": "dxutIsDialogMinimized(${1:dialog})",
		"description": "GTA SA\nbool result = dxutIsDialogMinimized(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogMinimized",
		"scope": "source.lua"
	},
	"dxutDeleteControl": {
		"body": "dxutDeleteControl(${1:dialog},${2:id})",
		"description": "GTA SA\ndxutDeleteControl(DxutDialog dialog, int id)\n",
		"prefix": "dxutDeleteControl",
		"scope": "source.lua"
	},
	"dxutDeleteDialog": {
		"body": "dxutDeleteDialog(${1:dialog})",
		"description": "GTA SA\ndxutDeleteDialog(DxutDialog dialog)\n",
		"prefix": "dxutDeleteDialog",
		"scope": "source.lua"
	},
	"dxutSetFocusOnControl": {
		"body": "dxutSetFocusOnControl(${1:dialog},${2:id})",
		"description": "GTA SA\ndxutSetFocusOnControl(DxutDialog dialog, int id)\n",
		"prefix": "dxutSetFocusOnControl",
		"scope": "source.lua"
	},
	"dxutSetControlSize": {
		"body": "dxutSetControlSize(${1:dialog},${2:id},${3:sizeX},${4:sizeY})",
		"description": "GTA SA\ndxutSetControlSize(DxutDialog dialog, int id, int sizeX, int sizeY)\n",
		"prefix": "dxutSetControlSize",
		"scope": "source.lua"
	},
	"dxutGetControlSize": {
		"body": "dxutGetControlSize(${1:dialog},${2:id})",
		"description": "GTA SA\nint sizeX, int sizeY = dxutGetControlSize(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlSize",
		"scope": "source.lua"
	},
	"dxutSetControlPos": {
		"body": "dxutSetControlPos(${1:dialog},${2:id},${3:posX},${4:posY})",
		"description": "GTA SA\ndxutSetControlPos(DxutDialog dialog, int id, int posX, int posY)\n",
		"prefix": "dxutSetControlPos",
		"scope": "source.lua"
	},
	"dxutGetControlPos": {
		"body": "dxutGetControlPos(${1:dialog},${2:id})",
		"description": "GTA SA\nint posX, int posY = dxutGetControlPos(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlPos",
		"scope": "source.lua"
	},
	"dxutSetCheckboxColor": {
		"body": "dxutSetCheckboxColor(${1:dialog},${2:id},${3:color})",
		"description": "GTA SA\ndxutSetCheckboxColor(DxutDialog dialog, int id, int color)\n",
		"prefix": "dxutSetCheckboxColor",
		"scope": "source.lua"
	},
	"dxutIsDialogExists": {
		"body": "dxutIsDialogExists(${1:dialog})",
		"description": "GTA SA\nbool result = dxutIsDialogExists(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogExists",
		"scope": "source.lua"
	},
	"sampGetServerSettingsPtr": {
		"body": "sampGetServerSettingsPtr()",
		"description": "GTA SA\nint settings = sampGetServerSettingsPtr()\n",
		"prefix": "sampGetServerSettingsPtr",
		"scope": "source.lua"
	},
	"sampGetSampPoolsPtr": {
		"body": "sampGetSampPoolsPtr()",
		"description": "GTA SA\nint pools = sampGetSampPoolsPtr()\n",
		"prefix": "sampGetSampPoolsPtr",
		"scope": "source.lua"
	},
	"sampGetChatInfoPtr": {
		"body": "sampGetChatInfoPtr()",
		"description": "GTA SA\nint chat = sampGetChatInfoPtr()\n",
		"prefix": "sampGetChatInfoPtr",
		"scope": "source.lua"
	},
	"sampGetInputInfoPtr": {
		"body": "sampGetInputInfoPtr()",
		"description": "GTA SA\nint input = sampGetInputInfoPtr()\n",
		"prefix": "sampGetInputInfoPtr",
		"scope": "source.lua"
	},
	"sampGetDialogInfoPtr": {
		"body": "sampGetDialogInfoPtr()",
		"description": "GTA SA\nint dialogInfo = sampGetDialogInfoPtr()\n",
		"prefix": "sampGetDialogInfoPtr",
		"scope": "source.lua"
	},
	"sampGetKillInfoPtr": {
		"body": "sampGetKillInfoPtr()",
		"description": "GTA SA\nint kill = sampGetKillInfoPtr()\n",
		"prefix": "sampGetKillInfoPtr",
		"scope": "source.lua"
	},
	"sampGetMiscInfoPtr": {
		"body": "sampGetMiscInfoPtr()",
		"description": "GTA SA\nint misc = sampGetMiscInfoPtr()\n",
		"prefix": "sampGetMiscInfoPtr",
		"scope": "source.lua"
	},
	"sampGetTextdrawPoolPtr": {
		"body": "sampGetTextdrawPoolPtr()",
		"description": "GTA SA\nint tdpool = sampGetTextdrawPoolPtr()\n",
		"prefix": "sampGetTextdrawPoolPtr",
		"scope": "source.lua"
	},
	"sampGetObjectPoolPtr": {
		"body": "sampGetObjectPoolPtr()",
		"description": "GTA SA\nint objpool = sampGetObjectPoolPtr()\n",
		"prefix": "sampGetObjectPoolPtr",
		"scope": "source.lua"
	},
	"sampGetGangzonePoolPtr": {
		"body": "sampGetGangzonePoolPtr()",
		"description": "GTA SA\nint gzpool = sampGetGangzonePoolPtr()\n",
		"prefix": "sampGetGangzonePoolPtr",
		"scope": "source.lua"
	},
	"sampGetTextlabelPoolPtr": {
		"body": "sampGetTextlabelPoolPtr()",
		"description": "GTA SA\nint tlabelpool = sampGetTextlabelPoolPtr()\n",
		"prefix": "sampGetTextlabelPoolPtr",
		"scope": "source.lua"
	},
	"sampGetPlayerPoolPtr": {
		"body": "sampGetPlayerPoolPtr()",
		"description": "GTA SA\nint plpool = sampGetPlayerPoolPtr()\n",
		"prefix": "sampGetPlayerPoolPtr",
		"scope": "source.lua"
	},
	"sampGetVehiclePoolPtr": {
		"body": "sampGetVehiclePoolPtr()",
		"description": "GTA SA\nint vehpool = sampGetVehiclePoolPtr()\n",
		"prefix": "sampGetVehiclePoolPtr",
		"scope": "source.lua"
	},
	"sampGetPickupPoolPtr": {
		"body": "sampGetPickupPoolPtr()",
		"description": "GTA SA\nint pupool = sampGetPickupPoolPtr()\n",
		"prefix": "sampGetPickupPoolPtr",
		"scope": "source.lua"
	},
	"sampStorePlayerOnfootData": {
		"body": "sampStorePlayerOnfootData(${1:id},${2:data})",
		"description": "GTA SA\nsampStorePlayerOnfootData(int id, int data)\n",
		"prefix": "sampStorePlayerOnfootData",
		"scope": "source.lua"
	},
	"sampStorePlayerIncarData": {
		"body": "sampStorePlayerIncarData(${1:id},${2:data})",
		"description": "GTA SA\nsampStorePlayerIncarData(int id, int data)\n",
		"prefix": "sampStorePlayerIncarData",
		"scope": "source.lua"
	},
	"sampStorePlayerPassengerData": {
		"body": "sampStorePlayerPassengerData(${1:id},${2:data})",
		"description": "GTA SA\nsampStorePlayerPassengerData(int id, int data)\n",
		"prefix": "sampStorePlayerPassengerData",
		"scope": "source.lua"
	},
	"sampStorePlayerTrailerData": {
		"body": "sampStorePlayerTrailerData(${1:id},${2:data})",
		"description": "GTA SA\nsampStorePlayerTrailerData(int id, int data)\n",
		"prefix": "sampStorePlayerTrailerData",
		"scope": "source.lua"
	},
	"sampStorePlayerAimData": {
		"body": "sampStorePlayerAimData(${1:id},${2:data})",
		"description": "GTA SA\nsampStorePlayerAimData(int id, int data)\n",
		"prefix": "sampStorePlayerAimData",
		"scope": "source.lua"
	},
	"sampSendRconCommand": {
		"body": "sampSendRconCommand(${1:cmd})",
		"description": "GTA SA\nsampSendRconCommand(zstring cmd)\n",
		"prefix": "sampSendRconCommand",
		"scope": "source.lua"
	},
	"sampSendOnfootData": {
		"body": "sampSendOnfootData(${1:data})",
		"description": "GTA SA\nsampSendOnfootData(int data)\n",
		"prefix": "sampSendOnfootData",
		"scope": "source.lua"
	},
	"sampSendIncarData": {
		"body": "sampSendIncarData(${1:data})",
		"description": "GTA SA\nsampSendIncarData(int data)\n",
		"prefix": "sampSendIncarData",
		"scope": "source.lua"
	},
	"sampSendPassengerData": {
		"body": "sampSendPassengerData(${1:data})",
		"description": "GTA SA\nsampSendPassengerData(int data)\n",
		"prefix": "sampSendPassengerData",
		"scope": "source.lua"
	},
	"sampSendAimData": {
		"body": "sampSendAimData(${1:data})",
		"description": "GTA SA\nsampSendAimData(int data)\n",
		"prefix": "sampSendAimData",
		"scope": "source.lua"
	},
	"sampSendBulletData": {
		"body": "sampSendBulletData(${1:data})",
		"description": "GTA SA\nsampSendBulletData(int data)\n",
		"prefix": "sampSendBulletData",
		"scope": "source.lua"
	},
	"sampSendTrailerData": {
		"body": "sampSendTrailerData(${1:data})",
		"description": "GTA SA\nsampSendTrailerData(int data)\n",
		"prefix": "sampSendTrailerData",
		"scope": "source.lua"
	},
	"sampSendUnoccupiedData": {
		"body": "sampSendUnoccupiedData(${1:data})",
		"description": "GTA SA\nsampSendUnoccupiedData(int data)\n",
		"prefix": "sampSendUnoccupiedData",
		"scope": "source.lua"
	},
	"sampSendSpectatorData": {
		"body": "sampSendSpectatorData(${1:data})",
		"description": "GTA SA\nsampSendSpectatorData(int data)\n",
		"prefix": "sampSendSpectatorData",
		"scope": "source.lua"
	},
	"sampSendClickPlayer": {
		"body": "sampSendClickPlayer(${1:id},${2:source})",
		"description": "GTA SA\nsampSendClickPlayer(int id, int source)\n",
		"prefix": "sampSendClickPlayer",
		"scope": "source.lua"
	},
	"sampSendDialogResponse": {
		"body": "sampSendDialogResponse(${1:id},${2:button},${3:listitem},${4:input})",
		"description": "GTA SA\nsampSendDialogResponse(int id, int button, int listitem, zstring input)\n",
		"prefix": "sampSendDialogResponse",
		"scope": "source.lua"
	},
	"sampSendClickTextdraw": {
		"body": "sampSendClickTextdraw(${1:id})",
		"description": "GTA SA\nsampSendClickTextdraw(int id)\n",
		"prefix": "sampSendClickTextdraw",
		"scope": "source.lua"
	},
	"sampSendGiveDamage": {
		"body": "sampSendGiveDamage(${1:id},${2:damage},${3:weapon},${4:bodypart})",
		"description": "GTA SA\nsampSendGiveDamage(int id, float damage, int weapon, int bodypart)\n",
		"prefix": "sampSendGiveDamage",
		"scope": "source.lua"
	},
	"sampSendTakeDamage": {
		"body": "sampSendTakeDamage(${1:id},${2:damage},${3:weapon},${4:bodypart})",
		"description": "GTA SA\nsampSendTakeDamage(int id, float damage, int weapon, int bodypart)\n",
		"prefix": "sampSendTakeDamage",
		"scope": "source.lua"
	},
	"sampSendEditObject": {
		"body": "sampSendEditObject(${1:id},${2:object},${3:response},${4:posX},${5:posY},${6:posZ},${7:rotX},${8:rotY},${9:rotZ})",
		"description": "GTA SA\nsampSendEditObject(int id, Object object, int response, float posX, float posY, float posZ, float rotX, float rotY, float rotZ)\n",
		"prefix": "sampSendEditObject",
		"scope": "source.lua"
	},
	"sampSendEditAttachedObject": {
		"body": "sampSendEditAttachedObject(${1:response},${2:index},${3:model},${4:bone},${5:offsetX},${6:offsetY},${7:offsetZ},${8:rotX},${9:rotY},${10:rotZ},${11:scaleX},${12:scaleY},${13:scaleZ})",
		"description": "GTA SA\nsampSendEditAttachedObject(int response, int index, int model, int bone, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)\n",
		"prefix": "sampSendEditAttachedObject",
		"scope": "source.lua"
	},
	"sampSendInteriorChange": {
		"body": "sampSendInteriorChange(${1:id})",
		"description": "GTA SA\nsampSendInteriorChange(int id)\n",
		"prefix": "sampSendInteriorChange",
		"scope": "source.lua"
	},
	"sampSendRequestSpawn": {
		"body": "sampSendRequestSpawn()",
		"description": "GTA SA\nsampSendRequestSpawn()\n",
		"prefix": "sampSendRequestSpawn",
		"scope": "source.lua"
	},
	"sampSendPickedUpPickup": {
		"body": "sampSendPickedUpPickup(${1:id})",
		"description": "GTA SA\nsampSendPickedUpPickup(int id)\n",
		"prefix": "sampSendPickedUpPickup",
		"scope": "source.lua"
	},
	"sampSendMenuSelectRow": {
		"body": "sampSendMenuSelectRow(${1:id})",
		"description": "GTA SA\nsampSendMenuSelectRow(int id)\n",
		"prefix": "sampSendMenuSelectRow",
		"scope": "source.lua"
	},
	"sampSendMenuQuit": {
		"body": "sampSendMenuQuit()",
		"description": "GTA SA\nsampSendMenuQuit()\n",
		"prefix": "sampSendMenuQuit",
		"scope": "source.lua"
	},
	"sampSendVehicleDestroyed": {
		"body": "sampSendVehicleDestroyed(${1:id})",
		"description": "GTA SA\nsampSendVehicleDestroyed(int id)\n",
		"prefix": "sampSendVehicleDestroyed",
		"scope": "source.lua"
	},
	"sampIsScoreboardOpen": {
		"body": "sampIsScoreboardOpen()",
		"description": "GTA SA\nbool result = sampIsScoreboardOpen()\n",
		"prefix": "sampIsScoreboardOpen",
		"scope": "source.lua"
	},
	"sampToggleScoreboard": {
		"body": "sampToggleScoreboard(${1:show})",
		"description": "GTA SA\nsampToggleScoreboard(bool show)\n",
		"prefix": "sampToggleScoreboard",
		"scope": "source.lua"
	},
	"sampGetDialogText": {
		"body": "sampGetDialogText()",
		"description": "GTA SA\nzstring text = sampGetDialogText()\n",
		"prefix": "sampGetDialogText",
		"scope": "source.lua"
	},
	"sampGetDialogCaption": {
		"body": "sampGetDialogCaption()",
		"description": "GTA SA\nzstring caption = sampGetDialogCaption()\n",
		"prefix": "sampGetDialogCaption",
		"scope": "source.lua"
	},
	"sampSetDialogClientside": {
		"body": "sampSetDialogClientside(${1:clientside})",
		"description": "GTA SA\nsampSetDialogClientside(bool clientside)\n",
		"prefix": "sampSetDialogClientside",
		"scope": "source.lua"
	},
	"sampIsDialogClientside": {
		"body": "sampIsDialogClientside()",
		"description": "GTA SA\nbool result = sampIsDialogClientside()\n",
		"prefix": "sampIsDialogClientside",
		"scope": "source.lua"
	},
	"sampIsChatVisible": {
		"body": "sampIsChatVisible()",
		"description": "GTA SA\nbool result = sampIsChatVisible()\n",
		"prefix": "sampIsChatVisible",
		"scope": "source.lua"
	},
	"sampGetChatDisplayMode": {
		"body": "sampGetChatDisplayMode()",
		"description": "GTA SA\nint mode = sampGetChatDisplayMode()\n",
		"prefix": "sampGetChatDisplayMode",
		"scope": "source.lua"
	},
	"sampSetChatDisplayMode": {
		"body": "sampSetChatDisplayMode(${1:mode})",
		"description": "GTA SA\nsampSetChatDisplayMode(int mode)\n",
		"prefix": "sampSetChatDisplayMode",
		"scope": "source.lua"
	},
	"pauseScmThread": {
		"body": "pauseScmThread(${1:thread})",
		"description": "GTA SA\npauseScmThread(int thread)\n",
		"prefix": "pauseScmThread",
		"scope": "source.lua"
	},
	"resumeScmThread": {
		"body": "resumeScmThread(${1:thread})",
		"description": "GTA SA\nresumeScmThread(int thread)\n",
		"prefix": "resumeScmThread",
		"scope": "source.lua"
	},
	"raknetBitStreamReadBool": {
		"body": "raknetBitStreamReadBool(${1:bs})",
		"description": "GTA SA\nbool value = raknetBitStreamReadBool(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadBool",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt8": {
		"body": "raknetBitStreamReadInt8(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamReadInt8(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt8",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt16": {
		"body": "raknetBitStreamReadInt16(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamReadInt16(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt16",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt32": {
		"body": "raknetBitStreamReadInt32(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamReadInt32(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt32",
		"scope": "source.lua"
	},
	"raknetBitStreamReadFloat": {
		"body": "raknetBitStreamReadFloat(${1:bs})",
		"description": "GTA SA\nfloat value = raknetBitStreamReadFloat(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadFloat",
		"scope": "source.lua"
	},
	"raknetBitStreamReadBuffer": {
		"body": "raknetBitStreamReadBuffer(${1:bs},${2:dest},${3:size})",
		"description": "GTA SA\nraknetBitStreamReadBuffer(Bitstream bs, int dest, int size)\n",
		"prefix": "raknetBitStreamReadBuffer",
		"scope": "source.lua"
	},
	"raknetBitStreamReadString": {
		"body": "raknetBitStreamReadString(${1:bs},${2:size})",
		"description": "GTA SA\nstring value = raknetBitStreamReadString(Bitstream bs, int size)\n",
		"prefix": "raknetBitStreamReadString",
		"scope": "source.lua"
	},
	"raknetBitStreamResetReadPointer": {
		"body": "raknetBitStreamResetReadPointer(${1:bs})",
		"description": "GTA SA\nraknetBitStreamResetReadPointer(Bitstream bs)\n",
		"prefix": "raknetBitStreamResetReadPointer",
		"scope": "source.lua"
	},
	"raknetBitStreamResetWritePointer": {
		"body": "raknetBitStreamResetWritePointer(${1:bs})",
		"description": "GTA SA\nraknetBitStreamResetWritePointer(Bitstream bs)\n",
		"prefix": "raknetBitStreamResetWritePointer",
		"scope": "source.lua"
	},
	"raknetBitStreamIgnoreBits": {
		"body": "raknetBitStreamIgnoreBits(${1:bs},${2:amount})",
		"description": "GTA SA\nraknetBitStreamIgnoreBits(Bitstream bs, int amount)\n",
		"prefix": "raknetBitStreamIgnoreBits",
		"scope": "source.lua"
	},
	"raknetBitStreamSetWriteOffset": {
		"body": "raknetBitStreamSetWriteOffset(${1:bs},${2:offset})",
		"description": "GTA SA\nraknetBitStreamSetWriteOffset(Bitstream bs, int offset)\n",
		"prefix": "raknetBitStreamSetWriteOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamSetReadOffset": {
		"body": "raknetBitStreamSetReadOffset(${1:bs},${2:offset})",
		"description": "GTA SA\nraknetBitStreamSetReadOffset(Bitstream bs, int offset)\n",
		"prefix": "raknetBitStreamSetReadOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBitsUsed": {
		"body": "raknetBitStreamGetNumberOfBitsUsed(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetNumberOfBitsUsed(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfBitsUsed",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBytesUsed": {
		"body": "raknetBitStreamGetNumberOfBytesUsed(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetNumberOfBytesUsed(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfBytesUsed",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfUnreadBits": {
		"body": "raknetBitStreamGetNumberOfUnreadBits(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetNumberOfUnreadBits(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfUnreadBits",
		"scope": "source.lua"
	},
	"raknetBitStreamGetWriteOffset": {
		"body": "raknetBitStreamGetWriteOffset(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetWriteOffset(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetWriteOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetReadOffset": {
		"body": "raknetBitStreamGetReadOffset(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetReadOffset(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetReadOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetDataPtr": {
		"body": "raknetBitStreamGetDataPtr(${1:bs})",
		"description": "GTA SA\nint value = raknetBitStreamGetDataPtr(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetDataPtr",
		"scope": "source.lua"
	},
	"raknetBitStreamDecodeString": {
		"body": "raknetBitStreamDecodeString(${1:bs},${2:size})",
		"description": "GTA SA\nzstring string = raknetBitStreamDecodeString(Bitstream bs, int size)\n",
		"prefix": "raknetBitStreamDecodeString",
		"scope": "source.lua"
	},
	"raknetBitStreamEncodeString": {
		"body": "raknetBitStreamEncodeString(${1:bs},${2:string})",
		"description": "GTA SA\nraknetBitStreamEncodeString(Bitstream bs, zstring string)\n",
		"prefix": "raknetBitStreamEncodeString",
		"scope": "source.lua"
	},
	"raknetEmulRpcReceiveBitStream": {
		"body": "raknetEmulRpcReceiveBitStream(${1:rpc},${2:bs})",
		"description": "GTA SA\nraknetEmulRpcReceiveBitStream(int rpc, Bitstream bs)\n",
		"prefix": "raknetEmulRpcReceiveBitStream",
		"scope": "source.lua"
	},
	"raknetEmulPacketReceiveBitStream": {
		"body": "raknetEmulPacketReceiveBitStream(${1:packet},${2:bs})",
		"description": "GTA SA\nraknetEmulPacketReceiveBitStream(int packet, Bitstream bs)\n",
		"prefix": "raknetEmulPacketReceiveBitStream",
		"scope": "source.lua"
	},
	"raknetGetRpcName": {
		"body": "raknetGetRpcName(${1:rpc})",
		"description": "GTA SA\nzstring name = raknetGetRpcName(int rpc)\n",
		"prefix": "raknetGetRpcName",
		"scope": "source.lua"
	},
	"raknetGetPacketName": {
		"body": "raknetGetPacketName(${1:packet})",
		"description": "GTA SA\nzstring name = raknetGetPacketName(int packet)\n",
		"prefix": "raknetGetPacketName",
		"scope": "source.lua"
	},
	"setSampfuncsGlobalVar": {
		"body": "setSampfuncsGlobalVar(${1:var},${2:value})",
		"description": "GTA SA\nbool result = setSampfuncsGlobalVar(zstring var, int value)\n",
		"prefix": "setSampfuncsGlobalVar",
		"scope": "source.lua"
	},
	"getSampfuncsGlobalVar": {
		"body": "getSampfuncsGlobalVar(${1:var})",
		"description": "GTA SA\nbool result, int value = getSampfuncsGlobalVar(zstring var)\n",
		"prefix": "getSampfuncsGlobalVar",
		"scope": "source.lua"
	},
	"renderBegin": {
		"body": "renderBegin(${1:type})",
		"description": "GTA SA\nrenderBegin(int type)\n",
		"prefix": "renderBegin",
		"scope": "source.lua"
	},
	"renderEnd": {
		"body": "renderEnd()",
		"description": "GTA SA\nrenderEnd()\n",
		"prefix": "renderEnd",
		"scope": "source.lua"
	},
	"renderColor": {
		"body": "renderColor(${1:color})",
		"description": "GTA SA\nrenderColor(int color)\n",
		"prefix": "renderColor",
		"scope": "source.lua"
	},
	"renderVertex": {
		"body": "renderVertex(${1:vX},${2:vY})",
		"description": "GTA SA\nrenderVertex(float vX, float vY)\n",
		"prefix": "renderVertex",
		"scope": "source.lua"
	},
	"renderSetTexCoord": {
		"body": "renderSetTexCoord(${1:posX},${2:posY})",
		"description": "GTA SA\nrenderSetTexCoord(float posX, float posY)\n",
		"prefix": "renderSetTexCoord",
		"scope": "source.lua"
	},
	"renderBindTexture": {
		"body": "renderBindTexture(${1:texture})",
		"description": "GTA SA\nrenderBindTexture(int texture)\n",
		"prefix": "renderBindTexture",
		"scope": "source.lua"
	},
	"renderGetTextureStruct": {
		"body": "renderGetTextureStruct(${1:texture})",
		"description": "GTA SA\nint struct = renderGetTextureStruct(int texture)\n",
		"prefix": "renderGetTextureStruct",
		"scope": "source.lua"
	},
	"renderGetTextureSprite": {
		"body": "renderGetTextureSprite(${1:texture})",
		"description": "GTA SA\nint sprite = renderGetTextureSprite(int texture)\n",
		"prefix": "renderGetTextureSprite",
		"scope": "source.lua"
	},
	"renderGetTextureSize": {
		"body": "renderGetTextureSize(${1:texture})",
		"description": "GTA SA\nint sizeX, int sizeY = renderGetTextureSize(int texture)\n",
		"prefix": "renderGetTextureSize",
		"scope": "source.lua"
	},
	"renderSetRenderState": {
		"body": "renderSetRenderState(${1:type},${2:state})",
		"description": "GTA SA\nrenderSetRenderState(int type, int state)\n",
		"prefix": "renderSetRenderState",
		"scope": "source.lua"
	},
	"sampCreate3dTextEx": {
		"body": "sampCreate3dTextEx(${1:id},${2:text},${3:color},${4:posX},${5:posY},${6:posZ},${7:distance},${8:ignoreWalls},${9:playerId},${10:vehicleId})",
		"description": "GTA SA\nsampCreate3dTextEx(int id, zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)\n",
		"prefix": "sampCreate3dTextEx",
		"scope": "source.lua"
	},
	"sampGet3dTextInfoById": {
		"body": "sampGet3dTextInfoById(${1:id})",
		"description": "GTA SA\nzstring string, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId = sampGet3dTextInfoById(int id)\n",
		"prefix": "sampGet3dTextInfoById",
		"scope": "source.lua"
	},
	"sampSet3dTextString": {
		"body": "sampSet3dTextString(${1:id},${2:text})",
		"description": "GTA SA\nsampSet3dTextString(int id, zstring text)\n",
		"prefix": "sampSet3dTextString",
		"scope": "source.lua"
	},
	"sampTextdrawCreate": {
		"body": "sampTextdrawCreate(${1:id},${2:text},${3:posX},${4:posY})",
		"description": "GTA SA\nsampTextdrawCreate(int id, zstring text, float posX, float posY)\n",
		"prefix": "sampTextdrawCreate",
		"scope": "source.lua"
	},
	"sampTextdrawSetBoxColorAndSize": {
		"body": "sampTextdrawSetBoxColorAndSize(${1:id},${2:box},${3:color},${4:sizeX},${5:sizeY})",
		"description": "GTA SA\nsampTextdrawSetBoxColorAndSize(int id, int box, int color, float sizeX, float sizeY)\n",
		"prefix": "sampTextdrawSetBoxColorAndSize",
		"scope": "source.lua"
	},
	"sampTextdrawSetAlign": {
		"body": "sampTextdrawSetAlign(${1:id},${2:align})",
		"description": "GTA SA\nsampTextdrawSetAlign(int id, int align)\n",
		"prefix": "sampTextdrawSetAlign",
		"scope": "source.lua"
	},
	"sampTextdrawSetProportional": {
		"body": "sampTextdrawSetProportional(${1:id},${2:proportional})",
		"description": "GTA SA\nsampTextdrawSetProportional(int id, int proportional)\n",
		"prefix": "sampTextdrawSetProportional",
		"scope": "source.lua"
	},
	"sampTextdrawSetStyle": {
		"body": "sampTextdrawSetStyle(${1:id},${2:style})",
		"description": "GTA SA\nsampTextdrawSetStyle(int id, int style)\n",
		"prefix": "sampTextdrawSetStyle",
		"scope": "source.lua"
	},
	"sampTextdrawSetShadow": {
		"body": "sampTextdrawSetShadow(${1:id},${2:shadow},${3:color})",
		"description": "GTA SA\nsampTextdrawSetShadow(int id, int shadow, int color)\n",
		"prefix": "sampTextdrawSetShadow",
		"scope": "source.lua"
	},
	"sampTextdrawSetOutlineColor": {
		"body": "sampTextdrawSetOutlineColor(${1:id},${2:outline},${3:color})",
		"description": "GTA SA\nsampTextdrawSetOutlineColor(int id, int outline, int color)\n",
		"prefix": "sampTextdrawSetOutlineColor",
		"scope": "source.lua"
	},
	"sampTextdrawSetModelRotationZoomVehColor": {
		"body": "sampTextdrawSetModelRotationZoomVehColor(${1:id},${2:model},${3:rotX},${4:rotY},${5:rotZ},${6:zoom},${7:clr1},${8:clr2})",
		"description": "GTA SA\nsampTextdrawSetModelRotationZoomVehColor(int id, int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2)\n",
		"prefix": "sampTextdrawSetModelRotationZoomVehColor",
		"scope": "source.lua"
	},
	"sampTextdrawSetString": {
		"body": "sampTextdrawSetString(${1:id},${2:text})",
		"description": "GTA SA\nsampTextdrawSetString(int id, zstring text)\n",
		"prefix": "sampTextdrawSetString",
		"scope": "source.lua"
	},
	"sampTextdrawSetPos": {
		"body": "sampTextdrawSetPos(${1:id},${2:posX},${3:posY})",
		"description": "GTA SA\nsampTextdrawSetPos(int id, float posX, float posY)\n",
		"prefix": "sampTextdrawSetPos",
		"scope": "source.lua"
	},
	"sampTextdrawSetLetterSizeAndColor": {
		"body": "sampTextdrawSetLetterSizeAndColor(${1:id},${2:letSizeX},${3:letSizeY},${4:color})",
		"description": "GTA SA\nsampTextdrawSetLetterSizeAndColor(int id, float letSizeX, float letSizeY, int color)\n",
		"prefix": "sampTextdrawSetLetterSizeAndColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetBoxEnabledColorAndSize": {
		"body": "sampTextdrawGetBoxEnabledColorAndSize(${1:id})",
		"description": "GTA SA\nint box, int color, float sizeX, float sizeY = sampTextdrawGetBoxEnabledColorAndSize(int id)\n",
		"prefix": "sampTextdrawGetBoxEnabledColorAndSize",
		"scope": "source.lua"
	},
	"sampTextdrawGetAlign": {
		"body": "sampTextdrawGetAlign(${1:id})",
		"description": "GTA SA\nint align = sampTextdrawGetAlign(int id)\n",
		"prefix": "sampTextdrawGetAlign",
		"scope": "source.lua"
	},
	"sampTextdrawGetProportional": {
		"body": "sampTextdrawGetProportional(${1:id})",
		"description": "GTA SA\nint prop = sampTextdrawGetProportional(int id)\n",
		"prefix": "sampTextdrawGetProportional",
		"scope": "source.lua"
	},
	"sampTextdrawGetStyle": {
		"body": "sampTextdrawGetStyle(${1:id})",
		"description": "GTA SA\nint style = sampTextdrawGetStyle(int id)\n",
		"prefix": "sampTextdrawGetStyle",
		"scope": "source.lua"
	},
	"sampTextdrawGetShadowColor": {
		"body": "sampTextdrawGetShadowColor(${1:id})",
		"description": "GTA SA\nint shadow, int color = sampTextdrawGetShadowColor(int id)\n",
		"prefix": "sampTextdrawGetShadowColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetOutlineColor": {
		"body": "sampTextdrawGetOutlineColor(${1:id})",
		"description": "GTA SA\nint outline, int color = sampTextdrawGetOutlineColor(int id)\n",
		"prefix": "sampTextdrawGetOutlineColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetModelRotationZoomVehColor": {
		"body": "sampTextdrawGetModelRotationZoomVehColor(${1:id})",
		"description": "GTA SA\nint model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2 = sampTextdrawGetModelRotationZoomVehColor(int id)\n",
		"prefix": "sampTextdrawGetModelRotationZoomVehColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetString": {
		"body": "sampTextdrawGetString(${1:id})",
		"description": "GTA SA\nzstring text = sampTextdrawGetString(int id)\n",
		"prefix": "sampTextdrawGetString",
		"scope": "source.lua"
	},
	"sampTextdrawGetPos": {
		"body": "sampTextdrawGetPos(${1:id})",
		"description": "GTA SA\nfloat posX, float posY = sampTextdrawGetPos(int id)\n",
		"prefix": "sampTextdrawGetPos",
		"scope": "source.lua"
	},
	"sampTextdrawGetLetterSizeAndColor": {
		"body": "sampTextdrawGetLetterSizeAndColor(${1:id})",
		"description": "GTA SA\nfloat letSizeX, float letSizeY, int color = sampTextdrawGetLetterSizeAndColor(int id)\n",
		"prefix": "sampTextdrawGetLetterSizeAndColor",
		"scope": "source.lua"
	},
	"sampTextdrawIsExists": {
		"body": "sampTextdrawIsExists(${1:id})",
		"description": "GTA SA\nbool result = sampTextdrawIsExists(int id)\n",
		"prefix": "sampTextdrawIsExists",
		"scope": "source.lua"
	},
	"sampTextdrawDelete": {
		"body": "sampTextdrawDelete(${1:id})",
		"description": "GTA SA\nsampTextdrawDelete(int id)\n",
		"prefix": "sampTextdrawDelete",
		"scope": "source.lua"
	},
	"isSampfuncsGlobalVarDefined": {
		"body": "isSampfuncsGlobalVarDefined(${1:var})",
		"description": "GTA SA\nbool result = isSampfuncsGlobalVarDefined(zstring var)\n",
		"prefix": "isSampfuncsGlobalVarDefined",
		"scope": "source.lua"
	},
	"getSampfuncsGlobalVarAccessForThread": {
		"body": "getSampfuncsGlobalVarAccessForThread(${1:var},${2:thread})",
		"description": "GTA SA\nint read, int write = getSampfuncsGlobalVarAccessForThread(zstring var, int thread)\n",
		"prefix": "getSampfuncsGlobalVarAccessForThread",
		"scope": "source.lua"
	},
	"runSampfuncsConsoleCommand": {
		"body": "runSampfuncsConsoleCommand(${1:cmd})",
		"description": "GTA SA\nrunSampfuncsConsoleCommand(zstring cmd)\n",
		"prefix": "runSampfuncsConsoleCommand",
		"scope": "source.lua"
	},
	"sampfuncsRegisterConsoleCommand": {
		"body": "sampfuncsRegisterConsoleCommand(${1:cmd},${2:func})",
		"description": "GTA SA\nbool result = sampfuncsRegisterConsoleCommand(zstring cmd, function func)\n",
		"prefix": "sampfuncsRegisterConsoleCommand",
		"scope": "source.lua"
	},
	"sampfuncsUnregisterConsoleCommand": {
		"body": "sampfuncsUnregisterConsoleCommand(${1:cmd})",
		"description": "GTA SA\nbool result = sampfuncsUnregisterConsoleCommand(zstring cmd)\n",
		"prefix": "sampfuncsUnregisterConsoleCommand",
		"scope": "source.lua"
	},
	"createScmThreadAtPointer": {
		"body": "createScmThreadAtPointer(${1:pointer},${2:args})",
		"description": "GTA SA\nint thread = createScmThreadAtPointer(int pointer, table args)\n",
		"prefix": "createScmThreadAtPointer",
		"scope": "source.lua"
	},
	"setScmThreadLocalVar": {
		"body": "setScmThreadLocalVar(${1:thread},${2:var},${3:value})",
		"description": "GTA SA\nsetScmThreadLocalVar(int thread, int var, int value)\n",
		"prefix": "setScmThreadLocalVar",
		"scope": "source.lua"
	},
	"getScmThreadLocalVar": {
		"body": "getScmThreadLocalVar(${1:thread},${2:var})",
		"description": "GTA SA\nint value = getScmThreadLocalVar(int thread, int var)\n",
		"prefix": "getScmThreadLocalVar",
		"scope": "source.lua"
	},
	"destroyScmThread": {
		"body": "destroyScmThread(${1:thread})",
		"description": "GTA SA\ndestroyScmThread(int thread)\n",
		"prefix": "destroyScmThread",
		"scope": "source.lua"
	},
	"restartScmThread": {
		"body": "restartScmThread(${1:thread},${2:args})",
		"description": "GTA SA\nrestartScmThread(int thread, table args)\n",
		"prefix": "restartScmThread",
		"scope": "source.lua"
	},
	"isSampfuncsConsoleActive": {
		"body": "isSampfuncsConsoleActive()",
		"description": "GTA SA\nbool result = isSampfuncsConsoleActive()\n",
		"prefix": "isSampfuncsConsoleActive",
		"scope": "source.lua"
	},
	"sampSetClientCommandDescription": {
		"body": "sampSetClientCommandDescription(${1:cmd},${2:text})",
		"description": "GTA SA\nsampSetClientCommandDescription(zstring cmd, zstring text)\n",
		"prefix": "sampSetClientCommandDescription",
		"scope": "source.lua"
	},
	"setSampfuncsConsoleCommandDescription": {
		"body": "setSampfuncsConsoleCommandDescription(${1:cmd},${2:text})",
		"description": "GTA SA\nsetSampfuncsConsoleCommandDescription(zstring cmd, zstring text)\n",
		"prefix": "setSampfuncsConsoleCommandDescription",
		"scope": "source.lua"
	},
	"sampForceVehicleSync": {
		"body": "sampForceVehicleSync(${1:id})",
		"description": "GTA SA\nsampForceVehicleSync(int id)\n",
		"prefix": "sampForceVehicleSync",
		"scope": "source.lua"
	},
	"sampForceUnoccupiedSyncSeatId": {
		"body": "sampForceUnoccupiedSyncSeatId(${1:id},${2:seatId})",
		"description": "GTA SA\nsampForceUnoccupiedSyncSeatId(int id, int seatId)\n",
		"prefix": "sampForceUnoccupiedSyncSeatId",
		"scope": "source.lua"
	},
	"sampForceOnfootSync": {
		"body": "sampForceOnfootSync()",
		"description": "GTA SA\nsampForceOnfootSync()\n",
		"prefix": "sampForceOnfootSync",
		"scope": "source.lua"
	},
	"sampForceAimSync": {
		"body": "sampForceAimSync()",
		"description": "GTA SA\nsampForceAimSync()\n",
		"prefix": "sampForceAimSync",
		"scope": "source.lua"
	},
	"sampForceTrailerSync": {
		"body": "sampForceTrailerSync(${1:id})",
		"description": "GTA SA\nsampForceTrailerSync(int id)\n",
		"prefix": "sampForceTrailerSync",
		"scope": "source.lua"
	},
	"sampForcePassengerSyncSeatId": {
		"body": "sampForcePassengerSyncSeatId(${1:id},${2:seatId})",
		"description": "GTA SA\nsampForcePassengerSyncSeatId(int id, int seatId)\n",
		"prefix": "sampForcePassengerSyncSeatId",
		"scope": "source.lua"
	},
	"sampForceStatsSync": {
		"body": "sampForceStatsSync()",
		"description": "GTA SA\nsampForceStatsSync()\n",
		"prefix": "sampForceStatsSync",
		"scope": "source.lua"
	},
	"sampForceWeaponsSync": {
		"body": "sampForceWeaponsSync()",
		"description": "GTA SA\nsampForceWeaponsSync()\n",
		"prefix": "sampForceWeaponsSync",
		"scope": "source.lua"
	},
	"sampGetMaxPlayerId": {
		"body": "sampGetMaxPlayerId(${1:streamed})",
		"description": "GTA SA\nint id = sampGetMaxPlayerId(bool streamed)\n",
		"prefix": "sampGetMaxPlayerId",
		"scope": "source.lua"
	},
	"sampGetPlayerCount": {
		"body": "sampGetPlayerCount(${1:streamed})",
		"description": "GTA SA\nint count = sampGetPlayerCount(bool streamed)\n",
		"prefix": "sampGetPlayerCount",
		"scope": "source.lua"
	},
	"renderLoadTextureFromFileInMemory": {
		"body": "renderLoadTextureFromFileInMemory(${1:pointer},${2:size})",
		"description": "GTA SA\nbool result, int texture = renderLoadTextureFromFileInMemory(int pointer, int size)\n",
		"prefix": "renderLoadTextureFromFileInMemory",
		"scope": "source.lua"
	},
	"sampProcessChatInput": {
		"body": "sampProcessChatInput(${1:text})",
		"description": "GTA SA\nsampProcessChatInput(zstring text)\n",
		"prefix": "sampProcessChatInput",
		"scope": "source.lua"
	},
	"sampIsChatCommandDefined": {
		"body": "sampIsChatCommandDefined(${1:cmd})",
		"description": "GTA SA\nbool result = sampIsChatCommandDefined(zstring cmd)\n",
		"prefix": "sampIsChatCommandDefined",
		"scope": "source.lua"
	},
	"isSampfuncsConsoleCommandDefined": {
		"body": "isSampfuncsConsoleCommandDefined(${1:cmd})",
		"description": "GTA SA\nbool result = isSampfuncsConsoleCommandDefined(zstring cmd)\n",
		"prefix": "isSampfuncsConsoleCommandDefined",
		"scope": "source.lua"
	},
	"getCleoLibraryVersion": {
		"body": "getCleoLibraryVersion()",
		"description": "GTA SA\nint version = getCleoLibraryVersion()\n",
		"prefix": "getCleoLibraryVersion",
		"scope": "source.lua"
	},
	"getAllObjects": {
		"body": "getAllObjects()",
		"description": "GTA SA\ntable Objects = getAllObjects()\n",
		"prefix": "getAllObjects",
		"scope": "source.lua"
	},
	"getAllChars": {
		"body": "getAllChars()",
		"description": "GTA SA\ntable Chars = getAllChars()\n",
		"prefix": "getAllChars",
		"scope": "source.lua"
	},
	"getAllVehicles": {
		"body": "getAllVehicles()",
		"description": "GTA SA\ntable Vehicles = getAllVehicles()\n",
		"prefix": "getAllVehicles",
		"scope": "source.lua"
	},
	"script_version_number": {
		"body": "script_version_number(${1:version})",
		"description": "GTA SA\nscript_version_number(int version)\n",
		"prefix": "script_version_number",
		"scope": "source.lua"
	},
	"script_version": {
		"body": "script_version(${1:version})",
		"description": "GTA SA\nscript_version(string version)\n",
		"prefix": "script_version",
		"scope": "source.lua"
	},
	"script_name": {
		"body": "script_name(${1:name})",
		"description": "GTA SA\nscript_name(string name)\n",
		"prefix": "script_name",
		"scope": "source.lua"
	},
	"script_description": {
		"body": "script_description(${1:description})",
		"description": "GTA SA\nscript_description(string description)\n",
		"prefix": "script_description",
		"scope": "source.lua"
	},
	"script_authors": {
		"body": "script_authors(${1:author},${2:})",
		"description": "GTA SA\nscript_authors(string author, ...)\n",
		"prefix": "script_authors",
		"scope": "source.lua"
	},
	"script_author": {
		"body": "script_author(${1:author})",
		"description": "GTA SA\nscript_author(string author)\n",
		"prefix": "script_author",
		"scope": "source.lua"
	},
	"script_dependencies": {
		"body": "script_dependencies(${1:name},${2:})",
		"description": "GTA SA\nscript_dependencies(string name, ...)\n",
		"prefix": "script_dependencies",
		"scope": "source.lua"
	},
	"script_moonloader": {
		"body": "script_moonloader(${1:version})",
		"description": "GTA SA\nscript_moonloader(int version)\n",
		"prefix": "script_moonloader",
		"scope": "source.lua"
	},
	"thisScript": {
		"body": "thisScript()",
		"description": "GTA SA\nLuaScript s = thisScript()\n",
		"prefix": "thisScript",
		"scope": "source.lua"
	},
	"wait": {
		"body": "wait(${1:time})",
		"description": "GTA SA\nwait(int time)\n",
		"prefix": "wait",
		"scope": "source.lua"
	},
	"print": {
		"body": "print(${1:value},${2:})",
		"description": "GTA SA\nprint(any value, ...)\n",
		"prefix": "print",
		"scope": "source.lua"
	},
	"getGameGlobal": {
		"body": "getGameGlobal(${1:index})",
		"description": "GTA SA\nint value = getGameGlobal(int index)\n",
		"prefix": "getGameGlobal",
		"scope": "source.lua"
	},
	"setGameGlobal": {
		"body": "setGameGlobal(${1:index},${2:value})",
		"description": "GTA SA\nsetGameGlobal(int index, int value)\n",
		"prefix": "setGameGlobal",
		"scope": "source.lua"
	},
	"getGameGlobalPtr": {
		"body": "getGameGlobalPtr(${1:index})",
		"description": "GTA SA\nint ptr = getGameGlobalPtr(int index)\n",
		"prefix": "getGameGlobalPtr",
		"scope": "source.lua"
	},
	"isSampfuncsLoaded": {
		"body": "isSampfuncsLoaded()",
		"description": "GTA SA\nbool loaded = isSampfuncsLoaded()\n",
		"prefix": "isSampfuncsLoaded",
		"scope": "source.lua"
	},
	"isCleoLoaded": {
		"body": "isCleoLoaded()",
		"description": "GTA SA\nbool loaded = isCleoLoaded()\n",
		"prefix": "isCleoLoaded",
		"scope": "source.lua"
	},
	"isSampLoaded": {
		"body": "isSampLoaded()",
		"description": "GTA SA\nbool loaded = isSampLoaded()\n",
		"prefix": "isSampLoaded",
		"scope": "source.lua"
	},
	"isKeyDown": {
		"body": "isKeyDown(${1:keyId})",
		"description": "GTA SA\nbool state = isKeyDown(int keyId)\n",
		"prefix": "isKeyDown",
		"scope": "source.lua"
	},
	"reloadScripts": {
		"body": "reloadScripts()",
		"description": "GTA SA\nreloadScripts()\n",
		"prefix": "reloadScripts",
		"scope": "source.lua"
	},
	"isOpcodesAvailable": {
		"body": "isOpcodesAvailable()",
		"description": "GTA SA\nbool status = isOpcodesAvailable()\n",
		"prefix": "isOpcodesAvailable",
		"scope": "source.lua"
	},
	"representFloatAsInt": {
		"body": "representFloatAsInt(${1:f})",
		"description": "GTA SA\nint i = representFloatAsInt(float f)\n",
		"prefix": "representFloatAsInt",
		"scope": "source.lua"
	},
	"representIntAsFloat": {
		"body": "representIntAsFloat(${1:i})",
		"description": "GTA SA\nfloat i = representIntAsFloat(int i)\n",
		"prefix": "representIntAsFloat",
		"scope": "source.lua"
	},
	"setGxtEntry": {
		"body": "setGxtEntry(${1:key},${2:text})",
		"description": "GTA SA\nsetGxtEntry(string key, string text)\n",
		"prefix": "setGxtEntry",
		"scope": "source.lua"
	},
	"setFreeGxtEntry": {
		"body": "setFreeGxtEntry(${1:text})",
		"description": "GTA SA\nstring key = setFreeGxtEntry(string text)\n",
		"prefix": "setFreeGxtEntry",
		"scope": "source.lua"
	},
	"getFreeGxtKey": {
		"body": "getFreeGxtKey()",
		"description": "GTA SA\nstring key = getFreeGxtKey()\n",
		"prefix": "getFreeGxtKey",
		"scope": "source.lua"
	},
	"getGxtText": {
		"body": "getGxtText(${1:key})",
		"description": "GTA SA\nstring text = getGxtText(string key)\n",
		"prefix": "getGxtText",
		"scope": "source.lua"
	},
	"clearGxtEntry": {
		"body": "clearGxtEntry(${1:key})",
		"description": "GTA SA\nclearGxtEntry(string key)\n",
		"prefix": "clearGxtEntry",
		"scope": "source.lua"
	},
	"isPauseMenuActive": {
		"body": "isPauseMenuActive()",
		"description": "GTA SA\nbool active = isPauseMenuActive()\n",
		"prefix": "isPauseMenuActive",
		"scope": "source.lua"
	},
	"isGameWindowForeground": {
		"body": "isGameWindowForeground()",
		"description": "GTA SA\nbool foreground = isGameWindowForeground()\n",
		"prefix": "isGameWindowForeground",
		"scope": "source.lua"
	},
	"getGameVersion": {
		"body": "getGameVersion()",
		"description": "GTA SA\nint version = getGameVersion()\n",
		"prefix": "getGameVersion",
		"scope": "source.lua"
	},
	"getMoonloaderVersion": {
		"body": "getMoonloaderVersion()",
		"description": "GTA SA\nint version = getMoonloaderVersion()\n",
		"prefix": "getMoonloaderVersion",
		"scope": "source.lua"
	},
	"localClock": {
		"body": "localClock()",
		"description": "GTA SA\ndouble time = localClock()\n",
		"prefix": "localClock",
		"scope": "source.lua"
	},
	"freeTextures": {
		"body": "freeTextures()",
		"description": "GTA SA\nfreeTextures()\n",
		"prefix": "freeTextures",
		"scope": "source.lua"
	},
	"getWorkingDirectory": {
		"body": "getWorkingDirectory()",
		"description": "GTA SA\nstring path = getWorkingDirectory()\n",
		"prefix": "getWorkingDirectory",
		"scope": "source.lua"
	},
	"getGameDirectory": {
		"body": "getGameDirectory()",
		"description": "GTA SA\nstring path = getGameDirectory()\n",
		"prefix": "getGameDirectory",
		"scope": "source.lua"
	},
	"useRenderCommands": {
		"body": "useRenderCommands(${1:enable})",
		"description": "GTA SA\nuseRenderCommands(bool enable)\n",
		"prefix": "useRenderCommands",
		"scope": "source.lua"
	},
	"writeMemory": {
		"body": "writeMemory(${1:address},${2:size},${3:value},${4:virtualProtect})",
		"description": "GTA SA\nwriteMemory(int address, int size, int value, bool virtualProtect)\n",
		"prefix": "writeMemory",
		"scope": "source.lua"
	},
	"readMemory": {
		"body": "readMemory(${1:address},${2:size},${3:virtualProtect})",
		"description": "GTA SA\nint value = readMemory(int address, int size, bool virtualProtect)\n",
		"prefix": "readMemory",
		"scope": "source.lua"
	},
	"loadDynamicLibrary": {
		"body": "loadDynamicLibrary(${1:library})",
		"description": "GTA SA\nbool result, int handle = loadDynamicLibrary(string library)\n",
		"prefix": "loadDynamicLibrary",
		"scope": "source.lua"
	},
	"freeDynamicLibrary": {
		"body": "freeDynamicLibrary(${1:handle})",
		"description": "GTA SA\nfreeDynamicLibrary(int handle)\n",
		"prefix": "freeDynamicLibrary",
		"scope": "source.lua"
	},
	"getDynamicLibraryProcedure": {
		"body": "getDynamicLibraryProcedure(${1:proc},${2:handle})",
		"description": "GTA SA\nbool result, int proc = getDynamicLibraryProcedure(string proc, int handle)\n",
		"prefix": "getDynamicLibraryProcedure",
		"scope": "source.lua"
	},
	"doesFileExist": {
		"body": "doesFileExist(${1:file})",
		"description": "GTA SA\nbool result = doesFileExist(string file)\n",
		"prefix": "doesFileExist",
		"scope": "source.lua"
	},
	"doesDirectoryExist": {
		"body": "doesDirectoryExist(${1:directory})",
		"description": "GTA SA\nbool result = doesDirectoryExist(string directory)\n",
		"prefix": "doesDirectoryExist",
		"scope": "source.lua"
	},
	"createDirectory": {
		"body": "createDirectory(${1:directory})",
		"description": "GTA SA\nbool result = createDirectory(string directory)\n",
		"prefix": "createDirectory",
		"scope": "source.lua"
	},
	"popFloat": {
		"body": "popFloat()",
		"description": "GTA SA\nfloat val = popFloat()\n",
		"prefix": "popFloat",
		"scope": "source.lua"
	},
	"isGameVersionOriginal": {
		"body": "isGameVersionOriginal()",
		"description": "GTA SA\nbool result = isGameVersionOriginal()\n",
		"prefix": "isGameVersionOriginal",
		"scope": "source.lua"
	},
	"allocateMemory": {
		"body": "allocateMemory(${1:size})",
		"description": "GTA SA\nint memory = allocateMemory(int size)\n",
		"prefix": "allocateMemory",
		"scope": "source.lua"
	},
	"freeMemory": {
		"body": "freeMemory(${1:memory})",
		"description": "GTA SA\nfreeMemory(int memory)\n",
		"prefix": "freeMemory",
		"scope": "source.lua"
	},
	"findFirstFile": {
		"body": "findFirstFile(${1:mask})",
		"description": "GTA SA\nFilesearch handle, string name = findFirstFile(string mask)\n",
		"prefix": "findFirstFile",
		"scope": "source.lua"
	},
	"findNextFile": {
		"body": "findNextFile(${1:handle})",
		"description": "GTA SA\nstring file = findNextFile(Filesearch handle)\n",
		"prefix": "findNextFile",
		"scope": "source.lua"
	},
	"findClose": {
		"body": "findClose(${1:handle})",
		"description": "GTA SA\nfindClose(Filesearch handle)\n",
		"prefix": "findClose",
		"scope": "source.lua"
	},
	"findAllRandomCharsInSphere": {
		"body": "findAllRandomCharsInSphere(${1:posX},${2:posY},${3:posZ},${4:radius},${5:findNext},${6:skipDead})",
		"description": "GTA SA\nbool result, Ped ped = findAllRandomCharsInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipDead)\n",
		"prefix": "findAllRandomCharsInSphere",
		"scope": "source.lua"
	},
	"findAllRandomVehiclesInSphere": {
		"body": "findAllRandomVehiclesInSphere(${1:posX},${2:posY},${3:posZ},${4:radius},${5:findNext},${6:skipWrecked})",
		"description": "GTA SA\nbool result, Vehicle car = findAllRandomVehiclesInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipWrecked)\n",
		"prefix": "findAllRandomVehiclesInSphere",
		"scope": "source.lua"
	},
	"findAllRandomObjectsInSphere": {
		"body": "findAllRandomObjectsInSphere(${1:posX},${2:posY},${3:posZ},${4:radius},${5:findNext})",
		"description": "GTA SA\nbool result, Object object = findAllRandomObjectsInSphere(float posX, float posY, float posZ, float radius, bool findNext)\n",
		"prefix": "findAllRandomObjectsInSphere",
		"scope": "source.lua"
	},
	"getCharPointer": {
		"body": "getCharPointer(${1:ped})",
		"description": "GTA SA\nint ptr = getCharPointer(Ped ped)\n",
		"prefix": "getCharPointer",
		"scope": "source.lua"
	},
	"getCarPointer": {
		"body": "getCarPointer(${1:car})",
		"description": "GTA SA\nint ptr = getCarPointer(Vehicle car)\n",
		"prefix": "getCarPointer",
		"scope": "source.lua"
	},
	"getObjectPointer": {
		"body": "getObjectPointer(${1:object})",
		"description": "GTA SA\nint struct = getObjectPointer(Object object)\n",
		"prefix": "getObjectPointer",
		"scope": "source.lua"
	},
	"callFunction": {
		"body": "callFunction(${1:address},${2:params},${3:pop},${4:})",
		"description": "GTA SA\nint returnValue = callFunction(int address, int params, int pop, ...)\n",
		"prefix": "callFunction",
		"scope": "source.lua"
	},
	"callMethod": {
		"body": "callMethod(${1:address},${2:struct},${3:params},${4:pop},${5:})",
		"description": "GTA SA\nint returnValue = callMethod(int address, int struct, int params, int pop, ...)\n",
		"prefix": "callMethod",
		"scope": "source.lua"
	},
	"storeClosestEntities": {
		"body": "storeClosestEntities(${1:ped})",
		"description": "GTA SA\nVehicle car, Ped ped = storeClosestEntities(Ped ped)\n",
		"prefix": "storeClosestEntities",
		"scope": "source.lua"
	},
	"switchCarEngine": {
		"body": "switchCarEngine(${1:car},${2:state})",
		"description": "GTA SA\nswitchCarEngine(Vehicle car, bool state)\n",
		"prefix": "switchCarEngine",
		"scope": "source.lua"
	},
	"getTargetBlipCoordinates": {
		"body": "getTargetBlipCoordinates()",
		"description": "GTA SA\nbool result, float posX, float posY, float posZ = getTargetBlipCoordinates()\n",
		"prefix": "getTargetBlipCoordinates",
		"scope": "source.lua"
	},
	"getCarNumberOfGears": {
		"body": "getCarNumberOfGears(${1:car})",
		"description": "GTA SA\nint gears = getCarNumberOfGears(Vehicle car)\n",
		"prefix": "getCarNumberOfGears",
		"scope": "source.lua"
	},
	"getCarCurrentGear": {
		"body": "getCarCurrentGear(${1:car})",
		"description": "GTA SA\nint gear = getCarCurrentGear(Vehicle car)\n",
		"prefix": "getCarCurrentGear",
		"scope": "source.lua"
	},
	"isCarSirenOn": {
		"body": "isCarSirenOn(${1:car})",
		"description": "GTA SA\nbool state = isCarSirenOn(Vehicle car)\n",
		"prefix": "isCarSirenOn",
		"scope": "source.lua"
	},
	"isCarEngineOn": {
		"body": "isCarEngineOn(${1:car})",
		"description": "GTA SA\nbool state = isCarEngineOn(Vehicle car)\n",
		"prefix": "isCarEngineOn",
		"scope": "source.lua"
	},
	"printHelpString": {
		"body": "printHelpString(${1:text})",
		"description": "GTA SA\nprintHelpString(string text)\n",
		"prefix": "printHelpString",
		"scope": "source.lua"
	},
	"printStyledString": {
		"body": "printStyledString(${1:text},${2:time},${3:style})",
		"description": "GTA SA\nprintStyledString(string text, int time, int style)\n",
		"prefix": "printStyledString",
		"scope": "source.lua"
	},
	"printString": {
		"body": "printString(${1:text},${2:time})",
		"description": "GTA SA\nprintString(string text, int time)\n",
		"prefix": "printString",
		"scope": "source.lua"
	},
	"printStringNow": {
		"body": "printStringNow(${1:text},${2:time})",
		"description": "GTA SA\nprintStringNow(string text, int time)\n",
		"prefix": "printStringNow",
		"scope": "source.lua"
	},
	"getCharPlayerIsTargeting": {
		"body": "getCharPlayerIsTargeting(${1:player})",
		"description": "GTA SA\nbool result, Ped ped = getCharPlayerIsTargeting(Player player)\n",
		"prefix": "getCharPlayerIsTargeting",
		"scope": "source.lua"
	},
	"getNameOfVehicleModel": {
		"body": "getNameOfVehicleModel(${1:modelId})",
		"description": "GTA SA\nGxtString name = getNameOfVehicleModel(Model modelId)\n",
		"prefix": "getNameOfVehicleModel",
		"scope": "source.lua"
	},
	"testCheat": {
		"body": "testCheat(${1:text})",
		"description": "GTA SA\nbool result = testCheat(string text)\n",
		"prefix": "testCheat",
		"scope": "source.lua"
	},
	"spawnVehicleByCheating": {
		"body": "spawnVehicleByCheating(${1:modelId})",
		"description": "GTA SA\nbool result = spawnVehicleByCheating(Model modelId)\n",
		"prefix": "spawnVehicleByCheating",
		"scope": "source.lua"
	},
	"getCharPointerHandle": {
		"body": "getCharPointerHandle(${1:ptr})",
		"description": "GTA SA\nPed handle = getCharPointerHandle(int ptr)\n",
		"prefix": "getCharPointerHandle",
		"scope": "source.lua"
	},
	"getVehiclePointerHandle": {
		"body": "getVehiclePointerHandle(${1:ptr})",
		"description": "GTA SA\nVehicle handle = getVehiclePointerHandle(int ptr)\n",
		"prefix": "getVehiclePointerHandle",
		"scope": "source.lua"
	},
	"getObjectPointerHandle": {
		"body": "getObjectPointerHandle(${1:ptr})",
		"description": "GTA SA\nObject handle = getObjectPointerHandle(int ptr)\n",
		"prefix": "getObjectPointerHandle",
		"scope": "source.lua"
	},
	"processLineOfSight": {
		"body": "processLineOfSight(${1:originX},${2:originY},${3:originZ},${4:targetX},${5:targetY},${6:targetZ},${7:checkSolid=true]},${8:car=false]},${9:ped=false]},${10:object=false]},${11:particle=false]},${12:seeThrough=false]},${13:ignoreSomeObjects=false]},${14:shootThrough=false]})",
		"description": "GTA SA\nbool result, table colPoint = processLineOfSight(float originX, float originY, float originZ, float targetX, float targetY, float targetZ, [bool checkSolid=true], [bool car=false], [bool ped=false], [bool object=false], [bool particle=false], [bool seeThrough=false], [bool ignoreSomeObjects=false], [bool shootThrough=false])\n",
		"prefix": "processLineOfSight",
		"scope": "source.lua"
	},
	"setClipboardText": {
		"body": "setClipboardText(${1:text})",
		"description": "GTA SA\nbool result = setClipboardText(string text)\n",
		"prefix": "setClipboardText",
		"scope": "source.lua"
	},
	"getClipboardText": {
		"body": "getClipboardText()",
		"description": "GTA SA\nstring text = getClipboardText()\n",
		"prefix": "getClipboardText",
		"scope": "source.lua"
	},
	"getStructElement": {
		"body": "getStructElement(${1:struct},${2:offset},${3:size},${4:unprotect=false]})",
		"description": "GTA SA\nint value = getStructElement(int struct, int offset, int size, [bool unprotect=false])\n",
		"prefix": "getStructElement",
		"scope": "source.lua"
	},
	"setStructElement": {
		"body": "setStructElement(${1:struct},${2:offset},${3:size},${4:value},${5:unprotect=false]})",
		"description": "GTA SA\nsetStructElement(int struct, int offset, int size, int value, [bool unprotect=false])\n",
		"prefix": "setStructElement",
		"scope": "source.lua"
	},
	"convertMatrixToQuaternion": {
		"body": "convertMatrixToQuaternion(${1:rightX},${2:rightY},${3:rightZ},${4:frontX},${5:frontY},${6:frontZ},${7:upX},${8:upY},${9:upZ})",
		"description": "GTA SA\nfloat w, float x, float y, float z = convertMatrixToQuaternion(float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ)\n",
		"prefix": "convertMatrixToQuaternion",
		"scope": "source.lua"
	},
	"convertQuaternionToMatrix": {
		"body": "convertQuaternionToMatrix(${1:w},${2:x},${3:y},${4:z})",
		"description": "GTA SA\nfloat rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ = convertQuaternionToMatrix(float w, float x, float y, float z)\n",
		"prefix": "convertQuaternionToMatrix",
		"scope": "source.lua"
	},
	"convert3DCoordsToScreen": {
		"body": "convert3DCoordsToScreen(${1:posX},${2:posY},${3:posZ})",
		"description": "GTA SA\nfloat wposX, float wposY = convert3DCoordsToScreen(float posX, float posY, float posZ)\n",
		"prefix": "convert3DCoordsToScreen",
		"scope": "source.lua"
	},
	"setGameKeyState": {
		"body": "setGameKeyState(${1:key},${2:state})",
		"description": "GTA SA\nsetGameKeyState(int key, int state)\n",
		"prefix": "setGameKeyState",
		"scope": "source.lua"
	},
	"getCursorPos": {
		"body": "getCursorPos()",
		"description": "GTA SA\nint posX, int posY = getCursorPos()\n",
		"prefix": "getCursorPos",
		"scope": "source.lua"
	},
	"convertWindowScreenCoordsToGameScreenCoords": {
		"body": "convertWindowScreenCoordsToGameScreenCoords(${1:wposX},${2:wposY})",
		"description": "GTA SA\nfloat gposX, float gposY = convertWindowScreenCoordsToGameScreenCoords(float wposX, float wposY)\n",
		"prefix": "convertWindowScreenCoordsToGameScreenCoords",
		"scope": "source.lua"
	},
	"convertGameScreenCoordsToWindowScreenCoords": {
		"body": "convertGameScreenCoordsToWindowScreenCoords(${1:gposX},${2:gposY})",
		"description": "GTA SA\nfloat wposX, float wposY = convertGameScreenCoordsToWindowScreenCoords(float gposX, float gposY)\n",
		"prefix": "convertGameScreenCoordsToWindowScreenCoords",
		"scope": "source.lua"
	},
	"convertScreenCoordsToWorld3D": {
		"body": "convertScreenCoordsToWorld3D(${1:posX},${2:posY},${3:depth})",
		"description": "GTA SA\nfloat posX, float posY, float posZ = convertScreenCoordsToWorld3D(float posX, float posY, float depth)\n",
		"prefix": "convertScreenCoordsToWorld3D",
		"scope": "source.lua"
	},
	"getModuleHandle": {
		"body": "getModuleHandle(${1:module})",
		"description": "GTA SA\nint handle = getModuleHandle(string module)\n",
		"prefix": "getModuleHandle",
		"scope": "source.lua"
	},
	"getModuleProcAddress": {
		"body": "getModuleProcAddress(${1:module},${2:proc})",
		"description": "GTA SA\nint address = getModuleProcAddress(string module, string proc)\n",
		"prefix": "getModuleProcAddress",
		"scope": "source.lua"
	},
	"setVirtualKeyDown": {
		"body": "setVirtualKeyDown(${1:vkey},${2:down})",
		"description": "GTA SA\nsetVirtualKeyDown(int vkey, bool down)\n",
		"prefix": "setVirtualKeyDown",
		"scope": "source.lua"
	},
	"setCharKeyDown": {
		"body": "setCharKeyDown(${1:ckey},${2:down})",
		"description": "GTA SA\nsetCharKeyDown(int ckey, bool down)\n",
		"prefix": "setCharKeyDown",
		"scope": "source.lua"
	},
	"downloadUrlToFile": {
		"body": "downloadUrlToFile(${1:url},${2:file},${3:statusCallback})",
		"description": "GTA SA\nint index = downloadUrlToFile(string url, string file, function statusCallback)\n",
		"prefix": "downloadUrlToFile",
		"scope": "source.lua"
	},
	"isKeyJustPressed": {
		"body": "isKeyJustPressed(${1:key})",
		"description": "GTA SA\nbool state = isKeyJustPressed(int key)\n",
		"prefix": "isKeyJustPressed",
		"scope": "source.lua"
	},
	"convert3DCoordsToScreenEx": {
		"body": "convert3DCoordsToScreenEx(${1:posX},${2:posY},${3:posZ},${4:checkMin=false]},${5:checkMax=false]})",
		"description": "GTA SA\nbool result, float x, float y, float z, float w, float h = convert3DCoordsToScreenEx(float posX, float posY, float posZ, [bool checkMin=false], [bool checkMax=false])\n",
		"prefix": "convert3DCoordsToScreenEx",
		"scope": "source.lua"
	},
	"getStructFloatElement": {
		"body": "getStructFloatElement(${1:struct},${2:offset},${3:unprotect=false]})",
		"description": "GTA SA\nfloat value = getStructFloatElement(int struct, int offset, [bool unprotect=false])\n",
		"prefix": "getStructFloatElement",
		"scope": "source.lua"
	},
	"setStructFloatElement": {
		"body": "setStructFloatElement(${1:struct},${2:offset},${3:value},${4:unprotect=false]})",
		"description": "GTA SA\nsetStructFloatElement(int struct, int offset, float value, [bool unprotect=false])\n",
		"prefix": "setStructFloatElement",
		"scope": "source.lua"
	},
	"wasKeyPressed": {
		"body": "wasKeyPressed(${1:key})",
		"description": "GTA SA\nbool state = wasKeyPressed(int key)\n",
		"prefix": "wasKeyPressed",
		"scope": "source.lua"
	},
	"wasKeyReleased": {
		"body": "wasKeyReleased(${1:key})",
		"description": "GTA SA\nbool state = wasKeyReleased(int key)\n",
		"prefix": "wasKeyReleased",
		"scope": "source.lua"
	},
	"getMousewheelDelta": {
		"body": "getMousewheelDelta()",
		"description": "GTA SA\nint delta = getMousewheelDelta()\n",
		"prefix": "getMousewheelDelta",
		"scope": "source.lua"
	},
	"consumeWindowMessage": {
		"body": "consumeWindowMessage(${1:game=true]},${2:scripts=true]})",
		"description": "GTA SA\nconsumeWindowMessage([bool game=true], [bool scripts=true])\n",
		"prefix": "consumeWindowMessage",
		"scope": "source.lua"
	},
	"addEventHandler": {
		"body": "addEventHandler(${1:eventName},${2:callback})",
		"description": "GTA SA\naddEventHandler(string eventName, function callback)\n",
		"prefix": "addEventHandler",
		"scope": "source.lua"
	},
	"isGamePaused": {
		"body": "isGamePaused()",
		"description": "GTA SA\nbool paused = isGamePaused()\n",
		"prefix": "isGamePaused",
		"scope": "source.lua"
	},
	"gameClock": {
		"body": "gameClock()",
		"description": "GTA SA\ndouble time = gameClock()\n",
		"prefix": "gameClock",
		"scope": "source.lua"
	},
	"script_properties": {
		"body": "script_properties(${1:property},${2:})",
		"description": "GTA SA\nscript_properties(string property, ...)\n",
		"prefix": "script_properties",
		"scope": "source.lua"
	},
	"script_url": {
		"body": "script_url(${1:url})",
		"description": "GTA SA\nscript_url(string url)\n",
		"prefix": "script_url",
		"scope": "source.lua"
	},
	"import": {
		"body": "import(${1:filename})",
		"description": "GTA SA\nany imports, string error = import(string filename)\n",
		"prefix": "import",
		"scope": "source.lua"
	},
	"encodeJson": {
		"body": "encodeJson(${1:data})",
		"description": "GTA SA\nstring json = encodeJson(table data)\n",
		"prefix": "encodeJson",
		"scope": "source.lua"
	},
	"decodeJson": {
		"body": "decodeJson(${1:json})",
		"description": "GTA SA\ntable data = decodeJson(string json)\n",
		"prefix": "decodeJson",
		"scope": "source.lua"
	},
	"showCursor": {
		"body": "showCursor(${1:show},${2:lockControls]})",
		"description": "GTA SA\nshowCursor(bool show, [bool lockControls])\n",
		"prefix": "showCursor",
		"scope": "source.lua"
	},
	"lockPlayerControl": {
		"body": "lockPlayerControl(${1:lock})",
		"description": "GTA SA\nlockPlayerControl(bool lock)\n",
		"prefix": "lockPlayerControl",
		"scope": "source.lua"
	},
	"isPlayerControlLocked": {
		"body": "isPlayerControlLocked()",
		"description": "GTA SA\nbool locked = isPlayerControlLocked()\n",
		"prefix": "isPlayerControlLocked",
		"scope": "source.lua"
	},
	"setBlipCoordinates": {
		"body": "setBlipCoordinates(${1:blip},${2:x},${3:y},${4:z})",
		"description": "GTA SA\nbool result = setBlipCoordinates(Marker blip, float x, float y, float z)\n",
		"prefix": "setBlipCoordinates",
		"scope": "source.lua"
	},
	"setTargetBlipCoordinates": {
		"body": "setTargetBlipCoordinates(${1:x},${2:y},${3:z})",
		"description": "GTA SA\nbool result = setTargetBlipCoordinates(float x, float y, float z)\n",
		"prefix": "setTargetBlipCoordinates",
		"scope": "source.lua"
	},
	"placeWaypoint": {
		"body": "placeWaypoint(${1:x},${2:y},${3:z})",
		"description": "GTA SA\nbool result = placeWaypoint(float x, float y, float z)\n",
		"prefix": "placeWaypoint",
		"scope": "source.lua"
	},
	"removeWaypoint": {
		"body": "removeWaypoint()",
		"description": "GTA SA\nbool result = removeWaypoint()\n",
		"prefix": "removeWaypoint",
		"scope": "source.lua"
	},
	"getFolderPath": {
		"body": "getFolderPath(${1:csidl})",
		"description": "GTA SA\nstring path = getFolderPath(int csidl)\n",
		"prefix": "getFolderPath",
		"scope": "source.lua"
	},
	"getTimeStepValue": {
		"body": "getTimeStepValue()",
		"description": "GTA SA\nfloat value = getTimeStepValue()\n",
		"prefix": "getTimeStepValue",
		"scope": "source.lua"
	},
	"getD3DDevicePtr": {
		"body": "getD3DDevicePtr()",
		"description": "GTA SA\nuint devicePtr = getD3DDevicePtr()\n",
		"prefix": "getD3DDevicePtr",
		"scope": "source.lua"
	},
	"script.load": {
		"body": "script.load(${1:file})",
		"description": "GTA SA\nLuaScript s = script.load(string file)\n",
		"prefix": "script.load",
		"scope": "source.lua"
	},
	"script.find": {
		"body": "script.find(${1:name})",
		"description": "GTA SA\nLuaScript s = script.find(string name)\n",
		"prefix": "script.find",
		"scope": "source.lua"
	},
	"script.list": {
		"body": "script.list()",
		"description": "GTA SA\ntable list = script.list()\n",
		"prefix": "script.list",
		"scope": "source.lua"
	},
	"script.get": {
		"body": "script.get(${1:scriptId})",
		"description": "GTA SA\nLuaScript script = script.get(int scriptId)\n",
		"prefix": "script.get",
		"scope": "source.lua"
	},
	"script.this": {
		"body": "script.this()",
		"description": "GTA SA\nscript.this()\n",
		"prefix": "script.this",
		"scope": "source.lua"
	},
	"inicfg.load": {
		"body": "inicfg.load(${1:default]},${2:file]})",
		"description": "GTA SA\ntable data = inicfg.load([table default], [string file])\n",
		"prefix": "inicfg.load",
		"scope": "source.lua"
	},
	"inicfg.save": {
		"body": "inicfg.save(${1:data},${2:file]})",
		"description": "GTA SA\nbool result = inicfg.save(table data, [string file])\n",
		"prefix": "inicfg.save",
		"scope": "source.lua"
	},
	"memory.read": {
		"body": "memory.read(${1:address},${2:size},${3:unprotect=false]})",
		"description": "GTA SA\nint value = memory.read(uint address, uint size, [bool unprotect=false])\n",
		"prefix": "memory.read",
		"scope": "source.lua"
	},
	"memory.write": {
		"body": "memory.write(${1:address},${2:value},${3:size},${4:unprotect=false]})",
		"description": "GTA SA\nmemory.write(uint address, int value, uint size, [bool unprotect=false])\n",
		"prefix": "memory.write",
		"scope": "source.lua"
	},
	"memory.getint8": {
		"body": "memory.getint8(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getint8(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint8",
		"scope": "source.lua"
	},
	"memory.setint8": {
		"body": "memory.setint8(${1:address},${2:byte},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setint8(uint address, int byte, [bool unprotect=false])\n",
		"prefix": "memory.setint8",
		"scope": "source.lua"
	},
	"memory.getint16": {
		"body": "memory.getint16(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getint16(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint16",
		"scope": "source.lua"
	},
	"memory.setint16": {
		"body": "memory.setint16(${1:address},${2:word},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setint16(uint address, int word, [bool unprotect=false])\n",
		"prefix": "memory.setint16",
		"scope": "source.lua"
	},
	"memory.getint32": {
		"body": "memory.getint32(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getint32(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint32",
		"scope": "source.lua"
	},
	"memory.setint32": {
		"body": "memory.setint32(${1:address},${2:dword},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setint32(uint address, int dword, [bool unprotect=false])\n",
		"prefix": "memory.setint32",
		"scope": "source.lua"
	},
	"memory.getint64": {
		"body": "memory.getint64(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\ndouble value = memory.getint64(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint64",
		"scope": "source.lua"
	},
	"memory.setint64": {
		"body": "memory.setint64(${1:address},${2:qword},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setint64(uint address, double qword, [bool unprotect=false])\n",
		"prefix": "memory.setint64",
		"scope": "source.lua"
	},
	"memory.getuint8": {
		"body": "memory.getuint8(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getuint8(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint8",
		"scope": "source.lua"
	},
	"memory.setuint8": {
		"body": "memory.setuint8(${1:address},${2:byte},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setuint8(uint address, int byte, [bool unprotect=false])\n",
		"prefix": "memory.setuint8",
		"scope": "source.lua"
	},
	"memory.getuint16": {
		"body": "memory.getuint16(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getuint16(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint16",
		"scope": "source.lua"
	},
	"memory.setuint16": {
		"body": "memory.setuint16(${1:address},${2:word},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setuint16(uint address, int word, [bool unprotect=false])\n",
		"prefix": "memory.setuint16",
		"scope": "source.lua"
	},
	"memory.getuint32": {
		"body": "memory.getuint32(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nint value = memory.getuint32(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint32",
		"scope": "source.lua"
	},
	"memory.setuint32": {
		"body": "memory.setuint32(${1:address},${2:dword},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setuint32(uint address, int dword, [bool unprotect=false])\n",
		"prefix": "memory.setuint32",
		"scope": "source.lua"
	},
	"memory.getuint64": {
		"body": "memory.getuint64(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\ndouble value = memory.getuint64(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint64",
		"scope": "source.lua"
	},
	"memory.setuint64": {
		"body": "memory.setuint64(${1:address},${2:qword},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setuint64(uint address, double qword, [bool unprotect=false])\n",
		"prefix": "memory.setuint64",
		"scope": "source.lua"
	},
	"memory.getfloat": {
		"body": "memory.getfloat(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\nfloat value = memory.getfloat(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getfloat",
		"scope": "source.lua"
	},
	"memory.setfloat": {
		"body": "memory.setfloat(${1:address},${2:value},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setfloat(uint address, float value, [bool unprotect=false])\n",
		"prefix": "memory.setfloat",
		"scope": "source.lua"
	},
	"memory.getdouble": {
		"body": "memory.getdouble(${1:address},${2:unprotect=false]})",
		"description": "GTA SA\ndouble value = memory.getdouble(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getdouble",
		"scope": "source.lua"
	},
	"memory.setdouble": {
		"body": "memory.setdouble(${1:address},${2:value},${3:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.setdouble(uint address, double value, [bool unprotect=false])\n",
		"prefix": "memory.setdouble",
		"scope": "source.lua"
	},
	"memory.unprotect": {
		"body": "memory.unprotect(${1:address},${2:size})",
		"description": "GTA SA\nint oldProtection = memory.unprotect(uint address, uint size)\n",
		"prefix": "memory.unprotect",
		"scope": "source.lua"
	},
	"memory.protect": {
		"body": "memory.protect(${1:address},${2:size},${3:newProtection})",
		"description": "GTA SA\nint oldProtection = memory.protect(uint address, uint size, int newProtection)\n",
		"prefix": "memory.protect",
		"scope": "source.lua"
	},
	"memory.copy": {
		"body": "memory.copy(${1:destAddress},${2:srcAddress},${3:size},${4:unprotect=false]})",
		"description": "GTA SA\nmemory.copy(uint destAddress, uint srcAddress, uint size, [bool unprotect=false])\n",
		"prefix": "memory.copy",
		"scope": "source.lua"
	},
	"memory.compare": {
		"body": "memory.compare(${1:address1},${2:address2},${3:size},${4:unprotect=false]})",
		"description": "GTA SA\nbool result = memory.compare(uint address1, uint address2, uint size, [bool unprotect=false])\n",
		"prefix": "memory.compare",
		"scope": "source.lua"
	},
	"memory.tostring": {
		"body": "memory.tostring(${1:address},${2:size]},${3:unprotect=false]})",
		"description": "GTA SA\nstring str = memory.tostring(uint address, [uint size], [bool unprotect=false])\n",
		"prefix": "memory.tostring",
		"scope": "source.lua"
	},
	"memory.tohex": {
		"body": "memory.tohex(${1:address},${2:size},${3:unprotect=false]})",
		"description": "GTA SA\nstring hexstr = memory.tohex(uint address, uint size, [bool unprotect=false])\n",
		"prefix": "memory.tohex",
		"scope": "source.lua"
	},
	"memory.hex2bin": {
		"body": "memory.hex2bin(${1:hex},${2:dstAddress]},${3:size]})",
		"description": "GTA SA\nstring bin = memory.hex2bin(string hex, [uint dstAddress], [uint size])\n",
		"prefix": "memory.hex2bin",
		"scope": "source.lua"
	},
	"memory.fill": {
		"body": "memory.fill(${1:address},${2:value},${3:size},${4:unprotect=false]})",
		"description": "GTA SA\nmemory.fill(uint address, int value, uint size, [bool unprotect=false])\n",
		"prefix": "memory.fill",
		"scope": "source.lua"
	},
	"memory.strptr": {
		"body": "memory.strptr(${1:str})",
		"description": "GTA SA\nuint address = memory.strptr(string str)\n",
		"prefix": "memory.strptr",
		"scope": "source.lua"
	},
	"lua_thread.create": {
		"body": "lua_thread.create(${1:func},${2:})",
		"description": "GTA SA\nLuaThread thread = lua_thread.create(function func, ...)\n",
		"prefix": "lua_thread.create",
		"scope": "source.lua"
	},
	"lua_thread.create_suspended": {
		"body": "lua_thread.create_suspended(${1:func})",
		"description": "GTA SA\nLuaThread thread = lua_thread.create_suspended(function func)\n",
		"prefix": "lua_thread.create_suspended",
		"scope": "source.lua"
	},
	"main": {
		"body": "main()",
		"description": "GTA SA\nmain()\n",
		"prefix": "main",
		"scope": "source.lua"
	},
	"onExitScript": {
		"body": "onExitScript(${1:quitGame})",
		"description": "GTA SA\nonExitScript(bool quitGame)\n",
		"prefix": "onExitScript",
		"scope": "source.lua"
	},
	"onScriptMessage": {
		"body": "onScriptMessage(${1:msg},${2:script})",
		"description": "GTA SA\nonScriptMessage(string msg, LuaScript script)\n",
		"prefix": "onScriptMessage",
		"scope": "source.lua"
	},
	"onSystemMessage": {
		"body": "onSystemMessage(${1:msg},${2:type},${3:script})",
		"description": "GTA SA\nonSystemMessage(string msg, int type, LuaScript script)\n",
		"prefix": "onSystemMessage",
		"scope": "source.lua"
	},
	"onQuitGame": {
		"body": "onQuitGame()",
		"description": "GTA SA\nonQuitGame()\n",
		"prefix": "onQuitGame",
		"scope": "source.lua"
	},
	"onSystemInitialized": {
		"body": "onSystemInitialized()",
		"description": "GTA SA\nonSystemInitialized()\n",
		"prefix": "onSystemInitialized",
		"scope": "source.lua"
	},
	"onScriptLoad": {
		"body": "onScriptLoad(${1:script})",
		"description": "GTA SA\nonScriptLoad(LuaScript script)\n",
		"prefix": "onScriptLoad",
		"scope": "source.lua"
	},
	"onScriptTerminate": {
		"body": "onScriptTerminate(${1:script},${2:quitGame})",
		"description": "GTA SA\nonScriptTerminate(LuaScript script, bool quitGame)\n",
		"prefix": "onScriptTerminate",
		"scope": "source.lua"
	},
	"onReceiveRpc": {
		"body": "onReceiveRpc(${1:id},${2:bitStream})",
		"description": "GTA SA\nbool process, int id, Bitstream bitStream = onReceiveRpc(int id, Bitstream bitStream)\n",
		"prefix": "onReceiveRpc",
		"scope": "source.lua"
	},
	"onReceivePacket": {
		"body": "onReceivePacket(${1:id},${2:bitStream})",
		"description": "GTA SA\nbool process, int id, Bitstream bitStream = onReceivePacket(int id, Bitstream bitStream)\n",
		"prefix": "onReceivePacket",
		"scope": "source.lua"
	},
	"onSendRpc": {
		"body": "onSendRpc(${1:id},${2:bitStream},${3:priority},${4:reliability},${5:orderingChannel},${6:shiftTs})",
		"description": "GTA SA\nbool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs = onSendRpc(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs)\n",
		"prefix": "onSendRpc",
		"scope": "source.lua"
	},
	"onSendPacket": {
		"body": "onSendPacket(${1:id},${2:bitStream},${3:priority},${4:reliability},${5:orderingChannel})",
		"description": "GTA SA\nbool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel = onSendPacket(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel)\n",
		"prefix": "onSendPacket",
		"scope": "source.lua"
	},
	"onWindowMessage": {
		"body": "onWindowMessage(${1:msg},${2:wparam},${3:lparam})",
		"description": "GTA SA\nonWindowMessage(uint msg, uint wparam, int lparam)\n",
		"prefix": "onWindowMessage",
		"scope": "source.lua"
	},
	"onStartNewGame": {
		"body": "onStartNewGame(${1:missionPackNumber})",
		"description": "GTA SA\nonStartNewGame(int missionPackNumber)\n",
		"prefix": "onStartNewGame",
		"scope": "source.lua"
	},
	"onSaveGame": {
		"body": "onSaveGame(${1:saveData})",
		"description": "GTA SA\ntable newSaveData = onSaveGame(table saveData)\n",
		"prefix": "onSaveGame",
		"scope": "source.lua"
	},
	"onLoadGame": {
		"body": "onLoadGame(${1:saveData})",
		"description": "GTA SA\nonLoadGame(table saveData)\n",
		"prefix": "onLoadGame",
		"scope": "source.lua"
	},
	"onD3DDeviceLost": {
		"body": "onD3DDeviceLost()",
		"description": "GTA SA\nonD3DDeviceLost()\n",
		"prefix": "onD3DDeviceLost",
		"scope": "source.lua"
	},
	"onD3DDeviceReset": {
		"body": "onD3DDeviceReset()",
		"description": "GTA SA\nonD3DDeviceReset()\n",
		"prefix": "onD3DDeviceReset",
		"scope": "source.lua"
	},
	"onD3DPresent": {
		"body": "onD3DPresent()",
		"description": "GTA SA\nonD3DPresent()\n",
		"prefix": "onD3DPresent",
		"scope": "source.lua"
	},

	
	
	
	
	"MoonAdditions": {
		"body": "local mad = require('MoonAdditions')",
		"description": "MoonAdditions\n",
		"prefix": "MoonAdditions",
		"scope": "source.lua"
	},
	"model.AIRTRAIN_VLO": {
		"body": "320",
		"description": "GTA SA #Models\nModel id 320\n",
		"prefix": "model.AIRTRAIN_VLO",
		"scope": "source.lua"
	},
	"model.GUN_DILDO1": {
		"body": "321",
		"description": "GTA SA #Models\nModel id 321\n",
		"prefix": "model.GUN_DILDO1",
		"scope": "source.lua"
	},
	"model.GUN_DILDO2": {
		"body": "322",
		"description": "GTA SA #Models\nModel id 322\n",
		"prefix": "model.GUN_DILDO2",
		"scope": "source.lua"
	},
	"model.GUN_VIBE1": {
		"body": "323",
		"description": "GTA SA #Models\nModel id 323\n",
		"prefix": "model.GUN_VIBE1",
		"scope": "source.lua"
	},
	"model.GUN_VIBE2": {
		"body": "324",
		"description": "GTA SA #Models\nModel id 324\n",
		"prefix": "model.GUN_VIBE2",
		"scope": "source.lua"
	},
	"model.FLOWERA": {
		"body": "325",
		"description": "GTA SA #Models\nModel id 325\n",
		"prefix": "model.FLOWERA",
		"scope": "source.lua"
	},
	"model.GUN_CANE": {
		"body": "326",
		"description": "GTA SA #Models\nModel id 326\n",
		"prefix": "model.GUN_CANE",
		"scope": "source.lua"
	},
	"model.GUN_BOXWEE": {
		"body": "327",
		"description": "GTA SA #Models\nModel id 327\n",
		"prefix": "model.GUN_BOXWEE",
		"scope": "source.lua"
	},
	"model.GUN_BOXBIG": {
		"body": "328",
		"description": "GTA SA #Models\nModel id 328\n",
		"prefix": "model.GUN_BOXBIG",
		"scope": "source.lua"
	},
	"model.CELLPHONE": {
		"body": "330",
		"description": "GTA SA #Models\nModel id 330\n",
		"prefix": "model.CELLPHONE",
		"scope": "source.lua"
	},
	"model.BRASSKNUCKLE": {
		"body": "331",
		"description": "GTA SA #Models\nModel id 331\n",
		"prefix": "model.BRASSKNUCKLE",
		"scope": "source.lua"
	},
	"model.GOLFCLUB": {
		"body": "333",
		"description": "GTA SA #Models\nModel id 333\n",
		"prefix": "model.GOLFCLUB",
		"scope": "source.lua"
	},
	"model.NITESTICK": {
		"body": "334",
		"description": "GTA SA #Models\nModel id 334\n",
		"prefix": "model.NITESTICK",
		"scope": "source.lua"
	},
	"model.KNIFECUR": {
		"body": "335",
		"description": "GTA SA #Models\nModel id 335\n",
		"prefix": "model.KNIFECUR",
		"scope": "source.lua"
	},
	"model.BAT": {
		"body": "336",
		"description": "GTA SA #Models\nModel id 336\n",
		"prefix": "model.BAT",
		"scope": "source.lua"
	},
	"model.SHOVEL": {
		"body": "337",
		"description": "GTA SA #Models\nModel id 337\n",
		"prefix": "model.SHOVEL",
		"scope": "source.lua"
	},
	"model.POOLCUE": {
		"body": "338",
		"description": "GTA SA #Models\nModel id 338\n",
		"prefix": "model.POOLCUE",
		"scope": "source.lua"
	},
	"model.KATANA": {
		"body": "339",
		"description": "GTA SA #Models\nModel id 339\n",
		"prefix": "model.KATANA",
		"scope": "source.lua"
	},
	"model.CHNSAW": {
		"body": "341",
		"description": "GTA SA #Models\nModel id 341\n",
		"prefix": "model.CHNSAW",
		"scope": "source.lua"
	},
	"model.GRENADE": {
		"body": "342",
		"description": "GTA SA #Models\nModel id 342\n",
		"prefix": "model.GRENADE",
		"scope": "source.lua"
	},
	"model.TEARGAS": {
		"body": "343",
		"description": "GTA SA #Models\nModel id 343\n",
		"prefix": "model.TEARGAS",
		"scope": "source.lua"
	},
	"model.MOLOTOV": {
		"body": "344",
		"description": "GTA SA #Models\nModel id 344\n",
		"prefix": "model.MOLOTOV",
		"scope": "source.lua"
	},
	"model.MISSILE": {
		"body": "345",
		"description": "GTA SA #Models\nModel id 345\n",
		"prefix": "model.MISSILE",
		"scope": "source.lua"
	},
	"model.COLT45": {
		"body": "346",
		"description": "GTA SA #Models\nModel id 346\n",
		"prefix": "model.COLT45",
		"scope": "source.lua"
	},
	"model.SILENCED": {
		"body": "347",
		"description": "GTA SA #Models\nModel id 347\n",
		"prefix": "model.SILENCED",
		"scope": "source.lua"
	},
	"model.DESERT_EAGLE": {
		"body": "348",
		"description": "GTA SA #Models\nModel id 348\n",
		"prefix": "model.DESERT_EAGLE",
		"scope": "source.lua"
	},
	"model.CHROMEGUN": {
		"body": "349",
		"description": "GTA SA #Models\nModel id 349\n",
		"prefix": "model.CHROMEGUN",
		"scope": "source.lua"
	},
	"model.SAWNOFF": {
		"body": "350",
		"description": "GTA SA #Models\nModel id 350\n",
		"prefix": "model.SAWNOFF",
		"scope": "source.lua"
	},
	"model.SHOTGSPA": {
		"body": "351",
		"description": "GTA SA #Models\nModel id 351\n",
		"prefix": "model.SHOTGSPA",
		"scope": "source.lua"
	},
	"model.MICRO_UZI": {
		"body": "352",
		"description": "GTA SA #Models\nModel id 352\n",
		"prefix": "model.MICRO_UZI",
		"scope": "source.lua"
	},
	"model.MP5LNG": {
		"body": "353",
		"description": "GTA SA #Models\nModel id 353\n",
		"prefix": "model.MP5LNG",
		"scope": "source.lua"
	},
	"model.FLARE": {
		"body": "354",
		"description": "GTA SA #Models\nModel id 354\n",
		"prefix": "model.FLARE",
		"scope": "source.lua"
	},
	"model.AK47": {
		"body": "355",
		"description": "GTA SA #Models\nModel id 355\n",
		"prefix": "model.AK47",
		"scope": "source.lua"
	},
	"model.M4": {
		"body": "356",
		"description": "GTA SA #Models\nModel id 356\n",
		"prefix": "model.M4",
		"scope": "source.lua"
	},
	"model.COUNTRYRIFLE": {
		"body": "357",
		"description": "GTA SA #Models\nModel id 357\n",
		"prefix": "model.COUNTRYRIFLE",
		"scope": "source.lua"
	},
	"model.SNIPER": {
		"body": "358",
		"description": "GTA SA #Models\nModel id 358\n",
		"prefix": "model.SNIPER",
		"scope": "source.lua"
	},
	"model.ROCKETLA": {
		"body": "359",
		"description": "GTA SA #Models\nModel id 359\n",
		"prefix": "model.ROCKETLA",
		"scope": "source.lua"
	},
	"model.HEATSEEK": {
		"body": "360",
		"description": "GTA SA #Models\nModel id 360\n",
		"prefix": "model.HEATSEEK",
		"scope": "source.lua"
	},
	"model.FLAME": {
		"body": "361",
		"description": "GTA SA #Models\nModel id 361\n",
		"prefix": "model.FLAME",
		"scope": "source.lua"
	},
	"model.MINIGUN": {
		"body": "362",
		"description": "GTA SA #Models\nModel id 362\n",
		"prefix": "model.MINIGUN",
		"scope": "source.lua"
	},
	"model.SATCHEL": {
		"body": "363",
		"description": "GTA SA #Models\nModel id 363\n",
		"prefix": "model.SATCHEL",
		"scope": "source.lua"
	},
	"model.BOMB": {
		"body": "364",
		"description": "GTA SA #Models\nModel id 364\n",
		"prefix": "model.BOMB",
		"scope": "source.lua"
	},
	"model.SPRAYCAN": {
		"body": "365",
		"description": "GTA SA #Models\nModel id 365\n",
		"prefix": "model.SPRAYCAN",
		"scope": "source.lua"
	},
	"model.FIRE_EX": {
		"body": "366",
		"description": "GTA SA #Models\nModel id 366\n",
		"prefix": "model.FIRE_EX",
		"scope": "source.lua"
	},
	"model.CAMERA": {
		"body": "367",
		"description": "GTA SA #Models\nModel id 367\n",
		"prefix": "model.CAMERA",
		"scope": "source.lua"
	},
	"model.NVGOGGLES": {
		"body": "368",
		"description": "GTA SA #Models\nModel id 368\n",
		"prefix": "model.NVGOGGLES",
		"scope": "source.lua"
	},
	"model.IRGOGGLES": {
		"body": "369",
		"description": "GTA SA #Models\nModel id 369\n",
		"prefix": "model.IRGOGGLES",
		"scope": "source.lua"
	},
	"model.JETPACK": {
		"body": "370",
		"description": "GTA SA #Models\nModel id 370\n",
		"prefix": "model.JETPACK",
		"scope": "source.lua"
	},
	"model.GUN_PARA": {
		"body": "371",
		"description": "GTA SA #Models\nModel id 371\n",
		"prefix": "model.GUN_PARA",
		"scope": "source.lua"
	},
	"model.TEC9": {
		"body": "372",
		"description": "GTA SA #Models\nModel id 372\n",
		"prefix": "model.TEC9",
		"scope": "source.lua"
	},
	"model.ARMOUR": {
		"body": "373",
		"description": "GTA SA #Models\nModel id 373\n",
		"prefix": "model.ARMOUR",
		"scope": "source.lua"
	},
	"model.CSPLAY": {
		"body": "1",
		"description": "GTA SA #Models\nModel id 1\n",
		"prefix": "model.CSPLAY",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "384",
		"description": "GTA SA #Models\nModel id 384\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "385",
		"description": "GTA SA #Models\nModel id 385\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "386",
		"description": "GTA SA #Models\nModel id 386\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "387",
		"description": "GTA SA #Models\nModel id 387\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "388",
		"description": "GTA SA #Models\nModel id 388\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "389",
		"description": "GTA SA #Models\nModel id 389\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "390",
		"description": "GTA SA #Models\nModel id 390\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "391",
		"description": "GTA SA #Models\nModel id 391\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "392",
		"description": "GTA SA #Models\nModel id 392\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.CLOTHES01": {
		"body": "393",
		"description": "GTA SA #Models\nModel id 393\n",
		"prefix": "model.CLOTHES01",
		"scope": "source.lua"
	},
	"model.SHANDL": {
		"body": "394",
		"description": "GTA SA #Models\nModel id 394\n",
		"prefix": "model.SHANDL",
		"scope": "source.lua"
	},
	"model.SHANDR": {
		"body": "395",
		"description": "GTA SA #Models\nModel id 395\n",
		"prefix": "model.SHANDR",
		"scope": "source.lua"
	},
	"model.FHANDL": {
		"body": "396",
		"description": "GTA SA #Models\nModel id 396\n",
		"prefix": "model.FHANDL",
		"scope": "source.lua"
	},
	"model.FHANDR": {
		"body": "397",
		"description": "GTA SA #Models\nModel id 397\n",
		"prefix": "model.FHANDR",
		"scope": "source.lua"
	},
	"model.CUTOBJ01": {
		"body": "300",
		"description": "GTA SA #Models\nModel id 300\n",
		"prefix": "model.CUTOBJ01",
		"scope": "source.lua"
	},
	"model.CUTOBJ02": {
		"body": "301",
		"description": "GTA SA #Models\nModel id 301\n",
		"prefix": "model.CUTOBJ02",
		"scope": "source.lua"
	},
	"model.CUTOBJ03": {
		"body": "302",
		"description": "GTA SA #Models\nModel id 302\n",
		"prefix": "model.CUTOBJ03",
		"scope": "source.lua"
	},
	"model.CUTOBJ04": {
		"body": "303",
		"description": "GTA SA #Models\nModel id 303\n",
		"prefix": "model.CUTOBJ04",
		"scope": "source.lua"
	},
	"model.CUTOBJ05": {
		"body": "304",
		"description": "GTA SA #Models\nModel id 304\n",
		"prefix": "model.CUTOBJ05",
		"scope": "source.lua"
	},
	"model.CUTOBJ06": {
		"body": "305",
		"description": "GTA SA #Models\nModel id 305\n",
		"prefix": "model.CUTOBJ06",
		"scope": "source.lua"
	},
	"model.CUTOBJ07": {
		"body": "306",
		"description": "GTA SA #Models\nModel id 306\n",
		"prefix": "model.CUTOBJ07",
		"scope": "source.lua"
	},
	"model.CUTOBJ08": {
		"body": "307",
		"description": "GTA SA #Models\nModel id 307\n",
		"prefix": "model.CUTOBJ08",
		"scope": "source.lua"
	},
	"model.CUTOBJ09": {
		"body": "308",
		"description": "GTA SA #Models\nModel id 308\n",
		"prefix": "model.CUTOBJ09",
		"scope": "source.lua"
	},
	"model.CUTOBJ10": {
		"body": "309",
		"description": "GTA SA #Models\nModel id 309\n",
		"prefix": "model.CUTOBJ10",
		"scope": "source.lua"
	},
	"model.CUTOBJ11": {
		"body": "310",
		"description": "GTA SA #Models\nModel id 310\n",
		"prefix": "model.CUTOBJ11",
		"scope": "source.lua"
	},
	"model.CUTOBJ12": {
		"body": "311",
		"description": "GTA SA #Models\nModel id 311\n",
		"prefix": "model.CUTOBJ12",
		"scope": "source.lua"
	},
	"model.CUTOBJ13": {
		"body": "312",
		"description": "GTA SA #Models\nModel id 312\n",
		"prefix": "model.CUTOBJ13",
		"scope": "source.lua"
	},
	"model.CUTOBJ14": {
		"body": "313",
		"description": "GTA SA #Models\nModel id 313\n",
		"prefix": "model.CUTOBJ14",
		"scope": "source.lua"
	},
	"model.CUTOBJ15": {
		"body": "314",
		"description": "GTA SA #Models\nModel id 314\n",
		"prefix": "model.CUTOBJ15",
		"scope": "source.lua"
	},
	"model.CUTOBJ16": {
		"body": "315",
		"description": "GTA SA #Models\nModel id 315\n",
		"prefix": "model.CUTOBJ16",
		"scope": "source.lua"
	},
	"model.CUTOBJ17": {
		"body": "316",
		"description": "GTA SA #Models\nModel id 316\n",
		"prefix": "model.CUTOBJ17",
		"scope": "source.lua"
	},
	"model.CUTOBJ18": {
		"body": "317",
		"description": "GTA SA #Models\nModel id 317\n",
		"prefix": "model.CUTOBJ18",
		"scope": "source.lua"
	},
	"model.CUTOBJ19": {
		"body": "318",
		"description": "GTA SA #Models\nModel id 318\n",
		"prefix": "model.CUTOBJ19",
		"scope": "source.lua"
	},
	"model.CUTOBJ20": {
		"body": "319",
		"description": "GTA SA #Models\nModel id 319\n",
		"prefix": "model.CUTOBJ20",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.--vehicles.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.--vehicles.ide",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.LANDSTAL": {
		"body": "400",
		"description": "GTA SA #Models\nModel id 400\n",
		"prefix": "model.LANDSTAL",
		"scope": "source.lua"
	},
	"model.BRAVURA": {
		"body": "401",
		"description": "GTA SA #Models\nModel id 401\n",
		"prefix": "model.BRAVURA",
		"scope": "source.lua"
	},
	"model.BUFFALO": {
		"body": "402",
		"description": "GTA SA #Models\nModel id 402\n",
		"prefix": "model.BUFFALO",
		"scope": "source.lua"
	},
	"model.LINERUN": {
		"body": "403",
		"description": "GTA SA #Models\nModel id 403\n",
		"prefix": "model.LINERUN",
		"scope": "source.lua"
	},
	"model.PEREN": {
		"body": "404",
		"description": "GTA SA #Models\nModel id 404\n",
		"prefix": "model.PEREN",
		"scope": "source.lua"
	},
	"model.SENTINEL": {
		"body": "405",
		"description": "GTA SA #Models\nModel id 405\n",
		"prefix": "model.SENTINEL",
		"scope": "source.lua"
	},
	"model.DUMPER": {
		"body": "406",
		"description": "GTA SA #Models\nModel id 406\n",
		"prefix": "model.DUMPER",
		"scope": "source.lua"
	},
	"model.FIRETRUK": {
		"body": "407",
		"description": "GTA SA #Models\nModel id 407\n",
		"prefix": "model.FIRETRUK",
		"scope": "source.lua"
	},
	"model.TRASH": {
		"body": "408",
		"description": "GTA SA #Models\nModel id 408\n",
		"prefix": "model.TRASH",
		"scope": "source.lua"
	},
	"model.STRETCH": {
		"body": "409",
		"description": "GTA SA #Models\nModel id 409\n",
		"prefix": "model.STRETCH",
		"scope": "source.lua"
	},
	"model.MANANA": {
		"body": "410",
		"description": "GTA SA #Models\nModel id 410\n",
		"prefix": "model.MANANA",
		"scope": "source.lua"
	},
	"model.INFERNUS": {
		"body": "411",
		"description": "GTA SA #Models\nModel id 411\n",
		"prefix": "model.INFERNUS",
		"scope": "source.lua"
	},
	"model.VOODOO": {
		"body": "412",
		"description": "GTA SA #Models\nModel id 412\n",
		"prefix": "model.VOODOO",
		"scope": "source.lua"
	},
	"model.PONY": {
		"body": "413",
		"description": "GTA SA #Models\nModel id 413\n",
		"prefix": "model.PONY",
		"scope": "source.lua"
	},
	"model.MULE": {
		"body": "414",
		"description": "GTA SA #Models\nModel id 414\n",
		"prefix": "model.MULE",
		"scope": "source.lua"
	},
	"model.CHEETAH": {
		"body": "415",
		"description": "GTA SA #Models\nModel id 415\n",
		"prefix": "model.CHEETAH",
		"scope": "source.lua"
	},
	"model.AMBULAN": {
		"body": "416",
		"description": "GTA SA #Models\nModel id 416\n",
		"prefix": "model.AMBULAN",
		"scope": "source.lua"
	},
	"model.LEVIATHN": {
		"body": "417",
		"description": "GTA SA #Models\nModel id 417\n",
		"prefix": "model.LEVIATHN",
		"scope": "source.lua"
	},
	"model.MOONBEAM": {
		"body": "418",
		"description": "GTA SA #Models\nModel id 418\n",
		"prefix": "model.MOONBEAM",
		"scope": "source.lua"
	},
	"model.ESPERANT": {
		"body": "419",
		"description": "GTA SA #Models\nModel id 419\n",
		"prefix": "model.ESPERANT",
		"scope": "source.lua"
	},
	"model.TAXI": {
		"body": "420",
		"description": "GTA SA #Models\nModel id 420\n",
		"prefix": "model.TAXI",
		"scope": "source.lua"
	},
	"model.WASHING": {
		"body": "421",
		"description": "GTA SA #Models\nModel id 421\n",
		"prefix": "model.WASHING",
		"scope": "source.lua"
	},
	"model.BOBCAT": {
		"body": "422",
		"description": "GTA SA #Models\nModel id 422\n",
		"prefix": "model.BOBCAT",
		"scope": "source.lua"
	},
	"model.MRWHOOP": {
		"body": "423",
		"description": "GTA SA #Models\nModel id 423\n",
		"prefix": "model.MRWHOOP",
		"scope": "source.lua"
	},
	"model.BFINJECT": {
		"body": "424",
		"description": "GTA SA #Models\nModel id 424\n",
		"prefix": "model.BFINJECT",
		"scope": "source.lua"
	},
	"model.HUNTER": {
		"body": "425",
		"description": "GTA SA #Models\nModel id 425\n",
		"prefix": "model.HUNTER",
		"scope": "source.lua"
	},
	"model.PREMIER": {
		"body": "426",
		"description": "GTA SA #Models\nModel id 426\n",
		"prefix": "model.PREMIER",
		"scope": "source.lua"
	},
	"model.ENFORCER": {
		"body": "427",
		"description": "GTA SA #Models\nModel id 427\n",
		"prefix": "model.ENFORCER",
		"scope": "source.lua"
	},
	"model.SECURICA": {
		"body": "428",
		"description": "GTA SA #Models\nModel id 428\n",
		"prefix": "model.SECURICA",
		"scope": "source.lua"
	},
	"model.BANSHEE": {
		"body": "429",
		"description": "GTA SA #Models\nModel id 429\n",
		"prefix": "model.BANSHEE",
		"scope": "source.lua"
	},
	"model.PREDATOR": {
		"body": "430",
		"description": "GTA SA #Models\nModel id 430\n",
		"prefix": "model.PREDATOR",
		"scope": "source.lua"
	},
	"model.BUS": {
		"body": "431",
		"description": "GTA SA #Models\nModel id 431\n",
		"prefix": "model.BUS",
		"scope": "source.lua"
	},
	"model.RHINO": {
		"body": "432",
		"description": "GTA SA #Models\nModel id 432\n",
		"prefix": "model.RHINO",
		"scope": "source.lua"
	},
	"model.BARRACKS": {
		"body": "433",
		"description": "GTA SA #Models\nModel id 433\n",
		"prefix": "model.BARRACKS",
		"scope": "source.lua"
	},
	"model.HOTKNIFE": {
		"body": "434",
		"description": "GTA SA #Models\nModel id 434\n",
		"prefix": "model.HOTKNIFE",
		"scope": "source.lua"
	},
	"model.ARTICT1": {
		"body": "435",
		"description": "GTA SA #Models\nModel id 435\n",
		"prefix": "model.ARTICT1",
		"scope": "source.lua"
	},
	"model.PREVION": {
		"body": "436",
		"description": "GTA SA #Models\nModel id 436\n",
		"prefix": "model.PREVION",
		"scope": "source.lua"
	},
	"model.COACH": {
		"body": "437",
		"description": "GTA SA #Models\nModel id 437\n",
		"prefix": "model.COACH",
		"scope": "source.lua"
	},
	"model.CABBIE": {
		"body": "438",
		"description": "GTA SA #Models\nModel id 438\n",
		"prefix": "model.CABBIE",
		"scope": "source.lua"
	},
	"model.STALLION": {
		"body": "439",
		"description": "GTA SA #Models\nModel id 439\n",
		"prefix": "model.STALLION",
		"scope": "source.lua"
	},
	"model.RUMPO": {
		"body": "440",
		"description": "GTA SA #Models\nModel id 440\n",
		"prefix": "model.RUMPO",
		"scope": "source.lua"
	},
	"model.RCBANDIT": {
		"body": "441",
		"description": "GTA SA #Models\nModel id 441\n",
		"prefix": "model.RCBANDIT",
		"scope": "source.lua"
	},
	"model.ROMERO": {
		"body": "442",
		"description": "GTA SA #Models\nModel id 442\n",
		"prefix": "model.ROMERO",
		"scope": "source.lua"
	},
	"model.PACKER": {
		"body": "443",
		"description": "GTA SA #Models\nModel id 443\n",
		"prefix": "model.PACKER",
		"scope": "source.lua"
	},
	"model.MONSTER": {
		"body": "444",
		"description": "GTA SA #Models\nModel id 444\n",
		"prefix": "model.MONSTER",
		"scope": "source.lua"
	},
	"model.ADMIRAL": {
		"body": "445",
		"description": "GTA SA #Models\nModel id 445\n",
		"prefix": "model.ADMIRAL",
		"scope": "source.lua"
	},
	"model.SQUALO": {
		"body": "446",
		"description": "GTA SA #Models\nModel id 446\n",
		"prefix": "model.SQUALO",
		"scope": "source.lua"
	},
	"model.SEASPAR": {
		"body": "447",
		"description": "GTA SA #Models\nModel id 447\n",
		"prefix": "model.SEASPAR",
		"scope": "source.lua"
	},
	"model.PIZZABOY": {
		"body": "448",
		"description": "GTA SA #Models\nModel id 448\n",
		"prefix": "model.PIZZABOY",
		"scope": "source.lua"
	},
	"model.TRAM": {
		"body": "449",
		"description": "GTA SA #Models\nModel id 449\n",
		"prefix": "model.TRAM",
		"scope": "source.lua"
	},
	"model.ARTICT2": {
		"body": "450",
		"description": "GTA SA #Models\nModel id 450\n",
		"prefix": "model.ARTICT2",
		"scope": "source.lua"
	},
	"model.TURISMO": {
		"body": "451",
		"description": "GTA SA #Models\nModel id 451\n",
		"prefix": "model.TURISMO",
		"scope": "source.lua"
	},
	"model.SPEEDER": {
		"body": "452",
		"description": "GTA SA #Models\nModel id 452\n",
		"prefix": "model.SPEEDER",
		"scope": "source.lua"
	},
	"model.REEFER": {
		"body": "453",
		"description": "GTA SA #Models\nModel id 453\n",
		"prefix": "model.REEFER",
		"scope": "source.lua"
	},
	"model.TROPIC": {
		"body": "454",
		"description": "GTA SA #Models\nModel id 454\n",
		"prefix": "model.TROPIC",
		"scope": "source.lua"
	},
	"model.FLATBED": {
		"body": "455",
		"description": "GTA SA #Models\nModel id 455\n",
		"prefix": "model.FLATBED",
		"scope": "source.lua"
	},
	"model.YANKEE": {
		"body": "456",
		"description": "GTA SA #Models\nModel id 456\n",
		"prefix": "model.YANKEE",
		"scope": "source.lua"
	},
	"model.CADDY": {
		"body": "457",
		"description": "GTA SA #Models\nModel id 457\n",
		"prefix": "model.CADDY",
		"scope": "source.lua"
	},
	"model.SOLAIR": {
		"body": "458",
		"description": "GTA SA #Models\nModel id 458\n",
		"prefix": "model.SOLAIR",
		"scope": "source.lua"
	},
	"model.TOPFUN": {
		"body": "459",
		"description": "GTA SA #Models\nModel id 459\n",
		"prefix": "model.TOPFUN",
		"scope": "source.lua"
	},
	"model.SKIMMER": {
		"body": "460",
		"description": "GTA SA #Models\nModel id 460\n",
		"prefix": "model.SKIMMER",
		"scope": "source.lua"
	},
	"model.PCJ600": {
		"body": "461",
		"description": "GTA SA #Models\nModel id 461\n",
		"prefix": "model.PCJ600",
		"scope": "source.lua"
	},
	"model.FAGGIO": {
		"body": "462",
		"description": "GTA SA #Models\nModel id 462\n",
		"prefix": "model.FAGGIO",
		"scope": "source.lua"
	},
	"model.FREEWAY": {
		"body": "463",
		"description": "GTA SA #Models\nModel id 463\n",
		"prefix": "model.FREEWAY",
		"scope": "source.lua"
	},
	"model.RCBARON": {
		"body": "464",
		"description": "GTA SA #Models\nModel id 464\n",
		"prefix": "model.RCBARON",
		"scope": "source.lua"
	},
	"model.RCRAIDER": {
		"body": "465",
		"description": "GTA SA #Models\nModel id 465\n",
		"prefix": "model.RCRAIDER",
		"scope": "source.lua"
	},
	"model.GLENDALE": {
		"body": "466",
		"description": "GTA SA #Models\nModel id 466\n",
		"prefix": "model.GLENDALE",
		"scope": "source.lua"
	},
	"model.OCEANIC": {
		"body": "467",
		"description": "GTA SA #Models\nModel id 467\n",
		"prefix": "model.OCEANIC",
		"scope": "source.lua"
	},
	"model.SANCHEZ": {
		"body": "468",
		"description": "GTA SA #Models\nModel id 468\n",
		"prefix": "model.SANCHEZ",
		"scope": "source.lua"
	},
	"model.SPARROW": {
		"body": "469",
		"description": "GTA SA #Models\nModel id 469\n",
		"prefix": "model.SPARROW",
		"scope": "source.lua"
	},
	"model.PATRIOT": {
		"body": "470",
		"description": "GTA SA #Models\nModel id 470\n",
		"prefix": "model.PATRIOT",
		"scope": "source.lua"
	},
	"model.QUAD": {
		"body": "471",
		"description": "GTA SA #Models\nModel id 471\n",
		"prefix": "model.QUAD",
		"scope": "source.lua"
	},
	"model.COASTG": {
		"body": "472",
		"description": "GTA SA #Models\nModel id 472\n",
		"prefix": "model.COASTG",
		"scope": "source.lua"
	},
	"model.DINGHY": {
		"body": "473",
		"description": "GTA SA #Models\nModel id 473\n",
		"prefix": "model.DINGHY",
		"scope": "source.lua"
	},
	"model.HERMES": {
		"body": "474",
		"description": "GTA SA #Models\nModel id 474\n",
		"prefix": "model.HERMES",
		"scope": "source.lua"
	},
	"model.SABRE": {
		"body": "475",
		"description": "GTA SA #Models\nModel id 475\n",
		"prefix": "model.SABRE",
		"scope": "source.lua"
	},
	"model.RUSTLER": {
		"body": "476",
		"description": "GTA SA #Models\nModel id 476\n",
		"prefix": "model.RUSTLER",
		"scope": "source.lua"
	},
	"model.ZR350": {
		"body": "477",
		"description": "GTA SA #Models\nModel id 477\n",
		"prefix": "model.ZR350",
		"scope": "source.lua"
	},
	"model.WALTON": {
		"body": "478",
		"description": "GTA SA #Models\nModel id 478\n",
		"prefix": "model.WALTON",
		"scope": "source.lua"
	},
	"model.REGINA": {
		"body": "479",
		"description": "GTA SA #Models\nModel id 479\n",
		"prefix": "model.REGINA",
		"scope": "source.lua"
	},
	"model.COMET": {
		"body": "480",
		"description": "GTA SA #Models\nModel id 480\n",
		"prefix": "model.COMET",
		"scope": "source.lua"
	},
	"model.BMX": {
		"body": "481",
		"description": "GTA SA #Models\nModel id 481\n",
		"prefix": "model.BMX",
		"scope": "source.lua"
	},
	"model.BURRITO": {
		"body": "482",
		"description": "GTA SA #Models\nModel id 482\n",
		"prefix": "model.BURRITO",
		"scope": "source.lua"
	},
	"model.CAMPER": {
		"body": "483",
		"description": "GTA SA #Models\nModel id 483\n",
		"prefix": "model.CAMPER",
		"scope": "source.lua"
	},
	"model.MARQUIS": {
		"body": "484",
		"description": "GTA SA #Models\nModel id 484\n",
		"prefix": "model.MARQUIS",
		"scope": "source.lua"
	},
	"model.BAGGAGE": {
		"body": "485",
		"description": "GTA SA #Models\nModel id 485\n",
		"prefix": "model.BAGGAGE",
		"scope": "source.lua"
	},
	"model.DOZER": {
		"body": "486",
		"description": "GTA SA #Models\nModel id 486\n",
		"prefix": "model.DOZER",
		"scope": "source.lua"
	},
	"model.MAVERICK": {
		"body": "487",
		"description": "GTA SA #Models\nModel id 487\n",
		"prefix": "model.MAVERICK",
		"scope": "source.lua"
	},
	"model.VCNMAV": {
		"body": "488",
		"description": "GTA SA #Models\nModel id 488\n",
		"prefix": "model.VCNMAV",
		"scope": "source.lua"
	},
	"model.RANCHER": {
		"body": "489",
		"description": "GTA SA #Models\nModel id 489\n",
		"prefix": "model.RANCHER",
		"scope": "source.lua"
	},
	"model.FBIRANCH": {
		"body": "490",
		"description": "GTA SA #Models\nModel id 490\n",
		"prefix": "model.FBIRANCH",
		"scope": "source.lua"
	},
	"model.VIRGO": {
		"body": "491",
		"description": "GTA SA #Models\nModel id 491\n",
		"prefix": "model.VIRGO",
		"scope": "source.lua"
	},
	"model.GREENWOO": {
		"body": "492",
		"description": "GTA SA #Models\nModel id 492\n",
		"prefix": "model.GREENWOO",
		"scope": "source.lua"
	},
	"model.JETMAX": {
		"body": "493",
		"description": "GTA SA #Models\nModel id 493\n",
		"prefix": "model.JETMAX",
		"scope": "source.lua"
	},
	"model.HOTRING": {
		"body": "494",
		"description": "GTA SA #Models\nModel id 494\n",
		"prefix": "model.HOTRING",
		"scope": "source.lua"
	},
	"model.SANDKING": {
		"body": "495",
		"description": "GTA SA #Models\nModel id 495\n",
		"prefix": "model.SANDKING",
		"scope": "source.lua"
	},
	"model.BLISTAC": {
		"body": "496",
		"description": "GTA SA #Models\nModel id 496\n",
		"prefix": "model.BLISTAC",
		"scope": "source.lua"
	},
	"model.POLMAV": {
		"body": "497",
		"description": "GTA SA #Models\nModel id 497\n",
		"prefix": "model.POLMAV",
		"scope": "source.lua"
	},
	"model.BOXVILLE": {
		"body": "498",
		"description": "GTA SA #Models\nModel id 498\n",
		"prefix": "model.BOXVILLE",
		"scope": "source.lua"
	},
	"model.BENSON": {
		"body": "499",
		"description": "GTA SA #Models\nModel id 499\n",
		"prefix": "model.BENSON",
		"scope": "source.lua"
	},
	"model.MESA": {
		"body": "500",
		"description": "GTA SA #Models\nModel id 500\n",
		"prefix": "model.MESA",
		"scope": "source.lua"
	},
	"model.RCGOBLIN": {
		"body": "501",
		"description": "GTA SA #Models\nModel id 501\n",
		"prefix": "model.RCGOBLIN",
		"scope": "source.lua"
	},
	"model.HOTRINA": {
		"body": "502",
		"description": "GTA SA #Models\nModel id 502\n",
		"prefix": "model.HOTRINA",
		"scope": "source.lua"
	},
	"model.HOTRINB": {
		"body": "503",
		"description": "GTA SA #Models\nModel id 503\n",
		"prefix": "model.HOTRINB",
		"scope": "source.lua"
	},
	"model.BLOODRA": {
		"body": "504",
		"description": "GTA SA #Models\nModel id 504\n",
		"prefix": "model.BLOODRA",
		"scope": "source.lua"
	},
	"model.RNCHLURE": {
		"body": "505",
		"description": "GTA SA #Models\nModel id 505\n",
		"prefix": "model.RNCHLURE",
		"scope": "source.lua"
	},
	"model.SUPERGT": {
		"body": "506",
		"description": "GTA SA #Models\nModel id 506\n",
		"prefix": "model.SUPERGT",
		"scope": "source.lua"
	},
	"model.ELEGANT": {
		"body": "507",
		"description": "GTA SA #Models\nModel id 507\n",
		"prefix": "model.ELEGANT",
		"scope": "source.lua"
	},
	"model.JOURNEY": {
		"body": "508",
		"description": "GTA SA #Models\nModel id 508\n",
		"prefix": "model.JOURNEY",
		"scope": "source.lua"
	},
	"model.BIKE": {
		"body": "509",
		"description": "GTA SA #Models\nModel id 509\n",
		"prefix": "model.BIKE",
		"scope": "source.lua"
	},
	"model.MTBIKE": {
		"body": "510",
		"description": "GTA SA #Models\nModel id 510\n",
		"prefix": "model.MTBIKE",
		"scope": "source.lua"
	},
	"model.BEAGLE": {
		"body": "511",
		"description": "GTA SA #Models\nModel id 511\n",
		"prefix": "model.BEAGLE",
		"scope": "source.lua"
	},
	"model.CROPDUST": {
		"body": "512",
		"description": "GTA SA #Models\nModel id 512\n",
		"prefix": "model.CROPDUST",
		"scope": "source.lua"
	},
	"model.STUNT": {
		"body": "513",
		"description": "GTA SA #Models\nModel id 513\n",
		"prefix": "model.STUNT",
		"scope": "source.lua"
	},
	"model.PETRO": {
		"body": "514",
		"description": "GTA SA #Models\nModel id 514\n",
		"prefix": "model.PETRO",
		"scope": "source.lua"
	},
	"model.RDTRAIN": {
		"body": "515",
		"description": "GTA SA #Models\nModel id 515\n",
		"prefix": "model.RDTRAIN",
		"scope": "source.lua"
	},
	"model.NEBULA": {
		"body": "516",
		"description": "GTA SA #Models\nModel id 516\n",
		"prefix": "model.NEBULA",
		"scope": "source.lua"
	},
	"model.MAJESTIC": {
		"body": "517",
		"description": "GTA SA #Models\nModel id 517\n",
		"prefix": "model.MAJESTIC",
		"scope": "source.lua"
	},
	"model.BUCCANEE": {
		"body": "518",
		"description": "GTA SA #Models\nModel id 518\n",
		"prefix": "model.BUCCANEE",
		"scope": "source.lua"
	},
	"model.SHAMAL": {
		"body": "519",
		"description": "GTA SA #Models\nModel id 519\n",
		"prefix": "model.SHAMAL",
		"scope": "source.lua"
	},
	"model.HYDRA": {
		"body": "520",
		"description": "GTA SA #Models\nModel id 520\n",
		"prefix": "model.HYDRA",
		"scope": "source.lua"
	},
	"model.FCR900": {
		"body": "521",
		"description": "GTA SA #Models\nModel id 521\n",
		"prefix": "model.FCR900",
		"scope": "source.lua"
	},
	"model.NRG500": {
		"body": "522",
		"description": "GTA SA #Models\nModel id 522\n",
		"prefix": "model.NRG500",
		"scope": "source.lua"
	},
	"model.COPBIKE": {
		"body": "523",
		"description": "GTA SA #Models\nModel id 523\n",
		"prefix": "model.COPBIKE",
		"scope": "source.lua"
	},
	"model.CEMENT": {
		"body": "524",
		"description": "GTA SA #Models\nModel id 524\n",
		"prefix": "model.CEMENT",
		"scope": "source.lua"
	},
	"model.TOWTRUCK": {
		"body": "525",
		"description": "GTA SA #Models\nModel id 525\n",
		"prefix": "model.TOWTRUCK",
		"scope": "source.lua"
	},
	"model.FORTUNE": {
		"body": "526",
		"description": "GTA SA #Models\nModel id 526\n",
		"prefix": "model.FORTUNE",
		"scope": "source.lua"
	},
	"model.CADRONA": {
		"body": "527",
		"description": "GTA SA #Models\nModel id 527\n",
		"prefix": "model.CADRONA",
		"scope": "source.lua"
	},
	"model.FBITRUCK": {
		"body": "528",
		"description": "GTA SA #Models\nModel id 528\n",
		"prefix": "model.FBITRUCK",
		"scope": "source.lua"
	},
	"model.WILLARD": {
		"body": "529",
		"description": "GTA SA #Models\nModel id 529\n",
		"prefix": "model.WILLARD",
		"scope": "source.lua"
	},
	"model.FORKLIFT": {
		"body": "530",
		"description": "GTA SA #Models\nModel id 530\n",
		"prefix": "model.FORKLIFT",
		"scope": "source.lua"
	},
	"model.TRACTOR": {
		"body": "531",
		"description": "GTA SA #Models\nModel id 531\n",
		"prefix": "model.TRACTOR",
		"scope": "source.lua"
	},
	"model.COMBINE": {
		"body": "532",
		"description": "GTA SA #Models\nModel id 532\n",
		"prefix": "model.COMBINE",
		"scope": "source.lua"
	},
	"model.FELTZER": {
		"body": "533",
		"description": "GTA SA #Models\nModel id 533\n",
		"prefix": "model.FELTZER",
		"scope": "source.lua"
	},
	"model.REMINGTN": {
		"body": "534",
		"description": "GTA SA #Models\nModel id 534\n",
		"prefix": "model.REMINGTN",
		"scope": "source.lua"
	},
	"model.SLAMVAN": {
		"body": "535",
		"description": "GTA SA #Models\nModel id 535\n",
		"prefix": "model.SLAMVAN",
		"scope": "source.lua"
	},
	"model.BLADE": {
		"body": "536",
		"description": "GTA SA #Models\nModel id 536\n",
		"prefix": "model.BLADE",
		"scope": "source.lua"
	},
	"model.FREIGHT": {
		"body": "537",
		"description": "GTA SA #Models\nModel id 537\n",
		"prefix": "model.FREIGHT",
		"scope": "source.lua"
	},
	"model.STREAK": {
		"body": "538",
		"description": "GTA SA #Models\nModel id 538\n",
		"prefix": "model.STREAK",
		"scope": "source.lua"
	},
	"model.VORTEX": {
		"body": "539",
		"description": "GTA SA #Models\nModel id 539\n",
		"prefix": "model.VORTEX",
		"scope": "source.lua"
	},
	"model.VINCENT": {
		"body": "540",
		"description": "GTA SA #Models\nModel id 540\n",
		"prefix": "model.VINCENT",
		"scope": "source.lua"
	},
	"model.BULLET": {
		"body": "541",
		"description": "GTA SA #Models\nModel id 541\n",
		"prefix": "model.BULLET",
		"scope": "source.lua"
	},
	"model.CLOVER": {
		"body": "542",
		"description": "GTA SA #Models\nModel id 542\n",
		"prefix": "model.CLOVER",
		"scope": "source.lua"
	},
	"model.SADLER": {
		"body": "543",
		"description": "GTA SA #Models\nModel id 543\n",
		"prefix": "model.SADLER",
		"scope": "source.lua"
	},
	"model.FIRELA": {
		"body": "544",
		"description": "GTA SA #Models\nModel id 544\n",
		"prefix": "model.FIRELA",
		"scope": "source.lua"
	},
	"model.HUSTLER": {
		"body": "545",
		"description": "GTA SA #Models\nModel id 545\n",
		"prefix": "model.HUSTLER",
		"scope": "source.lua"
	},
	"model.INTRUDER": {
		"body": "546",
		"description": "GTA SA #Models\nModel id 546\n",
		"prefix": "model.INTRUDER",
		"scope": "source.lua"
	},
	"model.PRIMO": {
		"body": "547",
		"description": "GTA SA #Models\nModel id 547\n",
		"prefix": "model.PRIMO",
		"scope": "source.lua"
	},
	"model.CARGOBOB": {
		"body": "548",
		"description": "GTA SA #Models\nModel id 548\n",
		"prefix": "model.CARGOBOB",
		"scope": "source.lua"
	},
	"model.TAMPA": {
		"body": "549",
		"description": "GTA SA #Models\nModel id 549\n",
		"prefix": "model.TAMPA",
		"scope": "source.lua"
	},
	"model.SUNRISE": {
		"body": "550",
		"description": "GTA SA #Models\nModel id 550\n",
		"prefix": "model.SUNRISE",
		"scope": "source.lua"
	},
	"model.MERIT": {
		"body": "551",
		"description": "GTA SA #Models\nModel id 551\n",
		"prefix": "model.MERIT",
		"scope": "source.lua"
	},
	"model.UTILITY": {
		"body": "552",
		"description": "GTA SA #Models\nModel id 552\n",
		"prefix": "model.UTILITY",
		"scope": "source.lua"
	},
	"model.NEVADA": {
		"body": "553",
		"description": "GTA SA #Models\nModel id 553\n",
		"prefix": "model.NEVADA",
		"scope": "source.lua"
	},
	"model.YOSEMITE": {
		"body": "554",
		"description": "GTA SA #Models\nModel id 554\n",
		"prefix": "model.YOSEMITE",
		"scope": "source.lua"
	},
	"model.WINDSOR": {
		"body": "555",
		"description": "GTA SA #Models\nModel id 555\n",
		"prefix": "model.WINDSOR",
		"scope": "source.lua"
	},
	"model.MONSTERA": {
		"body": "556",
		"description": "GTA SA #Models\nModel id 556\n",
		"prefix": "model.MONSTERA",
		"scope": "source.lua"
	},
	"model.MONSTERB": {
		"body": "557",
		"description": "GTA SA #Models\nModel id 557\n",
		"prefix": "model.MONSTERB",
		"scope": "source.lua"
	},
	"model.URANUS": {
		"body": "558",
		"description": "GTA SA #Models\nModel id 558\n",
		"prefix": "model.URANUS",
		"scope": "source.lua"
	},
	"model.JESTER": {
		"body": "559",
		"description": "GTA SA #Models\nModel id 559\n",
		"prefix": "model.JESTER",
		"scope": "source.lua"
	},
	"model.SULTAN": {
		"body": "560",
		"description": "GTA SA #Models\nModel id 560\n",
		"prefix": "model.SULTAN",
		"scope": "source.lua"
	},
	"model.STRATUM": {
		"body": "561",
		"description": "GTA SA #Models\nModel id 561\n",
		"prefix": "model.STRATUM",
		"scope": "source.lua"
	},
	"model.ELEGY": {
		"body": "562",
		"description": "GTA SA #Models\nModel id 562\n",
		"prefix": "model.ELEGY",
		"scope": "source.lua"
	},
	"model.RAINDANC": {
		"body": "563",
		"description": "GTA SA #Models\nModel id 563\n",
		"prefix": "model.RAINDANC",
		"scope": "source.lua"
	},
	"model.RCTIGER": {
		"body": "564",
		"description": "GTA SA #Models\nModel id 564\n",
		"prefix": "model.RCTIGER",
		"scope": "source.lua"
	},
	"model.FLASH": {
		"body": "565",
		"description": "GTA SA #Models\nModel id 565\n",
		"prefix": "model.FLASH",
		"scope": "source.lua"
	},
	"model.TAHOMA": {
		"body": "566",
		"description": "GTA SA #Models\nModel id 566\n",
		"prefix": "model.TAHOMA",
		"scope": "source.lua"
	},
	"model.SAVANNA": {
		"body": "567",
		"description": "GTA SA #Models\nModel id 567\n",
		"prefix": "model.SAVANNA",
		"scope": "source.lua"
	},
	"model.BANDITO": {
		"body": "568",
		"description": "GTA SA #Models\nModel id 568\n",
		"prefix": "model.BANDITO",
		"scope": "source.lua"
	},
	"model.FREIFLAT": {
		"body": "569",
		"description": "GTA SA #Models\nModel id 569\n",
		"prefix": "model.FREIFLAT",
		"scope": "source.lua"
	},
	"model.STREAKC": {
		"body": "570",
		"description": "GTA SA #Models\nModel id 570\n",
		"prefix": "model.STREAKC",
		"scope": "source.lua"
	},
	"model.KART": {
		"body": "571",
		"description": "GTA SA #Models\nModel id 571\n",
		"prefix": "model.KART",
		"scope": "source.lua"
	},
	"model.MOWER": {
		"body": "572",
		"description": "GTA SA #Models\nModel id 572\n",
		"prefix": "model.MOWER",
		"scope": "source.lua"
	},
	"model.DUNERIDE": {
		"body": "573",
		"description": "GTA SA #Models\nModel id 573\n",
		"prefix": "model.DUNERIDE",
		"scope": "source.lua"
	},
	"model.SWEEPER": {
		"body": "574",
		"description": "GTA SA #Models\nModel id 574\n",
		"prefix": "model.SWEEPER",
		"scope": "source.lua"
	},
	"model.BROADWAY": {
		"body": "575",
		"description": "GTA SA #Models\nModel id 575\n",
		"prefix": "model.BROADWAY",
		"scope": "source.lua"
	},
	"model.TORNADO": {
		"body": "576",
		"description": "GTA SA #Models\nModel id 576\n",
		"prefix": "model.TORNADO",
		"scope": "source.lua"
	},
	"model.AT400": {
		"body": "577",
		"description": "GTA SA #Models\nModel id 577\n",
		"prefix": "model.AT400",
		"scope": "source.lua"
	},
	"model.DFT30": {
		"body": "578",
		"description": "GTA SA #Models\nModel id 578\n",
		"prefix": "model.DFT30",
		"scope": "source.lua"
	},
	"model.HUNTLEY": {
		"body": "579",
		"description": "GTA SA #Models\nModel id 579\n",
		"prefix": "model.HUNTLEY",
		"scope": "source.lua"
	},
	"model.STAFFORD": {
		"body": "580",
		"description": "GTA SA #Models\nModel id 580\n",
		"prefix": "model.STAFFORD",
		"scope": "source.lua"
	},
	"model.BF400": {
		"body": "581",
		"description": "GTA SA #Models\nModel id 581\n",
		"prefix": "model.BF400",
		"scope": "source.lua"
	},
	"model.NEWSVAN": {
		"body": "582",
		"description": "GTA SA #Models\nModel id 582\n",
		"prefix": "model.NEWSVAN",
		"scope": "source.lua"
	},
	"model.TUG": {
		"body": "583",
		"description": "GTA SA #Models\nModel id 583\n",
		"prefix": "model.TUG",
		"scope": "source.lua"
	},
	"model.PETROTR": {
		"body": "584",
		"description": "GTA SA #Models\nModel id 584\n",
		"prefix": "model.PETROTR",
		"scope": "source.lua"
	},
	"model.EMPEROR": {
		"body": "585",
		"description": "GTA SA #Models\nModel id 585\n",
		"prefix": "model.EMPEROR",
		"scope": "source.lua"
	},
	"model.WAYFARER": {
		"body": "586",
		"description": "GTA SA #Models\nModel id 586\n",
		"prefix": "model.WAYFARER",
		"scope": "source.lua"
	},
	"model.EUROS": {
		"body": "587",
		"description": "GTA SA #Models\nModel id 587\n",
		"prefix": "model.EUROS",
		"scope": "source.lua"
	},
	"model.HOTDOG": {
		"body": "588",
		"description": "GTA SA #Models\nModel id 588\n",
		"prefix": "model.HOTDOG",
		"scope": "source.lua"
	},
	"model.CLUB": {
		"body": "589",
		"description": "GTA SA #Models\nModel id 589\n",
		"prefix": "model.CLUB",
		"scope": "source.lua"
	},
	"model.FREIBOX": {
		"body": "590",
		"description": "GTA SA #Models\nModel id 590\n",
		"prefix": "model.FREIBOX",
		"scope": "source.lua"
	},
	"model.ARTICT3": {
		"body": "591",
		"description": "GTA SA #Models\nModel id 591\n",
		"prefix": "model.ARTICT3",
		"scope": "source.lua"
	},
	"model.ANDROM": {
		"body": "592",
		"description": "GTA SA #Models\nModel id 592\n",
		"prefix": "model.ANDROM",
		"scope": "source.lua"
	},
	"model.DODO": {
		"body": "593",
		"description": "GTA SA #Models\nModel id 593\n",
		"prefix": "model.DODO",
		"scope": "source.lua"
	},
	"model.RCCAM": {
		"body": "594",
		"description": "GTA SA #Models\nModel id 594\n",
		"prefix": "model.RCCAM",
		"scope": "source.lua"
	},
	"model.LAUNCH": {
		"body": "595",
		"description": "GTA SA #Models\nModel id 595\n",
		"prefix": "model.LAUNCH",
		"scope": "source.lua"
	},
	"model.COPCARLA": {
		"body": "596",
		"description": "GTA SA #Models\nModel id 596\n",
		"prefix": "model.COPCARLA",
		"scope": "source.lua"
	},
	"model.COPCARSF": {
		"body": "597",
		"description": "GTA SA #Models\nModel id 597\n",
		"prefix": "model.COPCARSF",
		"scope": "source.lua"
	},
	"model.COPCARVG": {
		"body": "598",
		"description": "GTA SA #Models\nModel id 598\n",
		"prefix": "model.COPCARVG",
		"scope": "source.lua"
	},
	"model.COPCARRU": {
		"body": "599",
		"description": "GTA SA #Models\nModel id 599\n",
		"prefix": "model.COPCARRU",
		"scope": "source.lua"
	},
	"model.PICADOR": {
		"body": "600",
		"description": "GTA SA #Models\nModel id 600\n",
		"prefix": "model.PICADOR",
		"scope": "source.lua"
	},
	"model.SWATVAN": {
		"body": "601",
		"description": "GTA SA #Models\nModel id 601\n",
		"prefix": "model.SWATVAN",
		"scope": "source.lua"
	},
	"model.ALPHA": {
		"body": "602",
		"description": "GTA SA #Models\nModel id 602\n",
		"prefix": "model.ALPHA",
		"scope": "source.lua"
	},
	"model.PHOENIX": {
		"body": "603",
		"description": "GTA SA #Models\nModel id 603\n",
		"prefix": "model.PHOENIX",
		"scope": "source.lua"
	},
	"model.GLENSHIT": {
		"body": "604",
		"description": "GTA SA #Models\nModel id 604\n",
		"prefix": "model.GLENSHIT",
		"scope": "source.lua"
	},
	"model.SADLSHIT": {
		"body": "605",
		"description": "GTA SA #Models\nModel id 605\n",
		"prefix": "model.SADLSHIT",
		"scope": "source.lua"
	},
	"model.BAGBOXA": {
		"body": "606",
		"description": "GTA SA #Models\nModel id 606\n",
		"prefix": "model.BAGBOXA",
		"scope": "source.lua"
	},
	"model.BAGBOXB": {
		"body": "607",
		"description": "GTA SA #Models\nModel id 607\n",
		"prefix": "model.BAGBOXB",
		"scope": "source.lua"
	},
	"model.TUGSTAIR": {
		"body": "608",
		"description": "GTA SA #Models\nModel id 608\n",
		"prefix": "model.TUGSTAIR",
		"scope": "source.lua"
	},
	"model.BOXBURG": {
		"body": "609",
		"description": "GTA SA #Models\nModel id 609\n",
		"prefix": "model.BOXBURG",
		"scope": "source.lua"
	},
	"model.FARMTR1": {
		"body": "610",
		"description": "GTA SA #Models\nModel id 610\n",
		"prefix": "model.FARMTR1",
		"scope": "source.lua"
	},
	"model.UTILTR1": {
		"body": "611",
		"description": "GTA SA #Models\nModel id 611\n",
		"prefix": "model.UTILTR1",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.--peds.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.--peds.ide",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.NULL": {
		"body": "0",
		"description": "GTA SA #Models\nModel id 0\n",
		"prefix": "model.NULL",
		"scope": "source.lua"
	},
	"model.MALE01": {
		"body": "7",
		"description": "GTA SA #Models\nModel id 7\n",
		"prefix": "model.MALE01",
		"scope": "source.lua"
	},
	"model.BFORI": {
		"body": "9",
		"description": "GTA SA #Models\nModel id 9\n",
		"prefix": "model.BFORI",
		"scope": "source.lua"
	},
	"model.BFOST": {
		"body": "10",
		"description": "GTA SA #Models\nModel id 10\n",
		"prefix": "model.BFOST",
		"scope": "source.lua"
	},
	"model.VBFYCRP": {
		"body": "11",
		"description": "GTA SA #Models\nModel id 11\n",
		"prefix": "model.VBFYCRP",
		"scope": "source.lua"
	},
	"model.BFYRI": {
		"body": "12",
		"description": "GTA SA #Models\nModel id 12\n",
		"prefix": "model.BFYRI",
		"scope": "source.lua"
	},
	"model.BFYST": {
		"body": "13",
		"description": "GTA SA #Models\nModel id 13\n",
		"prefix": "model.BFYST",
		"scope": "source.lua"
	},
	"model.BMORI": {
		"body": "14",
		"description": "GTA SA #Models\nModel id 14\n",
		"prefix": "model.BMORI",
		"scope": "source.lua"
	},
	"model.BMOST": {
		"body": "15",
		"description": "GTA SA #Models\nModel id 15\n",
		"prefix": "model.BMOST",
		"scope": "source.lua"
	},
	"model.BMYAP": {
		"body": "16",
		"description": "GTA SA #Models\nModel id 16\n",
		"prefix": "model.BMYAP",
		"scope": "source.lua"
	},
	"model.BMYBU": {
		"body": "17",
		"description": "GTA SA #Models\nModel id 17\n",
		"prefix": "model.BMYBU",
		"scope": "source.lua"
	},
	"model.BMYBE": {
		"body": "18",
		"description": "GTA SA #Models\nModel id 18\n",
		"prefix": "model.BMYBE",
		"scope": "source.lua"
	},
	"model.BMYDJ": {
		"body": "19",
		"description": "GTA SA #Models\nModel id 19\n",
		"prefix": "model.BMYDJ",
		"scope": "source.lua"
	},
	"model.BMYRI": {
		"body": "20",
		"description": "GTA SA #Models\nModel id 20\n",
		"prefix": "model.BMYRI",
		"scope": "source.lua"
	},
	"model.BMYCR": {
		"body": "21",
		"description": "GTA SA #Models\nModel id 21\n",
		"prefix": "model.BMYCR",
		"scope": "source.lua"
	},
	"model.BMYST": {
		"body": "22",
		"description": "GTA SA #Models\nModel id 22\n",
		"prefix": "model.BMYST",
		"scope": "source.lua"
	},
	"model.WMYBMX": {
		"body": "23",
		"description": "GTA SA #Models\nModel id 23\n",
		"prefix": "model.WMYBMX",
		"scope": "source.lua"
	},
	"model.WBDYG1": {
		"body": "24",
		"description": "GTA SA #Models\nModel id 24\n",
		"prefix": "model.WBDYG1",
		"scope": "source.lua"
	},
	"model.WBDYG2": {
		"body": "25",
		"description": "GTA SA #Models\nModel id 25\n",
		"prefix": "model.WBDYG2",
		"scope": "source.lua"
	},
	"model.WMYBP": {
		"body": "26",
		"description": "GTA SA #Models\nModel id 26\n",
		"prefix": "model.WMYBP",
		"scope": "source.lua"
	},
	"model.WMYCON": {
		"body": "27",
		"description": "GTA SA #Models\nModel id 27\n",
		"prefix": "model.WMYCON",
		"scope": "source.lua"
	},
	"model.BMYDRUG": {
		"body": "28",
		"description": "GTA SA #Models\nModel id 28\n",
		"prefix": "model.BMYDRUG",
		"scope": "source.lua"
	},
	"model.WMYDRUG": {
		"body": "29",
		"description": "GTA SA #Models\nModel id 29\n",
		"prefix": "model.WMYDRUG",
		"scope": "source.lua"
	},
	"model.HMYDRUG": {
		"body": "30",
		"description": "GTA SA #Models\nModel id 30\n",
		"prefix": "model.HMYDRUG",
		"scope": "source.lua"
	},
	"model.DWFOLC": {
		"body": "31",
		"description": "GTA SA #Models\nModel id 31\n",
		"prefix": "model.DWFOLC",
		"scope": "source.lua"
	},
	"model.DWMOLC1": {
		"body": "32",
		"description": "GTA SA #Models\nModel id 32\n",
		"prefix": "model.DWMOLC1",
		"scope": "source.lua"
	},
	"model.DWMOLC2": {
		"body": "33",
		"description": "GTA SA #Models\nModel id 33\n",
		"prefix": "model.DWMOLC2",
		"scope": "source.lua"
	},
	"model.DWMYLC1": {
		"body": "34",
		"description": "GTA SA #Models\nModel id 34\n",
		"prefix": "model.DWMYLC1",
		"scope": "source.lua"
	},
	"model.HMOGAR": {
		"body": "35",
		"description": "GTA SA #Models\nModel id 35\n",
		"prefix": "model.HMOGAR",
		"scope": "source.lua"
	},
	"model.WMYGOL1": {
		"body": "36",
		"description": "GTA SA #Models\nModel id 36\n",
		"prefix": "model.WMYGOL1",
		"scope": "source.lua"
	},
	"model.WMYGOL2": {
		"body": "37",
		"description": "GTA SA #Models\nModel id 37\n",
		"prefix": "model.WMYGOL2",
		"scope": "source.lua"
	},
	"model.HFORI": {
		"body": "38",
		"description": "GTA SA #Models\nModel id 38\n",
		"prefix": "model.HFORI",
		"scope": "source.lua"
	},
	"model.HFOST": {
		"body": "39",
		"description": "GTA SA #Models\nModel id 39\n",
		"prefix": "model.HFOST",
		"scope": "source.lua"
	},
	"model.HFYRI": {
		"body": "40",
		"description": "GTA SA #Models\nModel id 40\n",
		"prefix": "model.HFYRI",
		"scope": "source.lua"
	},
	"model.HFYST": {
		"body": "41",
		"description": "GTA SA #Models\nModel id 41\n",
		"prefix": "model.HFYST",
		"scope": "source.lua"
	},
	"model.HMORI": {
		"body": "43",
		"description": "GTA SA #Models\nModel id 43\n",
		"prefix": "model.HMORI",
		"scope": "source.lua"
	},
	"model.HMOST": {
		"body": "44",
		"description": "GTA SA #Models\nModel id 44\n",
		"prefix": "model.HMOST",
		"scope": "source.lua"
	},
	"model.HMYBE": {
		"body": "45",
		"description": "GTA SA #Models\nModel id 45\n",
		"prefix": "model.HMYBE",
		"scope": "source.lua"
	},
	"model.HMYRI": {
		"body": "46",
		"description": "GTA SA #Models\nModel id 46\n",
		"prefix": "model.HMYRI",
		"scope": "source.lua"
	},
	"model.HMYCR": {
		"body": "47",
		"description": "GTA SA #Models\nModel id 47\n",
		"prefix": "model.HMYCR",
		"scope": "source.lua"
	},
	"model.HMYST": {
		"body": "48",
		"description": "GTA SA #Models\nModel id 48\n",
		"prefix": "model.HMYST",
		"scope": "source.lua"
	},
	"model.OMOKUNG": {
		"body": "49",
		"description": "GTA SA #Models\nModel id 49\n",
		"prefix": "model.OMOKUNG",
		"scope": "source.lua"
	},
	"model.WMYMECH": {
		"body": "50",
		"description": "GTA SA #Models\nModel id 50\n",
		"prefix": "model.WMYMECH",
		"scope": "source.lua"
	},
	"model.BMYMOUN": {
		"body": "51",
		"description": "GTA SA #Models\nModel id 51\n",
		"prefix": "model.BMYMOUN",
		"scope": "source.lua"
	},
	"model.WMYMOUN": {
		"body": "52",
		"description": "GTA SA #Models\nModel id 52\n",
		"prefix": "model.WMYMOUN",
		"scope": "source.lua"
	},
	"model.OFORI": {
		"body": "53",
		"description": "GTA SA #Models\nModel id 53\n",
		"prefix": "model.OFORI",
		"scope": "source.lua"
	},
	"model.OFOST": {
		"body": "54",
		"description": "GTA SA #Models\nModel id 54\n",
		"prefix": "model.OFOST",
		"scope": "source.lua"
	},
	"model.OFYRI": {
		"body": "55",
		"description": "GTA SA #Models\nModel id 55\n",
		"prefix": "model.OFYRI",
		"scope": "source.lua"
	},
	"model.OFYST": {
		"body": "56",
		"description": "GTA SA #Models\nModel id 56\n",
		"prefix": "model.OFYST",
		"scope": "source.lua"
	},
	"model.OMORI": {
		"body": "57",
		"description": "GTA SA #Models\nModel id 57\n",
		"prefix": "model.OMORI",
		"scope": "source.lua"
	},
	"model.OMOST": {
		"body": "58",
		"description": "GTA SA #Models\nModel id 58\n",
		"prefix": "model.OMOST",
		"scope": "source.lua"
	},
	"model.OMYRI": {
		"body": "59",
		"description": "GTA SA #Models\nModel id 59\n",
		"prefix": "model.OMYRI",
		"scope": "source.lua"
	},
	"model.OMYST": {
		"body": "60",
		"description": "GTA SA #Models\nModel id 60\n",
		"prefix": "model.OMYST",
		"scope": "source.lua"
	},
	"model.WMYPLT": {
		"body": "61",
		"description": "GTA SA #Models\nModel id 61\n",
		"prefix": "model.WMYPLT",
		"scope": "source.lua"
	},
	"model.WMOPJ": {
		"body": "62",
		"description": "GTA SA #Models\nModel id 62\n",
		"prefix": "model.WMOPJ",
		"scope": "source.lua"
	},
	"model.BFYPRO": {
		"body": "63",
		"description": "GTA SA #Models\nModel id 63\n",
		"prefix": "model.BFYPRO",
		"scope": "source.lua"
	},
	"model.HFYPRO": {
		"body": "64",
		"description": "GTA SA #Models\nModel id 64\n",
		"prefix": "model.HFYPRO",
		"scope": "source.lua"
	},
	"model.BMYPOL1": {
		"body": "66",
		"description": "GTA SA #Models\nModel id 66\n",
		"prefix": "model.BMYPOL1",
		"scope": "source.lua"
	},
	"model.BMYPOL2": {
		"body": "67",
		"description": "GTA SA #Models\nModel id 67\n",
		"prefix": "model.BMYPOL2",
		"scope": "source.lua"
	},
	"model.WMOPREA": {
		"body": "68",
		"description": "GTA SA #Models\nModel id 68\n",
		"prefix": "model.WMOPREA",
		"scope": "source.lua"
	},
	"model.SBFYST": {
		"body": "69",
		"description": "GTA SA #Models\nModel id 69\n",
		"prefix": "model.SBFYST",
		"scope": "source.lua"
	},
	"model.WMOSCI": {
		"body": "70",
		"description": "GTA SA #Models\nModel id 70\n",
		"prefix": "model.WMOSCI",
		"scope": "source.lua"
	},
	"model.WMYSGRD": {
		"body": "71",
		"description": "GTA SA #Models\nModel id 71\n",
		"prefix": "model.WMYSGRD",
		"scope": "source.lua"
	},
	"model.SWMYHP1": {
		"body": "72",
		"description": "GTA SA #Models\nModel id 72\n",
		"prefix": "model.SWMYHP1",
		"scope": "source.lua"
	},
	"model.SWMYHP2": {
		"body": "73",
		"description": "GTA SA #Models\nModel id 73\n",
		"prefix": "model.SWMYHP2",
		"scope": "source.lua"
	},
	"model.SWFOPRO": {
		"body": "75",
		"description": "GTA SA #Models\nModel id 75\n",
		"prefix": "model.SWFOPRO",
		"scope": "source.lua"
	},
	"model.WFYSTEW": {
		"body": "76",
		"description": "GTA SA #Models\nModel id 76\n",
		"prefix": "model.WFYSTEW",
		"scope": "source.lua"
	},
	"model.SWMOTR1": {
		"body": "77",
		"description": "GTA SA #Models\nModel id 77\n",
		"prefix": "model.SWMOTR1",
		"scope": "source.lua"
	},
	"model.WMOTR1": {
		"body": "78",
		"description": "GTA SA #Models\nModel id 78\n",
		"prefix": "model.WMOTR1",
		"scope": "source.lua"
	},
	"model.BMOTR1": {
		"body": "79",
		"description": "GTA SA #Models\nModel id 79\n",
		"prefix": "model.BMOTR1",
		"scope": "source.lua"
	},
	"model.VBMYBOX": {
		"body": "80",
		"description": "GTA SA #Models\nModel id 80\n",
		"prefix": "model.VBMYBOX",
		"scope": "source.lua"
	},
	"model.VWMYBOX": {
		"body": "81",
		"description": "GTA SA #Models\nModel id 81\n",
		"prefix": "model.VWMYBOX",
		"scope": "source.lua"
	},
	"model.VHMYELV": {
		"body": "82",
		"description": "GTA SA #Models\nModel id 82\n",
		"prefix": "model.VHMYELV",
		"scope": "source.lua"
	},
	"model.VBMYELV": {
		"body": "83",
		"description": "GTA SA #Models\nModel id 83\n",
		"prefix": "model.VBMYELV",
		"scope": "source.lua"
	},
	"model.VIMYELV": {
		"body": "84",
		"description": "GTA SA #Models\nModel id 84\n",
		"prefix": "model.VIMYELV",
		"scope": "source.lua"
	},
	"model.VWFYPRO": {
		"body": "85",
		"description": "GTA SA #Models\nModel id 85\n",
		"prefix": "model.VWFYPRO",
		"scope": "source.lua"
	},
	"model.VWFYST1": {
		"body": "87",
		"description": "GTA SA #Models\nModel id 87\n",
		"prefix": "model.VWFYST1",
		"scope": "source.lua"
	},
	"model.WFORI": {
		"body": "88",
		"description": "GTA SA #Models\nModel id 88\n",
		"prefix": "model.WFORI",
		"scope": "source.lua"
	},
	"model.WFOST": {
		"body": "89",
		"description": "GTA SA #Models\nModel id 89\n",
		"prefix": "model.WFOST",
		"scope": "source.lua"
	},
	"model.WFYJG": {
		"body": "90",
		"description": "GTA SA #Models\nModel id 90\n",
		"prefix": "model.WFYJG",
		"scope": "source.lua"
	},
	"model.WFYRI": {
		"body": "91",
		"description": "GTA SA #Models\nModel id 91\n",
		"prefix": "model.WFYRI",
		"scope": "source.lua"
	},
	"model.WFYRO": {
		"body": "92",
		"description": "GTA SA #Models\nModel id 92\n",
		"prefix": "model.WFYRO",
		"scope": "source.lua"
	},
	"model.WFYST": {
		"body": "93",
		"description": "GTA SA #Models\nModel id 93\n",
		"prefix": "model.WFYST",
		"scope": "source.lua"
	},
	"model.WMORI": {
		"body": "94",
		"description": "GTA SA #Models\nModel id 94\n",
		"prefix": "model.WMORI",
		"scope": "source.lua"
	},
	"model.WMOST": {
		"body": "95",
		"description": "GTA SA #Models\nModel id 95\n",
		"prefix": "model.WMOST",
		"scope": "source.lua"
	},
	"model.WMYJG": {
		"body": "96",
		"description": "GTA SA #Models\nModel id 96\n",
		"prefix": "model.WMYJG",
		"scope": "source.lua"
	},
	"model.WMYLG": {
		"body": "97",
		"description": "GTA SA #Models\nModel id 97\n",
		"prefix": "model.WMYLG",
		"scope": "source.lua"
	},
	"model.WMYRI": {
		"body": "98",
		"description": "GTA SA #Models\nModel id 98\n",
		"prefix": "model.WMYRI",
		"scope": "source.lua"
	},
	"model.WMYRO": {
		"body": "99",
		"description": "GTA SA #Models\nModel id 99\n",
		"prefix": "model.WMYRO",
		"scope": "source.lua"
	},
	"model.WMYCR": {
		"body": "100",
		"description": "GTA SA #Models\nModel id 100\n",
		"prefix": "model.WMYCR",
		"scope": "source.lua"
	},
	"model.WMYST": {
		"body": "101",
		"description": "GTA SA #Models\nModel id 101\n",
		"prefix": "model.WMYST",
		"scope": "source.lua"
	},
	"model.BALLAS1": {
		"body": "102",
		"description": "GTA SA #Models\nModel id 102\n",
		"prefix": "model.BALLAS1",
		"scope": "source.lua"
	},
	"model.BALLAS2": {
		"body": "103",
		"description": "GTA SA #Models\nModel id 103\n",
		"prefix": "model.BALLAS2",
		"scope": "source.lua"
	},
	"model.BALLAS3": {
		"body": "104",
		"description": "GTA SA #Models\nModel id 104\n",
		"prefix": "model.BALLAS3",
		"scope": "source.lua"
	},
	"model.FAM1": {
		"body": "105",
		"description": "GTA SA #Models\nModel id 105\n",
		"prefix": "model.FAM1",
		"scope": "source.lua"
	},
	"model.FAM2": {
		"body": "106",
		"description": "GTA SA #Models\nModel id 106\n",
		"prefix": "model.FAM2",
		"scope": "source.lua"
	},
	"model.FAM3": {
		"body": "107",
		"description": "GTA SA #Models\nModel id 107\n",
		"prefix": "model.FAM3",
		"scope": "source.lua"
	},
	"model.LSV1": {
		"body": "108",
		"description": "GTA SA #Models\nModel id 108\n",
		"prefix": "model.LSV1",
		"scope": "source.lua"
	},
	"model.LSV2": {
		"body": "109",
		"description": "GTA SA #Models\nModel id 109\n",
		"prefix": "model.LSV2",
		"scope": "source.lua"
	},
	"model.LSV3": {
		"body": "110",
		"description": "GTA SA #Models\nModel id 110\n",
		"prefix": "model.LSV3",
		"scope": "source.lua"
	},
	"model.MAFFA": {
		"body": "111",
		"description": "GTA SA #Models\nModel id 111\n",
		"prefix": "model.MAFFA",
		"scope": "source.lua"
	},
	"model.MAFFB": {
		"body": "112",
		"description": "GTA SA #Models\nModel id 112\n",
		"prefix": "model.MAFFB",
		"scope": "source.lua"
	},
	"model.MAFBOSS": {
		"body": "113",
		"description": "GTA SA #Models\nModel id 113\n",
		"prefix": "model.MAFBOSS",
		"scope": "source.lua"
	},
	"model.VLA1": {
		"body": "114",
		"description": "GTA SA #Models\nModel id 114\n",
		"prefix": "model.VLA1",
		"scope": "source.lua"
	},
	"model.VLA2": {
		"body": "115",
		"description": "GTA SA #Models\nModel id 115\n",
		"prefix": "model.VLA2",
		"scope": "source.lua"
	},
	"model.VLA3": {
		"body": "116",
		"description": "GTA SA #Models\nModel id 116\n",
		"prefix": "model.VLA3",
		"scope": "source.lua"
	},
	"model.TRIADA": {
		"body": "117",
		"description": "GTA SA #Models\nModel id 117\n",
		"prefix": "model.TRIADA",
		"scope": "source.lua"
	},
	"model.TRIADB": {
		"body": "118",
		"description": "GTA SA #Models\nModel id 118\n",
		"prefix": "model.TRIADB",
		"scope": "source.lua"
	},
	"model.TRIBOSS": {
		"body": "120",
		"description": "GTA SA #Models\nModel id 120\n",
		"prefix": "model.TRIBOSS",
		"scope": "source.lua"
	},
	"model.DNB1": {
		"body": "121",
		"description": "GTA SA #Models\nModel id 121\n",
		"prefix": "model.DNB1",
		"scope": "source.lua"
	},
	"model.DNB2": {
		"body": "122",
		"description": "GTA SA #Models\nModel id 122\n",
		"prefix": "model.DNB2",
		"scope": "source.lua"
	},
	"model.DNB3": {
		"body": "123",
		"description": "GTA SA #Models\nModel id 123\n",
		"prefix": "model.DNB3",
		"scope": "source.lua"
	},
	"model.VMAFF1": {
		"body": "124",
		"description": "GTA SA #Models\nModel id 124\n",
		"prefix": "model.VMAFF1",
		"scope": "source.lua"
	},
	"model.VMAFF2": {
		"body": "125",
		"description": "GTA SA #Models\nModel id 125\n",
		"prefix": "model.VMAFF2",
		"scope": "source.lua"
	},
	"model.VMAFF3": {
		"body": "126",
		"description": "GTA SA #Models\nModel id 126\n",
		"prefix": "model.VMAFF3",
		"scope": "source.lua"
	},
	"model.VMAFF4": {
		"body": "127",
		"description": "GTA SA #Models\nModel id 127\n",
		"prefix": "model.VMAFF4",
		"scope": "source.lua"
	},
	"model.DNMYLC": {
		"body": "128",
		"description": "GTA SA #Models\nModel id 128\n",
		"prefix": "model.DNMYLC",
		"scope": "source.lua"
	},
	"model.DNFOLC1": {
		"body": "129",
		"description": "GTA SA #Models\nModel id 129\n",
		"prefix": "model.DNFOLC1",
		"scope": "source.lua"
	},
	"model.DNFOLC2": {
		"body": "130",
		"description": "GTA SA #Models\nModel id 130\n",
		"prefix": "model.DNFOLC2",
		"scope": "source.lua"
	},
	"model.DNFYLC": {
		"body": "131",
		"description": "GTA SA #Models\nModel id 131\n",
		"prefix": "model.DNFYLC",
		"scope": "source.lua"
	},
	"model.DNMOLC1": {
		"body": "132",
		"description": "GTA SA #Models\nModel id 132\n",
		"prefix": "model.DNMOLC1",
		"scope": "source.lua"
	},
	"model.DNMOLC2": {
		"body": "133",
		"description": "GTA SA #Models\nModel id 133\n",
		"prefix": "model.DNMOLC2",
		"scope": "source.lua"
	},
	"model.SBMOTR2": {
		"body": "134",
		"description": "GTA SA #Models\nModel id 134\n",
		"prefix": "model.SBMOTR2",
		"scope": "source.lua"
	},
	"model.SWMOTR2": {
		"body": "135",
		"description": "GTA SA #Models\nModel id 135\n",
		"prefix": "model.SWMOTR2",
		"scope": "source.lua"
	},
	"model.SBMYTR3": {
		"body": "136",
		"description": "GTA SA #Models\nModel id 136\n",
		"prefix": "model.SBMYTR3",
		"scope": "source.lua"
	},
	"model.SWMOTR3": {
		"body": "137",
		"description": "GTA SA #Models\nModel id 137\n",
		"prefix": "model.SWMOTR3",
		"scope": "source.lua"
	},
	"model.WFYBE": {
		"body": "138",
		"description": "GTA SA #Models\nModel id 138\n",
		"prefix": "model.WFYBE",
		"scope": "source.lua"
	},
	"model.BFYBE": {
		"body": "139",
		"description": "GTA SA #Models\nModel id 139\n",
		"prefix": "model.BFYBE",
		"scope": "source.lua"
	},
	"model.HFYBE": {
		"body": "140",
		"description": "GTA SA #Models\nModel id 140\n",
		"prefix": "model.HFYBE",
		"scope": "source.lua"
	},
	"model.SOFYBU": {
		"body": "141",
		"description": "GTA SA #Models\nModel id 141\n",
		"prefix": "model.SOFYBU",
		"scope": "source.lua"
	},
	"model.SBMYST": {
		"body": "142",
		"description": "GTA SA #Models\nModel id 142\n",
		"prefix": "model.SBMYST",
		"scope": "source.lua"
	},
	"model.SBMYCR": {
		"body": "143",
		"description": "GTA SA #Models\nModel id 143\n",
		"prefix": "model.SBMYCR",
		"scope": "source.lua"
	},
	"model.BMYCG": {
		"body": "144",
		"description": "GTA SA #Models\nModel id 144\n",
		"prefix": "model.BMYCG",
		"scope": "source.lua"
	},
	"model.WFYCRK": {
		"body": "145",
		"description": "GTA SA #Models\nModel id 145\n",
		"prefix": "model.WFYCRK",
		"scope": "source.lua"
	},
	"model.HMYCM": {
		"body": "146",
		"description": "GTA SA #Models\nModel id 146\n",
		"prefix": "model.HMYCM",
		"scope": "source.lua"
	},
	"model.WMYBU": {
		"body": "147",
		"description": "GTA SA #Models\nModel id 147\n",
		"prefix": "model.WMYBU",
		"scope": "source.lua"
	},
	"model.BFYBU": {
		"body": "148",
		"description": "GTA SA #Models\nModel id 148\n",
		"prefix": "model.BFYBU",
		"scope": "source.lua"
	},
	"model.WFYBU": {
		"body": "150",
		"description": "GTA SA #Models\nModel id 150\n",
		"prefix": "model.WFYBU",
		"scope": "source.lua"
	},
	"model.DWFYLC1": {
		"body": "151",
		"description": "GTA SA #Models\nModel id 151\n",
		"prefix": "model.DWFYLC1",
		"scope": "source.lua"
	},
	"model.WFYPRO": {
		"body": "152",
		"description": "GTA SA #Models\nModel id 152\n",
		"prefix": "model.WFYPRO",
		"scope": "source.lua"
	},
	"model.WMYCONB": {
		"body": "153",
		"description": "GTA SA #Models\nModel id 153\n",
		"prefix": "model.WMYCONB",
		"scope": "source.lua"
	},
	"model.WMYBE": {
		"body": "154",
		"description": "GTA SA #Models\nModel id 154\n",
		"prefix": "model.WMYBE",
		"scope": "source.lua"
	},
	"model.WMYPIZZ": {
		"body": "155",
		"description": "GTA SA #Models\nModel id 155\n",
		"prefix": "model.WMYPIZZ",
		"scope": "source.lua"
	},
	"model.BMOBAR": {
		"body": "156",
		"description": "GTA SA #Models\nModel id 156\n",
		"prefix": "model.BMOBAR",
		"scope": "source.lua"
	},
	"model.CWFYHB": {
		"body": "157",
		"description": "GTA SA #Models\nModel id 157\n",
		"prefix": "model.CWFYHB",
		"scope": "source.lua"
	},
	"model.CWMOFR": {
		"body": "158",
		"description": "GTA SA #Models\nModel id 158\n",
		"prefix": "model.CWMOFR",
		"scope": "source.lua"
	},
	"model.CWMOHB1": {
		"body": "159",
		"description": "GTA SA #Models\nModel id 159\n",
		"prefix": "model.CWMOHB1",
		"scope": "source.lua"
	},
	"model.CWMOHB2": {
		"body": "160",
		"description": "GTA SA #Models\nModel id 160\n",
		"prefix": "model.CWMOHB2",
		"scope": "source.lua"
	},
	"model.CWMYFR": {
		"body": "161",
		"description": "GTA SA #Models\nModel id 161\n",
		"prefix": "model.CWMYFR",
		"scope": "source.lua"
	},
	"model.CWMYHB1": {
		"body": "162",
		"description": "GTA SA #Models\nModel id 162\n",
		"prefix": "model.CWMYHB1",
		"scope": "source.lua"
	},
	"model.BMYBOUN": {
		"body": "163",
		"description": "GTA SA #Models\nModel id 163\n",
		"prefix": "model.BMYBOUN",
		"scope": "source.lua"
	},
	"model.WMYBOUN": {
		"body": "164",
		"description": "GTA SA #Models\nModel id 164\n",
		"prefix": "model.WMYBOUN",
		"scope": "source.lua"
	},
	"model.WMOMIB": {
		"body": "165",
		"description": "GTA SA #Models\nModel id 165\n",
		"prefix": "model.WMOMIB",
		"scope": "source.lua"
	},
	"model.BMYMIB": {
		"body": "166",
		"description": "GTA SA #Models\nModel id 166\n",
		"prefix": "model.BMYMIB",
		"scope": "source.lua"
	},
	"model.WMYBELL": {
		"body": "167",
		"description": "GTA SA #Models\nModel id 167\n",
		"prefix": "model.WMYBELL",
		"scope": "source.lua"
	},
	"model.BMOCHIL": {
		"body": "168",
		"description": "GTA SA #Models\nModel id 168\n",
		"prefix": "model.BMOCHIL",
		"scope": "source.lua"
	},
	"model.SOFYRI": {
		"body": "169",
		"description": "GTA SA #Models\nModel id 169\n",
		"prefix": "model.SOFYRI",
		"scope": "source.lua"
	},
	"model.SOMYST": {
		"body": "170",
		"description": "GTA SA #Models\nModel id 170\n",
		"prefix": "model.SOMYST",
		"scope": "source.lua"
	},
	"model.VWMYBJD": {
		"body": "171",
		"description": "GTA SA #Models\nModel id 171\n",
		"prefix": "model.VWMYBJD",
		"scope": "source.lua"
	},
	"model.VWFYCRP": {
		"body": "172",
		"description": "GTA SA #Models\nModel id 172\n",
		"prefix": "model.VWFYCRP",
		"scope": "source.lua"
	},
	"model.SFR1": {
		"body": "173",
		"description": "GTA SA #Models\nModel id 173\n",
		"prefix": "model.SFR1",
		"scope": "source.lua"
	},
	"model.SFR2": {
		"body": "174",
		"description": "GTA SA #Models\nModel id 174\n",
		"prefix": "model.SFR2",
		"scope": "source.lua"
	},
	"model.SFR3": {
		"body": "175",
		"description": "GTA SA #Models\nModel id 175\n",
		"prefix": "model.SFR3",
		"scope": "source.lua"
	},
	"model.BMYBAR": {
		"body": "176",
		"description": "GTA SA #Models\nModel id 176\n",
		"prefix": "model.BMYBAR",
		"scope": "source.lua"
	},
	"model.WMYBAR": {
		"body": "177",
		"description": "GTA SA #Models\nModel id 177\n",
		"prefix": "model.WMYBAR",
		"scope": "source.lua"
	},
	"model.WFYSEX": {
		"body": "178",
		"description": "GTA SA #Models\nModel id 178\n",
		"prefix": "model.WFYSEX",
		"scope": "source.lua"
	},
	"model.WMYAMMO": {
		"body": "179",
		"description": "GTA SA #Models\nModel id 179\n",
		"prefix": "model.WMYAMMO",
		"scope": "source.lua"
	},
	"model.BMYTATT": {
		"body": "180",
		"description": "GTA SA #Models\nModel id 180\n",
		"prefix": "model.BMYTATT",
		"scope": "source.lua"
	},
	"model.VWMYCR": {
		"body": "181",
		"description": "GTA SA #Models\nModel id 181\n",
		"prefix": "model.VWMYCR",
		"scope": "source.lua"
	},
	"model.VBMOCD": {
		"body": "182",
		"description": "GTA SA #Models\nModel id 182\n",
		"prefix": "model.VBMOCD",
		"scope": "source.lua"
	},
	"model.VBMYCR": {
		"body": "183",
		"description": "GTA SA #Models\nModel id 183\n",
		"prefix": "model.VBMYCR",
		"scope": "source.lua"
	},
	"model.VHMYCR": {
		"body": "184",
		"description": "GTA SA #Models\nModel id 184\n",
		"prefix": "model.VHMYCR",
		"scope": "source.lua"
	},
	"model.SBMYRI": {
		"body": "185",
		"description": "GTA SA #Models\nModel id 185\n",
		"prefix": "model.SBMYRI",
		"scope": "source.lua"
	},
	"model.SOMYRI": {
		"body": "186",
		"description": "GTA SA #Models\nModel id 186\n",
		"prefix": "model.SOMYRI",
		"scope": "source.lua"
	},
	"model.SOMYBU": {
		"body": "187",
		"description": "GTA SA #Models\nModel id 187\n",
		"prefix": "model.SOMYBU",
		"scope": "source.lua"
	},
	"model.SWMYST": {
		"body": "188",
		"description": "GTA SA #Models\nModel id 188\n",
		"prefix": "model.SWMYST",
		"scope": "source.lua"
	},
	"model.WMYVA": {
		"body": "189",
		"description": "GTA SA #Models\nModel id 189\n",
		"prefix": "model.WMYVA",
		"scope": "source.lua"
	},
	"model.COPGRL3": {
		"body": "190",
		"description": "GTA SA #Models\nModel id 190\n",
		"prefix": "model.COPGRL3",
		"scope": "source.lua"
	},
	"model.GUNGRL3": {
		"body": "191",
		"description": "GTA SA #Models\nModel id 191\n",
		"prefix": "model.GUNGRL3",
		"scope": "source.lua"
	},
	"model.MECGRL3": {
		"body": "192",
		"description": "GTA SA #Models\nModel id 192\n",
		"prefix": "model.MECGRL3",
		"scope": "source.lua"
	},
	"model.NURGRL3": {
		"body": "193",
		"description": "GTA SA #Models\nModel id 193\n",
		"prefix": "model.NURGRL3",
		"scope": "source.lua"
	},
	"model.CROGRL3": {
		"body": "194",
		"description": "GTA SA #Models\nModel id 194\n",
		"prefix": "model.CROGRL3",
		"scope": "source.lua"
	},
	"model.GANGRL3": {
		"body": "195",
		"description": "GTA SA #Models\nModel id 195\n",
		"prefix": "model.GANGRL3",
		"scope": "source.lua"
	},
	"model.CWFOFR": {
		"body": "196",
		"description": "GTA SA #Models\nModel id 196\n",
		"prefix": "model.CWFOFR",
		"scope": "source.lua"
	},
	"model.CWFOHB": {
		"body": "197",
		"description": "GTA SA #Models\nModel id 197\n",
		"prefix": "model.CWFOHB",
		"scope": "source.lua"
	},
	"model.CWFYFR1": {
		"body": "198",
		"description": "GTA SA #Models\nModel id 198\n",
		"prefix": "model.CWFYFR1",
		"scope": "source.lua"
	},
	"model.CWFYFR2": {
		"body": "199",
		"description": "GTA SA #Models\nModel id 199\n",
		"prefix": "model.CWFYFR2",
		"scope": "source.lua"
	},
	"model.CWMYHB2": {
		"body": "200",
		"description": "GTA SA #Models\nModel id 200\n",
		"prefix": "model.CWMYHB2",
		"scope": "source.lua"
	},
	"model.DWFYLC2": {
		"body": "201",
		"description": "GTA SA #Models\nModel id 201\n",
		"prefix": "model.DWFYLC2",
		"scope": "source.lua"
	},
	"model.DWMYLC2": {
		"body": "202",
		"description": "GTA SA #Models\nModel id 202\n",
		"prefix": "model.DWMYLC2",
		"scope": "source.lua"
	},
	"model.OMYKARA": {
		"body": "203",
		"description": "GTA SA #Models\nModel id 203\n",
		"prefix": "model.OMYKARA",
		"scope": "source.lua"
	},
	"model.WMYKARA": {
		"body": "204",
		"description": "GTA SA #Models\nModel id 204\n",
		"prefix": "model.WMYKARA",
		"scope": "source.lua"
	},
	"model.WFYBURG": {
		"body": "205",
		"description": "GTA SA #Models\nModel id 205\n",
		"prefix": "model.WFYBURG",
		"scope": "source.lua"
	},
	"model.VWMYCD": {
		"body": "206",
		"description": "GTA SA #Models\nModel id 206\n",
		"prefix": "model.VWMYCD",
		"scope": "source.lua"
	},
	"model.VHFYPRO": {
		"body": "207",
		"description": "GTA SA #Models\nModel id 207\n",
		"prefix": "model.VHFYPRO",
		"scope": "source.lua"
	},
	"model.OMONOOD": {
		"body": "209",
		"description": "GTA SA #Models\nModel id 209\n",
		"prefix": "model.OMONOOD",
		"scope": "source.lua"
	},
	"model.OMOBOAT": {
		"body": "210",
		"description": "GTA SA #Models\nModel id 210\n",
		"prefix": "model.OMOBOAT",
		"scope": "source.lua"
	},
	"model.WFYCLOT": {
		"body": "211",
		"description": "GTA SA #Models\nModel id 211\n",
		"prefix": "model.WFYCLOT",
		"scope": "source.lua"
	},
	"model.VWMOTR1": {
		"body": "212",
		"description": "GTA SA #Models\nModel id 212\n",
		"prefix": "model.VWMOTR1",
		"scope": "source.lua"
	},
	"model.VWMOTR2": {
		"body": "213",
		"description": "GTA SA #Models\nModel id 213\n",
		"prefix": "model.VWMOTR2",
		"scope": "source.lua"
	},
	"model.VWFYWAI": {
		"body": "214",
		"description": "GTA SA #Models\nModel id 214\n",
		"prefix": "model.VWFYWAI",
		"scope": "source.lua"
	},
	"model.SBFORI": {
		"body": "215",
		"description": "GTA SA #Models\nModel id 215\n",
		"prefix": "model.SBFORI",
		"scope": "source.lua"
	},
	"model.SWFYRI": {
		"body": "216",
		"description": "GTA SA #Models\nModel id 216\n",
		"prefix": "model.SWFYRI",
		"scope": "source.lua"
	},
	"model.WMYCLOT": {
		"body": "217",
		"description": "GTA SA #Models\nModel id 217\n",
		"prefix": "model.WMYCLOT",
		"scope": "source.lua"
	},
	"model.SBFOST": {
		"body": "218",
		"description": "GTA SA #Models\nModel id 218\n",
		"prefix": "model.SBFOST",
		"scope": "source.lua"
	},
	"model.SBFYRI": {
		"body": "219",
		"description": "GTA SA #Models\nModel id 219\n",
		"prefix": "model.SBFYRI",
		"scope": "source.lua"
	},
	"model.SBMOCD": {
		"body": "220",
		"description": "GTA SA #Models\nModel id 220\n",
		"prefix": "model.SBMOCD",
		"scope": "source.lua"
	},
	"model.SBMORI": {
		"body": "221",
		"description": "GTA SA #Models\nModel id 221\n",
		"prefix": "model.SBMORI",
		"scope": "source.lua"
	},
	"model.SBMOST": {
		"body": "222",
		"description": "GTA SA #Models\nModel id 222\n",
		"prefix": "model.SBMOST",
		"scope": "source.lua"
	},
	"model.SHMYCR": {
		"body": "223",
		"description": "GTA SA #Models\nModel id 223\n",
		"prefix": "model.SHMYCR",
		"scope": "source.lua"
	},
	"model.SOFORI": {
		"body": "224",
		"description": "GTA SA #Models\nModel id 224\n",
		"prefix": "model.SOFORI",
		"scope": "source.lua"
	},
	"model.SOFOST": {
		"body": "225",
		"description": "GTA SA #Models\nModel id 225\n",
		"prefix": "model.SOFOST",
		"scope": "source.lua"
	},
	"model.SOFYST": {
		"body": "226",
		"description": "GTA SA #Models\nModel id 226\n",
		"prefix": "model.SOFYST",
		"scope": "source.lua"
	},
	"model.SOMOBU": {
		"body": "227",
		"description": "GTA SA #Models\nModel id 227\n",
		"prefix": "model.SOMOBU",
		"scope": "source.lua"
	},
	"model.SOMORI": {
		"body": "228",
		"description": "GTA SA #Models\nModel id 228\n",
		"prefix": "model.SOMORI",
		"scope": "source.lua"
	},
	"model.SOMOST": {
		"body": "229",
		"description": "GTA SA #Models\nModel id 229\n",
		"prefix": "model.SOMOST",
		"scope": "source.lua"
	},
	"model.SWMOTR5": {
		"body": "230",
		"description": "GTA SA #Models\nModel id 230\n",
		"prefix": "model.SWMOTR5",
		"scope": "source.lua"
	},
	"model.SWFORI": {
		"body": "231",
		"description": "GTA SA #Models\nModel id 231\n",
		"prefix": "model.SWFORI",
		"scope": "source.lua"
	},
	"model.SWFOST": {
		"body": "232",
		"description": "GTA SA #Models\nModel id 232\n",
		"prefix": "model.SWFOST",
		"scope": "source.lua"
	},
	"model.SWFYST": {
		"body": "233",
		"description": "GTA SA #Models\nModel id 233\n",
		"prefix": "model.SWFYST",
		"scope": "source.lua"
	},
	"model.SWMOCD": {
		"body": "234",
		"description": "GTA SA #Models\nModel id 234\n",
		"prefix": "model.SWMOCD",
		"scope": "source.lua"
	},
	"model.SWMORI": {
		"body": "235",
		"description": "GTA SA #Models\nModel id 235\n",
		"prefix": "model.SWMORI",
		"scope": "source.lua"
	},
	"model.SWMOST": {
		"body": "236",
		"description": "GTA SA #Models\nModel id 236\n",
		"prefix": "model.SWMOST",
		"scope": "source.lua"
	},
	"model.SHFYPRO": {
		"body": "237",
		"description": "GTA SA #Models\nModel id 237\n",
		"prefix": "model.SHFYPRO",
		"scope": "source.lua"
	},
	"model.SBFYPRO": {
		"body": "238",
		"description": "GTA SA #Models\nModel id 238\n",
		"prefix": "model.SBFYPRO",
		"scope": "source.lua"
	},
	"model.SWMOTR4": {
		"body": "239",
		"description": "GTA SA #Models\nModel id 239\n",
		"prefix": "model.SWMOTR4",
		"scope": "source.lua"
	},
	"model.SWMYRI": {
		"body": "240",
		"description": "GTA SA #Models\nModel id 240\n",
		"prefix": "model.SWMYRI",
		"scope": "source.lua"
	},
	"model.SMYST": {
		"body": "241",
		"description": "GTA SA #Models\nModel id 241\n",
		"prefix": "model.SMYST",
		"scope": "source.lua"
	},
	"model.SMYST2": {
		"body": "242",
		"description": "GTA SA #Models\nModel id 242\n",
		"prefix": "model.SMYST2",
		"scope": "source.lua"
	},
	"model.SFYPRO": {
		"body": "243",
		"description": "GTA SA #Models\nModel id 243\n",
		"prefix": "model.SFYPRO",
		"scope": "source.lua"
	},
	"model.VBFYST2": {
		"body": "244",
		"description": "GTA SA #Models\nModel id 244\n",
		"prefix": "model.VBFYST2",
		"scope": "source.lua"
	},
	"model.VBFYPRO": {
		"body": "245",
		"description": "GTA SA #Models\nModel id 245\n",
		"prefix": "model.VBFYPRO",
		"scope": "source.lua"
	},
	"model.VHFYST3": {
		"body": "246",
		"description": "GTA SA #Models\nModel id 246\n",
		"prefix": "model.VHFYST3",
		"scope": "source.lua"
	},
	"model.BIKERA": {
		"body": "247",
		"description": "GTA SA #Models\nModel id 247\n",
		"prefix": "model.BIKERA",
		"scope": "source.lua"
	},
	"model.BIKERB": {
		"body": "248",
		"description": "GTA SA #Models\nModel id 248\n",
		"prefix": "model.BIKERB",
		"scope": "source.lua"
	},
	"model.BMYPIMP": {
		"body": "249",
		"description": "GTA SA #Models\nModel id 249\n",
		"prefix": "model.BMYPIMP",
		"scope": "source.lua"
	},
	"model.SWMYCR": {
		"body": "250",
		"description": "GTA SA #Models\nModel id 250\n",
		"prefix": "model.SWMYCR",
		"scope": "source.lua"
	},
	"model.WFYLG": {
		"body": "251",
		"description": "GTA SA #Models\nModel id 251\n",
		"prefix": "model.WFYLG",
		"scope": "source.lua"
	},
	"model.WMYVA2": {
		"body": "252",
		"description": "GTA SA #Models\nModel id 252\n",
		"prefix": "model.WMYVA2",
		"scope": "source.lua"
	},
	"model.BMOSEC": {
		"body": "253",
		"description": "GTA SA #Models\nModel id 253\n",
		"prefix": "model.BMOSEC",
		"scope": "source.lua"
	},
	"model.BIKDRUG": {
		"body": "254",
		"description": "GTA SA #Models\nModel id 254\n",
		"prefix": "model.BIKDRUG",
		"scope": "source.lua"
	},
	"model.WMYCH": {
		"body": "255",
		"description": "GTA SA #Models\nModel id 255\n",
		"prefix": "model.WMYCH",
		"scope": "source.lua"
	},
	"model.SBFYSTR": {
		"body": "256",
		"description": "GTA SA #Models\nModel id 256\n",
		"prefix": "model.SBFYSTR",
		"scope": "source.lua"
	},
	"model.SWFYSTR": {
		"body": "257",
		"description": "GTA SA #Models\nModel id 257\n",
		"prefix": "model.SWFYSTR",
		"scope": "source.lua"
	},
	"model.HECK1": {
		"body": "258",
		"description": "GTA SA #Models\nModel id 258\n",
		"prefix": "model.HECK1",
		"scope": "source.lua"
	},
	"model.HECK2": {
		"body": "259",
		"description": "GTA SA #Models\nModel id 259\n",
		"prefix": "model.HECK2",
		"scope": "source.lua"
	},
	"model.BMYCON": {
		"body": "260",
		"description": "GTA SA #Models\nModel id 260\n",
		"prefix": "model.BMYCON",
		"scope": "source.lua"
	},
	"model.WMYCD1": {
		"body": "261",
		"description": "GTA SA #Models\nModel id 261\n",
		"prefix": "model.WMYCD1",
		"scope": "source.lua"
	},
	"model.BMOCD": {
		"body": "262",
		"description": "GTA SA #Models\nModel id 262\n",
		"prefix": "model.BMOCD",
		"scope": "source.lua"
	},
	"model.VWFYWA2": {
		"body": "263",
		"description": "GTA SA #Models\nModel id 263\n",
		"prefix": "model.VWFYWA2",
		"scope": "source.lua"
	},
	"model.WMOICE": {
		"body": "264",
		"description": "GTA SA #Models\nModel id 264\n",
		"prefix": "model.WMOICE",
		"scope": "source.lua"
	},
	"model.LAEMT1": {
		"body": "274",
		"description": "GTA SA #Models\nModel id 274\n",
		"prefix": "model.LAEMT1",
		"scope": "source.lua"
	},
	"model.LVEMT1": {
		"body": "275",
		"description": "GTA SA #Models\nModel id 275\n",
		"prefix": "model.LVEMT1",
		"scope": "source.lua"
	},
	"model.SFEMT1": {
		"body": "276",
		"description": "GTA SA #Models\nModel id 276\n",
		"prefix": "model.SFEMT1",
		"scope": "source.lua"
	},
	"model.LAFD1": {
		"body": "277",
		"description": "GTA SA #Models\nModel id 277\n",
		"prefix": "model.LAFD1",
		"scope": "source.lua"
	},
	"model.LVFD1": {
		"body": "278",
		"description": "GTA SA #Models\nModel id 278\n",
		"prefix": "model.LVFD1",
		"scope": "source.lua"
	},
	"model.SFFD1": {
		"body": "279",
		"description": "GTA SA #Models\nModel id 279\n",
		"prefix": "model.SFFD1",
		"scope": "source.lua"
	},
	"model.LAPD1": {
		"body": "280",
		"description": "GTA SA #Models\nModel id 280\n",
		"prefix": "model.LAPD1",
		"scope": "source.lua"
	},
	"model.SFPD1": {
		"body": "281",
		"description": "GTA SA #Models\nModel id 281\n",
		"prefix": "model.SFPD1",
		"scope": "source.lua"
	},
	"model.LVPD1": {
		"body": "282",
		"description": "GTA SA #Models\nModel id 282\n",
		"prefix": "model.LVPD1",
		"scope": "source.lua"
	},
	"model.CSHER": {
		"body": "283",
		"description": "GTA SA #Models\nModel id 283\n",
		"prefix": "model.CSHER",
		"scope": "source.lua"
	},
	"model.LAPDM1": {
		"body": "284",
		"description": "GTA SA #Models\nModel id 284\n",
		"prefix": "model.LAPDM1",
		"scope": "source.lua"
	},
	"model.SWAT": {
		"body": "285",
		"description": "GTA SA #Models\nModel id 285\n",
		"prefix": "model.SWAT",
		"scope": "source.lua"
	},
	"model.FBI": {
		"body": "286",
		"description": "GTA SA #Models\nModel id 286\n",
		"prefix": "model.FBI",
		"scope": "source.lua"
	},
	"model.ARMY": {
		"body": "287",
		"description": "GTA SA #Models\nModel id 287\n",
		"prefix": "model.ARMY",
		"scope": "source.lua"
	},
	"model.DSHER": {
		"body": "288",
		"description": "GTA SA #Models\nModel id 288\n",
		"prefix": "model.DSHER",
		"scope": "source.lua"
	},
	"model.SPECIAL01": {
		"body": "290",
		"description": "GTA SA #Models\nModel id 290\n",
		"prefix": "model.SPECIAL01",
		"scope": "source.lua"
	},
	"model.SPECIAL02": {
		"body": "291",
		"description": "GTA SA #Models\nModel id 291\n",
		"prefix": "model.SPECIAL02",
		"scope": "source.lua"
	},
	"model.SPECIAL03": {
		"body": "292",
		"description": "GTA SA #Models\nModel id 292\n",
		"prefix": "model.SPECIAL03",
		"scope": "source.lua"
	},
	"model.SPECIAL04": {
		"body": "293",
		"description": "GTA SA #Models\nModel id 293\n",
		"prefix": "model.SPECIAL04",
		"scope": "source.lua"
	},
	"model.SPECIAL05": {
		"body": "294",
		"description": "GTA SA #Models\nModel id 294\n",
		"prefix": "model.SPECIAL05",
		"scope": "source.lua"
	},
	"model.SPECIAL06": {
		"body": "295",
		"description": "GTA SA #Models\nModel id 295\n",
		"prefix": "model.SPECIAL06",
		"scope": "source.lua"
	},
	"model.SPECIAL07": {
		"body": "296",
		"description": "GTA SA #Models\nModel id 296\n",
		"prefix": "model.SPECIAL07",
		"scope": "source.lua"
	},
	"model.SPECIAL08": {
		"body": "297",
		"description": "GTA SA #Models\nModel id 297\n",
		"prefix": "model.SPECIAL08",
		"scope": "source.lua"
	},
	"model.SPECIAL09": {
		"body": "298",
		"description": "GTA SA #Models\nModel id 298\n",
		"prefix": "model.SPECIAL09",
		"scope": "source.lua"
	},
	"model.SPECIAL10": {
		"body": "299",
		"description": "GTA SA #Models\nModel id 299\n",
		"prefix": "model.SPECIAL10",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.--veh_mods.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.--veh_mods.ide",
		"scope": "source.lua"
	},
	"model.---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "model.---",
		"scope": "source.lua"
	},
	"model.SPL_B_MAR_M": {
		"body": "1000",
		"description": "GTA SA #Models\nModel id 1000\n",
		"prefix": "model.SPL_B_MAR_M",
		"scope": "source.lua"
	},
	"model.SPL_B_BAB_M": {
		"body": "1001",
		"description": "GTA SA #Models\nModel id 1001\n",
		"prefix": "model.SPL_B_BAB_M",
		"scope": "source.lua"
	},
	"model.SPL_B_BAR_M": {
		"body": "1002",
		"description": "GTA SA #Models\nModel id 1002\n",
		"prefix": "model.SPL_B_BAR_M",
		"scope": "source.lua"
	},
	"model.SPL_B_MAB_M": {
		"body": "1003",
		"description": "GTA SA #Models\nModel id 1003\n",
		"prefix": "model.SPL_B_MAB_M",
		"scope": "source.lua"
	},
	"model.BNT_B_SC_M": {
		"body": "1004",
		"description": "GTA SA #Models\nModel id 1004\n",
		"prefix": "model.BNT_B_SC_M",
		"scope": "source.lua"
	},
	"model.BNT_B_SC_L": {
		"body": "1005",
		"description": "GTA SA #Models\nModel id 1005\n",
		"prefix": "model.BNT_B_SC_L",
		"scope": "source.lua"
	},
	"model.RF_B_SC_R": {
		"body": "1006",
		"description": "GTA SA #Models\nModel id 1006\n",
		"prefix": "model.RF_B_SC_R",
		"scope": "source.lua"
	},
	"model.WG_L_B_SSK": {
		"body": "1007",
		"description": "GTA SA #Models\nModel id 1007\n",
		"prefix": "model.WG_L_B_SSK",
		"scope": "source.lua"
	},
	"model.NTO_B_L": {
		"body": "1008",
		"description": "GTA SA #Models\nModel id 1008\n",
		"prefix": "model.NTO_B_L",
		"scope": "source.lua"
	},
	"model.NTO_B_S": {
		"body": "1009",
		"description": "GTA SA #Models\nModel id 1009\n",
		"prefix": "model.NTO_B_S",
		"scope": "source.lua"
	},
	"model.NTO_B_TW": {
		"body": "1010",
		"description": "GTA SA #Models\nModel id 1010\n",
		"prefix": "model.NTO_B_TW",
		"scope": "source.lua"
	},
	"model.BNT_B_SC_P_M": {
		"body": "1011",
		"description": "GTA SA #Models\nModel id 1011\n",
		"prefix": "model.BNT_B_SC_P_M",
		"scope": "source.lua"
	},
	"model.BNT_B_SC_P_L": {
		"body": "1012",
		"description": "GTA SA #Models\nModel id 1012\n",
		"prefix": "model.BNT_B_SC_P_L",
		"scope": "source.lua"
	},
	"model.LGT_B_RSPT": {
		"body": "1013",
		"description": "GTA SA #Models\nModel id 1013\n",
		"prefix": "model.LGT_B_RSPT",
		"scope": "source.lua"
	},
	"model.SPL_B_BAR_L": {
		"body": "1014",
		"description": "GTA SA #Models\nModel id 1014\n",
		"prefix": "model.SPL_B_BAR_L",
		"scope": "source.lua"
	},
	"model.SPL_B_BBR_L": {
		"body": "1015",
		"description": "GTA SA #Models\nModel id 1015\n",
		"prefix": "model.SPL_B_BBR_L",
		"scope": "source.lua"
	},
	"model.SPL_B_BBR_M": {
		"body": "1016",
		"description": "GTA SA #Models\nModel id 1016\n",
		"prefix": "model.SPL_B_BBR_M",
		"scope": "source.lua"
	},
	"model.WG_R_B_SSK": {
		"body": "1017",
		"description": "GTA SA #Models\nModel id 1017\n",
		"prefix": "model.WG_R_B_SSK",
		"scope": "source.lua"
	},
	"model.EXH_B_TS": {
		"body": "1018",
		"description": "GTA SA #Models\nModel id 1018\n",
		"prefix": "model.EXH_B_TS",
		"scope": "source.lua"
	},
	"model.EXH_B_T": {
		"body": "1019",
		"description": "GTA SA #Models\nModel id 1019\n",
		"prefix": "model.EXH_B_T",
		"scope": "source.lua"
	},
	"model.EXH_B_L": {
		"body": "1020",
		"description": "GTA SA #Models\nModel id 1020\n",
		"prefix": "model.EXH_B_L",
		"scope": "source.lua"
	},
	"model.EXH_B_M": {
		"body": "1021",
		"description": "GTA SA #Models\nModel id 1021\n",
		"prefix": "model.EXH_B_M",
		"scope": "source.lua"
	},
	"model.EXH_B_S": {
		"body": "1022",
		"description": "GTA SA #Models\nModel id 1022\n",
		"prefix": "model.EXH_B_S",
		"scope": "source.lua"
	},
	"model.SPL_B_BBB_M": {
		"body": "1023",
		"description": "GTA SA #Models\nModel id 1023\n",
		"prefix": "model.SPL_B_BBB_M",
		"scope": "source.lua"
	},
	"model.LGT_B_SSPT": {
		"body": "1024",
		"description": "GTA SA #Models\nModel id 1024\n",
		"prefix": "model.LGT_B_SSPT",
		"scope": "source.lua"
	},
	"model.WHEEL_OR1": {
		"body": "1025",
		"description": "GTA SA #Models\nModel id 1025\n",
		"prefix": "model.WHEEL_OR1",
		"scope": "source.lua"
	},
	"model.WG_L_A_S": {
		"body": "1026",
		"description": "GTA SA #Models\nModel id 1026\n",
		"prefix": "model.WG_L_A_S",
		"scope": "source.lua"
	},
	"model.WG_R_A_S": {
		"body": "1027",
		"description": "GTA SA #Models\nModel id 1027\n",
		"prefix": "model.WG_R_A_S",
		"scope": "source.lua"
	},
	"model.EXH_A_S": {
		"body": "1028",
		"description": "GTA SA #Models\nModel id 1028\n",
		"prefix": "model.EXH_A_S",
		"scope": "source.lua"
	},
	"model.EXH_C_S": {
		"body": "1029",
		"description": "GTA SA #Models\nModel id 1029\n",
		"prefix": "model.EXH_C_S",
		"scope": "source.lua"
	},
	"model.WG_R_C_S": {
		"body": "1030",
		"description": "GTA SA #Models\nModel id 1030\n",
		"prefix": "model.WG_R_C_S",
		"scope": "source.lua"
	},
	"model.WG_L_C_S": {
		"body": "1031",
		"description": "GTA SA #Models\nModel id 1031\n",
		"prefix": "model.WG_L_C_S",
		"scope": "source.lua"
	},
	"model.RF_A_S": {
		"body": "1032",
		"description": "GTA SA #Models\nModel id 1032\n",
		"prefix": "model.RF_A_S",
		"scope": "source.lua"
	},
	"model.RF_C_S": {
		"body": "1033",
		"description": "GTA SA #Models\nModel id 1033\n",
		"prefix": "model.RF_C_S",
		"scope": "source.lua"
	},
	"model.EXH_A_L": {
		"body": "1034",
		"description": "GTA SA #Models\nModel id 1034\n",
		"prefix": "model.EXH_A_L",
		"scope": "source.lua"
	},
	"model.RF_C_L": {
		"body": "1035",
		"description": "GTA SA #Models\nModel id 1035\n",
		"prefix": "model.RF_C_L",
		"scope": "source.lua"
	},
	"model.WG_L_A_L": {
		"body": "1036",
		"description": "GTA SA #Models\nModel id 1036\n",
		"prefix": "model.WG_L_A_L",
		"scope": "source.lua"
	},
	"model.EXH_C_L": {
		"body": "1037",
		"description": "GTA SA #Models\nModel id 1037\n",
		"prefix": "model.EXH_C_L",
		"scope": "source.lua"
	},
	"model.RF_A_L": {
		"body": "1038",
		"description": "GTA SA #Models\nModel id 1038\n",
		"prefix": "model.RF_A_L",
		"scope": "source.lua"
	},
	"model.WG_L_C_L": {
		"body": "1039",
		"description": "GTA SA #Models\nModel id 1039\n",
		"prefix": "model.WG_L_C_L",
		"scope": "source.lua"
	},
	"model.WG_R_A_L": {
		"body": "1040",
		"description": "GTA SA #Models\nModel id 1040\n",
		"prefix": "model.WG_R_A_L",
		"scope": "source.lua"
	},
	"model.WG_R_C_L": {
		"body": "1041",
		"description": "GTA SA #Models\nModel id 1041\n",
		"prefix": "model.WG_R_C_L",
		"scope": "source.lua"
	},
	"model.WG_L_LR_BR1": {
		"body": "1042",
		"description": "GTA SA #Models\nModel id 1042\n",
		"prefix": "model.WG_L_LR_BR1",
		"scope": "source.lua"
	},
	"model.EXH_LR_BR2": {
		"body": "1043",
		"description": "GTA SA #Models\nModel id 1043\n",
		"prefix": "model.EXH_LR_BR2",
		"scope": "source.lua"
	},
	"model.EXH_LR_BR1": {
		"body": "1044",
		"description": "GTA SA #Models\nModel id 1044\n",
		"prefix": "model.EXH_LR_BR1",
		"scope": "source.lua"
	},
	"model.EXH_C_F": {
		"body": "1045",
		"description": "GTA SA #Models\nModel id 1045\n",
		"prefix": "model.EXH_C_F",
		"scope": "source.lua"
	},
	"model.EXH_A_F": {
		"body": "1046",
		"description": "GTA SA #Models\nModel id 1046\n",
		"prefix": "model.EXH_A_F",
		"scope": "source.lua"
	},
	"model.WG_L_A_F": {
		"body": "1047",
		"description": "GTA SA #Models\nModel id 1047\n",
		"prefix": "model.WG_L_A_F",
		"scope": "source.lua"
	},
	"model.WG_L_C_F": {
		"body": "1048",
		"description": "GTA SA #Models\nModel id 1048\n",
		"prefix": "model.WG_L_C_F",
		"scope": "source.lua"
	},
	"model.SPL_A_F_R": {
		"body": "1049",
		"description": "GTA SA #Models\nModel id 1049\n",
		"prefix": "model.SPL_A_F_R",
		"scope": "source.lua"
	},
	"model.SPL_C_F_R": {
		"body": "1050",
		"description": "GTA SA #Models\nModel id 1050\n",
		"prefix": "model.SPL_C_F_R",
		"scope": "source.lua"
	},
	"model.WG_R_A_F": {
		"body": "1051",
		"description": "GTA SA #Models\nModel id 1051\n",
		"prefix": "model.WG_R_A_F",
		"scope": "source.lua"
	},
	"model.WG_R_C_F": {
		"body": "1052",
		"description": "GTA SA #Models\nModel id 1052\n",
		"prefix": "model.WG_R_C_F",
		"scope": "source.lua"
	},
	"model.RF_C_F": {
		"body": "1053",
		"description": "GTA SA #Models\nModel id 1053\n",
		"prefix": "model.RF_C_F",
		"scope": "source.lua"
	},
	"model.RF_A_F": {
		"body": "1054",
		"description": "GTA SA #Models\nModel id 1054\n",
		"prefix": "model.RF_A_F",
		"scope": "source.lua"
	},
	"model.RF_A_ST": {
		"body": "1055",
		"description": "GTA SA #Models\nModel id 1055\n",
		"prefix": "model.RF_A_ST",
		"scope": "source.lua"
	},
	"model.WG_L_A_ST": {
		"body": "1056",
		"description": "GTA SA #Models\nModel id 1056\n",
		"prefix": "model.WG_L_A_ST",
		"scope": "source.lua"
	},
	"model.WG_L_C_ST": {
		"body": "1057",
		"description": "GTA SA #Models\nModel id 1057\n",
		"prefix": "model.WG_L_C_ST",
		"scope": "source.lua"
	},
	"model.SPL_A_ST_R": {
		"body": "1058",
		"description": "GTA SA #Models\nModel id 1058\n",
		"prefix": "model.SPL_A_ST_R",
		"scope": "source.lua"
	},
	"model.EXH_C_ST": {
		"body": "1059",
		"description": "GTA SA #Models\nModel id 1059\n",
		"prefix": "model.EXH_C_ST",
		"scope": "source.lua"
	},
	"model.SPL_C_ST_R": {
		"body": "1060",
		"description": "GTA SA #Models\nModel id 1060\n",
		"prefix": "model.SPL_C_ST_R",
		"scope": "source.lua"
	},
	"model.RF_C_ST": {
		"body": "1061",
		"description": "GTA SA #Models\nModel id 1061\n",
		"prefix": "model.RF_C_ST",
		"scope": "source.lua"
	},
	"model.WG_R_A_ST": {
		"body": "1062",
		"description": "GTA SA #Models\nModel id 1062\n",
		"prefix": "model.WG_R_A_ST",
		"scope": "source.lua"
	},
	"model.WG_R_C_ST": {
		"body": "1063",
		"description": "GTA SA #Models\nModel id 1063\n",
		"prefix": "model.WG_R_C_ST",
		"scope": "source.lua"
	},
	"model.EXH_A_ST": {
		"body": "1064",
		"description": "GTA SA #Models\nModel id 1064\n",
		"prefix": "model.EXH_A_ST",
		"scope": "source.lua"
	},
	"model.EXH_A_J": {
		"body": "1065",
		"description": "GTA SA #Models\nModel id 1065\n",
		"prefix": "model.EXH_A_J",
		"scope": "source.lua"
	},
	"model.EXH_C_J": {
		"body": "1066",
		"description": "GTA SA #Models\nModel id 1066\n",
		"prefix": "model.EXH_C_J",
		"scope": "source.lua"
	},
	"model.RF_A_J": {
		"body": "1067",
		"description": "GTA SA #Models\nModel id 1067\n",
		"prefix": "model.RF_A_J",
		"scope": "source.lua"
	},
	"model.RF_C_J": {
		"body": "1068",
		"description": "GTA SA #Models\nModel id 1068\n",
		"prefix": "model.RF_C_J",
		"scope": "source.lua"
	},
	"model.WG_L_A_J": {
		"body": "1069",
		"description": "GTA SA #Models\nModel id 1069\n",
		"prefix": "model.WG_L_A_J",
		"scope": "source.lua"
	},
	"model.WG_L_C_J": {
		"body": "1070",
		"description": "GTA SA #Models\nModel id 1070\n",
		"prefix": "model.WG_L_C_J",
		"scope": "source.lua"
	},
	"model.WG_R_A_J": {
		"body": "1071",
		"description": "GTA SA #Models\nModel id 1071\n",
		"prefix": "model.WG_R_A_J",
		"scope": "source.lua"
	},
	"model.WG_R_C_J": {
		"body": "1072",
		"description": "GTA SA #Models\nModel id 1072\n",
		"prefix": "model.WG_R_C_J",
		"scope": "source.lua"
	},
	"model.WHEEL_SR6": {
		"body": "1073",
		"description": "GTA SA #Models\nModel id 1073\n",
		"prefix": "model.WHEEL_SR6",
		"scope": "source.lua"
	},
	"model.WHEEL_SR3": {
		"body": "1074",
		"description": "GTA SA #Models\nModel id 1074\n",
		"prefix": "model.WHEEL_SR3",
		"scope": "source.lua"
	},
	"model.WHEEL_SR2": {
		"body": "1075",
		"description": "GTA SA #Models\nModel id 1075\n",
		"prefix": "model.WHEEL_SR2",
		"scope": "source.lua"
	},
	"model.WHEEL_LR4": {
		"body": "1076",
		"description": "GTA SA #Models\nModel id 1076\n",
		"prefix": "model.WHEEL_LR4",
		"scope": "source.lua"
	},
	"model.WHEEL_LR1": {
		"body": "1077",
		"description": "GTA SA #Models\nModel id 1077\n",
		"prefix": "model.WHEEL_LR1",
		"scope": "source.lua"
	},
	"model.WHEEL_LR3": {
		"body": "1078",
		"description": "GTA SA #Models\nModel id 1078\n",
		"prefix": "model.WHEEL_LR3",
		"scope": "source.lua"
	},
	"model.WHEEL_SR1": {
		"body": "1079",
		"description": "GTA SA #Models\nModel id 1079\n",
		"prefix": "model.WHEEL_SR1",
		"scope": "source.lua"
	},
	"model.WHEEL_SR5": {
		"body": "1080",
		"description": "GTA SA #Models\nModel id 1080\n",
		"prefix": "model.WHEEL_SR5",
		"scope": "source.lua"
	},
	"model.WHEEL_SR4": {
		"body": "1081",
		"description": "GTA SA #Models\nModel id 1081\n",
		"prefix": "model.WHEEL_SR4",
		"scope": "source.lua"
	},
	"model.WHEEL_GN1": {
		"body": "1082",
		"description": "GTA SA #Models\nModel id 1082\n",
		"prefix": "model.WHEEL_GN1",
		"scope": "source.lua"
	},
	"model.WHEEL_LR2": {
		"body": "1083",
		"description": "GTA SA #Models\nModel id 1083\n",
		"prefix": "model.WHEEL_LR2",
		"scope": "source.lua"
	},
	"model.WHEEL_LR5": {
		"body": "1084",
		"description": "GTA SA #Models\nModel id 1084\n",
		"prefix": "model.WHEEL_LR5",
		"scope": "source.lua"
	},
	"model.WHEEL_GN2": {
		"body": "1085",
		"description": "GTA SA #Models\nModel id 1085\n",
		"prefix": "model.WHEEL_GN2",
		"scope": "source.lua"
	},
	"model.STEREO": {
		"body": "1086",
		"description": "GTA SA #Models\nModel id 1086\n",
		"prefix": "model.STEREO",
		"scope": "source.lua"
	},
	"model.HYDRALICS": {
		"body": "1087",
		"description": "GTA SA #Models\nModel id 1087\n",
		"prefix": "model.HYDRALICS",
		"scope": "source.lua"
	},
	"model.RF_A_U": {
		"body": "1088",
		"description": "GTA SA #Models\nModel id 1088\n",
		"prefix": "model.RF_A_U",
		"scope": "source.lua"
	},
	"model.EXH_C_U": {
		"body": "1089",
		"description": "GTA SA #Models\nModel id 1089\n",
		"prefix": "model.EXH_C_U",
		"scope": "source.lua"
	},
	"model.WG_L_A_U": {
		"body": "1090",
		"description": "GTA SA #Models\nModel id 1090\n",
		"prefix": "model.WG_L_A_U",
		"scope": "source.lua"
	},
	"model.RF_C_U": {
		"body": "1091",
		"description": "GTA SA #Models\nModel id 1091\n",
		"prefix": "model.RF_C_U",
		"scope": "source.lua"
	},
	"model.EXH_A_U": {
		"body": "1092",
		"description": "GTA SA #Models\nModel id 1092\n",
		"prefix": "model.EXH_A_U",
		"scope": "source.lua"
	},
	"model.WG_L_C_U": {
		"body": "1093",
		"description": "GTA SA #Models\nModel id 1093\n",
		"prefix": "model.WG_L_C_U",
		"scope": "source.lua"
	},
	"model.WG_R_A_U": {
		"body": "1094",
		"description": "GTA SA #Models\nModel id 1094\n",
		"prefix": "model.WG_R_A_U",
		"scope": "source.lua"
	},
	"model.WG_R_C_U": {
		"body": "1095",
		"description": "GTA SA #Models\nModel id 1095\n",
		"prefix": "model.WG_R_C_U",
		"scope": "source.lua"
	},
	"model.WHEEL_GN3": {
		"body": "1096",
		"description": "GTA SA #Models\nModel id 1096\n",
		"prefix": "model.WHEEL_GN3",
		"scope": "source.lua"
	},
	"model.WHEEL_GN4": {
		"body": "1097",
		"description": "GTA SA #Models\nModel id 1097\n",
		"prefix": "model.WHEEL_GN4",
		"scope": "source.lua"
	},
	"model.WHEEL_GN5": {
		"body": "1098",
		"description": "GTA SA #Models\nModel id 1098\n",
		"prefix": "model.WHEEL_GN5",
		"scope": "source.lua"
	},
	"model.WG_R_LR_BR1": {
		"body": "1099",
		"description": "GTA SA #Models\nModel id 1099\n",
		"prefix": "model.WG_R_LR_BR1",
		"scope": "source.lua"
	},
	"model.MISC_C_LR_REM1": {
		"body": "1100",
		"description": "GTA SA #Models\nModel id 1100\n",
		"prefix": "model.MISC_C_LR_REM1",
		"scope": "source.lua"
	},
	"model.WG_R_LR_REM1": {
		"body": "1101",
		"description": "GTA SA #Models\nModel id 1101\n",
		"prefix": "model.WG_R_LR_REM1",
		"scope": "source.lua"
	},
	"model.WG_R_LR_SV": {
		"body": "1102",
		"description": "GTA SA #Models\nModel id 1102\n",
		"prefix": "model.WG_R_LR_SV",
		"scope": "source.lua"
	},
	"model.RF_LR_BL2": {
		"body": "1103",
		"description": "GTA SA #Models\nModel id 1103\n",
		"prefix": "model.RF_LR_BL2",
		"scope": "source.lua"
	},
	"model.EXH_LR_BL1": {
		"body": "1104",
		"description": "GTA SA #Models\nModel id 1104\n",
		"prefix": "model.EXH_LR_BL1",
		"scope": "source.lua"
	},
	"model.EXH_LR_BL2": {
		"body": "1105",
		"description": "GTA SA #Models\nModel id 1105\n",
		"prefix": "model.EXH_LR_BL2",
		"scope": "source.lua"
	},
	"model.WG_L_LR_REM2": {
		"body": "1106",
		"description": "GTA SA #Models\nModel id 1106\n",
		"prefix": "model.WG_L_LR_REM2",
		"scope": "source.lua"
	},
	"model.WG_R_LR_BL1": {
		"body": "1107",
		"description": "GTA SA #Models\nModel id 1107\n",
		"prefix": "model.WG_R_LR_BL1",
		"scope": "source.lua"
	},
	"model.WG_L_LR_BL1": {
		"body": "1108",
		"description": "GTA SA #Models\nModel id 1108\n",
		"prefix": "model.WG_L_LR_BL1",
		"scope": "source.lua"
	},
	"model.BBB_LR_SLV1": {
		"body": "1109",
		"description": "GTA SA #Models\nModel id 1109\n",
		"prefix": "model.BBB_LR_SLV1",
		"scope": "source.lua"
	},
	"model.BBB_LR_SLV2": {
		"body": "1110",
		"description": "GTA SA #Models\nModel id 1110\n",
		"prefix": "model.BBB_LR_SLV2",
		"scope": "source.lua"
	},
	"model.BNT_LR_SLV1": {
		"body": "1111",
		"description": "GTA SA #Models\nModel id 1111\n",
		"prefix": "model.BNT_LR_SLV1",
		"scope": "source.lua"
	},
	"model.BNT_LR_SLV2": {
		"body": "1112",
		"description": "GTA SA #Models\nModel id 1112\n",
		"prefix": "model.BNT_LR_SLV2",
		"scope": "source.lua"
	},
	"model.EXH_LR_SLV1": {
		"body": "1113",
		"description": "GTA SA #Models\nModel id 1113\n",
		"prefix": "model.EXH_LR_SLV1",
		"scope": "source.lua"
	},
	"model.EXH_LR_SLV2": {
		"body": "1114",
		"description": "GTA SA #Models\nModel id 1114\n",
		"prefix": "model.EXH_LR_SLV2",
		"scope": "source.lua"
	},
	"model.FBB_LR_SLV1": {
		"body": "1115",
		"description": "GTA SA #Models\nModel id 1115\n",
		"prefix": "model.FBB_LR_SLV1",
		"scope": "source.lua"
	},
	"model.FBB_LR_SLV2": {
		"body": "1116",
		"description": "GTA SA #Models\nModel id 1116\n",
		"prefix": "model.FBB_LR_SLV2",
		"scope": "source.lua"
	},
	"model.FBMP_LR_SLV1": {
		"body": "1117",
		"description": "GTA SA #Models\nModel id 1117\n",
		"prefix": "model.FBMP_LR_SLV1",
		"scope": "source.lua"
	},
	"model.WG_L_LR_SLV1": {
		"body": "1118",
		"description": "GTA SA #Models\nModel id 1118\n",
		"prefix": "model.WG_L_LR_SLV1",
		"scope": "source.lua"
	},
	"model.WG_L_LR_SLV2": {
		"body": "1119",
		"description": "GTA SA #Models\nModel id 1119\n",
		"prefix": "model.WG_L_LR_SLV2",
		"scope": "source.lua"
	},
	"model.WG_R_LR_SLV1": {
		"body": "1120",
		"description": "GTA SA #Models\nModel id 1120\n",
		"prefix": "model.WG_R_LR_SLV1",
		"scope": "source.lua"
	},
	"model.WG_R_LR_SLV2": {
		"body": "1121",
		"description": "GTA SA #Models\nModel id 1121\n",
		"prefix": "model.WG_R_LR_SLV2",
		"scope": "source.lua"
	},
	"model.WG_L_LR_REM1": {
		"body": "1122",
		"description": "GTA SA #Models\nModel id 1122\n",
		"prefix": "model.WG_L_LR_REM1",
		"scope": "source.lua"
	},
	"model.MISC_C_LR_REM2": {
		"body": "1123",
		"description": "GTA SA #Models\nModel id 1123\n",
		"prefix": "model.MISC_C_LR_REM2",
		"scope": "source.lua"
	},
	"model.WG_R_LR_REM2": {
		"body": "1124",
		"description": "GTA SA #Models\nModel id 1124\n",
		"prefix": "model.WG_R_LR_REM2",
		"scope": "source.lua"
	},
	"model.MISC_C_LR_REM3": {
		"body": "1125",
		"description": "GTA SA #Models\nModel id 1125\n",
		"prefix": "model.MISC_C_LR_REM3",
		"scope": "source.lua"
	},
	"model.EXH_LR_REM1": {
		"body": "1126",
		"description": "GTA SA #Models\nModel id 1126\n",
		"prefix": "model.EXH_LR_REM1",
		"scope": "source.lua"
	},
	"model.EXH_LR_REM2": {
		"body": "1127",
		"description": "GTA SA #Models\nModel id 1127\n",
		"prefix": "model.EXH_LR_REM2",
		"scope": "source.lua"
	},
	"model.RF_LR_BL1": {
		"body": "1128",
		"description": "GTA SA #Models\nModel id 1128\n",
		"prefix": "model.RF_LR_BL1",
		"scope": "source.lua"
	},
	"model.EXH_LR_SV1": {
		"body": "1129",
		"description": "GTA SA #Models\nModel id 1129\n",
		"prefix": "model.EXH_LR_SV1",
		"scope": "source.lua"
	},
	"model.RF_LR_SV1": {
		"body": "1130",
		"description": "GTA SA #Models\nModel id 1130\n",
		"prefix": "model.RF_LR_SV1",
		"scope": "source.lua"
	},
	"model.RF_LR_SV2": {
		"body": "1131",
		"description": "GTA SA #Models\nModel id 1131\n",
		"prefix": "model.RF_LR_SV2",
		"scope": "source.lua"
	},
	"model.EXH_LR_SV2": {
		"body": "1132",
		"description": "GTA SA #Models\nModel id 1132\n",
		"prefix": "model.EXH_LR_SV2",
		"scope": "source.lua"
	},
	"model.WG_L_LR_SV": {
		"body": "1133",
		"description": "GTA SA #Models\nModel id 1133\n",
		"prefix": "model.WG_L_LR_SV",
		"scope": "source.lua"
	},
	"model.WG_L_LR_T1": {
		"body": "1134",
		"description": "GTA SA #Models\nModel id 1134\n",
		"prefix": "model.WG_L_LR_T1",
		"scope": "source.lua"
	},
	"model.EXH_LR_T2": {
		"body": "1135",
		"description": "GTA SA #Models\nModel id 1135\n",
		"prefix": "model.EXH_LR_T2",
		"scope": "source.lua"
	},
	"model.EXH_LR_T1": {
		"body": "1136",
		"description": "GTA SA #Models\nModel id 1136\n",
		"prefix": "model.EXH_LR_T1",
		"scope": "source.lua"
	},
	"model.WG_R_LR_T1": {
		"body": "1137",
		"description": "GTA SA #Models\nModel id 1137\n",
		"prefix": "model.WG_R_LR_T1",
		"scope": "source.lua"
	},
	"model.SPL_A_S_B": {
		"body": "1138",
		"description": "GTA SA #Models\nModel id 1138\n",
		"prefix": "model.SPL_A_S_B",
		"scope": "source.lua"
	},
	"model.SPL_C_S_B": {
		"body": "1139",
		"description": "GTA SA #Models\nModel id 1139\n",
		"prefix": "model.SPL_C_S_B",
		"scope": "source.lua"
	},
	"model.RBMP_C_S": {
		"body": "1140",
		"description": "GTA SA #Models\nModel id 1140\n",
		"prefix": "model.RBMP_C_S",
		"scope": "source.lua"
	},
	"model.RBMP_A_S": {
		"body": "1141",
		"description": "GTA SA #Models\nModel id 1141\n",
		"prefix": "model.RBMP_A_S",
		"scope": "source.lua"
	},
	"model.BNTR_B_OV": {
		"body": "1142",
		"description": "GTA SA #Models\nModel id 1142\n",
		"prefix": "model.BNTR_B_OV",
		"scope": "source.lua"
	},
	"model.BNTL_B_OV": {
		"body": "1143",
		"description": "GTA SA #Models\nModel id 1143\n",
		"prefix": "model.BNTL_B_OV",
		"scope": "source.lua"
	},
	"model.BNTR_B_SQ": {
		"body": "1144",
		"description": "GTA SA #Models\nModel id 1144\n",
		"prefix": "model.BNTR_B_SQ",
		"scope": "source.lua"
	},
	"model.BNTL_B_SQ": {
		"body": "1145",
		"description": "GTA SA #Models\nModel id 1145\n",
		"prefix": "model.BNTL_B_SQ",
		"scope": "source.lua"
	},
	"model.SPL_C_L_B": {
		"body": "1146",
		"description": "GTA SA #Models\nModel id 1146\n",
		"prefix": "model.SPL_C_L_B",
		"scope": "source.lua"
	},
	"model.SPL_A_L_B": {
		"body": "1147",
		"description": "GTA SA #Models\nModel id 1147\n",
		"prefix": "model.SPL_A_L_B",
		"scope": "source.lua"
	},
	"model.RBMP_C_L": {
		"body": "1148",
		"description": "GTA SA #Models\nModel id 1148\n",
		"prefix": "model.RBMP_C_L",
		"scope": "source.lua"
	},
	"model.RBMP_A_L": {
		"body": "1149",
		"description": "GTA SA #Models\nModel id 1149\n",
		"prefix": "model.RBMP_A_L",
		"scope": "source.lua"
	},
	"model.RBMP_A_F": {
		"body": "1150",
		"description": "GTA SA #Models\nModel id 1150\n",
		"prefix": "model.RBMP_A_F",
		"scope": "source.lua"
	},
	"model.RBMP_C_F": {
		"body": "1151",
		"description": "GTA SA #Models\nModel id 1151\n",
		"prefix": "model.RBMP_C_F",
		"scope": "source.lua"
	},
	"model.FBMP_C_F": {
		"body": "1152",
		"description": "GTA SA #Models\nModel id 1152\n",
		"prefix": "model.FBMP_C_F",
		"scope": "source.lua"
	},
	"model.FBMP_A_F": {
		"body": "1153",
		"description": "GTA SA #Models\nModel id 1153\n",
		"prefix": "model.FBMP_A_F",
		"scope": "source.lua"
	},
	"model.RBMP_A_ST": {
		"body": "1154",
		"description": "GTA SA #Models\nModel id 1154\n",
		"prefix": "model.RBMP_A_ST",
		"scope": "source.lua"
	},
	"model.FBMP_A_ST": {
		"body": "1155",
		"description": "GTA SA #Models\nModel id 1155\n",
		"prefix": "model.FBMP_A_ST",
		"scope": "source.lua"
	},
	"model.RBMP_C_ST": {
		"body": "1156",
		"description": "GTA SA #Models\nModel id 1156\n",
		"prefix": "model.RBMP_C_ST",
		"scope": "source.lua"
	},
	"model.FBMP_C_ST": {
		"body": "1157",
		"description": "GTA SA #Models\nModel id 1157\n",
		"prefix": "model.FBMP_C_ST",
		"scope": "source.lua"
	},
	"model.SPL_C_J_B": {
		"body": "1158",
		"description": "GTA SA #Models\nModel id 1158\n",
		"prefix": "model.SPL_C_J_B",
		"scope": "source.lua"
	},
	"model.RBMP_A_J": {
		"body": "1159",
		"description": "GTA SA #Models\nModel id 1159\n",
		"prefix": "model.RBMP_A_J",
		"scope": "source.lua"
	},
	"model.FBMP_A_J": {
		"body": "1160",
		"description": "GTA SA #Models\nModel id 1160\n",
		"prefix": "model.FBMP_A_J",
		"scope": "source.lua"
	},
	"model.RBMP_C_J": {
		"body": "1161",
		"description": "GTA SA #Models\nModel id 1161\n",
		"prefix": "model.RBMP_C_J",
		"scope": "source.lua"
	},
	"model.SPL_A_J_B": {
		"body": "1162",
		"description": "GTA SA #Models\nModel id 1162\n",
		"prefix": "model.SPL_A_J_B",
		"scope": "source.lua"
	},
	"model.SPL_C_U_B": {
		"body": "1163",
		"description": "GTA SA #Models\nModel id 1163\n",
		"prefix": "model.SPL_C_U_B",
		"scope": "source.lua"
	},
	"model.SPL_A_U_B": {
		"body": "1164",
		"description": "GTA SA #Models\nModel id 1164\n",
		"prefix": "model.SPL_A_U_B",
		"scope": "source.lua"
	},
	"model.FBMP_C_U": {
		"body": "1165",
		"description": "GTA SA #Models\nModel id 1165\n",
		"prefix": "model.FBMP_C_U",
		"scope": "source.lua"
	},
	"model.FBMP_A_U": {
		"body": "1166",
		"description": "GTA SA #Models\nModel id 1166\n",
		"prefix": "model.FBMP_A_U",
		"scope": "source.lua"
	},
	"model.RBMP_C_U": {
		"body": "1167",
		"description": "GTA SA #Models\nModel id 1167\n",
		"prefix": "model.RBMP_C_U",
		"scope": "source.lua"
	},
	"model.RBMP_A_U": {
		"body": "1168",
		"description": "GTA SA #Models\nModel id 1168\n",
		"prefix": "model.RBMP_A_U",
		"scope": "source.lua"
	},
	"model.FBMP_A_S": {
		"body": "1169",
		"description": "GTA SA #Models\nModel id 1169\n",
		"prefix": "model.FBMP_A_S",
		"scope": "source.lua"
	},
	"model.FBMP_C_S": {
		"body": "1170",
		"description": "GTA SA #Models\nModel id 1170\n",
		"prefix": "model.FBMP_C_S",
		"scope": "source.lua"
	},
	"model.FBMP_A_L": {
		"body": "1171",
		"description": "GTA SA #Models\nModel id 1171\n",
		"prefix": "model.FBMP_A_L",
		"scope": "source.lua"
	},
	"model.FBMP_C_L": {
		"body": "1172",
		"description": "GTA SA #Models\nModel id 1172\n",
		"prefix": "model.FBMP_C_L",
		"scope": "source.lua"
	},
	"model.FBMP_C_J": {
		"body": "1173",
		"description": "GTA SA #Models\nModel id 1173\n",
		"prefix": "model.FBMP_C_J",
		"scope": "source.lua"
	},
	"model.FBMP_LR_BR1": {
		"body": "1174",
		"description": "GTA SA #Models\nModel id 1174\n",
		"prefix": "model.FBMP_LR_BR1",
		"scope": "source.lua"
	},
	"model.FBMP_LR_BR2": {
		"body": "1175",
		"description": "GTA SA #Models\nModel id 1175\n",
		"prefix": "model.FBMP_LR_BR2",
		"scope": "source.lua"
	},
	"model.RBMP_LR_BR1": {
		"body": "1176",
		"description": "GTA SA #Models\nModel id 1176\n",
		"prefix": "model.RBMP_LR_BR1",
		"scope": "source.lua"
	},
	"model.RBMP_LR_BR2": {
		"body": "1177",
		"description": "GTA SA #Models\nModel id 1177\n",
		"prefix": "model.RBMP_LR_BR2",
		"scope": "source.lua"
	},
	"model.RBMP_LR_REM2": {
		"body": "1178",
		"description": "GTA SA #Models\nModel id 1178\n",
		"prefix": "model.RBMP_LR_REM2",
		"scope": "source.lua"
	},
	"model.FBMP_LR_REM1": {
		"body": "1179",
		"description": "GTA SA #Models\nModel id 1179\n",
		"prefix": "model.FBMP_LR_REM1",
		"scope": "source.lua"
	},
	"model.RBMP_LR_REM1": {
		"body": "1180",
		"description": "GTA SA #Models\nModel id 1180\n",
		"prefix": "model.RBMP_LR_REM1",
		"scope": "source.lua"
	},
	"model.FBMP_LR_BL2": {
		"body": "1181",
		"description": "GTA SA #Models\nModel id 1181\n",
		"prefix": "model.FBMP_LR_BL2",
		"scope": "source.lua"
	},
	"model.FBMP_LR_BL1": {
		"body": "1182",
		"description": "GTA SA #Models\nModel id 1182\n",
		"prefix": "model.FBMP_LR_BL1",
		"scope": "source.lua"
	},
	"model.RBMP_LR_BL2": {
		"body": "1183",
		"description": "GTA SA #Models\nModel id 1183\n",
		"prefix": "model.RBMP_LR_BL2",
		"scope": "source.lua"
	},
	"model.RBMP_LR_BL1": {
		"body": "1184",
		"description": "GTA SA #Models\nModel id 1184\n",
		"prefix": "model.RBMP_LR_BL1",
		"scope": "source.lua"
	},
	"model.FBMP_LR_REM2": {
		"body": "1185",
		"description": "GTA SA #Models\nModel id 1185\n",
		"prefix": "model.FBMP_LR_REM2",
		"scope": "source.lua"
	},
	"model.RBMP_LR_SV2": {
		"body": "1186",
		"description": "GTA SA #Models\nModel id 1186\n",
		"prefix": "model.RBMP_LR_SV2",
		"scope": "source.lua"
	},
	"model.RBMP_LR_SV1": {
		"body": "1187",
		"description": "GTA SA #Models\nModel id 1187\n",
		"prefix": "model.RBMP_LR_SV1",
		"scope": "source.lua"
	},
	"model.FBMP_LR_SV2": {
		"body": "1188",
		"description": "GTA SA #Models\nModel id 1188\n",
		"prefix": "model.FBMP_LR_SV2",
		"scope": "source.lua"
	},
	"model.FBMP_LR_SV1": {
		"body": "1189",
		"description": "GTA SA #Models\nModel id 1189\n",
		"prefix": "model.FBMP_LR_SV1",
		"scope": "source.lua"
	},
	"model.FBMP_LR_T2": {
		"body": "1190",
		"description": "GTA SA #Models\nModel id 1190\n",
		"prefix": "model.FBMP_LR_T2",
		"scope": "source.lua"
	},
	"model.FBMP_LR_T1": {
		"body": "1191",
		"description": "GTA SA #Models\nModel id 1191\n",
		"prefix": "model.FBMP_LR_T1",
		"scope": "source.lua"
	},
	"model.RBMP_LR_T1": {
		"body": "1192",
		"description": "GTA SA #Models\nModel id 1192\n",
		"prefix": "model.RBMP_LR_T1",
		"scope": "source.lua"
	},
	"model.RBMP_LR_T2": {
		"body": "1193",
		"description": "GTA SA #Models\nModel id 1193\n",
		"prefix": "model.RBMP_LR_T2",
		"scope": "source.lua"
	},
	
	"weapon.FIST": {
		"body": "0",
		"description": "GTA SA #Weapons\nWeapon id 0\n",
		"prefix": "weapon.FIST",
		"scope": "source.lua"
	},
	"weapon.BRASSKNUCKLES": {
		"body": "1",
		"description": "GTA SA #Weapons\nWeapon id 1\n",
		"prefix": "weapon.BRASSKNUCKLES",
		"scope": "source.lua"
	},
	"weapon.GOLFCLUB": {
		"body": "2",
		"description": "GTA SA #Weapons\nWeapon id 2\n",
		"prefix": "weapon.GOLFCLUB",
		"scope": "source.lua"
	},
	"weapon.NIGHTSTICK": {
		"body": "3",
		"description": "GTA SA #Weapons\nWeapon id 3\n",
		"prefix": "weapon.NIGHTSTICK",
		"scope": "source.lua"
	},
	"weapon.KNIFE": {
		"body": "4",
		"description": "GTA SA #Weapons\nWeapon id 4\n",
		"prefix": "weapon.KNIFE",
		"scope": "source.lua"
	},
	"weapon.BASEBALLBAT": {
		"body": "5",
		"description": "GTA SA #Weapons\nWeapon id 5\n",
		"prefix": "weapon.BASEBALLBAT",
		"scope": "source.lua"
	},
	"weapon.SHOVEL": {
		"body": "6",
		"description": "GTA SA #Weapons\nWeapon id 6\n",
		"prefix": "weapon.SHOVEL",
		"scope": "source.lua"
	},
	"weapon.POOLCUE": {
		"body": "7",
		"description": "GTA SA #Weapons\nWeapon id 7\n",
		"prefix": "weapon.POOLCUE",
		"scope": "source.lua"
	},
	"weapon.KATANA": {
		"body": "8",
		"description": "GTA SA #Weapons\nWeapon id 8\n",
		"prefix": "weapon.KATANA",
		"scope": "source.lua"
	},
	"weapon.CHAINSAW": {
		"body": "9",
		"description": "GTA SA #Weapons\nWeapon id 9\n",
		"prefix": "weapon.CHAINSAW",
		"scope": "source.lua"
	},
	"weapon.PURPLEDILDO": {
		"body": "10",
		"description": "GTA SA #Weapons\nWeapon id 10\n",
		"prefix": "weapon.PURPLEDILDO",
		"scope": "source.lua"
	},
	"weapon.WHITEDILDO": {
		"body": "11",
		"description": "GTA SA #Weapons\nWeapon id 11\n",
		"prefix": "weapon.WHITEDILDO",
		"scope": "source.lua"
	},
	"weapon.WHITEVIBRATOR": {
		"body": "12",
		"description": "GTA SA #Weapons\nWeapon id 12\n",
		"prefix": "weapon.WHITEVIBRATOR",
		"scope": "source.lua"
	},
	"weapon.SILVERVIBRATOR": {
		"body": "13",
		"description": "GTA SA #Weapons\nWeapon id 13\n",
		"prefix": "weapon.SILVERVIBRATOR",
		"scope": "source.lua"
	},
	"weapon.FLOWERS": {
		"body": "14",
		"description": "GTA SA #Weapons\nWeapon id 14\n",
		"prefix": "weapon.FLOWERS",
		"scope": "source.lua"
	},
	"weapon.CANE": {
		"body": "15",
		"description": "GTA SA #Weapons\nWeapon id 15\n",
		"prefix": "weapon.CANE",
		"scope": "source.lua"
	},
	"weapon.GRENADE": {
		"body": "16",
		"description": "GTA SA #Weapons\nWeapon id 16\n",
		"prefix": "weapon.GRENADE",
		"scope": "source.lua"
	},
	"weapon.TEARGAS": {
		"body": "17",
		"description": "GTA SA #Weapons\nWeapon id 17\n",
		"prefix": "weapon.TEARGAS",
		"scope": "source.lua"
	},
	"weapon.MOLOTOV": {
		"body": "18",
		"description": "GTA SA #Weapons\nWeapon id 18\n",
		"prefix": "weapon.MOLOTOV",
		"scope": "source.lua"
	},
	"weapon.COLT45": {
		"body": "22",
		"description": "GTA SA #Weapons\nWeapon id 22\n",
		"prefix": "weapon.COLT45",
		"scope": "source.lua"
	},
	"weapon.SILENCED": {
		"body": "23",
		"description": "GTA SA #Weapons\nWeapon id 23\n",
		"prefix": "weapon.SILENCED",
		"scope": "source.lua"
	},
	"weapon.DESERTEAGLE": {
		"body": "24",
		"description": "GTA SA #Weapons\nWeapon id 24\n",
		"prefix": "weapon.DESERTEAGLE",
		"scope": "source.lua"
	},
	"weapon.SHOTGUN": {
		"body": "25",
		"description": "GTA SA #Weapons\nWeapon id 25\n",
		"prefix": "weapon.SHOTGUN",
		"scope": "source.lua"
	},
	"weapon.SAWNOFFSHOTGUN": {
		"body": "26",
		"description": "GTA SA #Weapons\nWeapon id 26\n",
		"prefix": "weapon.SAWNOFFSHOTGUN",
		"scope": "source.lua"
	},
	"weapon.COMBATSHOTGUN": {
		"body": "27",
		"description": "GTA SA #Weapons\nWeapon id 27\n",
		"prefix": "weapon.COMBATSHOTGUN",
		"scope": "source.lua"
	},
	"weapon.UZI": {
		"body": "28",
		"description": "GTA SA #Weapons\nWeapon id 28\n",
		"prefix": "weapon.UZI",
		"scope": "source.lua"
	},
	"weapon.MP5": {
		"body": "29",
		"description": "GTA SA #Weapons\nWeapon id 29\n",
		"prefix": "weapon.MP5",
		"scope": "source.lua"
	},
	"weapon.AK47": {
		"body": "30",
		"description": "GTA SA #Weapons\nWeapon id 30\n",
		"prefix": "weapon.AK47",
		"scope": "source.lua"
	},
	"weapon.M4": {
		"body": "31",
		"description": "GTA SA #Weapons\nWeapon id 31\n",
		"prefix": "weapon.M4",
		"scope": "source.lua"
	},
	"weapon.TEC9": {
		"body": "32",
		"description": "GTA SA #Weapons\nWeapon id 32\n",
		"prefix": "weapon.TEC9",
		"scope": "source.lua"
	},
	"weapon.RIFLE": {
		"body": "33",
		"description": "GTA SA #Weapons\nWeapon id 33\n",
		"prefix": "weapon.RIFLE",
		"scope": "source.lua"
	},
	"weapon.SNIPERRIFLE": {
		"body": "34",
		"description": "GTA SA #Weapons\nWeapon id 34\n",
		"prefix": "weapon.SNIPERRIFLE",
		"scope": "source.lua"
	},
	"weapon.ROCKETLAUNCHER": {
		"body": "35",
		"description": "GTA SA #Weapons\nWeapon id 35\n",
		"prefix": "weapon.ROCKETLAUNCHER",
		"scope": "source.lua"
	},
	"weapon.HEATSEEKER": {
		"body": "36",
		"description": "GTA SA #Weapons\nWeapon id 36\n",
		"prefix": "weapon.HEATSEEKER",
		"scope": "source.lua"
	},
	"weapon.FLAMETHROWER": {
		"body": "37",
		"description": "GTA SA #Weapons\nWeapon id 37\n",
		"prefix": "weapon.FLAMETHROWER",
		"scope": "source.lua"
	},
	"weapon.MINIGUN": {
		"body": "38",
		"description": "GTA SA #Weapons\nWeapon id 38\n",
		"prefix": "weapon.MINIGUN",
		"scope": "source.lua"
	},
	"weapon.SATCHELCHARGE": {
		"body": "39",
		"description": "GTA SA #Weapons\nWeapon id 39\n",
		"prefix": "weapon.SATCHELCHARGE",
		"scope": "source.lua"
	},
	"weapon.DETONATOR": {
		"body": "40",
		"description": "GTA SA #Weapons\nWeapon id 40\n",
		"prefix": "weapon.DETONATOR",
		"scope": "source.lua"
	},
	"weapon.SPRAYCAN": {
		"body": "41",
		"description": "GTA SA #Weapons\nWeapon id 41\n",
		"prefix": "weapon.SPRAYCAN",
		"scope": "source.lua"
	},
	"weapon.FIREEXTINGUISHER": {
		"body": "42",
		"description": "GTA SA #Weapons\nWeapon id 42\n",
		"prefix": "weapon.FIREEXTINGUISHER",
		"scope": "source.lua"
	},
	"weapon.CAMERA": {
		"body": "43",
		"description": "GTA SA #Weapons\nWeapon id 43\n",
		"prefix": "weapon.CAMERA",
		"scope": "source.lua"
	},
	"weapon.NIGHTVISION": {
		"body": "44",
		"description": "GTA SA #Weapons\nWeapon id 44\n",
		"prefix": "weapon.NIGHTVISION",
		"scope": "source.lua"
	},
	"weapon.THERMALVISION": {
		"body": "45",
		"description": "GTA SA #Weapons\nWeapon id 45\n",
		"prefix": "weapon.THERMALVISION",
		"scope": "source.lua"
	},
	"weapon.PARACHUTE": {
		"body": "46",
		"description": "GTA SA #Weapons\nWeapon id 46\n",
		"prefix": "weapon.PARACHUTE",
		"scope": "source.lua"
	},
		
	"button.GOLEFT_GORIGHT": {
		"body": "0",
		"description": "GTA SA #Buttons\nButton id 0\n",
		"prefix": "button.GOLEFT_GORIGHT",
		"scope": "source.lua"
	},
	"button.GOFORWARD_GOBACK": {
		"body": "1",
		"description": "GTA SA #Buttons\nButton id 1\n",
		"prefix": "button.GOFORWARD_GOBACK",
		"scope": "source.lua"
	},
	"button.ANSWERPHONE_FIREWEAPONALT": {
		"body": "4",
		"description": "GTA SA #Buttons\nButton id 4\n",
		"prefix": "button.ANSWERPHONE_FIREWEAPONALT",
		"scope": "source.lua"
	},
	"button.CYCLEWEAPONLEFT_SNIPERZOOMIN": {
		"body": "5",
		"description": "GTA SA #Buttons\nButton id 5\n",
		"prefix": "button.CYCLEWEAPONLEFT_SNIPERZOOMIN",
		"scope": "source.lua"
	},
	"button.LOCKTARGET": {
		"body": "6",
		"description": "GTA SA #Buttons\nButton id 6\n",
		"prefix": "button.LOCKTARGET",
		"scope": "source.lua"
	},
	"button.CYCLEWEAPONRIGHT_SNIPERZOOMOUT": {
		"body": "7",
		"description": "GTA SA #Buttons\nButton id 7\n",
		"prefix": "button.CYCLEWEAPONRIGHT_SNIPERZOOMOUT",
		"scope": "source.lua"
	},
	"button.GROUPCONTROLFWD": {
		"body": "8",
		"description": "GTA SA #Buttons\nButton id 8\n",
		"prefix": "button.GROUPCONTROLFWD",
		"scope": "source.lua"
	},
	"button.GROUPCONTROLBWD": {
		"body": "9",
		"description": "GTA SA #Buttons\nButton id 9\n",
		"prefix": "button.GROUPCONTROLBWD",
		"scope": "source.lua"
	},
	"button.CONVERSATIONNO": {
		"body": "10",
		"description": "GTA SA #Buttons\nButton id 10\n",
		"prefix": "button.CONVERSATIONNO",
		"scope": "source.lua"
	},
	"button.CONVERSATIONYES": {
		"body": "11",
		"description": "GTA SA #Buttons\nButton id 11\n",
		"prefix": "button.CONVERSATIONYES",
		"scope": "source.lua"
	},
	"button.CHANGECAMERAVIEW": {
		"body": "13",
		"description": "GTA SA #Buttons\nButton id 13\n",
		"prefix": "button.CHANGECAMERAVIEW",
		"scope": "source.lua"
	},
	"button.JUMP": {
		"body": "14",
		"description": "GTA SA #Buttons\nButton id 14\n",
		"prefix": "button.JUMP",
		"scope": "source.lua"
	},
	"button.ENTERVEHICLE": {
		"body": "15",
		"description": "GTA SA #Buttons\nButton id 15\n",
		"prefix": "button.ENTERVEHICLE",
		"scope": "source.lua"
	},
	"button.SPRINT": {
		"body": "16",
		"description": "GTA SA #Buttons\nButton id 16\n",
		"prefix": "button.SPRINT",
		"scope": "source.lua"
	},
	"button.FIREWEAPON": {
		"body": "17",
		"description": "GTA SA #Buttons\nButton id 17\n",
		"prefix": "button.FIREWEAPON",
		"scope": "source.lua"
	},
	"button.CROUCH": {
		"body": "18",
		"description": "GTA SA #Buttons\nButton id 18\n",
		"prefix": "button.CROUCH",
		"scope": "source.lua"
	},
	"button.LOOKBEHIND": {
		"body": "19",
		"description": "GTA SA #Buttons\nButton id 19\n",
		"prefix": "button.LOOKBEHIND",
		"scope": "source.lua"
	},
	"button.WALK": {
		"body": "21",
		"description": "GTA SA #Buttons\nButton id 21\n",
		"prefix": "button.WALK",
		"scope": "source.lua"
	},
		
	"vkey.VK_LBUTTON": {
		"body": "0x01",
		"description": "System #VK_Keys\nVK_Keys id 0x01\n",
		"prefix": "vkey.VK_LBUTTON",
		"scope": "source.lua"
	},
	"vkey.VK_RBUTTON": {
		"body": "0x02",
		"description": "System #VK_Keys\nVK_Keys id 0x02\n",
		"prefix": "vkey.VK_RBUTTON",
		"scope": "source.lua"
	},
	"vkey.VK_CANCEL": {
		"body": "0x03",
		"description": "System #VK_Keys\nVK_Keys id 0x03\n",
		"prefix": "vkey.VK_CANCEL",
		"scope": "source.lua"
	},
	"vkey.VK_MBUTTON": {
		"body": "0x04",
		"description": "System #VK_Keys\nVK_Keys id 0x04\n",
		"prefix": "vkey.VK_MBUTTON",
		"scope": "source.lua"
	},
	"vkey.VK_XBUTTON1": {
		"body": "0x05",
		"description": "System #VK_Keys\nVK_Keys id 0x05\n",
		"prefix": "vkey.VK_XBUTTON1",
		"scope": "source.lua"
	},
	"vkey.VK_XBUTTON2": {
		"body": "0x06",
		"description": "System #VK_Keys\nVK_Keys id 0x06\n",
		"prefix": "vkey.VK_XBUTTON2",
		"scope": "source.lua"
	},
	"vkey.VK_BACK": {
		"body": "0x08",
		"description": "System #VK_Keys\nVK_Keys id 0x08\n",
		"prefix": "vkey.VK_BACK",
		"scope": "source.lua"
	},
	"vkey.VK_TAB": {
		"body": "0x09",
		"description": "System #VK_Keys\nVK_Keys id 0x09\n",
		"prefix": "vkey.VK_TAB",
		"scope": "source.lua"
	},
	"vkey.VK_CLEAR": {
		"body": "0x0C",
		"description": "System #VK_Keys\nVK_Keys id 0x0C\n",
		"prefix": "vkey.VK_CLEAR",
		"scope": "source.lua"
	},
	"vkey.VK_RETURN": {
		"body": "0x0D",
		"description": "System #VK_Keys\nVK_Keys id 0x0D\n",
		"prefix": "vkey.VK_RETURN",
		"scope": "source.lua"
	},
	"vkey.VK_SHIFT": {
		"body": "0x10",
		"description": "System #VK_Keys\nVK_Keys id 0x10\n",
		"prefix": "vkey.VK_SHIFT",
		"scope": "source.lua"
	},
	"vkey.VK_CONTROL": {
		"body": "0x11",
		"description": "System #VK_Keys\nVK_Keys id 0x11\n",
		"prefix": "vkey.VK_CONTROL",
		"scope": "source.lua"
	},
	"vkey.VK_MENU": {
		"body": "0x12",
		"description": "System #VK_Keys\nVK_Keys id 0x12\n",
		"prefix": "vkey.VK_MENU",
		"scope": "source.lua"
	},
	"vkey.VK_PAUSE": {
		"body": "0x13",
		"description": "System #VK_Keys\nVK_Keys id 0x13\n",
		"prefix": "vkey.VK_PAUSE",
		"scope": "source.lua"
	},
	"vkey.VK_CAPITAL": {
		"body": "0x14",
		"description": "System #VK_Keys\nVK_Keys id 0x14\n",
		"prefix": "vkey.VK_CAPITAL",
		"scope": "source.lua"
	},
	"vkey.VK_KANA": {
		"body": "0x15",
		"description": "System #VK_Keys\nVK_Keys id 0x15\n",
		"prefix": "vkey.VK_KANA",
		"scope": "source.lua"
	},
	"vkey.VK_JUNJA": {
		"body": "0x17",
		"description": "System #VK_Keys\nVK_Keys id 0x17\n",
		"prefix": "vkey.VK_JUNJA",
		"scope": "source.lua"
	},
	"vkey.VK_FINAL": {
		"body": "0x18",
		"description": "System #VK_Keys\nVK_Keys id 0x18\n",
		"prefix": "vkey.VK_FINAL",
		"scope": "source.lua"
	},
	"vkey.VK_KANJI": {
		"body": "0x19",
		"description": "System #VK_Keys\nVK_Keys id 0x19\n",
		"prefix": "vkey.VK_KANJI",
		"scope": "source.lua"
	},
	"vkey.VK_ESCAPE": {
		"body": "0x1B",
		"description": "System #VK_Keys\nVK_Keys id 0x1B\n",
		"prefix": "vkey.VK_ESCAPE",
		"scope": "source.lua"
	},
	"vkey.VK_CONVERT": {
		"body": "0x1C",
		"description": "System #VK_Keys\nVK_Keys id 0x1C\n",
		"prefix": "vkey.VK_CONVERT",
		"scope": "source.lua"
	},
	"vkey.VK_NONCONVERT": {
		"body": "0x1D",
		"description": "System #VK_Keys\nVK_Keys id 0x1D\n",
		"prefix": "vkey.VK_NONCONVERT",
		"scope": "source.lua"
	},
	"vkey.VK_ACCEPT": {
		"body": "0x1E",
		"description": "System #VK_Keys\nVK_Keys id 0x1E\n",
		"prefix": "vkey.VK_ACCEPT",
		"scope": "source.lua"
	},
	"vkey.VK_MODECHANGE": {
		"body": "0x1F",
		"description": "System #VK_Keys\nVK_Keys id 0x1F\n",
		"prefix": "vkey.VK_MODECHANGE",
		"scope": "source.lua"
	},
	"vkey.VK_SPACE": {
		"body": "0x20",
		"description": "System #VK_Keys\nVK_Keys id 0x20\n",
		"prefix": "vkey.VK_SPACE",
		"scope": "source.lua"
	},
	"vkey.VK_PRIOR": {
		"body": "0x21",
		"description": "System #VK_Keys\nVK_Keys id 0x21\n",
		"prefix": "vkey.VK_PRIOR",
		"scope": "source.lua"
	},
	"vkey.VK_NEXT": {
		"body": "0x22",
		"description": "System #VK_Keys\nVK_Keys id 0x22\n",
		"prefix": "vkey.VK_NEXT",
		"scope": "source.lua"
	},
	"vkey.VK_END": {
		"body": "0x23",
		"description": "System #VK_Keys\nVK_Keys id 0x23\n",
		"prefix": "vkey.VK_END",
		"scope": "source.lua"
	},
	"vkey.VK_HOME": {
		"body": "0x24",
		"description": "System #VK_Keys\nVK_Keys id 0x24\n",
		"prefix": "vkey.VK_HOME",
		"scope": "source.lua"
	},
	"vkey.VK_LEFT": {
		"body": "0x25",
		"description": "System #VK_Keys\nVK_Keys id 0x25\n",
		"prefix": "vkey.VK_LEFT",
		"scope": "source.lua"
	},
	"vkey.VK_UP": {
		"body": "0x26",
		"description": "System #VK_Keys\nVK_Keys id 0x26\n",
		"prefix": "vkey.VK_UP",
		"scope": "source.lua"
	},
	"vkey.VK_RIGHT": {
		"body": "0x27",
		"description": "System #VK_Keys\nVK_Keys id 0x27\n",
		"prefix": "vkey.VK_RIGHT",
		"scope": "source.lua"
	},
	"vkey.VK_DOWN": {
		"body": "0x28",
		"description": "System #VK_Keys\nVK_Keys id 0x28\n",
		"prefix": "vkey.VK_DOWN",
		"scope": "source.lua"
	},
	"vkey.VK_SELECT": {
		"body": "0x29",
		"description": "System #VK_Keys\nVK_Keys id 0x29\n",
		"prefix": "vkey.VK_SELECT",
		"scope": "source.lua"
	},
	"vkey.VK_PRINT": {
		"body": "0x2A",
		"description": "System #VK_Keys\nVK_Keys id 0x2A\n",
		"prefix": "vkey.VK_PRINT",
		"scope": "source.lua"
	},
	"vkey.VK_EXECUTE": {
		"body": "0x2B",
		"description": "System #VK_Keys\nVK_Keys id 0x2B\n",
		"prefix": "vkey.VK_EXECUTE",
		"scope": "source.lua"
	},
	"vkey.VK_SNAPSHOT": {
		"body": "0x2C",
		"description": "System #VK_Keys\nVK_Keys id 0x2C\n",
		"prefix": "vkey.VK_SNAPSHOT",
		"scope": "source.lua"
	},
	"vkey.VK_INSERT": {
		"body": "0x2D",
		"description": "System #VK_Keys\nVK_Keys id 0x2D\n",
		"prefix": "vkey.VK_INSERT",
		"scope": "source.lua"
	},
	"vkey.VK_DELETE": {
		"body": "0x2E",
		"description": "System #VK_Keys\nVK_Keys id 0x2E\n",
		"prefix": "vkey.VK_DELETE",
		"scope": "source.lua"
	},
	"vkey.VK_HELP": {
		"body": "0x2F",
		"description": "System #VK_Keys\nVK_Keys id 0x2F\n",
		"prefix": "vkey.VK_HELP",
		"scope": "source.lua"
	},
	"vkey.VK_0": {
		"body": "0x30",
		"description": "System #VK_Keys\nVK_Keys id 0x30\n",
		"prefix": "vkey.VK_0",
		"scope": "source.lua"
	},
	"vkey.VK_1": {
		"body": "0x31",
		"description": "System #VK_Keys\nVK_Keys id 0x31\n",
		"prefix": "vkey.VK_1",
		"scope": "source.lua"
	},
	"vkey.VK_2": {
		"body": "0x32",
		"description": "System #VK_Keys\nVK_Keys id 0x32\n",
		"prefix": "vkey.VK_2",
		"scope": "source.lua"
	},
	"vkey.VK_3": {
		"body": "0x33",
		"description": "System #VK_Keys\nVK_Keys id 0x33\n",
		"prefix": "vkey.VK_3",
		"scope": "source.lua"
	},
	"vkey.VK_4": {
		"body": "0x34",
		"description": "System #VK_Keys\nVK_Keys id 0x34\n",
		"prefix": "vkey.VK_4",
		"scope": "source.lua"
	},
	"vkey.VK_5": {
		"body": "0x35",
		"description": "System #VK_Keys\nVK_Keys id 0x35\n",
		"prefix": "vkey.VK_5",
		"scope": "source.lua"
	},
	"vkey.VK_6": {
		"body": "0x36",
		"description": "System #VK_Keys\nVK_Keys id 0x36\n",
		"prefix": "vkey.VK_6",
		"scope": "source.lua"
	},
	"vkey.VK_7": {
		"body": "0x37",
		"description": "System #VK_Keys\nVK_Keys id 0x37\n",
		"prefix": "vkey.VK_7",
		"scope": "source.lua"
	},
	"vkey.VK_8": {
		"body": "0x38",
		"description": "System #VK_Keys\nVK_Keys id 0x38\n",
		"prefix": "vkey.VK_8",
		"scope": "source.lua"
	},
	"vkey.VK_9": {
		"body": "0x39",
		"description": "System #VK_Keys\nVK_Keys id 0x39\n",
		"prefix": "vkey.VK_9",
		"scope": "source.lua"
	},
	"vkey.VK_A": {
		"body": "0x41",
		"description": "System #VK_Keys\nVK_Keys id 0x41\n",
		"prefix": "vkey.VK_A",
		"scope": "source.lua"
	},
	"vkey.VK_B": {
		"body": "0x42",
		"description": "System #VK_Keys\nVK_Keys id 0x42\n",
		"prefix": "vkey.VK_B",
		"scope": "source.lua"
	},
	"vkey.VK_C": {
		"body": "0x43",
		"description": "System #VK_Keys\nVK_Keys id 0x43\n",
		"prefix": "vkey.VK_C",
		"scope": "source.lua"
	},
	"vkey.VK_D": {
		"body": "0x44",
		"description": "System #VK_Keys\nVK_Keys id 0x44\n",
		"prefix": "vkey.VK_D",
		"scope": "source.lua"
	},
	"vkey.VK_E": {
		"body": "0x45",
		"description": "System #VK_Keys\nVK_Keys id 0x45\n",
		"prefix": "vkey.VK_E",
		"scope": "source.lua"
	},
	"vkey.VK_F": {
		"body": "0x46",
		"description": "System #VK_Keys\nVK_Keys id 0x46\n",
		"prefix": "vkey.VK_F",
		"scope": "source.lua"
	},
	"vkey.VK_G": {
		"body": "0x47",
		"description": "System #VK_Keys\nVK_Keys id 0x47\n",
		"prefix": "vkey.VK_G",
		"scope": "source.lua"
	},
	"vkey.VK_H": {
		"body": "0x48",
		"description": "System #VK_Keys\nVK_Keys id 0x48\n",
		"prefix": "vkey.VK_H",
		"scope": "source.lua"
	},
	"vkey.VK_I": {
		"body": "0x49",
		"description": "System #VK_Keys\nVK_Keys id 0x49\n",
		"prefix": "vkey.VK_I",
		"scope": "source.lua"
	},
	"vkey.VK_J": {
		"body": "0x4A",
		"description": "System #VK_Keys\nVK_Keys id 0x4A\n",
		"prefix": "vkey.VK_J",
		"scope": "source.lua"
	},
	"vkey.VK_K": {
		"body": "0x4B",
		"description": "System #VK_Keys\nVK_Keys id 0x4B\n",
		"prefix": "vkey.VK_K",
		"scope": "source.lua"
	},
	"vkey.VK_L": {
		"body": "0x4C",
		"description": "System #VK_Keys\nVK_Keys id 0x4C\n",
		"prefix": "vkey.VK_L",
		"scope": "source.lua"
	},
	"vkey.VK_M": {
		"body": "0x4D",
		"description": "System #VK_Keys\nVK_Keys id 0x4D\n",
		"prefix": "vkey.VK_M",
		"scope": "source.lua"
	},
	"vkey.VK_N": {
		"body": "0x4E",
		"description": "System #VK_Keys\nVK_Keys id 0x4E\n",
		"prefix": "vkey.VK_N",
		"scope": "source.lua"
	},
	"vkey.VK_O": {
		"body": "0x4F",
		"description": "System #VK_Keys\nVK_Keys id 0x4F\n",
		"prefix": "vkey.VK_O",
		"scope": "source.lua"
	},
	"vkey.VK_P": {
		"body": "0x50",
		"description": "System #VK_Keys\nVK_Keys id 0x50\n",
		"prefix": "vkey.VK_P",
		"scope": "source.lua"
	},
	"vkey.VK_Q": {
		"body": "0x51",
		"description": "System #VK_Keys\nVK_Keys id 0x51\n",
		"prefix": "vkey.VK_Q",
		"scope": "source.lua"
	},
	"vkey.VK_R": {
		"body": "0x52",
		"description": "System #VK_Keys\nVK_Keys id 0x52\n",
		"prefix": "vkey.VK_R",
		"scope": "source.lua"
	},
	"vkey.VK_S": {
		"body": "0x53",
		"description": "System #VK_Keys\nVK_Keys id 0x53\n",
		"prefix": "vkey.VK_S",
		"scope": "source.lua"
	},
	"vkey.VK_T": {
		"body": "0x54",
		"description": "System #VK_Keys\nVK_Keys id 0x54\n",
		"prefix": "vkey.VK_T",
		"scope": "source.lua"
	},
	"vkey.VK_U": {
		"body": "0x55",
		"description": "System #VK_Keys\nVK_Keys id 0x55\n",
		"prefix": "vkey.VK_U",
		"scope": "source.lua"
	},
	"vkey.VK_V": {
		"body": "0x56",
		"description": "System #VK_Keys\nVK_Keys id 0x56\n",
		"prefix": "vkey.VK_V",
		"scope": "source.lua"
	},
	"vkey.VK_W": {
		"body": "0x57",
		"description": "System #VK_Keys\nVK_Keys id 0x57\n",
		"prefix": "vkey.VK_W",
		"scope": "source.lua"
	},
	"vkey.VK_X": {
		"body": "0x58",
		"description": "System #VK_Keys\nVK_Keys id 0x58\n",
		"prefix": "vkey.VK_X",
		"scope": "source.lua"
	},
	"vkey.VK_Y": {
		"body": "0x59",
		"description": "System #VK_Keys\nVK_Keys id 0x59\n",
		"prefix": "vkey.VK_Y",
		"scope": "source.lua"
	},
	"vkey.VK_Z": {
		"body": "0x5A",
		"description": "System #VK_Keys\nVK_Keys id 0x5A\n",
		"prefix": "vkey.VK_Z",
		"scope": "source.lua"
	},
	"vkey.VK_LWIN": {
		"body": "0x5B",
		"description": "System #VK_Keys\nVK_Keys id 0x5B\n",
		"prefix": "vkey.VK_LWIN",
		"scope": "source.lua"
	},
	"vkey.VK_RWIN": {
		"body": "0x5C",
		"description": "System #VK_Keys\nVK_Keys id 0x5C\n",
		"prefix": "vkey.VK_RWIN",
		"scope": "source.lua"
	},
	"vkey.VK_APPS": {
		"body": "0x5D",
		"description": "System #VK_Keys\nVK_Keys id 0x5D\n",
		"prefix": "vkey.VK_APPS",
		"scope": "source.lua"
	},
	"vkey.VK_SLEEP": {
		"body": "0x5F",
		"description": "System #VK_Keys\nVK_Keys id 0x5F\n",
		"prefix": "vkey.VK_SLEEP",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD0": {
		"body": "0x60",
		"description": "System #VK_Keys\nVK_Keys id 0x60\n",
		"prefix": "vkey.VK_NUMPAD0",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD1": {
		"body": "0x61",
		"description": "System #VK_Keys\nVK_Keys id 0x61\n",
		"prefix": "vkey.VK_NUMPAD1",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD2": {
		"body": "0x62",
		"description": "System #VK_Keys\nVK_Keys id 0x62\n",
		"prefix": "vkey.VK_NUMPAD2",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD3": {
		"body": "0x63",
		"description": "System #VK_Keys\nVK_Keys id 0x63\n",
		"prefix": "vkey.VK_NUMPAD3",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD4": {
		"body": "0x64",
		"description": "System #VK_Keys\nVK_Keys id 0x64\n",
		"prefix": "vkey.VK_NUMPAD4",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD5": {
		"body": "0x65",
		"description": "System #VK_Keys\nVK_Keys id 0x65\n",
		"prefix": "vkey.VK_NUMPAD5",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD6": {
		"body": "0x66",
		"description": "System #VK_Keys\nVK_Keys id 0x66\n",
		"prefix": "vkey.VK_NUMPAD6",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD7": {
		"body": "0x67",
		"description": "System #VK_Keys\nVK_Keys id 0x67\n",
		"prefix": "vkey.VK_NUMPAD7",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD8": {
		"body": "0x68",
		"description": "System #VK_Keys\nVK_Keys id 0x68\n",
		"prefix": "vkey.VK_NUMPAD8",
		"scope": "source.lua"
	},
	"vkey.VK_NUMPAD9": {
		"body": "0x69",
		"description": "System #VK_Keys\nVK_Keys id 0x69\n",
		"prefix": "vkey.VK_NUMPAD9",
		"scope": "source.lua"
	},
	"vkey.VK_MULTIPLY": {
		"body": "0x6A",
		"description": "System #VK_Keys\nVK_Keys id 0x6A\n",
		"prefix": "vkey.VK_MULTIPLY",
		"scope": "source.lua"
	},
	"vkey.VK_ADD": {
		"body": "0x6B",
		"description": "System #VK_Keys\nVK_Keys id 0x6B\n",
		"prefix": "vkey.VK_ADD",
		"scope": "source.lua"
	},
	"vkey.VK_SEPARATOR": {
		"body": "0x6C",
		"description": "System #VK_Keys\nVK_Keys id 0x6C\n",
		"prefix": "vkey.VK_SEPARATOR",
		"scope": "source.lua"
	},
	"vkey.VK_SUBTRACT": {
		"body": "0x6D",
		"description": "System #VK_Keys\nVK_Keys id 0x6D\n",
		"prefix": "vkey.VK_SUBTRACT",
		"scope": "source.lua"
	},
	"vkey.VK_DECIMAL": {
		"body": "0x6E",
		"description": "System #VK_Keys\nVK_Keys id 0x6E\n",
		"prefix": "vkey.VK_DECIMAL",
		"scope": "source.lua"
	},
	"vkey.VK_DIVIDE": {
		"body": "0x6F",
		"description": "System #VK_Keys\nVK_Keys id 0x6F\n",
		"prefix": "vkey.VK_DIVIDE",
		"scope": "source.lua"
	},
	"vkey.VK_F1": {
		"body": "0x70",
		"description": "System #VK_Keys\nVK_Keys id 0x70\n",
		"prefix": "vkey.VK_F1",
		"scope": "source.lua"
	},
	"vkey.VK_F2": {
		"body": "0x71",
		"description": "System #VK_Keys\nVK_Keys id 0x71\n",
		"prefix": "vkey.VK_F2",
		"scope": "source.lua"
	},
	"vkey.VK_F3": {
		"body": "0x72",
		"description": "System #VK_Keys\nVK_Keys id 0x72\n",
		"prefix": "vkey.VK_F3",
		"scope": "source.lua"
	},
	"vkey.VK_F4": {
		"body": "0x73",
		"description": "System #VK_Keys\nVK_Keys id 0x73\n",
		"prefix": "vkey.VK_F4",
		"scope": "source.lua"
	},
	"vkey.VK_F5": {
		"body": "0x74",
		"description": "System #VK_Keys\nVK_Keys id 0x74\n",
		"prefix": "vkey.VK_F5",
		"scope": "source.lua"
	},
	"vkey.VK_F6": {
		"body": "0x75",
		"description": "System #VK_Keys\nVK_Keys id 0x75\n",
		"prefix": "vkey.VK_F6",
		"scope": "source.lua"
	},
	"vkey.VK_F7": {
		"body": "0x76",
		"description": "System #VK_Keys\nVK_Keys id 0x76\n",
		"prefix": "vkey.VK_F7",
		"scope": "source.lua"
	},
	"vkey.VK_F8": {
		"body": "0x77",
		"description": "System #VK_Keys\nVK_Keys id 0x77\n",
		"prefix": "vkey.VK_F8",
		"scope": "source.lua"
	},
	"vkey.VK_F9": {
		"body": "0x78",
		"description": "System #VK_Keys\nVK_Keys id 0x78\n",
		"prefix": "vkey.VK_F9",
		"scope": "source.lua"
	},
	"vkey.VK_F10": {
		"body": "0x79",
		"description": "System #VK_Keys\nVK_Keys id 0x79\n",
		"prefix": "vkey.VK_F10",
		"scope": "source.lua"
	},
	"vkey.VK_F11": {
		"body": "0x7A",
		"description": "System #VK_Keys\nVK_Keys id 0x7A\n",
		"prefix": "vkey.VK_F11",
		"scope": "source.lua"
	},
	"vkey.VK_F12": {
		"body": "0x7B",
		"description": "System #VK_Keys\nVK_Keys id 0x7B\n",
		"prefix": "vkey.VK_F12",
		"scope": "source.lua"
	},
	"vkey.VK_F13": {
		"body": "0x7C",
		"description": "System #VK_Keys\nVK_Keys id 0x7C\n",
		"prefix": "vkey.VK_F13",
		"scope": "source.lua"
	},
	"vkey.VK_F14": {
		"body": "0x7D",
		"description": "System #VK_Keys\nVK_Keys id 0x7D\n",
		"prefix": "vkey.VK_F14",
		"scope": "source.lua"
	},
	"vkey.VK_F15": {
		"body": "0x7E",
		"description": "System #VK_Keys\nVK_Keys id 0x7E\n",
		"prefix": "vkey.VK_F15",
		"scope": "source.lua"
	},
	"vkey.VK_F16": {
		"body": "0x7F",
		"description": "System #VK_Keys\nVK_Keys id 0x7F\n",
		"prefix": "vkey.VK_F16",
		"scope": "source.lua"
	},
	"vkey.VK_F17": {
		"body": "0x80",
		"description": "System #VK_Keys\nVK_Keys id 0x80\n",
		"prefix": "vkey.VK_F17",
		"scope": "source.lua"
	},
	"vkey.VK_F18": {
		"body": "0x81",
		"description": "System #VK_Keys\nVK_Keys id 0x81\n",
		"prefix": "vkey.VK_F18",
		"scope": "source.lua"
	},
	"vkey.VK_F19": {
		"body": "0x82",
		"description": "System #VK_Keys\nVK_Keys id 0x82\n",
		"prefix": "vkey.VK_F19",
		"scope": "source.lua"
	},
	"vkey.VK_F20": {
		"body": "0x83",
		"description": "System #VK_Keys\nVK_Keys id 0x83\n",
		"prefix": "vkey.VK_F20",
		"scope": "source.lua"
	},
	"vkey.VK_F21": {
		"body": "0x84",
		"description": "System #VK_Keys\nVK_Keys id 0x84\n",
		"prefix": "vkey.VK_F21",
		"scope": "source.lua"
	},
	"vkey.VK_F22": {
		"body": "0x85",
		"description": "System #VK_Keys\nVK_Keys id 0x85\n",
		"prefix": "vkey.VK_F22",
		"scope": "source.lua"
	},
	"vkey.VK_F23": {
		"body": "0x86",
		"description": "System #VK_Keys\nVK_Keys id 0x86\n",
		"prefix": "vkey.VK_F23",
		"scope": "source.lua"
	},
	"vkey.VK_F24": {
		"body": "0x87",
		"description": "System #VK_Keys\nVK_Keys id 0x87\n",
		"prefix": "vkey.VK_F24",
		"scope": "source.lua"
	},
	"vkey.VK_NUMLOCK": {
		"body": "0x90",
		"description": "System #VK_Keys\nVK_Keys id 0x90\n",
		"prefix": "vkey.VK_NUMLOCK",
		"scope": "source.lua"
	},
	"vkey.VK_SCROLL": {
		"body": "0x91",
		"description": "System #VK_Keys\nVK_Keys id 0x91\n",
		"prefix": "vkey.VK_SCROLL",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FJ_JISHO": {
		"body": "0x92",
		"description": "System #VK_Keys\nVK_Keys id 0x92\n",
		"prefix": "vkey.VK_OEM_FJ_JISHO",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FJ_MASSHOU": {
		"body": "0x93",
		"description": "System #VK_Keys\nVK_Keys id 0x93\n",
		"prefix": "vkey.VK_OEM_FJ_MASSHOU",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FJ_TOUROKU": {
		"body": "0x94",
		"description": "System #VK_Keys\nVK_Keys id 0x94\n",
		"prefix": "vkey.VK_OEM_FJ_TOUROKU",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FJ_LOYA": {
		"body": "0x95",
		"description": "System #VK_Keys\nVK_Keys id 0x95\n",
		"prefix": "vkey.VK_OEM_FJ_LOYA",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FJ_ROYA": {
		"body": "0x96",
		"description": "System #VK_Keys\nVK_Keys id 0x96\n",
		"prefix": "vkey.VK_OEM_FJ_ROYA",
		"scope": "source.lua"
	},
	"vkey.VK_LSHIFT": {
		"body": "0xA0",
		"description": "System #VK_Keys\nVK_Keys id 0xA0\n",
		"prefix": "vkey.VK_LSHIFT",
		"scope": "source.lua"
	},
	"vkey.VK_RSHIFT": {
		"body": "0xA1",
		"description": "System #VK_Keys\nVK_Keys id 0xA1\n",
		"prefix": "vkey.VK_RSHIFT",
		"scope": "source.lua"
	},
	"vkey.VK_LCONTROL": {
		"body": "0xA2",
		"description": "System #VK_Keys\nVK_Keys id 0xA2\n",
		"prefix": "vkey.VK_LCONTROL",
		"scope": "source.lua"
	},
	"vkey.VK_RCONTROL": {
		"body": "0xA3",
		"description": "System #VK_Keys\nVK_Keys id 0xA3\n",
		"prefix": "vkey.VK_RCONTROL",
		"scope": "source.lua"
	},
	"vkey.VK_LMENU": {
		"body": "0xA4",
		"description": "System #VK_Keys\nVK_Keys id 0xA4\n",
		"prefix": "vkey.VK_LMENU",
		"scope": "source.lua"
	},
	"vkey.VK_RMENU": {
		"body": "0xA5",
		"description": "System #VK_Keys\nVK_Keys id 0xA5\n",
		"prefix": "vkey.VK_RMENU",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_BACK": {
		"body": "0xA6",
		"description": "System #VK_Keys\nVK_Keys id 0xA6\n",
		"prefix": "vkey.VK_BROWSER_BACK",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_FORWARD": {
		"body": "0xA7",
		"description": "System #VK_Keys\nVK_Keys id 0xA7\n",
		"prefix": "vkey.VK_BROWSER_FORWARD",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_REFRESH": {
		"body": "0xA8",
		"description": "System #VK_Keys\nVK_Keys id 0xA8\n",
		"prefix": "vkey.VK_BROWSER_REFRESH",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_STOP": {
		"body": "0xA9",
		"description": "System #VK_Keys\nVK_Keys id 0xA9\n",
		"prefix": "vkey.VK_BROWSER_STOP",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_SEARCH": {
		"body": "0xAA",
		"description": "System #VK_Keys\nVK_Keys id 0xAA\n",
		"prefix": "vkey.VK_BROWSER_SEARCH",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_FAVORITES": {
		"body": "0xAB",
		"description": "System #VK_Keys\nVK_Keys id 0xAB\n",
		"prefix": "vkey.VK_BROWSER_FAVORITES",
		"scope": "source.lua"
	},
	"vkey.VK_BROWSER_HOME": {
		"body": "0xAC",
		"description": "System #VK_Keys\nVK_Keys id 0xAC\n",
		"prefix": "vkey.VK_BROWSER_HOME",
		"scope": "source.lua"
	},
	"vkey.VK_VOLUME_MUTE": {
		"body": "0xAD",
		"description": "System #VK_Keys\nVK_Keys id 0xAD\n",
		"prefix": "vkey.VK_VOLUME_MUTE",
		"scope": "source.lua"
	},
	"vkey.VK_VOLUME_DOWN": {
		"body": "0xAE",
		"description": "System #VK_Keys\nVK_Keys id 0xAE\n",
		"prefix": "vkey.VK_VOLUME_DOWN",
		"scope": "source.lua"
	},
	"vkey.VK_VOLUME_UP": {
		"body": "0xAF",
		"description": "System #VK_Keys\nVK_Keys id 0xAF\n",
		"prefix": "vkey.VK_VOLUME_UP",
		"scope": "source.lua"
	},
	"vkey.VK_MEDIA_NEXT_TRACK": {
		"body": "0xB0",
		"description": "System #VK_Keys\nVK_Keys id 0xB0\n",
		"prefix": "vkey.VK_MEDIA_NEXT_TRACK",
		"scope": "source.lua"
	},
	"vkey.VK_MEDIA_PREV_TRACK": {
		"body": "0xB1",
		"description": "System #VK_Keys\nVK_Keys id 0xB1\n",
		"prefix": "vkey.VK_MEDIA_PREV_TRACK",
		"scope": "source.lua"
	},
	"vkey.VK_MEDIA_STOP": {
		"body": "0xB2",
		"description": "System #VK_Keys\nVK_Keys id 0xB2\n",
		"prefix": "vkey.VK_MEDIA_STOP",
		"scope": "source.lua"
	},
	"vkey.VK_MEDIA_PLAY_PAUSE": {
		"body": "0xB3",
		"description": "System #VK_Keys\nVK_Keys id 0xB3\n",
		"prefix": "vkey.VK_MEDIA_PLAY_PAUSE",
		"scope": "source.lua"
	},
	"vkey.VK_LAUNCH_MAIL": {
		"body": "0xB4",
		"description": "System #VK_Keys\nVK_Keys id 0xB4\n",
		"prefix": "vkey.VK_LAUNCH_MAIL",
		"scope": "source.lua"
	},
	"vkey.VK_LAUNCH_MEDIA_SELECT": {
		"body": "0xB5",
		"description": "System #VK_Keys\nVK_Keys id 0xB5\n",
		"prefix": "vkey.VK_LAUNCH_MEDIA_SELECT",
		"scope": "source.lua"
	},
	"vkey.VK_LAUNCH_APP1": {
		"body": "0xB6",
		"description": "System #VK_Keys\nVK_Keys id 0xB6\n",
		"prefix": "vkey.VK_LAUNCH_APP1",
		"scope": "source.lua"
	},
	"vkey.VK_LAUNCH_APP2": {
		"body": "0xB7",
		"description": "System #VK_Keys\nVK_Keys id 0xB7\n",
		"prefix": "vkey.VK_LAUNCH_APP2",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_1": {
		"body": "0xBA",
		"description": "System #VK_Keys\nVK_Keys id 0xBA\n",
		"prefix": "vkey.VK_OEM_1",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_PLUS": {
		"body": "0xBB",
		"description": "System #VK_Keys\nVK_Keys id 0xBB\n",
		"prefix": "vkey.VK_OEM_PLUS",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_COMMA": {
		"body": "0xBC",
		"description": "System #VK_Keys\nVK_Keys id 0xBC\n",
		"prefix": "vkey.VK_OEM_COMMA",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_MINUS": {
		"body": "0xBD",
		"description": "System #VK_Keys\nVK_Keys id 0xBD\n",
		"prefix": "vkey.VK_OEM_MINUS",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_PERIOD": {
		"body": "0xBE",
		"description": "System #VK_Keys\nVK_Keys id 0xBE\n",
		"prefix": "vkey.VK_OEM_PERIOD",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_2": {
		"body": "0xBF",
		"description": "System #VK_Keys\nVK_Keys id 0xBF\n",
		"prefix": "vkey.VK_OEM_2",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_3": {
		"body": "0xC0",
		"description": "System #VK_Keys\nVK_Keys id 0xC0\n",
		"prefix": "vkey.VK_OEM_3",
		"scope": "source.lua"
	},
	"vkey.VK_ABNT_C1": {
		"body": "0xC1",
		"description": "System #VK_Keys\nVK_Keys id 0xC1\n",
		"prefix": "vkey.VK_ABNT_C1",
		"scope": "source.lua"
	},
	"vkey.VK_ABNT_C2": {
		"body": "0xC2",
		"description": "System #VK_Keys\nVK_Keys id 0xC2\n",
		"prefix": "vkey.VK_ABNT_C2",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_4": {
		"body": "0xDB",
		"description": "System #VK_Keys\nVK_Keys id 0xDB\n",
		"prefix": "vkey.VK_OEM_4",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_5": {
		"body": "0xDC",
		"description": "System #VK_Keys\nVK_Keys id 0xDC\n",
		"prefix": "vkey.VK_OEM_5",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_6": {
		"body": "0xDD",
		"description": "System #VK_Keys\nVK_Keys id 0xDD\n",
		"prefix": "vkey.VK_OEM_6",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_7": {
		"body": "0xDE",
		"description": "System #VK_Keys\nVK_Keys id 0xDE\n",
		"prefix": "vkey.VK_OEM_7",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_8": {
		"body": "0xDF",
		"description": "System #VK_Keys\nVK_Keys id 0xDF\n",
		"prefix": "vkey.VK_OEM_8",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_AX": {
		"body": "0xE1",
		"description": "System #VK_Keys\nVK_Keys id 0xE1\n",
		"prefix": "vkey.VK_OEM_AX",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_102": {
		"body": "0xE2",
		"description": "System #VK_Keys\nVK_Keys id 0xE2\n",
		"prefix": "vkey.VK_OEM_102",
		"scope": "source.lua"
	},
	"vkey.VK_ICO_HELP": {
		"body": "0xE3",
		"description": "System #VK_Keys\nVK_Keys id 0xE3\n",
		"prefix": "vkey.VK_ICO_HELP",
		"scope": "source.lua"
	},
	"vkey.VK_PROCESSKEY": {
		"body": "0xE5",
		"description": "System #VK_Keys\nVK_Keys id 0xE5\n",
		"prefix": "vkey.VK_PROCESSKEY",
		"scope": "source.lua"
	},
	"vkey.VK_ICO_CLEAR": {
		"body": "0xE6",
		"description": "System #VK_Keys\nVK_Keys id 0xE6\n",
		"prefix": "vkey.VK_ICO_CLEAR",
		"scope": "source.lua"
	},
	"vkey.VK_PACKET": {
		"body": "0xE7",
		"description": "System #VK_Keys\nVK_Keys id 0xE7\n",
		"prefix": "vkey.VK_PACKET",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_RESET": {
		"body": "0xE9",
		"description": "System #VK_Keys\nVK_Keys id 0xE9\n",
		"prefix": "vkey.VK_OEM_RESET",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_JUMP": {
		"body": "0xEA",
		"description": "System #VK_Keys\nVK_Keys id 0xEA\n",
		"prefix": "vkey.VK_OEM_JUMP",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_PA1": {
		"body": "0xEB",
		"description": "System #VK_Keys\nVK_Keys id 0xEB\n",
		"prefix": "vkey.VK_OEM_PA1",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_PA2": {
		"body": "0xEC",
		"description": "System #VK_Keys\nVK_Keys id 0xEC\n",
		"prefix": "vkey.VK_OEM_PA2",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_PA3": {
		"body": "0xED",
		"description": "System #VK_Keys\nVK_Keys id 0xED\n",
		"prefix": "vkey.VK_OEM_PA3",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_WSCTRL": {
		"body": "0xEE",
		"description": "System #VK_Keys\nVK_Keys id 0xEE\n",
		"prefix": "vkey.VK_OEM_WSCTRL",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_CUSEL": {
		"body": "0xEF",
		"description": "System #VK_Keys\nVK_Keys id 0xEF\n",
		"prefix": "vkey.VK_OEM_CUSEL",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_ATTN": {
		"body": "0xF0",
		"description": "System #VK_Keys\nVK_Keys id 0xF0\n",
		"prefix": "vkey.VK_OEM_ATTN",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_FINISH": {
		"body": "0xF1",
		"description": "System #VK_Keys\nVK_Keys id 0xF1\n",
		"prefix": "vkey.VK_OEM_FINISH",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_COPY": {
		"body": "0xF2",
		"description": "System #VK_Keys\nVK_Keys id 0xF2\n",
		"prefix": "vkey.VK_OEM_COPY",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_AUTO": {
		"body": "0xF3",
		"description": "System #VK_Keys\nVK_Keys id 0xF3\n",
		"prefix": "vkey.VK_OEM_AUTO",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_ENLW": {
		"body": "0xF4",
		"description": "System #VK_Keys\nVK_Keys id 0xF4\n",
		"prefix": "vkey.VK_OEM_ENLW",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_BACKTAB": {
		"body": "0xF5",
		"description": "System #VK_Keys\nVK_Keys id 0xF5\n",
		"prefix": "vkey.VK_OEM_BACKTAB",
		"scope": "source.lua"
	},
	"vkey.VK_ATTN": {
		"body": "0xF6",
		"description": "System #VK_Keys\nVK_Keys id 0xF6\n",
		"prefix": "vkey.VK_ATTN",
		"scope": "source.lua"
	},
	"vkey.VK_CRSEL": {
		"body": "0xF7",
		"description": "System #VK_Keys\nVK_Keys id 0xF7\n",
		"prefix": "vkey.VK_CRSEL",
		"scope": "source.lua"
	},
	"vkey.VK_EXSEL": {
		"body": "0xF8",
		"description": "System #VK_Keys\nVK_Keys id 0xF8\n",
		"prefix": "vkey.VK_EXSEL",
		"scope": "source.lua"
	},
	"vkey.VK_EREOF": {
		"body": "0xF9",
		"description": "System #VK_Keys\nVK_Keys id 0xF9\n",
		"prefix": "vkey.VK_EREOF",
		"scope": "source.lua"
	},
	"vkey.VK_PLAY": {
		"body": "0xFA",
		"description": "System #VK_Keys\nVK_Keys id 0xFA\n",
		"prefix": "vkey.VK_PLAY",
		"scope": "source.lua"
	},
	"vkey.VK_ZOOM": {
		"body": "0xFB",
		"description": "System #VK_Keys\nVK_Keys id 0xFB\n",
		"prefix": "vkey.VK_ZOOM",
		"scope": "source.lua"
	},
	"vkey.VK_PA1": {
		"body": "0xFD",
		"description": "System #VK_Keys\nVK_Keys id 0xFD\n",
		"prefix": "vkey.VK_PA1",
		"scope": "source.lua"
	},
	"vkey.VK_OEM_CLEAR": {
		"body": "0xFE",
		"description": "System #VK_Keys\nVK_Keys id 0xFE\n",
		"prefix": "vkey.VK_OEM_CLEAR",
		"scope": "source.lua"
	},

	"pedtype.PEDTYPE_PLAYER1": {
		"body": "0",
		"description": "GTA SA #pedtype\npedtype id 0\n",
		"prefix": "pedtype.PEDTYPE_PLAYER1",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_PLAYER2": {
		"body": "1",
		"description": "GTA SA #pedtype\npedtype id 1\n",
		"prefix": "pedtype.PEDTYPE_PLAYER2",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_PLAYER_NETWORK": {
		"body": "2",
		"description": "GTA SA #pedtype\npedtype id 2\n",
		"prefix": "pedtype.PEDTYPE_PLAYER_NETWORK",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_PLAYER_UNUSED": {
		"body": "3",
		"description": "GTA SA #pedtype\npedtype id 3\n",
		"prefix": "pedtype.PEDTYPE_PLAYER_UNUSED",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_CIVMALE": {
		"body": "4",
		"description": "GTA SA #pedtype\npedtype id 4\n",
		"prefix": "pedtype.PEDTYPE_CIVMALE",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_CIVFEMALE": {
		"body": "5",
		"description": "GTA SA #pedtype\npedtype id 5\n",
		"prefix": "pedtype.PEDTYPE_CIVFEMALE",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_COP": {
		"body": "6",
		"description": "GTA SA #pedtype\npedtype id 6\n",
		"prefix": "pedtype.PEDTYPE_COP",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG1": {
		"body": "7",
		"description": "GTA SA #pedtype\npedtype id 7\n",
		"prefix": "pedtype.PEDTYPE_GANG1",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG2": {
		"body": "8",
		"description": "GTA SA #pedtype\npedtype id 8\n",
		"prefix": "pedtype.PEDTYPE_GANG2",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG3": {
		"body": "9",
		"description": "GTA SA #pedtype\npedtype id 9\n",
		"prefix": "pedtype.PEDTYPE_GANG3",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG4": {
		"body": "10",
		"description": "GTA SA #pedtype\npedtype id 10\n",
		"prefix": "pedtype.PEDTYPE_GANG4",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG5": {
		"body": "11",
		"description": "GTA SA #pedtype\npedtype id 11\n",
		"prefix": "pedtype.PEDTYPE_GANG5",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG6": {
		"body": "12",
		"description": "GTA SA #pedtype\npedtype id 12\n",
		"prefix": "pedtype.PEDTYPE_GANG6",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG7": {
		"body": "13",
		"description": "GTA SA #pedtype\npedtype id 13\n",
		"prefix": "pedtype.PEDTYPE_GANG7",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG8": {
		"body": "14",
		"description": "GTA SA #pedtype\npedtype id 14\n",
		"prefix": "pedtype.PEDTYPE_GANG8",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG9": {
		"body": "15",
		"description": "GTA SA #pedtype\npedtype id 15\n",
		"prefix": "pedtype.PEDTYPE_GANG9",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_GANG10": {
		"body": "16",
		"description": "GTA SA #pedtype\npedtype id 16\n",
		"prefix": "pedtype.PEDTYPE_GANG10",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_DEALER": {
		"body": "17",
		"description": "GTA SA #pedtype\npedtype id 17\n",
		"prefix": "pedtype.PEDTYPE_DEALER",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MEDIC": {
		"body": "18",
		"description": "GTA SA #pedtype\npedtype id 18\n",
		"prefix": "pedtype.PEDTYPE_MEDIC",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_FIRE": {
		"body": "19",
		"description": "GTA SA #pedtype\npedtype id 19\n",
		"prefix": "pedtype.PEDTYPE_FIRE",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_CRIMINAL": {
		"body": "20",
		"description": "GTA SA #pedtype\npedtype id 20\n",
		"prefix": "pedtype.PEDTYPE_CRIMINAL",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_BUM": {
		"body": "21",
		"description": "GTA SA #pedtype\npedtype id 21\n",
		"prefix": "pedtype.PEDTYPE_BUM",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_PROSTITUTE": {
		"body": "22",
		"description": "GTA SA #pedtype\npedtype id 22\n",
		"prefix": "pedtype.PEDTYPE_PROSTITUTE",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_SPECIAL": {
		"body": "23",
		"description": "GTA SA #pedtype\npedtype id 23\n",
		"prefix": "pedtype.PEDTYPE_SPECIAL",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION1": {
		"body": "24",
		"description": "GTA SA #pedtype\npedtype id 24\n",
		"prefix": "pedtype.PEDTYPE_MISSION1",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION2": {
		"body": "25",
		"description": "GTA SA #pedtype\npedtype id 25\n",
		"prefix": "pedtype.PEDTYPE_MISSION2",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION3": {
		"body": "26",
		"description": "GTA SA #pedtype\npedtype id 26\n",
		"prefix": "pedtype.PEDTYPE_MISSION3",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION4": {
		"body": "27",
		"description": "GTA SA #pedtype\npedtype id 27\n",
		"prefix": "pedtype.PEDTYPE_MISSION4",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION5": {
		"body": "28",
		"description": "GTA SA #pedtype\npedtype id 28\n",
		"prefix": "pedtype.PEDTYPE_MISSION5",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION6": {
		"body": "29",
		"description": "GTA SA #pedtype\npedtype id 29\n",
		"prefix": "pedtype.PEDTYPE_MISSION6",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION7": {
		"body": "30",
		"description": "GTA SA #pedtype\npedtype id 30\n",
		"prefix": "pedtype.PEDTYPE_MISSION7",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_MISSION8": {
		"body": "31",
		"description": "GTA SA #pedtype\npedtype id 31\n",
		"prefix": "pedtype.PEDTYPE_MISSION8",
		"scope": "source.lua"
	},
	"pedtype.PEDTYPE_LAST_PEDTYPE": {
		"body": "32",
		"description": "GTA SA #pedtype\npedtype id 32\n",
		"prefix": "pedtype.PEDTYPE_LAST_PEDTYPE",
		"scope": "source.lua"
	},

	"coronatype.CORONATYPE_SHINYSTAR": {
		"body": "0",
		"description": "GTA SA #coronatype\ncoronatype id 0\n",
		"prefix": "coronatype.CORONATYPE_SHINYSTAR",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEADLIGHT": {
		"body": "1",
		"description": "GTA SA #coronatype\ncoronatype id 1\n",
		"prefix": "coronatype.CORONATYPE_HEADLIGHT",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_MOON": {
		"body": "2",
		"description": "GTA SA #coronatype\ncoronatype id 2\n",
		"prefix": "coronatype.CORONATYPE_MOON",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_REFLECTION": {
		"body": "3",
		"description": "GTA SA #coronatype\ncoronatype id 3\n",
		"prefix": "coronatype.CORONATYPE_REFLECTION",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEADLIGHTLINE": {
		"body": "4",
		"description": "GTA SA #coronatype\ncoronatype id 4\n",
		"prefix": "coronatype.CORONATYPE_HEADLIGHTLINE",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEX": {
		"body": "5",
		"description": "GTA SA #coronatype\ncoronatype id 5\n",
		"prefix": "coronatype.CORONATYPE_HEX",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_CIRCLE": {
		"body": "6",
		"description": "GTA SA #coronatype\ncoronatype id 6\n",
		"prefix": "coronatype.CORONATYPE_CIRCLE",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_RING": {
		"body": "7",
		"description": "GTA SA #coronatype\ncoronatype id 7\n",
		"prefix": "coronatype.CORONATYPE_RING",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_STREAK": {
		"body": "8",
		"description": "GTA SA #coronatype\ncoronatype id 8\n",
		"prefix": "coronatype.CORONATYPE_STREAK",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_TORUS": {
		"body": "9",
		"description": "GTA SA #coronatype\ncoronatype id 9\n",
		"prefix": "coronatype.CORONATYPE_TORUS",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_NONE": {
		"body": "10",
		"description": "GTA SA #coronatype\ncoronatype id 10\n",
		"prefix": "coronatype.CORONATYPE_NONE",
		"scope": "source.lua"
	},
		
	"radarsprite.RADAR_SPRITE_NONE": {
		"body": "0",
		"description": "GTA SA #radarsprite\nradarsprite id 0\n",
		"prefix": "radarsprite.RADAR_SPRITE_NONE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BORDER": {
		"body": "1",
		"description": "GTA SA #radarsprite\nradarsprite id 1\n",
		"prefix": "radarsprite.RADAR_SPRITE_BORDER",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CENTRE": {
		"body": "2",
		"description": "GTA SA #radarsprite\nradarsprite id 2\n",
		"prefix": "radarsprite.RADAR_SPRITE_CENTRE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MAP_HERE": {
		"body": "3",
		"description": "GTA SA #radarsprite\nradarsprite id 3\n",
		"prefix": "radarsprite.RADAR_SPRITE_MAP_HERE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_NORTH": {
		"body": "4",
		"description": "GTA SA #radarsprite\nradarsprite id 4\n",
		"prefix": "radarsprite.RADAR_SPRITE_NORTH",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_AIRYARD": {
		"body": "5",
		"description": "GTA SA #radarsprite\nradarsprite id 5\n",
		"prefix": "radarsprite.RADAR_SPRITE_AIRYARD",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GUN": {
		"body": "6",
		"description": "GTA SA #radarsprite\nradarsprite id 6\n",
		"prefix": "radarsprite.RADAR_SPRITE_GUN",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BARBERS": {
		"body": "7",
		"description": "GTA SA #radarsprite\nradarsprite id 7\n",
		"prefix": "radarsprite.RADAR_SPRITE_BARBERS",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BIG_SMOKE": {
		"body": "8",
		"description": "GTA SA #radarsprite\nradarsprite id 8\n",
		"prefix": "radarsprite.RADAR_SPRITE_BIG_SMOKE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BOATYARD": {
		"body": "9",
		"description": "GTA SA #radarsprite\nradarsprite id 9\n",
		"prefix": "radarsprite.RADAR_SPRITE_BOATYARD",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BURGERSHOT": {
		"body": "10",
		"description": "GTA SA #radarsprite\nradarsprite id 10\n",
		"prefix": "radarsprite.RADAR_SPRITE_BURGERSHOT",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_BULLDOZER": {
		"body": "11",
		"description": "GTA SA #radarsprite\nradarsprite id 11\n",
		"prefix": "radarsprite.RADAR_SPRITE_BULLDOZER",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CAT_PINK": {
		"body": "12",
		"description": "GTA SA #radarsprite\nradarsprite id 12\n",
		"prefix": "radarsprite.RADAR_SPRITE_CAT_PINK",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CESAR": {
		"body": "13",
		"description": "GTA SA #radarsprite\nradarsprite id 13\n",
		"prefix": "radarsprite.RADAR_SPRITE_CESAR",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CHICKEN": {
		"body": "14",
		"description": "GTA SA #radarsprite\nradarsprite id 14\n",
		"prefix": "radarsprite.RADAR_SPRITE_CHICKEN",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CJ": {
		"body": "15",
		"description": "GTA SA #radarsprite\nradarsprite id 15\n",
		"prefix": "radarsprite.RADAR_SPRITE_CJ",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CRASH1": {
		"body": "16",
		"description": "GTA SA #radarsprite\nradarsprite id 16\n",
		"prefix": "radarsprite.RADAR_SPRITE_CRASH1",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_DINER": {
		"body": "17",
		"description": "GTA SA #radarsprite\nradarsprite id 17\n",
		"prefix": "radarsprite.RADAR_SPRITE_DINER",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_EMMETGUN": {
		"body": "18",
		"description": "GTA SA #radarsprite\nradarsprite id 18\n",
		"prefix": "radarsprite.RADAR_SPRITE_EMMETGUN",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_ENEMYATTACK": {
		"body": "19",
		"description": "GTA SA #radarsprite\nradarsprite id 19\n",
		"prefix": "radarsprite.RADAR_SPRITE_ENEMYATTACK",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_FIRE": {
		"body": "20",
		"description": "GTA SA #radarsprite\nradarsprite id 20\n",
		"prefix": "radarsprite.RADAR_SPRITE_FIRE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GIRLFRIEND": {
		"body": "21",
		"description": "GTA SA #radarsprite\nradarsprite id 21\n",
		"prefix": "radarsprite.RADAR_SPRITE_GIRLFRIEND",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_HOSPITAL": {
		"body": "22",
		"description": "GTA SA #radarsprite\nradarsprite id 22\n",
		"prefix": "radarsprite.RADAR_SPRITE_HOSPITAL",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_LOCO": {
		"body": "23",
		"description": "GTA SA #radarsprite\nradarsprite id 23\n",
		"prefix": "radarsprite.RADAR_SPRITE_LOCO",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MADDOG": {
		"body": "24",
		"description": "GTA SA #radarsprite\nradarsprite id 24\n",
		"prefix": "radarsprite.RADAR_SPRITE_MADDOG",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MAFIA": {
		"body": "25",
		"description": "GTA SA #radarsprite\nradarsprite id 25\n",
		"prefix": "radarsprite.RADAR_SPRITE_MAFIA",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MCSTRAP": {
		"body": "26",
		"description": "GTA SA #radarsprite\nradarsprite id 26\n",
		"prefix": "radarsprite.RADAR_SPRITE_MCSTRAP",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MOD_GARAGE": {
		"body": "27",
		"description": "GTA SA #radarsprite\nradarsprite id 27\n",
		"prefix": "radarsprite.RADAR_SPRITE_MOD_GARAGE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_OGLOC": {
		"body": "28",
		"description": "GTA SA #radarsprite\nradarsprite id 28\n",
		"prefix": "radarsprite.RADAR_SPRITE_OGLOC",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_PIZZA": {
		"body": "29",
		"description": "GTA SA #radarsprite\nradarsprite id 29\n",
		"prefix": "radarsprite.RADAR_SPRITE_PIZZA",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_POLICE": {
		"body": "30",
		"description": "GTA SA #radarsprite\nradarsprite id 30\n",
		"prefix": "radarsprite.RADAR_SPRITE_POLICE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_PROPERTY_GREEN": {
		"body": "31",
		"description": "GTA SA #radarsprite\nradarsprite id 31\n",
		"prefix": "radarsprite.RADAR_SPRITE_PROPERTY_GREEN",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_PROPERTY_RED": {
		"body": "32",
		"description": "GTA SA #radarsprite\nradarsprite id 32\n",
		"prefix": "radarsprite.RADAR_SPRITE_PROPERTY_RED",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_RACE": {
		"body": "33",
		"description": "GTA SA #radarsprite\nradarsprite id 33\n",
		"prefix": "radarsprite.RADAR_SPRITE_RACE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_RYDER": {
		"body": "34",
		"description": "GTA SA #radarsprite\nradarsprite id 34\n",
		"prefix": "radarsprite.RADAR_SPRITE_RYDER",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_SAVEHOUSE": {
		"body": "35",
		"description": "GTA SA #radarsprite\nradarsprite id 35\n",
		"prefix": "radarsprite.RADAR_SPRITE_SAVEHOUSE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_SCHOOL": {
		"body": "36",
		"description": "GTA SA #radarsprite\nradarsprite id 36\n",
		"prefix": "radarsprite.RADAR_SPRITE_SCHOOL",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_MYSTERY": {
		"body": "37",
		"description": "GTA SA #radarsprite\nradarsprite id 37\n",
		"prefix": "radarsprite.RADAR_SPRITE_MYSTERY",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_SWEET": {
		"body": "38",
		"description": "GTA SA #radarsprite\nradarsprite id 38\n",
		"prefix": "radarsprite.RADAR_SPRITE_SWEET",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TATTOO": {
		"body": "39",
		"description": "GTA SA #radarsprite\nradarsprite id 39\n",
		"prefix": "radarsprite.RADAR_SPRITE_TATTOO",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TRUTH": {
		"body": "40",
		"description": "GTA SA #radarsprite\nradarsprite id 40\n",
		"prefix": "radarsprite.RADAR_SPRITE_TRUTH",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_WAYPOINT": {
		"body": "41",
		"description": "GTA SA #radarsprite\nradarsprite id 41\n",
		"prefix": "radarsprite.RADAR_SPRITE_WAYPOINT",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TORENO_RANCH": {
		"body": "42",
		"description": "GTA SA #radarsprite\nradarsprite id 42\n",
		"prefix": "radarsprite.RADAR_SPRITE_TORENO_RANCH",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TRIADS": {
		"body": "43",
		"description": "GTA SA #radarsprite\nradarsprite id 43\n",
		"prefix": "radarsprite.RADAR_SPRITE_TRIADS",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TRIADS_CASINO": {
		"body": "44",
		"description": "GTA SA #radarsprite\nradarsprite id 44\n",
		"prefix": "radarsprite.RADAR_SPRITE_TRIADS_CASINO",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TSHIRT": {
		"body": "45",
		"description": "GTA SA #radarsprite\nradarsprite id 45\n",
		"prefix": "radarsprite.RADAR_SPRITE_TSHIRT",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_WOOZIE": {
		"body": "46",
		"description": "GTA SA #radarsprite\nradarsprite id 46\n",
		"prefix": "radarsprite.RADAR_SPRITE_WOOZIE",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_ZERO": {
		"body": "47",
		"description": "GTA SA #radarsprite\nradarsprite id 47\n",
		"prefix": "radarsprite.RADAR_SPRITE_ZERO",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_DATE_DISCO": {
		"body": "48",
		"description": "GTA SA #radarsprite\nradarsprite id 48\n",
		"prefix": "radarsprite.RADAR_SPRITE_DATE_DISCO",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_DATE_DRINK": {
		"body": "49",
		"description": "GTA SA #radarsprite\nradarsprite id 49\n",
		"prefix": "radarsprite.RADAR_SPRITE_DATE_DRINK",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_DATE_FOOD": {
		"body": "50",
		"description": "GTA SA #radarsprite\nradarsprite id 50\n",
		"prefix": "radarsprite.RADAR_SPRITE_DATE_FOOD",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_TRUCK": {
		"body": "51",
		"description": "GTA SA #radarsprite\nradarsprite id 51\n",
		"prefix": "radarsprite.RADAR_SPRITE_TRUCK",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_CASH": {
		"body": "52",
		"description": "GTA SA #radarsprite\nradarsprite id 52\n",
		"prefix": "radarsprite.RADAR_SPRITE_CASH",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_FLAG": {
		"body": "53",
		"description": "GTA SA #radarsprite\nradarsprite id 53\n",
		"prefix": "radarsprite.RADAR_SPRITE_FLAG",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GYM": {
		"body": "54",
		"description": "GTA SA #radarsprite\nradarsprite id 54\n",
		"prefix": "radarsprite.RADAR_SPRITE_GYM",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_IMPOUND": {
		"body": "55",
		"description": "GTA SA #radarsprite\nradarsprite id 55\n",
		"prefix": "radarsprite.RADAR_SPRITE_IMPOUND",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_RUNWAY_LIGHT": {
		"body": "56",
		"description": "GTA SA #radarsprite\nradarsprite id 56\n",
		"prefix": "radarsprite.RADAR_SPRITE_RUNWAY_LIGHT",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_RUNWAY": {
		"body": "57",
		"description": "GTA SA #radarsprite\nradarsprite id 57\n",
		"prefix": "radarsprite.RADAR_SPRITE_RUNWAY",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GANG_B": {
		"body": "58",
		"description": "GTA SA #radarsprite\nradarsprite id 58\n",
		"prefix": "radarsprite.RADAR_SPRITE_GANG_B",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GANG_P": {
		"body": "59",
		"description": "GTA SA #radarsprite\nradarsprite id 59\n",
		"prefix": "radarsprite.RADAR_SPRITE_GANG_P",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GANG_Y": {
		"body": "60",
		"description": "GTA SA #radarsprite\nradarsprite id 60\n",
		"prefix": "radarsprite.RADAR_SPRITE_GANG_Y",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GANG_N": {
		"body": "61",
		"description": "GTA SA #radarsprite\nradarsprite id 61\n",
		"prefix": "radarsprite.RADAR_SPRITE_GANG_N",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_GANG_G": {
		"body": "62",
		"description": "GTA SA #radarsprite\nradarsprite id 62\n",
		"prefix": "radarsprite.RADAR_SPRITE_GANG_G",
		"scope": "source.lua"
	},
	"radarsprite.RADAR_SPRITE_SPRAY": {
		"body": "63",
		"description": "GTA SA #radarsprite\nradarsprite id 63\n",
		"prefix": "radarsprite.RADAR_SPRITE_SPRAY",
		"scope": "source.lua"
	},

	"pickuptype.PICKUP_NONE": {
		"body": "0",
		"description": "GTA SA #pickuptype\npickuptype id 0\n",
		"prefix": "pickuptype.PICKUP_NONE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_IN_SHOP": {
		"body": "1",
		"description": "GTA SA #pickuptype\npickuptype id 1\n",
		"prefix": "pickuptype.PICKUP_IN_SHOP",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ON_STREET": {
		"body": "2",
		"description": "GTA SA #pickuptype\npickuptype id 2\n",
		"prefix": "pickuptype.PICKUP_ON_STREET",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ONCE": {
		"body": "3",
		"description": "GTA SA #pickuptype\npickuptype id 3\n",
		"prefix": "pickuptype.PICKUP_ONCE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ONCE_TIMEOUT": {
		"body": "4",
		"description": "GTA SA #pickuptype\npickuptype id 4\n",
		"prefix": "pickuptype.PICKUP_ONCE_TIMEOUT",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ONCE_TIMEOUT_SLOW": {
		"body": "5",
		"description": "GTA SA #pickuptype\npickuptype id 5\n",
		"prefix": "pickuptype.PICKUP_ONCE_TIMEOUT_SLOW",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_COLLECTABLE1": {
		"body": "6",
		"description": "GTA SA #pickuptype\npickuptype id 6\n",
		"prefix": "pickuptype.PICKUP_COLLECTABLE1",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_IN_SHOP_OUT_OF_STOCK": {
		"body": "7",
		"description": "GTA SA #pickuptype\npickuptype id 7\n",
		"prefix": "pickuptype.PICKUP_IN_SHOP_OUT_OF_STOCK",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_MONEY": {
		"body": "8",
		"description": "GTA SA #pickuptype\npickuptype id 8\n",
		"prefix": "pickuptype.PICKUP_MONEY",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_MINE_INACTIVE": {
		"body": "9",
		"description": "GTA SA #pickuptype\npickuptype id 9\n",
		"prefix": "pickuptype.PICKUP_MINE_INACTIVE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_MINE_ARMED": {
		"body": "10",
		"description": "GTA SA #pickuptype\npickuptype id 10\n",
		"prefix": "pickuptype.PICKUP_MINE_ARMED",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_NAUTICAL_MINE_INACTIVE": {
		"body": "11",
		"description": "GTA SA #pickuptype\npickuptype id 11\n",
		"prefix": "pickuptype.PICKUP_NAUTICAL_MINE_INACTIVE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_NAUTICAL_MINE_ARMED": {
		"body": "12",
		"description": "GTA SA #pickuptype\npickuptype id 12\n",
		"prefix": "pickuptype.PICKUP_NAUTICAL_MINE_ARMED",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_FLOATINGPACKAGE": {
		"body": "13",
		"description": "GTA SA #pickuptype\npickuptype id 13\n",
		"prefix": "pickuptype.PICKUP_FLOATINGPACKAGE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_FLOATINGPACKAGE_FLOATING": {
		"body": "14",
		"description": "GTA SA #pickuptype\npickuptype id 14\n",
		"prefix": "pickuptype.PICKUP_FLOATINGPACKAGE_FLOATING",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ON_STREET_SLOW": {
		"body": "15",
		"description": "GTA SA #pickuptype\npickuptype id 15\n",
		"prefix": "pickuptype.PICKUP_ON_STREET_SLOW",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ASSET_REVENUE": {
		"body": "16",
		"description": "GTA SA #pickuptype\npickuptype id 16\n",
		"prefix": "pickuptype.PICKUP_ASSET_REVENUE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_PROPERTY_LOCKED": {
		"body": "17",
		"description": "GTA SA #pickuptype\npickuptype id 17\n",
		"prefix": "pickuptype.PICKUP_PROPERTY_LOCKED",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_PROPERTY_FORSALE": {
		"body": "18",
		"description": "GTA SA #pickuptype\npickuptype id 18\n",
		"prefix": "pickuptype.PICKUP_PROPERTY_FORSALE",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_MONEY_DOESNTDISAPPEAR": {
		"body": "19",
		"description": "GTA SA #pickuptype\npickuptype id 19\n",
		"prefix": "pickuptype.PICKUP_MONEY_DOESNTDISAPPEAR",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_SNAPSHOT": {
		"body": "20",
		"description": "GTA SA #pickuptype\npickuptype id 20\n",
		"prefix": "pickuptype.PICKUP_SNAPSHOT",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_2P": {
		"body": "21",
		"description": "GTA SA #pickuptype\npickuptype id 21\n",
		"prefix": "pickuptype.PICKUP_2P",
		"scope": "source.lua"
	},
	"pickuptype.PICKUP_ONCE_FOR_MISSION": {
		"body": "22",
		"description": "GTA SA #pickuptype\npickuptype id 22\n",
		"prefix": "pickuptype.PICKUP_ONCE_FOR_MISSION",
		"scope": "source.lua"
	},

	"coronatype.CORONATYPE_SHINYSTAR": {
		"body": "0",
		"description": "GTA SA #coronatype\ncoronatype id 0\n",
		"prefix": "coronatype.CORONATYPE_SHINYSTAR",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEADLIGHT": {
		"body": "1",
		"description": "GTA SA #coronatype\ncoronatype id 1\n",
		"prefix": "coronatype.CORONATYPE_HEADLIGHT",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_MOON": {
		"body": "2",
		"description": "GTA SA #coronatype\ncoronatype id 2\n",
		"prefix": "coronatype.CORONATYPE_MOON",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_REFLECTION": {
		"body": "3",
		"description": "GTA SA #coronatype\ncoronatype id 3\n",
		"prefix": "coronatype.CORONATYPE_REFLECTION",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEADLIGHTLINE": {
		"body": "4",
		"description": "GTA SA #coronatype\ncoronatype id 4\n",
		"prefix": "coronatype.CORONATYPE_HEADLIGHTLINE",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_HEX": {
		"body": "5",
		"description": "GTA SA #coronatype\ncoronatype id 5\n",
		"prefix": "coronatype.CORONATYPE_HEX",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_CIRCLE": {
		"body": "6",
		"description": "GTA SA #coronatype\ncoronatype id 6\n",
		"prefix": "coronatype.CORONATYPE_CIRCLE",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_RING": {
		"body": "7",
		"description": "GTA SA #coronatype\ncoronatype id 7\n",
		"prefix": "coronatype.CORONATYPE_RING",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_STREAK": {
		"body": "8",
		"description": "GTA SA #coronatype\ncoronatype id 8\n",
		"prefix": "coronatype.CORONATYPE_STREAK",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_TORUS": {
		"body": "9",
		"description": "GTA SA #coronatype\ncoronatype id 9\n",
		"prefix": "coronatype.CORONATYPE_TORUS",
		"scope": "source.lua"
	},
	"coronatype.CORONATYPE_NONE": {
		"body": "10",
		"description": "GTA SA #coronatype\ncoronatype id 10\n",
		"prefix": "coronatype.CORONATYPE_NONE",
		"scope": "source.lua"
	},
		
	"cammode.NONE": {
		"body": "0",
		"description": "GTA SA #cammode\ncammode id 0\n",
		"prefix": "cammode.NONE",
		"scope": "source.lua"
	},
	"cammode.TOPDOWN": {
		"body": "1",
		"description": "GTA SA #cammode\ncammode id 1\n",
		"prefix": "cammode.TOPDOWN",
		"scope": "source.lua"
	},
	"cammode.GTACLASSIC": {
		"body": "2",
		"description": "GTA SA #cammode\ncammode id 2\n",
		"prefix": "cammode.GTACLASSIC",
		"scope": "source.lua"
	},
	"cammode.BEHINDCAR": {
		"body": "3",
		"description": "GTA SA #cammode\ncammode id 3\n",
		"prefix": "cammode.BEHINDCAR",
		"scope": "source.lua"
	},
	"cammode.FOLLOWPED": {
		"body": "4",
		"description": "GTA SA #cammode\ncammode id 4\n",
		"prefix": "cammode.FOLLOWPED",
		"scope": "source.lua"
	},
	"cammode.AIMING": {
		"body": "5",
		"description": "GTA SA #cammode\ncammode id 5\n",
		"prefix": "cammode.AIMING",
		"scope": "source.lua"
	},
	"cammode.DEBUG": {
		"body": "6",
		"description": "GTA SA #cammode\ncammode id 6\n",
		"prefix": "cammode.DEBUG",
		"scope": "source.lua"
	},
	"cammode.SNIPER": {
		"body": "7",
		"description": "GTA SA #cammode\ncammode id 7\n",
		"prefix": "cammode.SNIPER",
		"scope": "source.lua"
	},
	"cammode.ROCKETLAUNCHER": {
		"body": "8",
		"description": "GTA SA #cammode\ncammode id 8\n",
		"prefix": "cammode.ROCKETLAUNCHER",
		"scope": "source.lua"
	},
	"cammode.MODELVIEW": {
		"body": "9",
		"description": "GTA SA #cammode\ncammode id 9\n",
		"prefix": "cammode.MODELVIEW",
		"scope": "source.lua"
	},
	"cammode.BILL": {
		"body": "10",
		"description": "GTA SA #cammode\ncammode id 10\n",
		"prefix": "cammode.BILL",
		"scope": "source.lua"
	},
	"cammode.SYPHON": {
		"body": "11",
		"description": "GTA SA #cammode\ncammode id 11\n",
		"prefix": "cammode.SYPHON",
		"scope": "source.lua"
	},
	"cammode.CIRCLE": {
		"body": "12",
		"description": "GTA SA #cammode\ncammode id 12\n",
		"prefix": "cammode.CIRCLE",
		"scope": "source.lua"
	},
	"cammode.CHEESYZOOM": {
		"body": "13",
		"description": "GTA SA #cammode\ncammode id 13\n",
		"prefix": "cammode.CHEESYZOOM",
		"scope": "source.lua"
	},
	"cammode.WHEELCAM": {
		"body": "14",
		"description": "GTA SA #cammode\ncammode id 14\n",
		"prefix": "cammode.WHEELCAM",
		"scope": "source.lua"
	},
	"cammode.FIXED": {
		"body": "15",
		"description": "GTA SA #cammode\ncammode id 15\n",
		"prefix": "cammode.FIXED",
		"scope": "source.lua"
	},
	"cammode.1STPERSON": {
		"body": "16",
		"description": "GTA SA #cammode\ncammode id 16\n",
		"prefix": "cammode.1STPERSON",
		"scope": "source.lua"
	},
	"cammode.FLYBY": {
		"body": "17",
		"description": "GTA SA #cammode\ncammode id 17\n",
		"prefix": "cammode.FLYBY",
		"scope": "source.lua"
	},
	"cammode.CAM_ON_A_STRING": {
		"body": "18",
		"description": "GTA SA #cammode\ncammode id 18\n",
		"prefix": "cammode.CAM_ON_A_STRING",
		"scope": "source.lua"
	},
	"cammode.REACTION": {
		"body": "19",
		"description": "GTA SA #cammode\ncammode id 19\n",
		"prefix": "cammode.REACTION",
		"scope": "source.lua"
	},
	"cammode.FOLLOW_PED_WITH_BIND": {
		"body": "20",
		"description": "GTA SA #cammode\ncammode id 20\n",
		"prefix": "cammode.FOLLOW_PED_WITH_BIND",
		"scope": "source.lua"
	},
	"cammode.CHRIS": {
		"body": "21",
		"description": "GTA SA #cammode\ncammode id 21\n",
		"prefix": "cammode.CHRIS",
		"scope": "source.lua"
	},
	"cammode.BEHINDBOAT": {
		"body": "22",
		"description": "GTA SA #cammode\ncammode id 22\n",
		"prefix": "cammode.BEHINDBOAT",
		"scope": "source.lua"
	},
	"cammode.PLAYER_FALLEN_WATER": {
		"body": "23",
		"description": "GTA SA #cammode\ncammode id 23\n",
		"prefix": "cammode.PLAYER_FALLEN_WATER",
		"scope": "source.lua"
	},
	"cammode.CAM_ON_TRAIN_ROOF": {
		"body": "24",
		"description": "GTA SA #cammode\ncammode id 24\n",
		"prefix": "cammode.CAM_ON_TRAIN_ROOF",
		"scope": "source.lua"
	},
	"cammode.CAM_RUNNING_SIDE_TRAIN": {
		"body": "25",
		"description": "GTA SA #cammode\ncammode id 25\n",
		"prefix": "cammode.CAM_RUNNING_SIDE_TRAIN",
		"scope": "source.lua"
	},
	"cammode.BLOOD_ON_THE_TRACKS": {
		"body": "26",
		"description": "GTA SA #cammode\ncammode id 26\n",
		"prefix": "cammode.BLOOD_ON_THE_TRACKS",
		"scope": "source.lua"
	},
	"cammode.IM_THE_PASSENGER_WOOWOO": {
		"body": "27",
		"description": "GTA SA #cammode\ncammode id 27\n",
		"prefix": "cammode.IM_THE_PASSENGER_WOOWOO",
		"scope": "source.lua"
	},
	"cammode.SYPHON_CRIM_IN_FRONT": {
		"body": "28",
		"description": "GTA SA #cammode\ncammode id 28\n",
		"prefix": "cammode.SYPHON_CRIM_IN_FRONT",
		"scope": "source.lua"
	},
	"cammode.PED_DEAD_BABY": {
		"body": "29",
		"description": "GTA SA #cammode\ncammode id 29\n",
		"prefix": "cammode.PED_DEAD_BABY",
		"scope": "source.lua"
	},
	"cammode.PILLOWS_PAPS": {
		"body": "30",
		"description": "GTA SA #cammode\ncammode id 30\n",
		"prefix": "cammode.PILLOWS_PAPS",
		"scope": "source.lua"
	},
	"cammode.LOOK_AT_CARS": {
		"body": "31",
		"description": "GTA SA #cammode\ncammode id 31\n",
		"prefix": "cammode.LOOK_AT_CARS",
		"scope": "source.lua"
	},
	"cammode.ARRESTCAM_ONE": {
		"body": "32",
		"description": "GTA SA #cammode\ncammode id 32\n",
		"prefix": "cammode.ARRESTCAM_ONE",
		"scope": "source.lua"
	},
	"cammode.ARRESTCAM_TWO": {
		"body": "33",
		"description": "GTA SA #cammode\ncammode id 33\n",
		"prefix": "cammode.ARRESTCAM_TWO",
		"scope": "source.lua"
	},
	"cammode.M16_1STPERSON": {
		"body": "34",
		"description": "GTA SA #cammode\ncammode id 34\n",
		"prefix": "cammode.M16_1STPERSON",
		"scope": "source.lua"
	},
	"cammode.SPECIAL_FIXED_FOR_SYPHON": {
		"body": "35",
		"description": "GTA SA #cammode\ncammode id 35\n",
		"prefix": "cammode.SPECIAL_FIXED_FOR_SYPHON",
		"scope": "source.lua"
	},
	"cammode.FIGHT_CAM": {
		"body": "36",
		"description": "GTA SA #cammode\ncammode id 36\n",
		"prefix": "cammode.FIGHT_CAM",
		"scope": "source.lua"
	},
	"cammode.TOP_DOWN_PED": {
		"body": "37",
		"description": "GTA SA #cammode\ncammode id 37\n",
		"prefix": "cammode.TOP_DOWN_PED",
		"scope": "source.lua"
	},
	"cammode.LIGHTHOUSE": {
		"body": "38",
		"description": "GTA SA #cammode\ncammode id 38\n",
		"prefix": "cammode.LIGHTHOUSE",
		"scope": "source.lua"
	},
	"cammode.SNIPER_RUNABOUT": {
		"body": "39",
		"description": "GTA SA #cammode\ncammode id 39\n",
		"prefix": "cammode.SNIPER_RUNABOUT",
		"scope": "source.lua"
	},
	"cammode.ROCKETLAUNCHER_RUNABOUT": {
		"body": "40",
		"description": "GTA SA #cammode\ncammode id 40\n",
		"prefix": "cammode.ROCKETLAUNCHER_RUNABOUT",
		"scope": "source.lua"
	},
	"cammode.1STPERSON_RUNABOUT": {
		"body": "41",
		"description": "GTA SA #cammode\ncammode id 41\n",
		"prefix": "cammode.1STPERSON_RUNABOUT",
		"scope": "source.lua"
	},
	"cammode.M16_1STPERSON_RUNABOUT": {
		"body": "42",
		"description": "GTA SA #cammode\ncammode id 42\n",
		"prefix": "cammode.M16_1STPERSON_RUNABOUT",
		"scope": "source.lua"
	},
	"cammode.FIGHT_CAM_RUNABOUT": {
		"body": "43",
		"description": "GTA SA #cammode\ncammode id 43\n",
		"prefix": "cammode.FIGHT_CAM_RUNABOUT",
		"scope": "source.lua"
	},
	"cammode.EDITOR": {
		"body": "44",
		"description": "GTA SA #cammode\ncammode id 44\n",
		"prefix": "cammode.EDITOR",
		"scope": "source.lua"
	},
	"cammode.HELICANNON_1STPERSON": {
		"body": "45",
		"description": "GTA SA #cammode\ncammode id 45\n",
		"prefix": "cammode.HELICANNON_1STPERSON",
		"scope": "source.lua"
	},
	"cammode.CAMERA": {
		"body": "46",
		"description": "GTA SA #cammode\ncammode id 46\n",
		"prefix": "cammode.CAMERA",
		"scope": "source.lua"
	},
	"cammode.ATTACHCAM": {
		"body": "47",
		"description": "GTA SA #cammode\ncammode id 47\n",
		"prefix": "cammode.ATTACHCAM",
		"scope": "source.lua"
	},
	"cammode.TWOPLAYER": {
		"body": "48",
		"description": "GTA SA #cammode\ncammode id 48\n",
		"prefix": "cammode.TWOPLAYER",
		"scope": "source.lua"
	},
	"cammode.TWOPLAYER_IN_CAR_AND_SHOOTING": {
		"body": "49",
		"description": "GTA SA #cammode\ncammode id 49\n",
		"prefix": "cammode.TWOPLAYER_IN_CAR_AND_SHOOTING",
		"scope": "source.lua"
	},
	"cammode.TWOPLAYER_SEPARATE_CARS": {
		"body": "50",
		"description": "GTA SA #cammode\ncammode id 50\n",
		"prefix": "cammode.TWOPLAYER_SEPARATE_CARS",
		"scope": "source.lua"
	},
	"cammode.ROCKETLAUNCHER_HS": {
		"body": "51",
		"description": "GTA SA #cammode\ncammode id 51\n",
		"prefix": "cammode.ROCKETLAUNCHER_HS",
		"scope": "source.lua"
	},
	"cammode.ROCKETLAUNCHER_RUNABOUT_HS": {
		"body": "52",
		"description": "GTA SA #cammode\ncammode id 52\n",
		"prefix": "cammode.ROCKETLAUNCHER_RUNABOUT_HS",
		"scope": "source.lua"
	},
	"cammode.AIMWEAPON": {
		"body": "53",
		"description": "GTA SA #cammode\ncammode id 53\n",
		"prefix": "cammode.AIMWEAPON",
		"scope": "source.lua"
	},
	"cammode.TWOPLAYER_SEPARATE_CARS_TOPDOWN": {
		"body": "54",
		"description": "GTA SA #cammode\ncammode id 54\n",
		"prefix": "cammode.TWOPLAYER_SEPARATE_CARS_TOPDOWN",
		"scope": "source.lua"
	},
	"cammode.AIMWEAPON_FROMCAR": {
		"body": "55",
		"description": "GTA SA #cammode\ncammode id 55\n",
		"prefix": "cammode.AIMWEAPON_FROMCAR",
		"scope": "source.lua"
	},
	"cammode.DW_HELI_CHASE": {
		"body": "56",
		"description": "GTA SA #cammode\ncammode id 56\n",
		"prefix": "cammode.DW_HELI_CHASE",
		"scope": "source.lua"
	},
	"cammode.DW_CAM_MAN": {
		"body": "57",
		"description": "GTA SA #cammode\ncammode id 57\n",
		"prefix": "cammode.DW_CAM_MAN",
		"scope": "source.lua"
	},
	"cammode.DW_BIRDY": {
		"body": "58",
		"description": "GTA SA #cammode\ncammode id 58\n",
		"prefix": "cammode.DW_BIRDY",
		"scope": "source.lua"
	},
	"cammode.DW_PLANE_SPOTTER": {
		"body": "59",
		"description": "GTA SA #cammode\ncammode id 59\n",
		"prefix": "cammode.DW_PLANE_SPOTTER",
		"scope": "source.lua"
	},
	"cammode.DW_DOG_FIGHT": {
		"body": "60",
		"description": "GTA SA #cammode\ncammode id 60\n",
		"prefix": "cammode.DW_DOG_FIGHT",
		"scope": "source.lua"
	},
	"cammode.DW_FISH": {
		"body": "61",
		"description": "GTA SA #cammode\ncammode id 61\n",
		"prefix": "cammode.DW_FISH",
		"scope": "source.lua"
	},
	"cammode.DW_PLANECAM1": {
		"body": "62",
		"description": "GTA SA #cammode\ncammode id 62\n",
		"prefix": "cammode.DW_PLANECAM1",
		"scope": "source.lua"
	},
	"cammode.DW_PLANECAM2": {
		"body": "63",
		"description": "GTA SA #cammode\ncammode id 63\n",
		"prefix": "cammode.DW_PLANECAM2",
		"scope": "source.lua"
	},
	"cammode.DW_PLANECAM3": {
		"body": "64",
		"description": "GTA SA #cammode\ncammode id 64\n",
		"prefix": "cammode.DW_PLANECAM3",
		"scope": "source.lua"
	},
	"cammode.AIMWEAPON_ATTACHED": {
		"body": "65",
		"description": "GTA SA #cammode\ncammode id 65\n",
		"prefix": "cammode.AIMWEAPON_ATTACHED",
		"scope": "source.lua"
	},
		
	"explosiontype.EXPLOSION_GRENADE": {
		"body": "0",
		"description": "GTA SA #explosiontype\nexplosiontype id 0\n",
		"prefix": "explosiontype.EXPLOSION_GRENADE",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_MOLOTOV": {
		"body": "1",
		"description": "GTA SA #explosiontype\nexplosiontype id 1\n",
		"prefix": "explosiontype.EXPLOSION_MOLOTOV",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_ROCKET": {
		"body": "2",
		"description": "GTA SA #explosiontype\nexplosiontype id 2\n",
		"prefix": "explosiontype.EXPLOSION_ROCKET",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_ROCKET_WEAK": {
		"body": "3",
		"description": "GTA SA #explosiontype\nexplosiontype id 3\n",
		"prefix": "explosiontype.EXPLOSION_ROCKET_WEAK",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_CAR": {
		"body": "4",
		"description": "GTA SA #explosiontype\nexplosiontype id 4\n",
		"prefix": "explosiontype.EXPLOSION_CAR",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_CAR_QUICK": {
		"body": "5",
		"description": "GTA SA #explosiontype\nexplosiontype id 5\n",
		"prefix": "explosiontype.EXPLOSION_CAR_QUICK",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_BOAT": {
		"body": "6",
		"description": "GTA SA #explosiontype\nexplosiontype id 6\n",
		"prefix": "explosiontype.EXPLOSION_BOAT",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_HELI": {
		"body": "7",
		"description": "GTA SA #explosiontype\nexplosiontype id 7\n",
		"prefix": "explosiontype.EXPLOSION_HELI",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_MINE": {
		"body": "8",
		"description": "GTA SA #explosiontype\nexplosiontype id 8\n",
		"prefix": "explosiontype.EXPLOSION_MINE",
		"scope": "source.lua"
	},
	"explosiontype.EXPLOSION_BARREL": {
		"body": "9",
		"description": "GTA SA #explosiontype\nexplosiontype id 9\n",
		"prefix": "explosiontype.EXPLOSION_BARREL",
		"scope": "source.lua"
	},

	"effectname.prt_boatsplash": {
		"body": "prt_boatsplash",
		"description": "GTA SA #effectname\neffectname id prt_boatsplash\n",
		"prefix": "effectname.prt_boatsplash",
		"scope": "source.lua"
	},
	"effectname.prt_bubble": {
		"body": "prt_bubble",
		"description": "GTA SA #effectname\neffectname id prt_bubble\n",
		"prefix": "effectname.prt_bubble",
		"scope": "source.lua"
	},
	"effectname.prt_cardebris": {
		"body": "prt_cardebris",
		"description": "GTA SA #effectname\neffectname id prt_cardebris\n",
		"prefix": "effectname.prt_cardebris",
		"scope": "source.lua"
	},
	"effectname.prt_collisionsmoke": {
		"body": "prt_collisionsmoke",
		"description": "GTA SA #effectname\neffectname id prt_collisionsmoke\n",
		"prefix": "effectname.prt_collisionsmoke",
		"scope": "source.lua"
	},
	"effectname.prt_glass": {
		"body": "prt_glass",
		"description": "GTA SA #effectname\neffectname id prt_glass\n",
		"prefix": "effectname.prt_glass",
		"scope": "source.lua"
	},
	"effectname.prt_gunshell": {
		"body": "prt_gunshell",
		"description": "GTA SA #effectname\neffectname id prt_gunshell\n",
		"prefix": "effectname.prt_gunshell",
		"scope": "source.lua"
	},
	"effectname.prt_sand": {
		"body": "prt_sand",
		"description": "GTA SA #effectname\neffectname id prt_sand\n",
		"prefix": "effectname.prt_sand",
		"scope": "source.lua"
	},
	"effectname.prt_sand2": {
		"body": "prt_sand2",
		"description": "GTA SA #effectname\neffectname id prt_sand2\n",
		"prefix": "effectname.prt_sand2",
		"scope": "source.lua"
	},
	"effectname.prt_smokeII_3_expand": {
		"body": "prt_smokeII_3_expand",
		"description": "GTA SA #effectname\neffectname id prt_smokeII_3_expand\n",
		"prefix": "effectname.prt_smokeII_3_expand",
		"scope": "source.lua"
	},
	"effectname.prt_smoke_huge": {
		"body": "prt_smoke_huge",
		"description": "GTA SA #effectname\neffectname id prt_smoke_huge\n",
		"prefix": "effectname.prt_smoke_huge",
		"scope": "source.lua"
	},
	"effectname.prt_spark": {
		"body": "prt_spark",
		"description": "GTA SA #effectname\neffectname id prt_spark\n",
		"prefix": "effectname.prt_spark",
		"scope": "source.lua"
	},
	"effectname.prt_spark_2": {
		"body": "prt_spark_2",
		"description": "GTA SA #effectname\neffectname id prt_spark_2\n",
		"prefix": "effectname.prt_spark_2",
		"scope": "source.lua"
	},
	"effectname.prt_splash": {
		"body": "prt_splash",
		"description": "GTA SA #effectname\neffectname id prt_splash\n",
		"prefix": "effectname.prt_splash",
		"scope": "source.lua"
	},
	"effectname.prt_wake": {
		"body": "prt_wake",
		"description": "GTA SA #effectname\neffectname id prt_wake\n",
		"prefix": "effectname.prt_wake",
		"scope": "source.lua"
	},
	"effectname.prt_watersplash": {
		"body": "prt_watersplash",
		"description": "GTA SA #effectname\neffectname id prt_watersplash\n",
		"prefix": "effectname.prt_watersplash",
		"scope": "source.lua"
	},
	"effectname.prt_wheeldirt": {
		"body": "prt_wheeldirt",
		"description": "GTA SA #effectname\neffectname id prt_wheeldirt\n",
		"prefix": "effectname.prt_wheeldirt",
		"scope": "source.lua"
	},
	"effectname.boat_prop": {
		"body": "boat_prop",
		"description": "GTA SA #effectname\neffectname id boat_prop\n",
		"prefix": "effectname.boat_prop",
		"scope": "source.lua"
	},
	"effectname.camflash": {
		"body": "camflash",
		"description": "GTA SA #effectname\neffectname id camflash\n",
		"prefix": "effectname.camflash",
		"scope": "source.lua"
	},
	"effectname.exhale": {
		"body": "exhale",
		"description": "GTA SA #effectname\neffectname id exhale\n",
		"prefix": "effectname.exhale",
		"scope": "source.lua"
	},
	"effectname.explosion_fuel_car": {
		"body": "explosion_fuel_car",
		"description": "GTA SA #effectname\neffectname id explosion_fuel_car\n",
		"prefix": "effectname.explosion_fuel_car",
		"scope": "source.lua"
	},
	"effectname.explosion_large": {
		"body": "explosion_large",
		"description": "GTA SA #effectname\neffectname id explosion_large\n",
		"prefix": "effectname.explosion_large",
		"scope": "source.lua"
	},
	"effectname.explosion_medium": {
		"body": "explosion_medium",
		"description": "GTA SA #effectname\neffectname id explosion_medium\n",
		"prefix": "effectname.explosion_medium",
		"scope": "source.lua"
	},
	"effectname.explosion_molotov": {
		"body": "explosion_molotov",
		"description": "GTA SA #effectname\neffectname id explosion_molotov\n",
		"prefix": "effectname.explosion_molotov",
		"scope": "source.lua"
	},
	"effectname.explosion_small": {
		"body": "explosion_small",
		"description": "GTA SA #effectname\neffectname id explosion_small\n",
		"prefix": "effectname.explosion_small",
		"scope": "source.lua"
	},
	"effectname.explosion_tiny": {
		"body": "explosion_tiny",
		"description": "GTA SA #effectname\neffectname id explosion_tiny\n",
		"prefix": "effectname.explosion_tiny",
		"scope": "source.lua"
	},
	"effectname.extinguisher": {
		"body": "extinguisher",
		"description": "GTA SA #effectname\neffectname id extinguisher\n",
		"prefix": "effectname.extinguisher",
		"scope": "source.lua"
	},
	"effectname.fire": {
		"body": "fire",
		"description": "GTA SA #effectname\neffectname id fire\n",
		"prefix": "effectname.fire",
		"scope": "source.lua"
	},
	"effectname.fire_bike": {
		"body": "fire_bike",
		"description": "GTA SA #effectname\neffectname id fire_bike\n",
		"prefix": "effectname.fire_bike",
		"scope": "source.lua"
	},
	"effectname.fire_car": {
		"body": "fire_car",
		"description": "GTA SA #effectname\neffectname id fire_car\n",
		"prefix": "effectname.fire_car",
		"scope": "source.lua"
	},
	"effectname.fire_large": {
		"body": "fire_large",
		"description": "GTA SA #effectname\neffectname id fire_large\n",
		"prefix": "effectname.fire_large",
		"scope": "source.lua"
	},
	"effectname.fire_med": {
		"body": "fire_med",
		"description": "GTA SA #effectname\neffectname id fire_med\n",
		"prefix": "effectname.fire_med",
		"scope": "source.lua"
	},
	"effectname.flamethrower": {
		"body": "flamethrower",
		"description": "GTA SA #effectname\neffectname id flamethrower\n",
		"prefix": "effectname.flamethrower",
		"scope": "source.lua"
	},
	"effectname.gunflash": {
		"body": "gunflash",
		"description": "GTA SA #effectname\neffectname id gunflash\n",
		"prefix": "effectname.gunflash",
		"scope": "source.lua"
	},
	"effectname.gunsmoke": {
		"body": "gunsmoke",
		"description": "GTA SA #effectname\neffectname id gunsmoke\n",
		"prefix": "effectname.gunsmoke",
		"scope": "source.lua"
	},
	"effectname.heli_dust": {
		"body": "heli_dust",
		"description": "GTA SA #effectname\neffectname id heli_dust\n",
		"prefix": "effectname.heli_dust",
		"scope": "source.lua"
	},
	"effectname.jetpack": {
		"body": "jetpack",
		"description": "GTA SA #effectname\neffectname id jetpack\n",
		"prefix": "effectname.jetpack",
		"scope": "source.lua"
	},
	"effectname.jetthrust": {
		"body": "jetthrust",
		"description": "GTA SA #effectname\neffectname id jetthrust\n",
		"prefix": "effectname.jetthrust",
		"scope": "source.lua"
	},
	"effectname.molotov_flame": {
		"body": "molotov_flame",
		"description": "GTA SA #effectname\neffectname id molotov_flame\n",
		"prefix": "effectname.molotov_flame",
		"scope": "source.lua"
	},
	"effectname.nitro": {
		"body": "nitro",
		"description": "GTA SA #effectname\neffectname id nitro\n",
		"prefix": "effectname.nitro",
		"scope": "source.lua"
	},
	"effectname.overheat_car": {
		"body": "overheat_car",
		"description": "GTA SA #effectname\neffectname id overheat_car\n",
		"prefix": "effectname.overheat_car",
		"scope": "source.lua"
	},
	"effectname.overheat_car_electric": {
		"body": "overheat_car_electric",
		"description": "GTA SA #effectname\neffectname id overheat_car_electric\n",
		"prefix": "effectname.overheat_car_electric",
		"scope": "source.lua"
	},
	"effectname.riot_smoke": {
		"body": "riot_smoke",
		"description": "GTA SA #effectname\neffectname id riot_smoke\n",
		"prefix": "effectname.riot_smoke",
		"scope": "source.lua"
	},
	"effectname.spraycan": {
		"body": "spraycan",
		"description": "GTA SA #effectname\neffectname id spraycan\n",
		"prefix": "effectname.spraycan",
		"scope": "source.lua"
	},
	"effectname.tank_fire": {
		"body": "tank_fire",
		"description": "GTA SA #effectname\neffectname id tank_fire\n",
		"prefix": "effectname.tank_fire",
		"scope": "source.lua"
	},
	"effectname.teargas": {
		"body": "teargas",
		"description": "GTA SA #effectname\neffectname id teargas\n",
		"prefix": "effectname.teargas",
		"scope": "source.lua"
	},
	"effectname.teargasAD": {
		"body": "teargasAD",
		"description": "GTA SA #effectname\neffectname id teargasAD\n",
		"prefix": "effectname.teargasAD",
		"scope": "source.lua"
	},
	"effectname.water_hydrant": {
		"body": "water_hydrant",
		"description": "GTA SA #effectname\neffectname id water_hydrant\n",
		"prefix": "effectname.water_hydrant",
		"scope": "source.lua"
	},
	"effectname.water_ripples": {
		"body": "water_ripples",
		"description": "GTA SA #effectname\neffectname id water_ripples\n",
		"prefix": "effectname.water_ripples",
		"scope": "source.lua"
	},
	"effectname.water_speed": {
		"body": "water_speed",
		"description": "GTA SA #effectname\neffectname id water_speed\n",
		"prefix": "effectname.water_speed",
		"scope": "source.lua"
	},
	"effectname.water_splash": {
		"body": "water_splash",
		"description": "GTA SA #effectname\neffectname id water_splash\n",
		"prefix": "effectname.water_splash",
		"scope": "source.lua"
	},
	"effectname.water_splash_big": {
		"body": "water_splash_big",
		"description": "GTA SA #effectname\neffectname id water_splash_big\n",
		"prefix": "effectname.water_splash_big",
		"scope": "source.lua"
	},
	"effectname.water_splsh_sml": {
		"body": "water_splsh_sml",
		"description": "GTA SA #effectname\neffectname id water_splsh_sml\n",
		"prefix": "effectname.water_splsh_sml",
		"scope": "source.lua"
	},
	"effectname.water_swim": {
		"body": "water_swim",
		"description": "GTA SA #effectname\neffectname id water_swim\n",
		"prefix": "effectname.water_swim",
		"scope": "source.lua"
	},
	"effectname.cigarette_smoke": {
		"body": "cigarette_smoke",
		"description": "GTA SA #effectname\neffectname id cigarette_smoke\n",
		"prefix": "effectname.cigarette_smoke",
		"scope": "source.lua"
	},
	"effectname.Flame": {
		"body": "Flame",
		"description": "GTA SA #effectname\neffectname id Flame\n",
		"prefix": "effectname.Flame",
		"scope": "source.lua"
	},
	"effectname.insects": {
		"body": "insects",
		"description": "GTA SA #effectname\neffectname id insects\n",
		"prefix": "effectname.insects",
		"scope": "source.lua"
	},
	"effectname.smoke30lit": {
		"body": "smoke30lit",
		"description": "GTA SA #effectname\neffectname id smoke30lit\n",
		"prefix": "effectname.smoke30lit",
		"scope": "source.lua"
	},
	"effectname.smoke30m": {
		"body": "smoke30m",
		"description": "GTA SA #effectname\neffectname id smoke30m\n",
		"prefix": "effectname.smoke30m",
		"scope": "source.lua"
	},
	"effectname.smoke50lit": {
		"body": "smoke50lit",
		"description": "GTA SA #effectname\neffectname id smoke50lit\n",
		"prefix": "effectname.smoke50lit",
		"scope": "source.lua"
	},
	"effectname.vent": {
		"body": "vent",
		"description": "GTA SA #effectname\neffectname id vent\n",
		"prefix": "effectname.vent",
		"scope": "source.lua"
	},
	"effectname.vent2": {
		"body": "vent2",
		"description": "GTA SA #effectname\neffectname id vent2\n",
		"prefix": "effectname.vent2",
		"scope": "source.lua"
	},
	"effectname.waterfall_end": {
		"body": "waterfall_end",
		"description": "GTA SA #effectname\neffectname id waterfall_end\n",
		"prefix": "effectname.waterfall_end",
		"scope": "source.lua"
	},
	"effectname.water_fnt_tme": {
		"body": "water_fnt_tme",
		"description": "GTA SA #effectname\neffectname id water_fnt_tme\n",
		"prefix": "effectname.water_fnt_tme",
		"scope": "source.lua"
	},
	"effectname.water_fountain": {
		"body": "water_fountain",
		"description": "GTA SA #effectname\neffectname id water_fountain\n",
		"prefix": "effectname.water_fountain",
		"scope": "source.lua"
	},
	"effectname.tree_hit_fir": {
		"body": "tree_hit_fir",
		"description": "GTA SA #effectname\neffectname id tree_hit_fir\n",
		"prefix": "effectname.tree_hit_fir",
		"scope": "source.lua"
	},
	"effectname.tree_hit_palm": {
		"body": "tree_hit_palm",
		"description": "GTA SA #effectname\neffectname id tree_hit_palm\n",
		"prefix": "effectname.tree_hit_palm",
		"scope": "source.lua"
	},
	"effectname.blood_heli": {
		"body": "blood_heli",
		"description": "GTA SA #effectname\neffectname id blood_heli\n",
		"prefix": "effectname.blood_heli",
		"scope": "source.lua"
	},
	"effectname.carwashspray": {
		"body": "carwashspray",
		"description": "GTA SA #effectname\neffectname id carwashspray\n",
		"prefix": "effectname.carwashspray",
		"scope": "source.lua"
	},
	"effectname.cement": {
		"body": "cement",
		"description": "GTA SA #effectname\neffectname id cement\n",
		"prefix": "effectname.cement",
		"scope": "source.lua"
	},
	"effectname.cloudfast": {
		"body": "cloudfast",
		"description": "GTA SA #effectname\neffectname id cloudfast\n",
		"prefix": "effectname.cloudfast",
		"scope": "source.lua"
	},
	"effectname.coke_puff": {
		"body": "coke_puff",
		"description": "GTA SA #effectname\neffectname id coke_puff\n",
		"prefix": "effectname.coke_puff",
		"scope": "source.lua"
	},
	"effectname.coke_trail": {
		"body": "coke_trail",
		"description": "GTA SA #effectname\neffectname id coke_trail\n",
		"prefix": "effectname.coke_trail",
		"scope": "source.lua"
	},
	"effectname.explosion_barrel": {
		"body": "explosion_barrel",
		"description": "GTA SA #effectname\neffectname id explosion_barrel\n",
		"prefix": "effectname.explosion_barrel",
		"scope": "source.lua"
	},
	"effectname.explosion_crate": {
		"body": "explosion_crate",
		"description": "GTA SA #effectname\neffectname id explosion_crate\n",
		"prefix": "effectname.explosion_crate",
		"scope": "source.lua"
	},
	"effectname.explosion_door": {
		"body": "explosion_door",
		"description": "GTA SA #effectname\neffectname id explosion_door\n",
		"prefix": "effectname.explosion_door",
		"scope": "source.lua"
	},
	"effectname.petrolcan": {
		"body": "petrolcan",
		"description": "GTA SA #effectname\neffectname id petrolcan\n",
		"prefix": "effectname.petrolcan",
		"scope": "source.lua"
	},
	"effectname.puke": {
		"body": "puke",
		"description": "GTA SA #effectname\neffectname id puke\n",
		"prefix": "effectname.puke",
		"scope": "source.lua"
	},
	"effectname.shootlight": {
		"body": "shootlight",
		"description": "GTA SA #effectname\neffectname id shootlight\n",
		"prefix": "effectname.shootlight",
		"scope": "source.lua"
	},
	"effectname.smoke_flare": {
		"body": "smoke_flare",
		"description": "GTA SA #effectname\neffectname id smoke_flare\n",
		"prefix": "effectname.smoke_flare",
		"scope": "source.lua"
	},
	"effectname.wallbust": {
		"body": "wallbust",
		"description": "GTA SA #effectname\neffectname id wallbust\n",
		"prefix": "effectname.wallbust",
		"scope": "source.lua"
	},
	"effectname.WS_factorysmoke": {
		"body": "WS_factorysmoke",
		"description": "GTA SA #effectname\neffectname id WS_factorysmoke\n",
		"prefix": "effectname.WS_factorysmoke",
		"scope": "source.lua"
	},
	
	
	
		"shape.new": {
		"body": "shape.new()",
		"description": "MoonAdditions\n﻿Shape shape = shape.new()\n",
		"prefix": "shape.new",
		"scope": "source.lua"
	},
	"shape:draw": {
		"body": "shape:draw(${1:prim_type},${2:enable_vertex_alpha},${3:src_blend},${4:dst_blend},${5:texture]})",
		"description": "MoonAdditions\nshape:draw(uint prim_type, bool enable_vertex_alpha, uint src_blend, uint dst_blend, [Texture texture])\n",
		"prefix": "shape:draw",
		"scope": "source.lua"
	},
	"shape:add_vertex": {
		"body": "shape:add_vertex(${1:x},${2:y},${3:r},${4:g},${5:b},${6:a},${7:u},${8:v},${9:invert_x},${10:invert_y]})",
		"description": "MoonAdditions\nshape:add_vertex(float x, float y, int r, int g, int b, int a, [float u, float v, bool invert_x, bool invert_y])\n",
		"prefix": "shape:add_vertex",
		"scope": "source.lua"
	},
	"shape:set_vertex": {
		"body": "shape:set_vertex(${1:index},${2:x},${3:y},${4:r},${5:g},${6:b},${7:a},${8:u},${9:v},${10:invert_x},${11:invert_y]})",
		"description": "MoonAdditions\nshape:set_vertex(uint index, float x, float y, int r, int g, int b, int a, [float u, float v, bool invert_x, bool invert_y])\n",
		"prefix": "shape:set_vertex",
		"scope": "source.lua"
	},
	"shape:set_vertex": {
		"body": "shape:set_vertex(${1:index},${2:vertex})",
		"description": "MoonAdditions\nshape:set_vertex(uint index, Vertex vertex)\n",
		"prefix": "shape:set_vertex",
		"scope": "source.lua"
	},
	"shape:clear": {
		"body": "shape:clear()",
		"description": "MoonAdditions\nshape:clear()\n",
		"prefix": "shape:clear",
		"scope": "source.lua"
	},
	"shape.vertices_number": {
		"body": "shape.vertices_number()",
		"description": "MoonAdditions\nuint vertices = shape.vertices_number\n",
		"prefix": "shape.vertices_number",
		"scope": "source.lua"
	},
	"shape:rotate_vertex": {
		"body": "shape:rotate_vertex(${1:index},${2:around_x},${3:around_y},${4:angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_vertex(uint index, float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_vertex",
		"scope": "source.lua"
	},
	"shape:rotate_vertices_range": {
		"body": "shape:rotate_vertices_range(${1:from},${2:to},${3:around_x},${4:around_y},${5:angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_vertices_range(uint from, uint to, float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_vertices_range",
		"scope": "source.lua"
	},
	"shape:rotate_all_vertices": {
		"body": "shape:rotate_all_vertices(${1:around_x},${2:around_y},${3:angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_all_vertices(float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_all_vertices",
		"scope": "source.lua"
	},
	"shape:get_vertex": {
		"body": "shape:get_vertex(${1:index})",
		"description": "MoonAdditions\nVertex vertex = shape:get_vertex(uint index)\n",
		"prefix": "shape:get_vertex",
		"scope": "source.lua"
	},
	"vertex:set_color": {
		"body": "vertex:set_color(${1:r},${2:g},${3:b},${4:aя})",
		"description": "MoonAdditions\nvertex:set_color(int r, int g, int b, int aя)\n",
		"prefix": "vertex:set_color",
		"scope": "source.lua"
	},
	"vertex:get_color": {
		"body": "vertex:get_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = vertex:get_color()\n",
		"prefix": "vertex:get_color",
		"scope": "source.lua"
	},
	"get_char_bone": {
		"body": "get_char_bone(${1:handle},${2:bone_id})",
		"description": "MoonAdditions\nBone bone = get_char_bone(Ped handle, int bone_id)\n",
		"prefix": "get_char_bone",
		"scope": "source.lua"
	},
	"bone:get_pointer": {
		"body": "bone:get_pointer()",
		"description": "MoonAdditions\nuint ptr = bone:get_pointer()\n",
		"prefix": "bone:get_pointer",
		"scope": "source.lua"
	},
	"set_vehicle_model_alpha": {
		"body": "set_vehicle_model_alpha(${1:handle},${2:alpha})",
		"description": "MoonAdditions\nset_vehicle_model_alpha(Vehicle handle, uint alpha)\n",
		"prefix": "set_vehicle_model_alpha",
		"scope": "source.lua"
	},
	"set_char_model_alpha": {
		"body": "set_char_model_alpha(${1:handle},${2:alpha})",
		"description": "MoonAdditions\nset_char_model_alpha(Ped handle, uint alpha)\n",
		"prefix": "set_char_model_alpha",
		"scope": "source.lua"
	},
	"set_object_model_alpha": {
		"body": "set_object_model_alpha(${1:handle},${2:alpha})",
		"description": "MoonAdditions\nset_object_model_alpha(Object handle, uint alpha)\n",
		"prefix": "set_object_model_alpha",
		"scope": "source.lua"
	},
	"get_entity_type_and_class": {
		"body": "get_entity_type_and_class(${1:entity_ptr})",
		"description": "MoonAdditions\nuint type, uint class = get_entity_type_and_class(uint entity_ptr)\n",
		"prefix": "get_entity_type_and_class",
		"scope": "source.lua"
	},
	"get_vehicle_number_of_collided_entites": {
		"body": "get_vehicle_number_of_collided_entites(${1:handle})",
		"description": "MoonAdditions\nint number = get_vehicle_number_of_collided_entites(Vehicle handle)\n",
		"prefix": "get_vehicle_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_char_number_of_collided_entites": {
		"body": "get_char_number_of_collided_entites(${1:handle})",
		"description": "MoonAdditions\nint number = get_char_number_of_collided_entites(Ped handle)\n",
		"prefix": "get_char_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_object_number_of_collided_entites": {
		"body": "get_object_number_of_collided_entites(${1:handle})",
		"description": "MoonAdditions\nint number = get_object_number_of_collided_entites(Object handle)\n",
		"prefix": "get_object_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_vehicle_collided_entites": {
		"body": "get_vehicle_collided_entites(${1:handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_vehicle_collided_entites(Vehicle handle)\n",
		"prefix": "get_vehicle_collided_entites",
		"scope": "source.lua"
	},
	"get_char_collided_entites": {
		"body": "get_char_collided_entites(${1:handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_char_collided_entites(Ped handle)\n",
		"prefix": "get_char_collided_entites",
		"scope": "source.lua"
	},
	"get_object_collided_entites": {
		"body": "get_object_collided_entites(${1:handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_object_collided_entites(Object handle)\n",
		"prefix": "get_object_collided_entites",
		"scope": "source.lua"
	},
	"set_car_window_state": {
		"body": "set_car_window_state(${1:handle},${2:window_id},${3:state})",
		"description": "MoonAdditions\nset_car_window_state(Vehicle handle, uint window_id, bool state)\n",
		"prefix": "set_car_window_state",
		"scope": "source.lua"
	},
	"get_char_max_health": {
		"body": "get_char_max_health(${1:handle})",
		"description": "MoonAdditions\nfloat health = get_char_max_health(Ped handle)\n",
		"prefix": "get_char_max_health",
		"scope": "source.lua"
	},
	"get_circles_intersection": {
		"body": "get_circles_intersection(${1:x1},${2:y1},${3:radius1},${4:x2},${5:y2},${6:radius2})",
		"description": "MoonAdditions\nbool result, float x1, float y1, float x2, float y2 = get_circles_intersection(float x1, float y1, floar radius1, float x2, float y2, float radius2)\n",
		"prefix": "get_circles_intersection",
		"scope": "source.lua"
	},
	"get_model_txd_id": {
		"body": "get_model_txd_id(${1:model})",
		"description": "MoonAdditions\nint txd = get_model_txd_id(Model model)\n",
		"prefix": "get_model_txd_id",
		"scope": "source.lua"
	},
	"get_model_crc32_key": {
		"body": "get_model_crc32_key(${1:model})",
		"description": "MoonAdditions\nuint crc32 = get_model_crc32_key(Model model)\n",
		"prefix": "get_model_crc32_key",
		"scope": "source.lua"
	},
	"draw_temporary_shadow": {
		"body": "draw_temporary_shadow(${1:shadow_type},${2:x},${3:y},${4:z},${5:width},${6:height},${7:rotation},${8:distance},${9:texture},${10:intensity},${11:color_r},${12:color_g},${13:color_b},${14:color_a},${15:shadow_data},${16:scale},${17:draw_on_buildings},${18:draw_on_water]})",
		"description": "MoonAdditions\ndraw_temporary_shadow(uint shadow_type, float x, float y, float z, float width, float height, float rotation, float distance, uint/Texture texture, uint intensity, [int color_r, int color_g, int color_b, int color_a, uint shadow_data, float scale, bool draw_on_buildings, bool draw_on_water])\n",
		"prefix": "draw_temporary_shadow",
		"scope": "source.lua"
	},
	"draw_permanent_shadow": {
		"body": "draw_permanent_shadow(${1:shadow_type},${2:x},${3:y},${4:z},${5:width},${6:height},${7:rotation},${8:distance},${9:texture},${10:intensity},${11:time},${12:color_r},${13:color_g},${14:color_b},${15:color_a]})",
		"description": "MoonAdditions\ndraw_permanent_shadow(uint shadow_type, float x, float y, float z, float width, float height, float rotation, float distance, uint/Texture texture, uint intensity, uint time, [int color_r, int color_g, int color_b, int color_a])\n",
		"prefix": "draw_permanent_shadow",
		"scope": "source.lua"
	},
	"draw_light": {
		"body": "draw_light(${1:light_type},${2:x},${3:y},${4:z},${5:dir_x},${6:dir_y},${7:dir_z},${8:radius},${9:color_r},${10:color_g},${11:color_b},${12:color_a},${13:entity]})",
		"description": "MoonAdditions\ndraw_light(uint light_type, float x, float y, float z, float dir_x, float dir_y, float dir_z, float radius, [int color_r, int color_g, int color_b, int color_a, uint entity])\n",
		"prefix": "draw_light",
		"scope": "source.lua"
	},
	"draw_corona": {
		"body": "draw_corona(${1:texture},${2:x},${3:y},${4:z},${5:size},${6:color_r},${7:color_g},${8:color_b},${9:color_a},${10:entity]})",
		"description": "MoonAdditions\ndraw_corona(uint/Texture texture, float x, float y, float z, float size, [int color_r, int color_g, int color_b, int color_a, uint entity])\n",
		"prefix": "draw_corona",
		"scope": "source.lua"
	},
	"get_sun_colors": {
		"body": "get_sun_colors()",
		"description": "MoonAdditions\nint core_r, int core_g, int core_b, int corona_r, int corona_g, int corona_b = get_sun_colors()\n",
		"prefix": "get_sun_colors",
		"scope": "source.lua"
	},
	"get_sun_size": {
		"body": "get_sun_size()",
		"description": "MoonAdditions\nfloat core, float corona = get_sun_size()\n",
		"prefix": "get_sun_size",
		"scope": "source.lua"
	},
	"get_sun_screen_coordinates": {
		"body": "get_sun_screen_coordinates()",
		"description": "MoonAdditions\nfloat x, y = get_sun_screen_coordinates()\n",
		"prefix": "get_sun_screen_coordinates",
		"scope": "source.lua"
	},
	"get_sun_world_position": {
		"body": "get_sun_world_position()",
		"description": "MoonAdditions\nbool visible, float x, float y, float z = get_sun_world_position()\n",
		"prefix": "get_sun_world_position",
		"scope": "source.lua"
	},
	"get_current_weather": {
		"body": "get_current_weather()",
		"description": "MoonAdditions\nint weather = get_current_weather()\n",
		"prefix": "get_current_weather",
		"scope": "source.lua"
	},
	"get_traffic_lights_color": {
		"body": "get_traffic_lights_color()",
		"description": "MoonAdditions\nint color1, color2 = get_traffic_lights_color()\n",
		"prefix": "get_traffic_lights_color",
		"scope": "source.lua"
	},
	"get_car_light_damage_status": {
		"body": "get_car_light_damage_status(${1:handle},${2:light_id})",
		"description": "MoonAdditions\nuint status = get_car_light_damage_status(Vehicle handle, int light_id)\n",
		"prefix": "get_car_light_damage_status",
		"scope": "source.lua"
	},
	"set_car_light_damage_status": {
		"body": "set_car_light_damage_status(${1:handle},${2:light_id},${3:status})",
		"description": "MoonAdditions\nset_car_light_damage_status(Vehicle handle, int light_id, uint status)\n",
		"prefix": "set_car_light_damage_status",
		"scope": "source.lua"
	},
	"get_vehicle_class": {
		"body": "get_vehicle_class(${1:handle})",
		"description": "MoonAdditions\nuint class, uint subclass = get_vehicle_class(Vehicle handle)\n",
		"prefix": "get_vehicle_class",
		"scope": "source.lua"
	},
	"get_vehicle_dummy_element_position": {
		"body": "get_vehicle_dummy_element_position(${1:handle},${2:element},${3:world},${4:invert_x]})",
		"description": "MoonAdditions\nfloat x, float y, float z = get_vehicle_dummy_element_position(Vehicle handle, uint element, [bool world, bool invert_x])\n",
		"prefix": "get_vehicle_dummy_element_position",
		"scope": "source.lua"
	},
	"create_projectile": {
		"body": "create_projectile(${1:weapon_id},${2:src_x},${3:src_y},${4:src_z},${5:dir_x},${6:dir_y},${7:dir_z},${8:force},${9:source_entity_ptr},${10:target_entity_ptr})",
		"description": "MoonAdditions\nbool result = create_projectile(uint weapon_id, float src_x, float src_y, float src_z, float dir_x, float dir_y, float dir_z, float force, uint source_entity_ptr, uint target_entity_ptr)\n",
		"prefix": "create_projectile",
		"scope": "source.lua"
	},
	"get_game_volume": {
		"body": "get_game_volume()",
		"description": "MoonAdditions\nint sfx_volume, int radio_volume = get_game_volume()\n",
		"prefix": "get_game_volume",
		"scope": "source.lua"
	},
	"get_collision_between_points": {
		"body": "get_collision_between_points(${1:origin_x},${2:origin_y},${3:origin_z},${4:target_x},${5:target_y},${6:target_z},${7:flags},${8:ignore_entity_ptr]})",
		"description": "MoonAdditions\ntable collision = get_collision_between_points(float origin_x, float origin_y, floar origin_z, float target_x, float target_y, float target_z, [table<string=bool> flags, uint ignore_entity_ptr])\n",
		"prefix": "get_collision_between_points",
		"scope": "source.lua"
	},
	"draw_spotlight": {
		"body": "draw_spotlight(${1:origin_x},${2:origin_y},${3:origin_z},${4:target_x},${5:target_y},${6:target_z},${7:base_radius},${8:target_radius},${9:shadow},${10:shadow_intensity})",
		"description": "MoonAdditions\ndraw_spotlight(float origin_x, float origin_y, floar origin_z, float target_x, float target_y, float target_z, float base_radius, float target_radius, bool shadow, float shadow_intensity)\n",
		"prefix": "draw_spotlight",
		"scope": "source.lua"
	},
	"draw_rect": {
		"body": "draw_rect(${1:left},${2:top},${3:right},${4:bottom},${5:r},${6:g},${7:b},${8:a},${9:angle]})",
		"description": "MoonAdditions\ndraw_rect(float left, float top, float right, float bottom, int r, int g, int b, int a, [float angle])\n",
		"prefix": "draw_rect",
		"scope": "source.lua"
	},
	"draw_rect_with_gradient": {
		"body": "draw_rect_with_gradient(${1:left},${2:top},${3:right},${4:bottom},${5:r1},${6:g1},${7:b1},${8:a1},${9:r2},${10:g2},${11:b2},${12:a2},${13:r3},${14:g3},${15:b3},${16:a3},${17:r4},${18:g4},${19:b4},${20:a4},${21:angle]})",
		"description": "MoonAdditions\ndraw_rect_with_gradient(float left, float top, float right, float bottom, int r1, int g1, int b1, int a1, int r2, int g2, int b2, int a2, int r3, int g3, int b3, int a3, int r4, int g4, int b4, int a4, [float angle])\n",
		"prefix": "draw_rect_with_gradient",
		"scope": "source.lua"
	},
	"get_all_objects": {
		"body": "get_all_objects(${1:x},${2:y},${3:z},${4:radius},${5:sphere]})",
		"description": "MoonAdditions\ntable<Object> objects = get_all_objects(float x, float y, float z, [float radius, bool sphere])\n",
		"prefix": "get_all_objects",
		"scope": "source.lua"
	},
	"get_all_characters": {
		"body": "get_all_characters(${1:x},${2:y},${3:z},${4:radius},${5:skip_dead},${6:sphere]})",
		"description": "MoonAdditions\ntable<Ped> chars = get_all_characters(float x, float y, float z, [float radius, bool skip_dead, bool sphere])\n",
		"prefix": "get_all_characters",
		"scope": "source.lua"
	},
	"get_all_vehicles": {
		"body": "get_all_vehicles(${1:x},${2:y},${3:z},${4:radius},${5:skip_wrecked})",
		"description": "MoonAdditions\ntable<Vehicle> vehicles = get_all_vehicles(float x, float y, float z, [float radius, bool skip_wrecked bool sphere])\n",
		"prefix": "get_all_vehicles",
		"scope": "source.lua"
	},
	"get_object_matrix": {
		"body": "get_object_matrix(${1:handle})",
		"description": "MoonAdditions\nMatrix matrix = get_object_matrix(Object handle)\n",
		"prefix": "get_object_matrix",
		"scope": "source.lua"
	},
	"get_char_matrix": {
		"body": "get_char_matrix(${1:handle})",
		"description": "MoonAdditions\nMatrix matrix = get_char_matrix(Ped handle)\n",
		"prefix": "get_char_matrix",
		"scope": "source.lua"
	},
	"get_vehicle_matrix": {
		"body": "get_vehicle_matrix(${1:handle})",
		"description": "MoonAdditions\nMatrix matrix = get_vehicle_matrix(Vehicle handle)\n",
		"prefix": "get_vehicle_matrix",
		"scope": "source.lua"
	},
	"draw_text": {
		"body": "draw_text(${1:text},${2:x},${3:y},${4:style},${5:width},${6:height},${7:align},${8:wrap},${9:proportional},${10:justify},${11:text_r},${12:text_g},${13:text_b},${14:text_a},${15:outline},${16:shadow},${17:shadow_r},${18:shadow_g},${19:shadow_b},${20:shadow_a},${21:background},${22:background_r},${23:background_g},${24:background_b},${25:background_a]})",
		"description": "MoonAdditions\ndraw_text(string text, float x, float y, [uint style, float width, float height, uint align, float wrap, bool proportional, bool justify, int text_r, int text_g, int text_b, int text_a, uint outline, uint shadow, int shadow_r, int shadow_g, int shadow_b, int shadow_a, bool background, int background_r, int background_g, int background_b, int background_a])\n",
		"prefix": "draw_text",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new()",
		"description": "MoonAdditions\nMatrix matrix = matrix.new()\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:matrix})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(Matrix matrix)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:right},${2:up},${3:at},${4:pos})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(Vector right, Vector up, Vector at, Vector pos)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:right_x},${2:right_y},${3:right_z},${4:up_x},${5:up_y},${6:up_z},${7:at_x},${8:at_y},${9:at_z},${10:pos_x},${11:pos_y},${12:pos_z})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(float right_x, float right_y, float right_z, float up_x, float up_y, float up_z, float at_x, float at_y, float at_z, float pos_x, float pos_y, float pos_z)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.from_quat": {
		"body": "matrix.from_quat(${1:quat})",
		"description": "MoonAdditions\nMatrix matrix = matrix.from_quat(Quaternion quat)\n",
		"prefix": "matrix.from_quat",
		"scope": "source.lua"
	},
	"matrix.from_memory": {
		"body": "matrix.from_memory(${1:matrix_ptr})",
		"description": "MoonAdditions\nMatrix matrix = matrix.from_memory(uint matrix_ptr)\n",
		"prefix": "matrix.from_memory",
		"scope": "source.lua"
	},
	"matrix:get_pointer": {
		"body": "matrix:get_pointer()",
		"description": "MoonAdditions\nuint ptr = matrix:get_pointer()\n",
		"prefix": "matrix:get_pointer",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:matrix})",
		"description": "MoonAdditions\nmatrix:set(Matrix matrix)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:right},${2:up},${3:at},${4:pos})",
		"description": "MoonAdditions\nmatrix:set(Vector right, Vector up, Vector at, Vector pos)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:right_x},${2:right_y},${3:right_z},${4:up_x},${5:up_y},${6:up_z},${7:at_x},${8:at_y},${9:at_z},${10:pos_x},${11:pos_y},${12:pos_z})",
		"description": "MoonAdditions\nmatrix:set(float right_x, float right_y, float right_z, float up_x, float up_y, float up_z, float at_x, float at_y, float at_z, float pos_x, float pos_y, float pos_z)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set_rotation_from_quat": {
		"body": "matrix:set_rotation_from_quat(${1:quat})",
		"description": "MoonAdditions\nmatrix:set_rotation_from_quat(Quaternion quat)\n",
		"prefix": "matrix:set_rotation_from_quat",
		"scope": "source.lua"
	},
	"matrix:rotate": {
		"body": "matrix:rotate(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nmatrix:rotate(float x, float y, float z)\n",
		"prefix": "matrix:rotate",
		"scope": "source.lua"
	},
	"matrix:rotate_x": {
		"body": "matrix:rotate_x(${1:angle})",
		"description": "MoonAdditions\nmatrix:rotate_x(float angle)\n",
		"prefix": "matrix:rotate_x",
		"scope": "source.lua"
	},
	"matrix:rotate_y": {
		"body": "matrix:rotate_y(${1:angle})",
		"description": "MoonAdditions\nmatrix:rotate_y(float angle)\n",
		"prefix": "matrix:rotate_y",
		"scope": "source.lua"
	},
	"matrix:rotate_z": {
		"body": "matrix:rotate_z(${1:angle})",
		"description": "MoonAdditions\nmatrix:rotate_z(float angle)\n",
		"prefix": "matrix:rotate_z",
		"scope": "source.lua"
	},
	"matrix:rotate_around_axis": {
		"body": "matrix:rotate_around_axis(${1:x},${2:y},${3:z},${4:angle},${5:combine_op]})",
		"description": "MoonAdditions\nmatrix:rotate_around_axis(float x, float y, float z, float angle, [int combine_op])\n",
		"prefix": "matrix:rotate_around_axis",
		"scope": "source.lua"
	},
	"matrix:get_coords_with_offset": {
		"body": "matrix:get_coords_with_offset(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_coords_with_offset(float x, float y, float z)\n",
		"prefix": "matrix:get_coords_with_offset",
		"scope": "source.lua"
	},
	"matrix:get_relative_coords": {
		"body": "matrix:get_relative_coords(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_relative_coords(float x, float y, float z)\n",
		"prefix": "matrix:get_relative_coords",
		"scope": "source.lua"
	},
	"matrix:get_angles": {
		"body": "matrix:get_angles()",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_angles()\n",
		"prefix": "matrix:get_angles",
		"scope": "source.lua"
	},
	"matrix:get_slerped": {
		"body": "matrix:get_slerped(${1:matrix},${2:t})",
		"description": "MoonAdditions\nMatrix matrix = matrix:get_slerped(Matrix matrix, float t)\n",
		"prefix": "matrix:get_slerped",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new()",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new()\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:quat})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Quaternion quat)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:vec},${2:w})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Vector vec, float w)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:x},${2:y},${3:z},${4:w})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(float x, float y, float z, float w)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:matrix})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Matrix matrix)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quat.from_euler": {
		"body": "quat.from_euler(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nQuaternion quat = quat.from_euler(float x, float y, float z)\n",
		"prefix": "quat.from_euler",
		"scope": "source.lua"
	},
	"quaternion.from_memory": {
		"body": "quaternion.from_memory(${1:quat_ptr})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.from_memory(uint quat_ptr)\n",
		"prefix": "quaternion.from_memory",
		"scope": "source.lua"
	},
	"quat:get_pointer": {
		"body": "quat:get_pointer()",
		"description": "MoonAdditions\nuint ptr = quat:get_pointer()\n",
		"prefix": "quat:get_pointer",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:quat})",
		"description": "MoonAdditions\nquat:set(Quaternion quat)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:vec},${2:w})",
		"description": "MoonAdditions\nquat:set(Vector vec, float w)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:x},${2:y},${3:z},${4:w})",
		"description": "MoonAdditions\nquat:set(float x, float y, float z, float w)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:matrix})",
		"description": "MoonAdditions\nquat:set(Matrix matrix)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:get": {
		"body": "quat:get()",
		"description": "MoonAdditions\nfloat x, float y, float z, float w = quat:get()\n",
		"prefix": "quat:get",
		"scope": "source.lua"
	},
	"quat:rotate": {
		"body": "quat:rotate(${1:x},${2:y},${3:z},${4:angle},${5:combine_op]})",
		"description": "MoonAdditions\nquat:rotate(float x, float y, float z, float angle, [int combine_op])\n",
		"prefix": "quat:rotate",
		"scope": "source.lua"
	},
	"quat:normalize": {
		"body": "quat:normalize()",
		"description": "MoonAdditions\nquat:normalize()\n",
		"prefix": "quat:normalize",
		"scope": "source.lua"
	},
	"quat:get_normalized": {
		"body": "quat:get_normalized()",
		"description": "MoonAdditions\nQuaternion quat = quat:get_normalized()\n",
		"prefix": "quat:get_normalized",
		"scope": "source.lua"
	},
	"quat:get_slerped": {
		"body": "quat:get_slerped(${1:quat},${2:t})",
		"description": "MoonAdditions\nQuaternion quat = quat:get_slerped(Quaternion quat, float t)\n",
		"prefix": "quat:get_slerped",
		"scope": "source.lua"
	},
	"quat:get_euler": {
		"body": "quat:get_euler()",
		"description": "MoonAdditions\nfloat x, float y, float z = quat:get_euler()\n",
		"prefix": "quat:get_euler",
		"scope": "source.lua"
	},
	"textdraw.new": {
		"body": "textdraw.new(${1:text},${2:visible},${3:y})",
		"description": "MoonAdditions\nTextdraw textdraw = textdraw.new(string text, float visible, float y)\n",
		"prefix": "textdraw.new",
		"scope": "source.lua"
	},
	"textdraw:set_text_color": {
		"body": "textdraw:set_text_color(${1:r},${2:g},${3:b},${4:a})",
		"description": "MoonAdditions\ntextdraw:set_text_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_text_color",
		"scope": "source.lua"
	},
	"textdraw:set_background_color": {
		"body": "textdraw:set_background_color(${1:r},${2:g},${3:b},${4:a})",
		"description": "MoonAdditions\ntextdraw:set_background_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_background_color",
		"scope": "source.lua"
	},
	"textdraw:set_shadow_color": {
		"body": "textdraw:set_shadow_color(${1:r},${2:g},${3:b},${4:a})",
		"description": "MoonAdditions\ntextdraw:set_shadow_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_shadow_color",
		"scope": "source.lua"
	},
	"textdraw:get_text_color": {
		"body": "textdraw:get_text_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_text_color()\n",
		"prefix": "textdraw:get_text_color",
		"scope": "source.lua"
	},
	"textdraw:get_background_color": {
		"body": "textdraw:get_background_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_background_color()\n",
		"prefix": "textdraw:get_background_color",
		"scope": "source.lua"
	},
	"textdraw:get_shadow_color": {
		"body": "textdraw:get_shadow_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_shadow_color()\n",
		"prefix": "textdraw:get_shadow_color",
		"scope": "source.lua"
	},
	"load_bmp_texture_with_mask": {
		"body": "load_bmp_texture_with_mask(${1:image_path},${2:mask_path})",
		"description": "MoonAdditions\nTexture texture = load_bmp_texture_with_mask(string image_path, string mask_path)\n",
		"prefix": "load_bmp_texture_with_mask",
		"scope": "source.lua"
	},
	"load_png_texture": {
		"body": "load_png_texture(${1:image_path})",
		"description": "MoonAdditions\nTexture texture = load_png_texture(string image_path)\n",
		"prefix": "load_png_texture",
		"scope": "source.lua"
	},
	"load_dds_texture": {
		"body": "load_dds_texture(${1:image_path})",
		"description": "MoonAdditions\nTexture texture = load_dds_texture(string image_path)\n",
		"prefix": "load_dds_texture",
		"scope": "source.lua"
	},
	"texture.from_memory": {
		"body": "texture.from_memory(${1:rwtexture_ptr})",
		"description": "MoonAdditions\nTexture texture = texture.from_memory(uint rwtexture_ptr)\n",
		"prefix": "texture.from_memory",
		"scope": "source.lua"
	},
	"texture:get_pointer": {
		"body": "texture:get_pointer()",
		"description": "MoonAdditions\nuint ptr = texture:get_pointer()\n",
		"prefix": "texture:get_pointer",
		"scope": "source.lua"
	},
	"texture:draw": {
		"body": "texture:draw(${1:left},${2:top},${3:right},${4:bottom},${5:r},${6:g},${7:b},${8:a},${9:angle]})",
		"description": "MoonAdditions\ntexture:draw(float left, float top, float right, float bottom, [int r, int g, int b, int a, float angle])\n",
		"prefix": "texture:draw",
		"scope": "source.lua"
	},
	"texture:draw_with_gradient": {
		"body": "texture:draw_with_gradient(${1:left},${2:top},${3:right},${4:bottom},${5:r1},${6:g1},${7:b1},${8:a1},${9:r2},${10:g2},${11:b2},${12:a2},${13:r3},${14:g3},${15:b3},${16:a3},${17:r4},${18:g4},${19:b4},${20:a4},${21:angle]})",
		"description": "MoonAdditions\ntexture:draw_with_gradient(float left, float top, float right, float bottom, [int r1, int g1, int b1, int a1, int r2, int g2, int b2, int a2, int r3, int g3, int b3, int a3, int r4, int g4, int b4, int a4, float angle])\n",
		"prefix": "texture:draw_with_gradient",
		"scope": "source.lua"
	},
	"load_txd": {
		"body": "load_txd(${1:file_path},${2:name})",
		"description": "MoonAdditions\nTxd txd = load_txd(string file_path, string name)\n",
		"prefix": "load_txd",
		"scope": "source.lua"
	},
	"get_txd": {
		"body": "get_txd(${1:name})",
		"description": "MoonAdditions\nTxd txd = get_txd(string name)\n",
		"prefix": "get_txd",
		"scope": "source.lua"
	},
	"txd.from_memory": {
		"body": "txd.from_memory(${1:rwtexdictionary_ptr})",
		"description": "MoonAdditions\nTxd txd = txd.from_memory(uint rwtexdictionary_ptr)\n",
		"prefix": "txd.from_memory",
		"scope": "source.lua"
	},
	"txd:get_texture": {
		"body": "txd:get_texture(${1:name})",
		"description": "MoonAdditions\nTexture texture = txd:get_texture(string name)\n",
		"prefix": "txd:get_texture",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new()",
		"description": "MoonAdditions\nVector vector = vector3d.new()\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nVector vector = vector3d.new(float x, float y, float z)\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new(${1:vector})",
		"description": "MoonAdditions\nVector vector = vector3d.new(Vector vector)\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.from_memory": {
		"body": "vector3d.from_memory(${1:vector_ptr})",
		"description": "MoonAdditions\nVector vector = vector3d.from_memory(uint vector_ptr)\n",
		"prefix": "vector3d.from_memory",
		"scope": "source.lua"
	},
	"vector:get_pointer": {
		"body": "vector:get_pointer()",
		"description": "MoonAdditions\nuint ptr = vector:get_pointer()\n",
		"prefix": "vector:get_pointer",
		"scope": "source.lua"
	},
	"vector:get": {
		"body": "vector:get()",
		"description": "MoonAdditions\nfloat x, float y, float z = vector:get()\n",
		"prefix": "vector:get",
		"scope": "source.lua"
	},
	"vector:set": {
		"body": "vector:set(${1:x},${2:y},${3:z})",
		"description": "MoonAdditions\nvector:set(float x, float y, float z)\n",
		"prefix": "vector:set",
		"scope": "source.lua"
	},
	"vector:magnitude": {
		"body": "vector:magnitude()",
		"description": "MoonAdditions\nfloat value = vector:magnitude()\n",
		"prefix": "vector:magnitude",
		"scope": "source.lua"
	},
	"vector:magnitude2d": {
		"body": "vector:magnitude2d()",
		"description": "MoonAdditions\nfloat value = vector:magnitude2d()\n",
		"prefix": "vector:magnitude2d",
		"scope": "source.lua"
	},
	"vector:normalize": {
		"body": "vector:normalize()",
		"description": "MoonAdditions\nvector:normalize()\n",
		"prefix": "vector:normalize",
		"scope": "source.lua"
	},
	"get_vehicle_component": {
		"body": "get_vehicle_component(${1:handle},${2:component_name})",
		"description": "MoonAdditions\nVehicleComponent component = get_vehicle_component(Vehicle handle, string component_name)\n",
		"prefix": "get_vehicle_component",
		"scope": "source.lua"
	},
	"get_vehicle_components": {
		"body": "get_vehicle_components(${1:handle})",
		"description": "MoonAdditions\ntable<VehicleComponent> components = get_vehicle_components(Vehicle handle)\n",
		"prefix": "get_vehicle_components",
		"scope": "source.lua"
	},
	"get_all_vehicle_components": {
		"body": "get_all_vehicle_components(${1:handle})",
		"description": "MoonAdditions\ntable<VehicleComponent> components = get_all_vehicle_components(Vehicle handle)\n",
		"prefix": "get_all_vehicle_components",
		"scope": "source.lua"
	},
	"vehicle_component.from_memory": {
		"body": "vehicle_component.from_memory(${1:vehicle_ptr},${2:rwframe_ptr})",
		"description": "MoonAdditions\nVehicleComponent component = vehicle_component.from_memory(uint vehicle_ptr, uint rwframe_ptr)\n",
		"prefix": "vehicle_component.from_memory",
		"scope": "source.lua"
	},
	"component:get_pointer": {
		"body": "component:get_pointer()",
		"description": "MoonAdditions\nuint ptr = component:get_pointer()\n",
		"prefix": "component:get_pointer",
		"scope": "source.lua"
	},
	"component:set_visibility": {
		"body": "component:set_visibility(${1:visibility_state})",
		"description": "MoonAdditions\ncomponent:set_visibility(int visibility_state)\n",
		"prefix": "component:set_visibility",
		"scope": "source.lua"
	},
	"component:set_alpha": {
		"body": "component:set_alpha(${1:alpha})",
		"description": "MoonAdditions\ncomponent:set_alpha(int alpha)\n",
		"prefix": "component:set_alpha",
		"scope": "source.lua"
	},
	"component:get_objects": {
		"body": "component:get_objects()",
		"description": "MoonAdditions\ntable<VehicleAtomic> objects = component:get_objects()\n",
		"prefix": "component:get_objects",
		"scope": "source.lua"
	},
	"component:get_child_components": {
		"body": "component:get_child_components()",
		"description": "MoonAdditions\ntable<VehicleComponent> components = component:get_child_components()\n",
		"prefix": "component:get_child_components",
		"scope": "source.lua"
	},
	"vehicle_atomic_object.from_memory": {
		"body": "vehicle_atomic_object.from_memory(${1:vehicle_ptr},${2:rpatomic_ptr})",
		"description": "MoonAdditions\nVehicleAtomic object = vehicle_atomic_object.from_memory(uint vehicle_ptr, uint rpatomic_ptr)\n",
		"prefix": "vehicle_atomic_object.from_memory",
		"scope": "source.lua"
	},
	"object:get_pointer": {
		"body": "object:get_pointer()",
		"description": "MoonAdditions\nuint ptr = object:get_pointer()\n",
		"prefix": "object:get_pointer",
		"scope": "source.lua"
	},
	"object:hide": {
		"body": "object:hide(${1:hide})",
		"description": "MoonAdditions\nobject:hide(bool hide)\n",
		"prefix": "object:hide",
		"scope": "source.lua"
	},
	"object:get_atomic_flag": {
		"body": "object:get_atomic_flag(${1:flag})",
		"description": "MoonAdditions\nbool value = object:get_atomic_flag(uint flag)\n",
		"prefix": "object:get_atomic_flag",
		"scope": "source.lua"
	},
	"object:set_atomic_flag": {
		"body": "object:set_atomic_flag(${1:flag},${2:value})",
		"description": "MoonAdditions\nobject:set_atomic_flag(uint flag, bool value)\n",
		"prefix": "object:set_atomic_flag",
		"scope": "source.lua"
	},
	"object:get_materials": {
		"body": "object:get_materials()",
		"description": "MoonAdditions\ntable<VehicleMaterial> materials = object:get_materials()\n",
		"prefix": "object:get_materials",
		"scope": "source.lua"
	},
	"vehicle_object_material.from_memory": {
		"body": "vehicle_object_material.from_memory(${1:vehicle_ptr},${2:rpmaterial_ptr},${3:rpgeometry_ptr})",
		"description": "MoonAdditions\nVehicleMaterial material = vehicle_object_material.from_memory(uint vehicle_ptr, uint rpmaterial_ptr, uint rpgeometry_ptr)\n",
		"prefix": "vehicle_object_material.from_memory",
		"scope": "source.lua"
	},
	"material:get_pointer": {
		"body": "material:get_pointer()",
		"description": "MoonAdditions\nuint ptr = material:get_pointer()\n",
		"prefix": "material:get_pointer",
		"scope": "source.lua"
	},
	"material:set_color": {
		"body": "material:set_color(${1:r},${2:g},${3:b},${4:a})",
		"description": "MoonAdditions\nmaterial:set_color(int r, int g, int b, int a)\n",
		"prefix": "material:set_color",
		"scope": "source.lua"
	},
	"material:get_color": {
		"body": "material:get_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = material:get_color()\n",
		"prefix": "material:get_color",
		"scope": "source.lua"
	},
	"material:reset_color": {
		"body": "material:reset_color()",
		"description": "MoonAdditions\nmaterial:reset_color()\n",
		"prefix": "material:reset_color",
		"scope": "source.lua"
	},
	"material:set_texture": {
		"body": "material:set_texture(${1:texture})",
		"description": "MoonAdditions\nmaterial:set_texture(Texture texture)\n",
		"prefix": "material:set_texture",
		"scope": "source.lua"
	},
	"material:get_texture": {
		"body": "material:get_texture()",
		"description": "MoonAdditions\nTexture texture = material:get_texture()\n",
		"prefix": "material:get_texture",
		"scope": "source.lua"
	},
	"material:reset_texture": {
		"body": "material:reset_texture()",
		"description": "MoonAdditions\nmaterial:reset_texture()\n",
		"prefix": "material:reset_texture",
		"scope": "source.lua"
	}
}