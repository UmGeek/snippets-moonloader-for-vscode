{
    "_G": {
        "body": "_G(${0:...})",
        "description": "5.1,5.2,5.3\n\n_G",
        "prefix": "_G",
        "scope": "source.lua"
    },
    "_VERSION": {
        "body": "_VERSION(${0:...})",
        "description": "5.1,5.2,5.3\n\n_VERSION",
        "prefix": "_VERSION",
        "scope": "source.lua"
    },
    "assert": {
        "body": "assert(${1:v}${2:[, message]})",
        "description": "5.1,5.2,5.3\n\nassert()",
        "prefix": "assert",
        "scope": "source.lua"
    },
    "bit32.arshift": {
        "body": "bit32.arshift(${0:...})",
        "description": "5.2\n\nbit32.arshift (x, disp)",
        "prefix": "bit32.arshift",
        "scope": "source.lua"
    },
    "bit32.band": {
        "body": "bit32.band(${0:...})",
        "description": "5.2\n\nbit32.band (...)",
        "prefix": "bit32.band",
        "scope": "source.lua"
    },
    "bit32.bnot": {
        "body": "bit32.bnot(${0:...})",
        "description": "5.2\n\nbit32.bnot (x)",
        "prefix": "bit32.bnot",
        "scope": "source.lua"
    },
    "bit32.bor": {
        "body": "bit32.bor(${0:...})",
        "description": "5.2\n\nbit32.bor (...)",
        "prefix": "bit32.bor",
        "scope": "source.lua"
    },
    "bit32.btest": {
        "body": "bit32.btest(${0:...})",
        "description": "5.2\n\nbit32.btest (...)",
        "prefix": "bit32.btest",
        "scope": "source.lua"
    },
    "bit32.bxor": {
        "body": "bit32.bxor(${0:...})",
        "description": "5.2\n\nbit32.bxor (...)",
        "prefix": "bit32.bxor",
        "scope": "source.lua"
    },
    "bit32.extract": {
        "body": "bit32.extract(${0:...})",
        "description": "5.2\n\nbit32.extract (n, field [, width])",
        "prefix": "bit32.extract",
        "scope": "source.lua"
    },
    "bit32.lrotate": {
        "body": "bit32.lrotate(${0:...})",
        "description": "5.2\n\nbit32.lrotate (x, disp)",
        "prefix": "bit32.lrotate",
        "scope": "source.lua"
    },
    "bit32.lshift": {
        "body": "bit32.lshift(${0:...})",
        "description": "5.2\n\nbit32.lshift (x, disp)",
        "prefix": "bit32.lshift",
        "scope": "source.lua"
    },
    "bit32.replace": {
        "body": "bit32.replace(${0:...})",
        "description": "5.2\n\nbit32.replace (n, v, field [, width])",
        "prefix": "bit32.replace",
        "scope": "source.lua"
    },
    "bit32.rrotate": {
        "body": "bit32.rrotate(${0:...})",
        "description": "5.2\n\nbit32.rrotate (x, disp)",
        "prefix": "bit32.rrotate",
        "scope": "source.lua"
    },
    "bit32.rshift": {
        "body": "bit32.rshift(${0:...})",
        "description": "5.2\n\nbit32.rshift (x, disp)",
        "prefix": "bit32.rshift",
        "scope": "source.lua"
    },
    "collectgarbage": {
        "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
        "description": "5.1,5.2,5.3\n\ncollectgarbage()",
        "prefix": "collectgarbage",
        "scope": "source.lua"
    },
    "coroutine.create": {
        "body": "coroutine.create( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.create",
        "prefix": "coroutine.create",
        "scope": "source.lua"
    },
    "coroutine.isyieldable": {
        "body": "coroutine.isyieldable( )",
        "description": "5.3\n\ncoroutine.isyieldable",
        "prefix": "coroutine.isyieldable",
        "scope": "source.lua"
    },
    "coroutine.resume": {
        "body": "coroutine.resume( ${1:co}${2:[, val1, \u00b7\u00b7\u00b7]} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.resume",
        "prefix": "coroutine.resume",
        "scope": "source.lua"
    },
    "coroutine.running": {
        "body": "coroutine.running( )",
        "description": "5.1,5.2,5.3\n\ncoroutine.running",
        "prefix": "coroutine.running",
        "scope": "source.lua"
    },
    "coroutine.status": {
        "body": "coroutine.status( ${1:co} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.status",
        "prefix": "coroutine.status",
        "scope": "source.lua"
    },
    "coroutine.wrap": {
        "body": "coroutine.wrap( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
        "prefix": "coroutine.wrap",
        "scope": "source.lua"
    },
    "coroutine.yield": {
        "body": "coroutine.yield( ${1:...} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.yield",
        "prefix": "coroutine.yield",
        "scope": "source.lua"
    },
    "debug.debug": {
        "body": "debug.debug()",
        "description": "5.1,5.2,5.3\n\ndebug.debug ()",
        "prefix": "debug.debug",
        "scope": "source.lua"
    },
    "debug.getfenv": {
        "body": "debug.getfenv(${0:...})",
        "description": "5.1\n\ndebug.getfenv (o)",
        "prefix": "debug.getfenv",
        "scope": "source.lua"
    },
    "debug.gethook": {
        "body": "debug.gethook( ${1:[thread]} )",
        "description": "5.1,5.2,5.3\n\ndebug.gethook ([thread])",
        "prefix": "debug.gethook",
        "scope": "source.lua"
    },
    "debug.getinfo": {
        "body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getinfo ([thread,] f [, what])",
        "prefix": "debug.getinfo",
        "scope": "source.lua"
    },
    "debug.getlocal": {
        "body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getlocal ([thread,] f, local)",
        "prefix": "debug.getlocal",
        "scope": "source.lua"
    },
    "debug.getmetatable": {
        "body": "debug.getmetatable( ${1:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.getmetatable (value)",
        "prefix": "debug.getmetatable",
        "scope": "source.lua"
    },
    "debug.getregistry": {
        "body": "debug.getregistry()",
        "description": "5.1,5.2,5.3\n\ndebug.getregistry ()",
        "prefix": "debug.getregistry",
        "scope": "source.lua"
    },
    "debug.getupvalue": {
        "body": "debug.getupvalue( ${1:f}, ${2:up} )",
        "description": "5.1,5.2,5.3\n\ndebug.getupvalue (f, up)",
        "prefix": "debug.getupvalue",
        "scope": "source.lua"
    },
    "debug.getuservalue": {
        "body": "debug.getuservalue(${0:...})",
        "description": "5.2,5.3\n\ndebug.getuservalue (u)",
        "prefix": "debug.getuservalue",
        "scope": "source.lua"
    },
    "debug.getuservalue ": {
        "body": "debug.getuservalue ( ${1:u} )",
        "description": "debug.getuservalue (u)",
        "prefix": "debug.getuservalue ",
        "scope": "source.lua"
    },
    "debug.setfenv": {
        "body": "debug.setfenv(${0:...})",
        "description": "5.1\n\ndebug.setfenv (object, table)",
        "prefix": "debug.setfenv",
        "scope": "source.lua"
    },
    "debug.sethook": {
        "body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
        "description": "5.1,5.2,5.3\n\ndebug.sethook ([thread,] hook, mask [, count])",
        "prefix": "debug.sethook",
        "scope": "source.lua"
    },
    "debug.setlocal": {
        "body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setlocal ([thread,] level, local, value)",
        "prefix": "debug.setlocal",
        "scope": "source.lua"
    },
    "debug.setmetatable": {
        "body": "debug.setmetatable( ${1:value}, ${2:table} )",
        "description": "5.1,5.2,5.3\n\ndebug.setmetatable (value, table)",
        "prefix": "debug.setmetatable",
        "scope": "source.lua"
    },
    "debug.setupvalue": {
        "body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setupvalue (f, up, value)",
        "prefix": "debug.setupvalue",
        "scope": "source.lua"
    },
    "debug.setuservalue": {
        "body": "debug.setuservalue( ${1:udata}, ${2:value} )",
        "description": "5.2,5.3\n\ndebug.setuservalue (udata, value)",
        "prefix": "debug.setuservalue",
        "scope": "source.lua"
    },
    "debug.traceback": {
        "body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
        "description": "5.1,5.2,5.3\n\ndebug.traceback ([thread,] [message [, level]])",
        "prefix": "debug.traceback",
        "scope": "source.lua"
    },
    "debug.upvalueid": {
        "body": "debug.upvalueid( ${1:f}, ${2:n})",
        "description": "5.2,5.3\n\ndebug.upvalueid (f, n)",
        "prefix": "debug.upvalueid",
        "scope": "source.lua"
    },
    "debug.upvaluejoin": {
        "body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
        "description": "5.2,5.3\n\ndebug.upvaluejoin (f1, n1, f2, n2)",
        "prefix": "debug.upvaluejoin",
        "scope": "source.lua"
    },
    "dofile": {
        "body": "dofile(${1:[filename]})",
        "description": "5.1,5.2,5.3\n\ndofile ([filename])",
        "prefix": "dofile",
        "scope": "source.lua"
    },
    "elif": {
        "body": "else if ${1:condition} then\n\t${0:-- body}\n",
        "description": "elif",
        "prefix": "elif",
        "scope": "source.lua"
    },
    "error": {
        "body": "error(${0:...})",
        "description": "5.1,5.2,5.3\n\nerror (message [, level])",
        "prefix": "error",
        "scope": "source.lua"
    },
    "file:close": {
        "body": "file:close(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:close ()",
        "prefix": "file:close",
        "scope": "source.lua"
    },
    "file:flush": {
        "body": "file:flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:flush ()",
        "prefix": "file:flush",
        "scope": "source.lua"
    },
    "file:lines": {
        "body": "file:lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:lines ()",
        "prefix": "file:lines",
        "scope": "source.lua"
    },
    "file:read": {
        "body": "file:read(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:read (...)",
        "prefix": "file:read",
        "scope": "source.lua"
    },
    "file:seek": {
        "body": "file:seek(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:seek ([whence] [, offset])",
        "prefix": "file:seek",
        "scope": "source.lua"
    },
    "file:setvbuf": {
        "body": "file:setvbuf(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:setvbuf (mode [, size])",
        "prefix": "file:setvbuf",
        "scope": "source.lua"
    },
    "file:write": {
        "body": "file:write(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:write (...)",
        "prefix": "file:write",
        "scope": "source.lua"
    },
    "for": {
        "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "description": "for i=1,10",
        "prefix": "for",
        "scope": "source.lua"
    },
    "fori": {
        "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
        "description": "for i,v in ipairs()",
        "prefix": "fori",
        "scope": "source.lua"
    },
    "forp": {
        "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
        "description": "for k,v in pairs()",
        "prefix": "forp",
        "scope": "source.lua"
    },
    "fun": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "fun",
        "scope": "source.lua"
    },
    "function": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "function",
        "scope": "source.lua"
    },
    "getfenv": {
        "body": "getfenv(${0:...})",
        "description": "5.1\n\ngetfenv ([f])",
        "prefix": "getfenv",
        "scope": "source.lua"
    },
    "getmetatable": {
        "body": "getmetatable(${1:object})",
        "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
        "prefix": "getmetatable",
        "scope": "source.lua"
    },
    "if": {
        "body": "if ${1:condition} then\n\t${0:-- body}\nend",
        "description": "if",
        "prefix": "if",
        "scope": "source.lua"
    },
    "ifel": {
        "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
        "description": "ifel",
        "prefix": "ifel",
        "scope": "source.lua"
    },
    "io.close": {
        "body": "io.close(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.close ([file])",
        "prefix": "io.close",
        "scope": "source.lua"
    },
    "io.flush": {
        "body": "io.flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.flush ()",
        "prefix": "io.flush",
        "scope": "source.lua"
    },
    "io.input": {
        "body": "io.input(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.input ([file])",
        "prefix": "io.input",
        "scope": "source.lua"
    },
    "io.lines": {
        "body": "io.lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.lines ([filename])",
        "prefix": "io.lines",
        "scope": "source.lua"
    },
    "io.open": {
        "body": "io.open(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.open (filename [, mode])",
        "prefix": "io.open",
        "scope": "source.lua"
    },
    "io.output": {
        "body": "io.output(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.output ([file])",
        "prefix": "io.output",
        "scope": "source.lua"
    },
    "io.popen": {
        "body": "io.popen(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.popen (prog [, mode])",
        "prefix": "io.popen",
        "scope": "source.lua"
    },
    "io.read": {
        "body": "io.read(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.read (...)",
        "prefix": "io.read",
        "scope": "source.lua"
    },
    "io.tmpfile": {
        "body": "io.tmpfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.tmpfile ()",
        "prefix": "io.tmpfile",
        "scope": "source.lua"
    },
    "io.type": {
        "body": "io.type(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.type (obj)",
        "prefix": "io.type",
        "scope": "source.lua"
    },
    "io.write": {
        "body": "io.write(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.write (...)",
        "prefix": "io.write",
        "scope": "source.lua"
    },
    "ipairs": {
        "body": "ipairs(${0:...})",
        "description": "5.1,5.2,5.3\n\nipairs (t)",
        "prefix": "ipairs",
        "scope": "source.lua"
    },
    "load": {
        "body": "load(${0:...})",
        "description": "5.1,5.2,5.3\n\nload (func [, chunkname])",
        "prefix": "load",
        "scope": "source.lua"
    },
    "loadfile": {
        "body": "loadfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nloadfile ([filename])",
        "prefix": "loadfile",
        "scope": "source.lua"
    },
    "loadstring": {
        "body": "loadstring(${0:...})",
        "description": "5.1\n\nloadstring (string [, chunkname])",
        "prefix": "loadstring",
        "scope": "source.lua"
    },
    "local": {
        "body": "local ${1:x} = ${0:1}",
        "description": "local x = 1",
        "prefix": "local",
        "scope": "source.lua"
    },
    "math.abs": {
        "body": "math.abs( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.abs",
        "prefix": "math.abs",
        "scope": "source.lua"
    },
    "math.acos": {
        "body": "math.acos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.acos",
        "prefix": "math.acos",
        "scope": "source.lua"
    },
    "math.asin": {
        "body": "math.asin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.asin",
        "prefix": "math.asin",
        "scope": "source.lua"
    },
    "math.atan": {
        "body": "math.atan( ${1:y}${2:[, x]} )",
        "description": "5.1,5.2,5.3\n\nmath.atan",
        "prefix": "math.atan",
        "scope": "source.lua"
    },
    "math.atan2": {
        "body": "math.atan2(${0:...})",
        "description": "5.1,5.2\n\nmath.atan2 (y, x)",
        "prefix": "math.atan2",
        "scope": "source.lua"
    },
    "math.ceil": {
        "body": "math.ceil( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.ceil",
        "prefix": "math.ceil",
        "scope": "source.lua"
    },
    "math.cos": {
        "body": "math.cos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.cos",
        "prefix": "math.cos",
        "scope": "source.lua"
    },
    "math.cosh": {
        "body": "math.cosh(${0:...})",
        "description": "5.1,5.2\n\nmath.cosh (x)",
        "prefix": "math.cosh",
        "scope": "source.lua"
    },
    "math.deg": {
        "body": "math.deg( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.deg",
        "prefix": "math.deg",
        "scope": "source.lua"
    },
    "math.exp": {
        "body": "math.exp( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.exp",
        "prefix": "math.exp",
        "scope": "source.lua"
    },
    "math.floor": {
        "body": "math.floor( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.floor",
        "prefix": "math.floor",
        "scope": "source.lua"
    },
    "math.fmod": {
        "body": "math.fmod( ${1:x},${2:y} )",
        "description": "5.1,5.2,5.3\n\nmath.fmod",
        "prefix": "math.fmod",
        "scope": "source.lua"
    },
    "math.frexp": {
        "body": "math.frexp(${0:...})",
        "description": "5.1,5.2\n\nmath.frexp (x)",
        "prefix": "math.frexp",
        "scope": "source.lua"
    },
    "math.huge": {
        "body": "math.huge(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.huge",
        "prefix": "math.huge",
        "scope": "source.lua"
    },
    "math.ldexp": {
        "body": "math.ldexp(${0:...})",
        "description": "5.1,5.2\n\nmath.ldexp (m, e)",
        "prefix": "math.ldexp",
        "scope": "source.lua"
    },
    "math.log": {
        "body": "math.log( ${1:x}${2:[, base]} )",
        "description": "5.1,5.2,5.3\n\nmath.log",
        "prefix": "math.log",
        "scope": "source.lua"
    },
    "math.log10": {
        "body": "math.log10(${0:...})",
        "description": "5.1\n\nmath.log10 (x)",
        "prefix": "math.log10",
        "scope": "source.lua"
    },
    "math.math.randomseed": {
        "body": "math.math.randomseed( ${1:x} )",
        "description": "math.math.randomseed",
        "prefix": "math.math.randomseed",
        "scope": "source.lua"
    },
    "math.max": {
        "body": "math.max( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.max",
        "prefix": "math.max",
        "scope": "source.lua"
    },
    "math.maxinteger": {
        "body": "math.maxinteger(${0:...})",
        "description": "5.3\n\nmath.maxinteger",
        "prefix": "math.maxinteger",
        "scope": "source.lua"
    },
    "math.min": {
        "body": "math.min( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.min",
        "prefix": "math.min",
        "scope": "source.lua"
    },
    "math.mininteger": {
        "body": "math.mininteger(${0:...})",
        "description": "5.3\n\nmath.mininteger",
        "prefix": "math.mininteger",
        "scope": "source.lua"
    },
    "math.modf": {
        "body": "math.modf( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.modf",
        "prefix": "math.modf",
        "scope": "source.lua"
    },
    "math.pi": {
        "body": "math.pi(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.pi",
        "prefix": "math.pi",
        "scope": "source.lua"
    },
    "math.pow": {
        "body": "math.pow(${0:...})",
        "description": "5.1,5.2\n\nmath.pow (x, y)",
        "prefix": "math.pow",
        "scope": "source.lua"
    },
    "math.rad": {
        "body": "math.rad(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.rad (x)",
        "prefix": "math.rad",
        "scope": "source.lua"
    },
    "math.random": {
        "body": "math.random( ${1:[m]}${2:[, n]} )",
        "description": "5.1,5.2,5.3\n\nmath.random",
        "prefix": "math.random",
        "scope": "source.lua"
    },
    "math.randomseed": {
        "body": "math.randomseed(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.randomseed (x)",
        "prefix": "math.randomseed",
        "scope": "source.lua"
    },
    "math.sin": {
        "body": "math.sin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sin",
        "prefix": "math.sin",
        "scope": "source.lua"
    },
    "math.sinh": {
        "body": "math.sinh(${0:...})",
        "description": "5.1,5.2\n\nmath.sinh (x)",
        "prefix": "math.sinh",
        "scope": "source.lua"
    },
    "math.sqrt": {
        "body": "math.sqrt( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sqrt",
        "prefix": "math.sqrt",
        "scope": "source.lua"
    },
    "math.tan": {
        "body": "math.tan( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.tan",
        "prefix": "math.tan",
        "scope": "source.lua"
    },
    "math.tanh": {
        "body": "math.tanh(${0:...})",
        "description": "5.1,5.2\n\nmath.tanh (x)",
        "prefix": "math.tanh",
        "scope": "source.lua"
    },
    "math.tointeger": {
        "body": "math.tointeger( ${1:x} )",
        "description": "5.3\n\nmath.tointeger",
        "prefix": "math.tointeger",
        "scope": "source.lua"
    },
    "math.type": {
        "body": "math.type( ${1:x} )",
        "description": "5.3\n\nmath.type",
        "prefix": "math.type",
        "scope": "source.lua"
    },
    "math.ult": {
        "body": "math.ult(${0:...})",
        "description": "5.3\n\nmath.ult (m, n)",
        "prefix": "math.ult",
        "scope": "source.lua"
    },
    "module": {
        "body": "module(${0:...})",
        "description": "5.1\n\nmodule (name [, ...])",
        "prefix": "module",
        "scope": "source.lua"
    },
    "next": {
        "body": "next(${1:table}${2:[, index]})",
        "description": "5.1,5.2,5.3\n\nnext (table [, index])",
        "prefix": "next",
        "scope": "source.lua"
    },
    "os.clock": {
        "body": "os.clock(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.clock ()",
        "prefix": "os.clock",
        "scope": "source.lua"
    },
    "os.date": {
        "body": "os.date(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.date ([format [, time]])",
        "prefix": "os.date",
        "scope": "source.lua"
    },
    "os.difftime": {
        "body": "os.difftime(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.difftime (t2, t1)",
        "prefix": "os.difftime",
        "scope": "source.lua"
    },
    "os.execute": {
        "body": "os.execute(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.execute ([command])",
        "prefix": "os.execute",
        "scope": "source.lua"
    },
    "os.exit": {
        "body": "os.exit(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.exit ([code])",
        "prefix": "os.exit",
        "scope": "source.lua"
    },
    "os.getenv": {
        "body": "os.getenv(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.getenv (varname)",
        "prefix": "os.getenv",
        "scope": "source.lua"
    },
    "os.remove": {
        "body": "os.remove(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.remove (filename)",
        "prefix": "os.remove",
        "scope": "source.lua"
    },
    "os.rename": {
        "body": "os.rename(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.rename (oldname, newname)",
        "prefix": "os.rename",
        "scope": "source.lua"
    },
    "os.setlocale": {
        "body": "os.setlocale(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.setlocale (locale [, category])",
        "prefix": "os.setlocale",
        "scope": "source.lua"
    },
    "os.time": {
        "body": "os.time(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.time ([table])",
        "prefix": "os.time",
        "scope": "source.lua"
    },
    "os.tmpname": {
        "body": "os.tmpname(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.tmpname ()",
        "prefix": "os.tmpname",
        "scope": "source.lua"
    },
    "package.config": {
        "body": "package.config(${0:...})",
        "description": "5.2,5.3\n\npackage.config",
        "prefix": "package.config",
        "scope": "source.lua"
    },
    "package.cpath": {
        "body": "package.cpath(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.cpath",
        "prefix": "package.cpath",
        "scope": "source.lua"
    },
    "package.loaded": {
        "body": "package.loaded(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loaded",
        "prefix": "package.loaded",
        "scope": "source.lua"
    },
    "package.loaders": {
        "body": "package.loaders(${0:...})",
        "description": "5.1\n\npackage.loaders",
        "prefix": "package.loaders",
        "scope": "source.lua"
    },
    "package.loadlib": {
        "body": "package.loadlib(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loadlib (libname, funcname)",
        "prefix": "package.loadlib",
        "scope": "source.lua"
    },
    "package.path": {
        "body": "package.path(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.path",
        "prefix": "package.path",
        "scope": "source.lua"
    },
    "package.preload": {
        "body": "package.preload(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.preload",
        "prefix": "package.preload",
        "scope": "source.lua"
    },
    "package.searchers": {
        "body": "package.searchers(${0:...})",
        "description": "5.2,5.3\n\npackage.searchers",
        "prefix": "package.searchers",
        "scope": "source.lua"
    },
    "package.searchpath": {
        "body": "package.searchpath(${0:...})",
        "description": "5.2,5.3\n\npackage.searchpath (name, path [, sep [, rep]])",
        "prefix": "package.searchpath",
        "scope": "source.lua"
    },
    "package.seeall": {
        "body": "package.seeall(${0:...})",
        "description": "5.1\n\npackage.seeall (module)",
        "prefix": "package.seeall",
        "scope": "source.lua"
    },
    "pairs": {
        "body": "pairs(${0:...})",
        "description": "5.1,5.2,5.3\n\npairs (t)",
        "prefix": "pairs",
        "scope": "source.lua"
    },
    "pcall": {
        "body": "pcall(${0:...})",
        "description": "5.1,5.2,5.3\n\npcall (f, arg1, ...)",
        "prefix": "pcall",
        "scope": "source.lua"
    },
    "print": {
        "body": "print(${1:...})",
        "description": "5.1,5.2,5.3\n\nprint(...)",
        "prefix": "print",
        "scope": "source.lua"
    },
    "rawequal": {
        "body": "rawequal(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawequal (v1, v2)",
        "prefix": "rawequal",
        "scope": "source.lua"
    },
    "rawget": {
        "body": "rawget(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawget (table, index)",
        "prefix": "rawget",
        "scope": "source.lua"
    },
    "rawlen": {
        "body": "rawlen(${0:...})",
        "description": "5.2,5.3\n\nrawlen (v)",
        "prefix": "rawlen",
        "scope": "source.lua"
    },
    "rawset": {
        "body": "rawset(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawset (table, index, value)",
        "prefix": "rawset",
        "scope": "source.lua"
    },
    "req": {
        "body": "require(\"${1:module}\")",
        "description": "require()",
        "prefix": "req",
        "scope": "source.lua"
    },
    "require": {
        "body": "require(\"${1:module}\")",
        "description": "5.1,5.2,5.3\n\nrequire()",
        "prefix": "require",
        "scope": "source.lua"
    },
    "ret": {
        "body": "return ${1:...}",
        "description": "return ...",
        "prefix": "ret",
        "scope": "source.lua"
    },
    "select": {
        "body": "select(${1:index}, ${2:...})",
        "description": "5.1,5.2,5.3\n\nselect (index, \u00b7\u00b7\u00b7)",
        "prefix": "select",
        "scope": "source.lua"
    },
    "setfenv": {
        "body": "setfenv(${0:...})",
        "description": "5.1\n\nsetfenv (f, table)",
        "prefix": "setfenv",
        "scope": "source.lua"
    },
    "setmetatable": {
        "body": "setmetatable(${1:table}, ${2:metatable})",
        "description": "5.1,5.2,5.3\n\nsetmetatable (table, metatable)",
        "prefix": "setmetatable",
        "scope": "source.lua"
    },
    "string.byte": {
        "body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.byte",
        "prefix": "string.byte",
        "scope": "source.lua"
    },
    "string.char": {
        "body": "string.char( ${1:...} )",
        "description": "5.1,5.2,5.3\n\nstring.char",
        "prefix": "string.char",
        "scope": "source.lua"
    },
    "string.dump": {
        "body": "string.dump(${0:...})",
        "description": "5.1,5.2,5.3\n\nstring.dump (function)",
        "prefix": "string.dump",
        "scope": "source.lua"
    },
    "string.find": {
        "body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
        "description": "5.1,5.2,5.3\n\nstring.find",
        "prefix": "string.find",
        "scope": "source.lua"
    },
    "string.format": {
        "body": "string.format( \"${1:formatstring}\",${2:...} )",
        "description": "5.1,5.2,5.3\n\nstring.format",
        "prefix": "string.format",
        "scope": "source.lua"
    },
    "string.gmatch": {
        "body": "string.gmatch( ${1:s},${2:pattern} )",
        "description": "5.1,5.2,5.3\n\nstring.gmatch",
        "prefix": "string.gmatch",
        "scope": "source.lua"
    },
    "string.gsub": {
        "body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
        "description": "5.1,5.2,5.3\n\nstring.gsub",
        "prefix": "string.gsub",
        "scope": "source.lua"
    },
    "string.len": {
        "body": "string.len( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.len",
        "prefix": "string.len",
        "scope": "source.lua"
    },
    "string.lower": {
        "body": "string.lower( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.lower",
        "prefix": "string.lower",
        "scope": "source.lua"
    },
    "string.match": {
        "body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
        "description": "5.1,5.2,5.3\n\nstring.match",
        "prefix": "string.match",
        "scope": "source.lua"
    },
    "string.pack": {
        "body": "string.pack(${0:...})",
        "description": "5.3\n\nstring.pack (fmt, v1, v2, ...)",
        "prefix": "string.pack",
        "scope": "source.lua"
    },
    "string.packsize": {
        "body": "string.packsize(${0:...})",
        "description": "5.3\n\nstring.packsize (fmt)",
        "prefix": "string.packsize",
        "scope": "source.lua"
    },
    "string.rep": {
        "body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
        "description": "5.1,5.2,5.3\n\nstring.rep",
        "prefix": "string.rep",
        "scope": "source.lua"
    },
    "string.reverse": {
        "body": "string.reverse( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.reverse",
        "prefix": "string.reverse",
        "scope": "source.lua"
    },
    "string.sub": {
        "body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.sub",
        "prefix": "string.sub",
        "scope": "source.lua"
    },
    "string.unpack": {
        "body": "string.unpack(${0:...})",
        "description": "5.3\n\nstring.unpack (fmt, s [, pos])",
        "prefix": "string.unpack",
        "scope": "source.lua"
    },
    "string.upper": {
        "body": "string.upper( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.upper",
        "prefix": "string.upper",
        "scope": "source.lua"
    },
    "table.concat": {
        "body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
        "description": "5.1,5.2,5.3\n\ntable.concat",
        "prefix": "table.concat",
        "scope": "source.lua"
    },
    "table.insert": {
        "body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
        "description": "5.1,5.2,5.3\n\ntable.insert",
        "prefix": "table.insert",
        "scope": "source.lua"
    },
    "table.maxn": {
        "body": "table.maxn(${0:...})",
        "description": "5.1\n\ntable.maxn (table)",
        "prefix": "table.maxn",
        "scope": "source.lua"
    },
    "table.move": {
        "body": "table.move(${0:...})",
        "description": "5.3\n\ntable.move (a1, f, e, t [,a2])",
        "prefix": "table.move",
        "scope": "source.lua"
    },
    "table.pack": {
        "body": "table.pack(${0:...})",
        "description": "5.2,5.3\n\ntable.pack (...)",
        "prefix": "table.pack",
        "scope": "source.lua"
    },
    "table.remove": {
        "body": "table.remove( ${1:list},${2: [pos,]} )",
        "description": "5.1,5.2,5.3\n\ntable.remove",
        "prefix": "table.remove",
        "scope": "source.lua"
    },
    "table.sort": {
        "body": "table.sort( ${1:tablename}${2:, sortfunction} )",
        "description": "5.1,5.2,5.3\n\ntable.sort",
        "prefix": "table.sort",
        "scope": "source.lua"
    },
    "table.unpack": {
        "body": "table.unpack(${0:...})",
        "description": "5.2,5.3\n\ntable.unpack (list [, i [, j]])",
        "prefix": "table.unpack",
        "scope": "source.lua"
    },
    "tonumber": {
        "body": "tonumber(${1:e}${2:[, base]})",
        "description": "5.1,5.2,5.3\n\ntonumber (e [, base])",
        "prefix": "tonumber",
        "scope": "source.lua"
    },
    "tostring": {
        "body": "tostring(${1:v})",
        "description": "5.1,5.2,5.3\n\ntostring (v)",
        "prefix": "tostring",
        "scope": "source.lua"
    },
    "type": {
        "body": "type(${1:v})",
        "description": "5.1,5.2,5.3\n\ntype (v)",
        "prefix": "type",
        "scope": "source.lua"
    },
    "unpack": {
        "body": "unpack(${0:...})",
        "description": "5.1\n\nunpack (list [, i [, j]])",
        "prefix": "unpack",
        "scope": "source.lua"
    },
    "utf8.char": {
        "body": "utf8.char(${0:...})",
        "description": "5.3\n\nutf8.char (...)",
        "prefix": "utf8.char",
        "scope": "source.lua"
    },
    "utf8.charpattern": {
        "body": "utf8.charpattern(${0:...})",
        "description": "5.3\n\nutf8.charpattern",
        "prefix": "utf8.charpattern",
        "scope": "source.lua"
    },
    "utf8.codepoint": {
        "body": "utf8.codepoint(${0:...})",
        "description": "5.3\n\nutf8.codepoint (s [, i [, j]])",
        "prefix": "utf8.codepoint",
        "scope": "source.lua"
    },
    "utf8.codes": {
        "body": "utf8.codes(${0:...})",
        "description": "5.3\n\nutf8.codes (s)",
        "prefix": "utf8.codes",
        "scope": "source.lua"
    },
    "utf8.len": {
        "body": "utf8.len(${0:...})",
        "description": "5.3\n\nutf8.len (s [, i [, j]])",
        "prefix": "utf8.len",
        "scope": "source.lua"
    },
    "utf8.offset": {
        "body": "utf8.offset(${0:...})",
        "description": "5.3\n\nutf8.offset (s, n [, i])",
        "prefix": "utf8.offset",
        "scope": "source.lua"
    },
    "ver": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "ver",
        "scope": "source.lua"
    },
    "version": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "version",
        "scope": "source.lua"
    },
    "xpcall": {
        "body": "xpcall(${0:...})",
        "description": "5.1,5.2,5.3\n\nxpcall (f, err)",
        "prefix": "xpcall",
        "scope": "source.lua"
    },

		
				
	"shakeCam": {
		"body": "shakeCam(int shake)",
		"description": "GTA SA  0003",
		"prefix": "shakeCam",
		"scope": "source.lua"
	},
	"createPlayer": {
		"body": "Player player = createPlayer(Model modelId, float atX, float atY, float atZ)",
		"description": "GTA SA  0053",
		"prefix": "createPlayer",
		"scope": "source.lua"
	},
	"createChar": {
		"body": "Ped ped = createChar(int pedtype, Model modelId, float atX, float atY, float atZ)",
		"description": "GTA SA  009A",
		"prefix": "createChar",
		"scope": "source.lua"
	},
	"deleteChar": {
		"body": "deleteChar(Ped ped)",
		"description": "GTA SA  009B",
		"prefix": "deleteChar",
		"scope": "source.lua"
	},
	"getCharCoordinates": {
		"body": "float positionX, float positionY, float positionZ = getCharCoordinates(Ped ped)",
		"description": "GTA SA  00A0",
		"prefix": "getCharCoordinates",
		"scope": "source.lua"
	},
	"setCharCoordinates": {
		"body": "setCharCoordinates(Ped ped, float posX, float posY, float posZ)",
		"description": "GTA SA  00A1",
		"prefix": "setCharCoordinates",
		"scope": "source.lua"
	},
	"isCharInArea2d": {
		"body": "bool result = isCharInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  00A3",
		"prefix": "isCharInArea2d",
		"scope": "source.lua"
	},
	"isCharInArea3d": {
		"body": "bool result = isCharInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  00A4",
		"prefix": "isCharInArea3d",
		"scope": "source.lua"
	},
	"createCar": {
		"body": "Vehicle car = createCar(Model modelId, float atX, float atY, float atZ)",
		"description": "GTA SA  00A5",
		"prefix": "createCar",
		"scope": "source.lua"
	},
	"deleteCar": {
		"body": "deleteCar(Vehicle car)",
		"description": "GTA SA  00A6",
		"prefix": "deleteCar",
		"scope": "source.lua"
	},
	"carGotoCoordinates": {
		"body": "carGotoCoordinates(Vehicle car, float driveToX, float driveToY, float driveToZ)",
		"description": "GTA SA  00A7",
		"prefix": "carGotoCoordinates",
		"scope": "source.lua"
	},
	"carWanderRandomly": {
		"body": "carWanderRandomly(Vehicle car)",
		"description": "GTA SA  00A8",
		"prefix": "carWanderRandomly",
		"scope": "source.lua"
	},
	"carSetIdle": {
		"body": "carSetIdle(Vehicle car)",
		"description": "GTA SA  00A9",
		"prefix": "carSetIdle",
		"scope": "source.lua"
	},
	"getCarCoordinates": {
		"body": "float positionX, float positionY, float positionZ = getCarCoordinates(Vehicle car)",
		"description": "GTA SA  00AA",
		"prefix": "getCarCoordinates",
		"scope": "source.lua"
	},
	"setCarCoordinates": {
		"body": "setCarCoordinates(Vehicle car, float atX, float atY, float atZ)",
		"description": "GTA SA  00AB",
		"prefix": "setCarCoordinates",
		"scope": "source.lua"
	},
	"setCarCruiseSpeed": {
		"body": "setCarCruiseSpeed(Vehicle car, float maxSpeed)",
		"description": "GTA SA  00AD",
		"prefix": "setCarCruiseSpeed",
		"scope": "source.lua"
	},
	"setCarDrivingStyle": {
		"body": "setCarDrivingStyle(Vehicle car, int behaviour)",
		"description": "GTA SA  00AE",
		"prefix": "setCarDrivingStyle",
		"scope": "source.lua"
	},
	"setCarMission": {
		"body": "setCarMission(Vehicle car, int driverBehaviour)",
		"description": "GTA SA  00AF",
		"prefix": "setCarMission",
		"scope": "source.lua"
	},
	"isCarInArea2d": {
		"body": "bool result = isCarInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  00B0",
		"prefix": "isCarInArea2d",
		"scope": "source.lua"
	},
	"isCarInArea3d": {
		"body": "bool result = isCarInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  00B1",
		"prefix": "isCarInArea3d",
		"scope": "source.lua"
	},
	"printBig": {
		"body": "printBig(GxtString gxtString, int time, int style)",
		"description": "GTA SA  00BA",
		"prefix": "printBig",
		"scope": "source.lua"
	},
	"printText": {
		"body": "printText(GxtString gxtString, int time, int flag)",
		"description": "GTA SA  00BB",
		"prefix": "printText",
		"scope": "source.lua"
	},
	"printTextNow": {
		"body": "printTextNow(GxtString gxtString, int time, int flag)",
		"description": "GTA SA  00BC",
		"prefix": "printTextNow",
		"scope": "source.lua"
	},
	"clearPrints": {
		"body": "clearPrints()",
		"description": "GTA SA  00BE",
		"prefix": "clearPrints",
		"scope": "source.lua"
	},
	"getTimeOfDay": {
		"body": "int hours, int mins = getTimeOfDay()",
		"description": "GTA SA  00BF",
		"prefix": "getTimeOfDay",
		"scope": "source.lua"
	},
	"setTimeOfDay": {
		"body": "setTimeOfDay(int hours, int minutes)",
		"description": "GTA SA  00C0",
		"prefix": "setTimeOfDay",
		"scope": "source.lua"
	},
	"getMinutesToTimeOfDay": {
		"body": "int minutes = getMinutesToTimeOfDay(int hours, int minutes)",
		"description": "GTA SA  00C1",
		"prefix": "getMinutesToTimeOfDay",
		"scope": "source.lua"
	},
	"isPointOnScreen": {
		"body": "bool result = isPointOnScreen(float sphereX, float sphereY, float sphereZ, float radius)",
		"description": "GTA SA  00C2",
		"prefix": "isPointOnScreen",
		"scope": "source.lua"
	},
	"storeCarCharIsIn": {
		"body": "Vehicle car = storeCarCharIsIn(Ped ped)",
		"description": "GTA SA  00D9",
		"prefix": "storeCarCharIsIn",
		"scope": "source.lua"
	},
	"isCharInCar": {
		"body": "bool result = isCharInCar(Ped ped, Vehicle car)",
		"description": "GTA SA  00DB",
		"prefix": "isCharInCar",
		"scope": "source.lua"
	},
	"isCharInModel": {
		"body": "bool result = isCharInModel(Ped ped, Model carModel)",
		"description": "GTA SA  00DD",
		"prefix": "isCharInModel",
		"scope": "source.lua"
	},
	"isCharInAnyCar": {
		"body": "bool result = isCharInAnyCar(Ped ped)",
		"description": "GTA SA  00DF",
		"prefix": "isCharInAnyCar",
		"scope": "source.lua"
	},
	"isButtonPressed": {
		"body": "bool result = isButtonPressed(Player player, int key)",
		"description": "GTA SA  00E1",
		"prefix": "isButtonPressed",
		"scope": "source.lua"
	},
	"getPadState": {
		"body": "int state = getPadState(Player player, int key)",
		"description": "GTA SA  00E2",
		"prefix": "getPadState",
		"scope": "source.lua"
	},
	"locateCharAnyMeans2d": {
		"body": "bool result = locateCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00EC",
		"prefix": "locateCharAnyMeans2d",
		"scope": "source.lua"
	},
	"locateCharOnFoot2d": {
		"body": "bool result = locateCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00ED",
		"prefix": "locateCharOnFoot2d",
		"scope": "source.lua"
	},
	"locateCharInCar2d": {
		"body": "bool result = locateCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00EE",
		"prefix": "locateCharInCar2d",
		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans2d": {
		"body": "bool result = locateStoppedCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00EF",
		"prefix": "locateStoppedCharAnyMeans2d",
		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot2d": {
		"body": "bool result = locateStoppedCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00F0",
		"prefix": "locateStoppedCharOnFoot2d",
		"scope": "source.lua"
	},
	"locateStoppedCharInCar2d": {
		"body": "bool result = locateStoppedCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00F1",
		"prefix": "locateStoppedCharInCar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansChar2d": {
		"body": "bool result = locateCharAnyMeansChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00F2",
		"prefix": "locateCharAnyMeansChar2d",
		"scope": "source.lua"
	},
	"locateCharOnFootChar2d": {
		"body": "locateCharOnFootChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00F3",
		"prefix": "locateCharOnFootChar2d",
		"scope": "source.lua"
	},
	"locateCharInCarChar2d": {
		"body": "bool result = locateCharInCarChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  00F4",
		"prefix": "locateCharInCarChar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeans3d": {
		"body": "bool result = locateCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  00FE",
		"prefix": "locateCharAnyMeans3d",
		"scope": "source.lua"
	},
	"locateCharOnFoot3d": {
		"body": "bool result = locateCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  00FF",
		"prefix": "locateCharOnFoot3d",
		"scope": "source.lua"
	},
	"locateCharInCar3d": {
		"body": "bool result = locateCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0100",
		"prefix": "locateCharInCar3d",
		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans3d": {
		"body": "bool result = locateStoppedCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0101",
		"prefix": "locateStoppedCharAnyMeans3d",
		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot3d": {
		"body": "bool result = locateStoppedCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0102",
		"prefix": "locateStoppedCharOnFoot3d",
		"scope": "source.lua"
	},
	"locateStoppedCharInCar3d": {
		"body": "bool result = locateStoppedCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0103",
		"prefix": "locateStoppedCharInCar3d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansChar3d": {
		"body": "bool result = locateCharAnyMeansChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0104",
		"prefix": "locateCharAnyMeansChar3d",
		"scope": "source.lua"
	},
	"locateCharOnFootChar3d": {
		"body": "bool result = locateCharOnFootChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0105",
		"prefix": "locateCharOnFootChar3d",
		"scope": "source.lua"
	},
	"locateCharInCarChar3d": {
		"body": "bool result = locateCharInCarChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0106",
		"prefix": "locateCharInCarChar3d",
		"scope": "source.lua"
	},
	"createObject": {
		"body": "Object object = createObject(Model modelId, float atX, float atY, float atZ)",
		"description": "GTA SA  0107",
		"prefix": "createObject",
		"scope": "source.lua"
	},
	"deleteObject": {
		"body": "deleteObject(Object object)",
		"description": "GTA SA  0108",
		"prefix": "deleteObject",
		"scope": "source.lua"
	},
	"givePlayerMoney": {
		"body": "givePlayerMoney(Player player, int money)",
		"description": "GTA SA  0109",
		"prefix": "givePlayerMoney",
		"scope": "source.lua"
	},
	"getPlayerMoney": {
		"body": "int money = getPlayerMoney(Player player)",
		"description": "GTA SA  010B",
		"prefix": "getPlayerMoney",
		"scope": "source.lua"
	},
	"giveRemoteControlledCarToPlayer": {
		"body": "giveRemoteControlledCarToPlayer(Player player, float float2, float float3, float float4)",
		"description": "GTA SA  010C",
		"prefix": "giveRemoteControlledCarToPlayer",
		"scope": "source.lua"
	},
	"alterWantedLevel": {
		"body": "alterWantedLevel(Player player, int wantedLevel)",
		"description": "GTA SA  010D",
		"prefix": "alterWantedLevel",
		"scope": "source.lua"
	},
	"alterWantedLevelNoDrop": {
		"body": "alterWantedLevelNoDrop(Player player, int minimumWantedLevel)",
		"description": "GTA SA  010E",
		"prefix": "alterWantedLevelNoDrop",
		"scope": "source.lua"
	},
	"isWantedLevelGreater": {
		"body": "bool result = isWantedLevelGreater(Player player, int level)",
		"description": "GTA SA  010F",
		"prefix": "isWantedLevelGreater",
		"scope": "source.lua"
	},
	"clearWantedLevel": {
		"body": "clearWantedLevel(Player player)",
		"description": "GTA SA  0110",
		"prefix": "clearWantedLevel",
		"scope": "source.lua"
	},
	"setDeatharrestState": {
		"body": "setDeatharrestState(bool value)",
		"description": "GTA SA  0111",
		"prefix": "setDeatharrestState",
		"scope": "source.lua"
	},
	"hasDeatharrestBeenExecuted": {
		"body": "bool result = hasDeatharrestBeenExecuted()",
		"description": "GTA SA  0112",
		"prefix": "hasDeatharrestBeenExecuted",
		"scope": "source.lua"
	},
	"addAmmoToChar": {
		"body": "addAmmoToChar(Ped ped, int weapon, int ammo)",
		"description": "GTA SA  0114",
		"prefix": "addAmmoToChar",
		"scope": "source.lua"
	},
	"isPlayerDead": {
		"body": "bool result = isPlayerDead(Player player)",
		"description": "GTA SA  0117",
		"prefix": "isPlayerDead",
		"scope": "source.lua"
	},
	"isCharDead": {
		"body": "bool result = isCharDead(Ped ped)",
		"description": "GTA SA  0118",
		"prefix": "isCharDead",
		"scope": "source.lua"
	},
	"isCarDead": {
		"body": "bool result = isCarDead(Vehicle car)",
		"description": "GTA SA  0119",
		"prefix": "isCarDead",
		"scope": "source.lua"
	},
	"isPlayerPressingHorn": {
		"body": "bool result = isPlayerPressingHorn(Player player)",
		"description": "GTA SA  0122",
		"prefix": "isPlayerPressingHorn",
		"scope": "source.lua"
	},
	"createCharInsideCar": {
		"body": "Ped ped = createCharInsideCar(Vehicle car, Model pedtype, int model)",
		"description": "GTA SA  0129",
		"prefix": "createCharInsideCar",
		"scope": "source.lua"
	},
	"isCarModel": {
		"body": "bool result = isCarModel(Vehicle car, Model modelId)",
		"description": "GTA SA  0137",
		"prefix": "isCarModel",
		"scope": "source.lua"
	},
	"createCarGenerator": {
		"body": "int carGenerator = createCarGenerator(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay)",
		"description": "GTA SA  014B",
		"prefix": "createCarGenerator",
		"scope": "source.lua"
	},
	"switchCarGenerator": {
		"body": "switchCarGenerator(int carGenerator, int carsToGenerate)",
		"description": "GTA SA  014C",
		"prefix": "switchCarGenerator",
		"scope": "source.lua"
	},
	"displayOnscreenTimer": {
		"body": "displayOnscreenTimer(VarId var, bool countInDirection)",
		"description": "GTA SA  014E",
		"prefix": "displayOnscreenTimer",
		"scope": "source.lua"
	},
	"clearOnscreenTimer": {
		"body": "clearOnscreenTimer(VarId var)",
		"description": "GTA SA  014F",
		"prefix": "clearOnscreenTimer",
		"scope": "source.lua"
	},
	"clearOnscreenCounter": {
		"body": "clearOnscreenCounter(VarId var)",
		"description": "GTA SA  0151",
		"prefix": "clearOnscreenCounter",
		"scope": "source.lua"
	},
	"isCharInZone": {
		"body": "bool result = isCharInZone(Ped ped, GxtString zoneName)",
		"description": "GTA SA  0154",
		"prefix": "isCharInZone",
		"scope": "source.lua"
	},
	"pointCameraAtCar": {
		"body": "pointCameraAtCar(Vehicle car, int mode, int switchstyle)",
		"description": "GTA SA  0158",
		"prefix": "pointCameraAtCar",
		"scope": "source.lua"
	},
	"pointCameraAtChar": {
		"body": "pointCameraAtChar(Ped ped, int mode, int switchstyle)",
		"description": "GTA SA  0159",
		"prefix": "pointCameraAtChar",
		"scope": "source.lua"
	},
	"restoreCamera": {
		"body": "restoreCamera()",
		"description": "GTA SA  015A",
		"prefix": "restoreCamera",
		"scope": "source.lua"
	},
	"shakePad": {
		"body": "shakePad(Player player, int time, int intensity)",
		"description": "GTA SA  015B",
		"prefix": "shakePad",
		"scope": "source.lua"
	},
	"setTimeScale": {
		"body": "setTimeScale(float gamespeed)",
		"description": "GTA SA  015D",
		"prefix": "setTimeScale",
		"scope": "source.lua"
	},
	"setFixedCameraPosition": {
		"body": "setFixedCameraPosition(float positionX, float positionY, float positionZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  015F",
		"prefix": "setFixedCameraPosition",
		"scope": "source.lua"
	},
	"pointCameraAtPoint": {
		"body": "pointCameraAtPoint(float pointAtX, float pointAtY, float pointAtZ, int switchstyle)",
		"description": "GTA SA  0160",
		"prefix": "pointCameraAtPoint",
		"scope": "source.lua"
	},
	"addBlipForCarOld": {
		"body": "Marker marker = addBlipForCarOld(Vehicle car, int unused, bool visibility)",
		"description": "GTA SA  0161",
		"prefix": "addBlipForCarOld",
		"scope": "source.lua"
	},
	"addBlipForCharOld": {
		"body": "Marker marker = addBlipForCharOld(Ped ped, int int2, int int3)",
		"description": "GTA SA  0162",
		"prefix": "addBlipForCharOld",
		"scope": "source.lua"
	},
	"removeBlip": {
		"body": "removeBlip(Marker marker)",
		"description": "GTA SA  0164",
		"prefix": "removeBlip",
		"scope": "source.lua"
	},
	"changeBlipColour": {
		"body": "changeBlipColour(Marker marker, int color)",
		"description": "GTA SA  0165",
		"prefix": "changeBlipColour",
		"scope": "source.lua"
	},
	"addBlipForCoordOld": {
		"body": "Marker marker = addBlipForCoordOld(float atX, float atY, float atZ, int color, int flag)",
		"description": "GTA SA  0167",
		"prefix": "addBlipForCoordOld",
		"scope": "source.lua"
	},
	"changeBlipScale": {
		"body": "changeBlipScale(Marker marker, int size)",
		"description": "GTA SA  0168",
		"prefix": "changeBlipScale",
		"scope": "source.lua"
	},
	"setFadingColour": {
		"body": "setFadingColour(int r, int g, int b)",
		"description": "GTA SA  0169",
		"prefix": "setFadingColour",
		"scope": "source.lua"
	},
	"doFade": {
		"body": "doFade(bool fade, int time)",
		"description": "GTA SA  016A",
		"prefix": "doFade",
		"scope": "source.lua"
	},
	"getFadingStatus": {
		"body": "bool result = getFadingStatus()",
		"description": "GTA SA  016B",
		"prefix": "getFadingStatus",
		"scope": "source.lua"
	},
	"addHospitalRestart": {
		"body": "addHospitalRestart(float atX, float atY, float atZ, float angle, int townNumber)",
		"description": "GTA SA  016C",
		"prefix": "addHospitalRestart",
		"scope": "source.lua"
	},
	"addPoliceRestart": {
		"body": "addPoliceRestart(float atX, float atY, float atZ, float angle, int townNumber)",
		"description": "GTA SA  016D",
		"prefix": "addPoliceRestart",
		"scope": "source.lua"
	},
	"overrideNextRestart": {
		"body": "overrideNextRestart(float atX, float atY, float atZ, float angle)",
		"description": "GTA SA  016E",
		"prefix": "overrideNextRestart",
		"scope": "source.lua"
	},
	"drawShadow": {
		"body": "drawShadow(Particle particle, float atX, float atY, float atZ, float rotationFactor, float size, int intensity, int flags1, int flags2, int flags3)",
		"description": "GTA SA  016F",
		"prefix": "drawShadow",
		"scope": "source.lua"
	},
	"getCharHeading": {
		"body": "float angle = getCharHeading(Ped ped)",
		"description": "GTA SA  0172",
		"prefix": "getCharHeading",
		"scope": "source.lua"
	},
	"setCharHeading": {
		"body": "setCharHeading(Ped ped, float angle)",
		"description": "GTA SA  0173",
		"prefix": "setCharHeading",
		"scope": "source.lua"
	},
	"getCarHeading": {
		"body": "float angle = getCarHeading(Vehicle car)",
		"description": "GTA SA  0174",
		"prefix": "getCarHeading",
		"scope": "source.lua"
	},
	"setCarHeading": {
		"body": "setCarHeading(Vehicle car, float angle)",
		"description": "GTA SA  0175",
		"prefix": "setCarHeading",
		"scope": "source.lua"
	},
	"getObjectHeading": {
		"body": "float angle = getObjectHeading(Object object)",
		"description": "GTA SA  0176",
		"prefix": "getObjectHeading",
		"scope": "source.lua"
	},
	"setObjectHeading": {
		"body": "setObjectHeading(Object object, float angle)",
		"description": "GTA SA  0177",
		"prefix": "setObjectHeading",
		"scope": "source.lua"
	},
	"isCharTouchingObject": {
		"body": "bool result = isCharTouchingObject(Ped ped, Object object)",
		"description": "GTA SA  0179",
		"prefix": "isCharTouchingObject",
		"scope": "source.lua"
	},
	"setCharAmmo": {
		"body": "setCharAmmo(Ped ped, int weapon, int ammo)",
		"description": "GTA SA  017B",
		"prefix": "setCharAmmo",
		"scope": "source.lua"
	},
	"declareMissionFlag": {
		"body": "declareMissionFlag(VarId flag)",
		"description": "GTA SA  0180",
		"prefix": "declareMissionFlag",
		"scope": "source.lua"
	},
	"addBlipForCar": {
		"body": "Marker marker = addBlipForCar(Vehicle car)",
		"description": "GTA SA  0186",
		"prefix": "addBlipForCar",
		"scope": "source.lua"
	},
	"addBlipForChar": {
		"body": "Marker marker = addBlipForChar(Ped ped)",
		"description": "GTA SA  0187",
		"prefix": "addBlipForChar",
		"scope": "source.lua"
	},
	"addBlipForObject": {
		"body": "Marker marker = addBlipForObject(Object object)",
		"description": "GTA SA  0188",
		"prefix": "addBlipForObject",
		"scope": "source.lua"
	},
	"addBlipForCoord": {
		"body": "Checkpoint checkpoint = addBlipForCoord(float atX, float atY, float atZ)",
		"description": "GTA SA  018A",
		"prefix": "addBlipForCoord",
		"scope": "source.lua"
	},
	"changeBlipDisplay": {
		"body": "changeBlipDisplay(Marker marker, int mode)",
		"description": "GTA SA  018B",
		"prefix": "changeBlipDisplay",
		"scope": "source.lua"
	},
	"addOneOffSound": {
		"body": "addOneOffSound(float atX, float atY, float atZ, int sound)",
		"description": "GTA SA  018C",
		"prefix": "addOneOffSound",
		"scope": "source.lua"
	},
	"addContinuousSound": {
		"body": "int unk = addContinuousSound(float atX, float atY, float atZ, int sound)",
		"description": "GTA SA  018D",
		"prefix": "addContinuousSound",
		"scope": "source.lua"
	},
	"removeSound": {
		"body": "removeSound(int sound)",
		"description": "GTA SA  018E",
		"prefix": "removeSound",
		"scope": "source.lua"
	},
	"isCarStuckOnRoof": {
		"body": "bool result = isCarStuckOnRoof(Vehicle car)",
		"description": "GTA SA  018F",
		"prefix": "isCarStuckOnRoof",
		"scope": "source.lua"
	},
	"addUpsidedownCarCheck": {
		"body": "addUpsidedownCarCheck(Vehicle car)",
		"description": "GTA SA  0190",
		"prefix": "addUpsidedownCarCheck",
		"scope": "source.lua"
	},
	"removeUpsidedownCarCheck": {
		"body": "removeUpsidedownCarCheck(Vehicle car)",
		"description": "GTA SA  0191",
		"prefix": "removeUpsidedownCarCheck",
		"scope": "source.lua"
	},
	"isCharInAreaOnFoot2d": {
		"body": "bool result = isCharInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01A1",
		"prefix": "isCharInAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharInAreaInCar2d": {
		"body": "bool result = isCharInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01A2",
		"prefix": "isCharInAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharStoppedInArea2d": {
		"body": "bool result = isCharStoppedInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01A3",
		"prefix": "isCharStoppedInArea2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot2d": {
		"body": "bool result = isCharStoppedInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01A4",
		"prefix": "isCharStoppedInAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar2d": {
		"body": "bool result = isCharStoppedInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01A5",
		"prefix": "isCharStoppedInAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharInAreaOnFoot3d": {
		"body": "bool result = isCharInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01A6",
		"prefix": "isCharInAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharInAreaInCar3d": {
		"body": "bool result = isCharInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01A7",
		"prefix": "isCharInAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharStoppedInArea3d": {
		"body": "bool result = isCharStoppedInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01A8",
		"prefix": "isCharStoppedInArea3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot3d": {
		"body": "bool result = isCharStoppedInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01A9",
		"prefix": "isCharStoppedInAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar3d": {
		"body": "bool result = isCharStoppedInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01AA",
		"prefix": "isCharStoppedInAreaInCar3d",
		"scope": "source.lua"
	},
	"isCarStoppedInArea2d": {
		"body": "bool result = isCarStoppedInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  01AB",
		"prefix": "isCarStoppedInArea2d",
		"scope": "source.lua"
	},
	"isCarStoppedInArea3d": {
		"body": "bool result = isCarStoppedInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)",
		"description": "GTA SA  01AC",
		"prefix": "isCarStoppedInArea3d",
		"scope": "source.lua"
	},
	"locateCar2d": {
		"body": "bool result = locateCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  01AD",
		"prefix": "locateCar2d",
		"scope": "source.lua"
	},
	"locateStoppedCar2d": {
		"body": "bool result = locateStoppedCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  01AE",
		"prefix": "locateStoppedCar2d",
		"scope": "source.lua"
	},
	"locateCar3d": {
		"body": "bool result = locateCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  01AF",
		"prefix": "locateCar3d",
		"scope": "source.lua"
	},
	"locateStoppedCar3d": {
		"body": "bool result = locateStoppedCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  01B0",
		"prefix": "locateStoppedCar3d",
		"scope": "source.lua"
	},
	"giveWeaponToChar": {
		"body": "giveWeaponToChar(Ped ped, int weapon, int ammo)",
		"description": "GTA SA  01B2",
		"prefix": "giveWeaponToChar",
		"scope": "source.lua"
	},
	"setPlayerControl": {
		"body": "bool result = setPlayerControl(Player player, bool canMove)",
		"description": "GTA SA  01B4",
		"prefix": "setPlayerControl",
		"scope": "source.lua"
	},
	"forceWeather": {
		"body": "bool result = forceWeather(int weather)",
		"description": "GTA SA  01B5",
		"prefix": "forceWeather",
		"scope": "source.lua"
	},
	"forceWeatherNow": {
		"body": "bool result = forceWeatherNow(int weather)",
		"description": "GTA SA  01B6",
		"prefix": "forceWeatherNow",
		"scope": "source.lua"
	},
	"releaseWeather": {
		"body": "releaseWeather()",
		"description": "GTA SA  01B7",
		"prefix": "releaseWeather",
		"scope": "source.lua"
	},
	"setCurrentCharWeapon": {
		"body": "setCurrentCharWeapon(Ped ped, int weapon)",
		"description": "GTA SA  01B9",
		"prefix": "setCurrentCharWeapon",
		"scope": "source.lua"
	},
	"getObjectCoordinates": {
		"body": "bool result, float positionX, float positionY, float positionZ = getObjectCoordinates(Object object)",
		"description": "GTA SA  01BB",
		"prefix": "getObjectCoordinates",
		"scope": "source.lua"
	},
	"setObjectCoordinates": {
		"body": "bool result = setObjectCoordinates(Object object, float atX, float atY, float atZ)",
		"description": "GTA SA  01BC",
		"prefix": "setObjectCoordinates",
		"scope": "source.lua"
	},
	"getGameTimer": {
		"body": "int timeMs = getGameTimer()",
		"description": "GTA SA  01BD",
		"prefix": "getGameTimer",
		"scope": "source.lua"
	},
	"storeWantedLevel": {
		"body": "bool result, int level = storeWantedLevel(Player player)",
		"description": "GTA SA  01C0",
		"prefix": "storeWantedLevel",
		"scope": "source.lua"
	},
	"isCarStopped": {
		"body": "bool result = isCarStopped(Vehicle car)",
		"description": "GTA SA  01C1",
		"prefix": "isCarStopped",
		"scope": "source.lua"
	},
	"markCharAsNoLongerNeeded": {
		"body": "bool result = markCharAsNoLongerNeeded(Ped ped)",
		"description": "GTA SA  01C2",
		"prefix": "markCharAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"markCarAsNoLongerNeeded": {
		"body": "bool result = markCarAsNoLongerNeeded(Vehicle car)",
		"description": "GTA SA  01C3",
		"prefix": "markCarAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"markObjectAsNoLongerNeeded": {
		"body": "bool result = markObjectAsNoLongerNeeded(Object object)",
		"description": "GTA SA  01C4",
		"prefix": "markObjectAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"dontRemoveChar": {
		"body": "bool result = dontRemoveChar(Ped ped)",
		"description": "GTA SA  01C5",
		"prefix": "dontRemoveChar",
		"scope": "source.lua"
	},
	"dontRemoveObject": {
		"body": "bool result = dontRemoveObject(Object object)",
		"description": "GTA SA  01C7",
		"prefix": "dontRemoveObject",
		"scope": "source.lua"
	},
	"createCharAsPassenger": {
		"body": "bool result, Ped ped = createCharAsPassenger(Vehicle car, Model pedtype, int model, int passengerSeat)",
		"description": "GTA SA  01C8",
		"prefix": "createCharAsPassenger",
		"scope": "source.lua"
	},
	"printWithNumberBig": {
		"body": "bool result = printWithNumberBig(GxtString gxtString, int number, int time, int style)",
		"description": "GTA SA  01E3",
		"prefix": "printWithNumberBig",
		"scope": "source.lua"
	},
	"printWithNumber": {
		"body": "bool result = printWithNumber(GxtString gxtString, int number, int time, int flag)",
		"description": "GTA SA  01E4",
		"prefix": "printWithNumber",
		"scope": "source.lua"
	},
	"printWithNumberNow": {
		"body": "bool result = printWithNumberNow(GxtString gxtString, int number, int time, int flag)",
		"description": "GTA SA  01E5",
		"prefix": "printWithNumberNow",
		"scope": "source.lua"
	},
	"switchRoadsOn": {
		"body": "bool result = switchRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  01E7",
		"prefix": "switchRoadsOn",
		"scope": "source.lua"
	},
	"switchRoadsOff": {
		"body": "switchRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  01E8",
		"prefix": "switchRoadsOff",
		"scope": "source.lua"
	},
	"getNumberOfPassengers": {
		"body": "bool result, int passengers = getNumberOfPassengers(Vehicle car)",
		"description": "GTA SA  01E9",
		"prefix": "getNumberOfPassengers",
		"scope": "source.lua"
	},
	"getMaximumNumberOfPassengers": {
		"body": "int maxPassengers = getMaximumNumberOfPassengers(Vehicle car)",
		"description": "GTA SA  01EA",
		"prefix": "getMaximumNumberOfPassengers",
		"scope": "source.lua"
	},
	"setCarDensityMultiplier": {
		"body": "bool result = setCarDensityMultiplier(float multiplier)",
		"description": "GTA SA  01EB",
		"prefix": "setCarDensityMultiplier",
		"scope": "source.lua"
	},
	"setCarHeavy": {
		"body": "bool result = setCarHeavy(Vehicle car, bool heavy)",
		"description": "GTA SA  01EC",
		"prefix": "setCarHeavy",
		"scope": "source.lua"
	},
	"setMaxWantedLevel": {
		"body": "setMaxWantedLevel(int level)",
		"description": "GTA SA  01F0",
		"prefix": "setMaxWantedLevel",
		"scope": "source.lua"
	},
	"isCarInAirProper": {
		"body": "bool result = isCarInAirProper(Vehicle car)",
		"description": "GTA SA  01F3",
		"prefix": "isCarInAirProper",
		"scope": "source.lua"
	},
	"isCarUpsidedown": {
		"body": "bool result = isCarUpsidedown(Vehicle car)",
		"description": "GTA SA  01F4",
		"prefix": "isCarUpsidedown",
		"scope": "source.lua"
	},
	"getPlayerChar": {
		"body": "bool result, Ped ped = getPlayerChar(Player player)",
		"description": "GTA SA  01F5",
		"prefix": "getPlayerChar",
		"scope": "source.lua"
	},
	"cancelOverrideRestart": {
		"body": "bool result = cancelOverrideRestart()",
		"description": "GTA SA  01F6",
		"prefix": "cancelOverrideRestart",
		"scope": "source.lua"
	},
	"setPoliceIgnorePlayer": {
		"body": "bool result = setPoliceIgnorePlayer(Player player, bool ignored)",
		"description": "GTA SA  01F7",
		"prefix": "setPoliceIgnorePlayer",
		"scope": "source.lua"
	},
	"startKillFrenzy": {
		"body": "bool result = startKillFrenzy(GxtString gxtString, int weapon, int timeLimit, int targets, Model targetModels1, Model targetModels2, Model targetModels3, Model targetModels4, bool completedText)",
		"description": "GTA SA  01F9",
		"prefix": "startKillFrenzy",
		"scope": "source.lua"
	},
	"readKillFrenzyStatus": {
		"body": "bool result, int status = readKillFrenzyStatus()",
		"description": "GTA SA  01FA",
		"prefix": "readKillFrenzyStatus",
		"scope": "source.lua"
	},
	"locateCharAnyMeansCar2d": {
		"body": "bool result = locateCharAnyMeansCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  0202",
		"prefix": "locateCharAnyMeansCar2d",
		"scope": "source.lua"
	},
	"locateCharOnFootCar2d": {
		"body": "bool result = locateCharOnFootCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool flag)",
		"description": "GTA SA  0203",
		"prefix": "locateCharOnFootCar2d",
		"scope": "source.lua"
	},
	"locateCharInCarCar2d": {
		"body": "bool result = locateCharInCarCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  0204",
		"prefix": "locateCharInCarCar2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansCar3d": {
		"body": "bool result = locateCharAnyMeansCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)",
		"description": "GTA SA  0205",
		"prefix": "locateCharAnyMeansCar3d",
		"scope": "source.lua"
	},
	"locateCharOnFootCar3d": {
		"body": "bool result = locateCharOnFootCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)",
		"description": "GTA SA  0206",
		"prefix": "locateCharOnFootCar3d",
		"scope": "source.lua"
	},
	"locateCharInCarCar3d": {
		"body": "bool result = locateCharInCarCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)",
		"description": "GTA SA  0207",
		"prefix": "locateCharInCarCar3d",
		"scope": "source.lua"
	},
	"lockCarDoors": {
		"body": "lockCarDoors(Vehicle car, int status)",
		"description": "GTA SA  020A",
		"prefix": "lockCarDoors",
		"scope": "source.lua"
	},
	"explodeCar": {
		"body": "bool result = explodeCar(Vehicle car)",
		"description": "GTA SA  020B",
		"prefix": "explodeCar",
		"scope": "source.lua"
	},
	"addExplosion": {
		"body": "bool result = addExplosion(float atX, float atY, float atZ, int radius)",
		"description": "GTA SA  020C",
		"prefix": "addExplosion",
		"scope": "source.lua"
	},
	"isCarUpright": {
		"body": "bool result = isCarUpright(Vehicle car)",
		"description": "GTA SA  020D",
		"prefix": "isCarUpright",
		"scope": "source.lua"
	},
	"createPickup": {
		"body": "bool result, Pickup pickup = createPickup(Model modelId, int type, float atX, float atY, float atZ)",
		"description": "GTA SA  0213",
		"prefix": "createPickup",
		"scope": "source.lua"
	},
	"hasPickupBeenCollected": {
		"body": "bool result = hasPickupBeenCollected(Pickup pickup)",
		"description": "GTA SA  0214",
		"prefix": "hasPickupBeenCollected",
		"scope": "source.lua"
	},
	"removePickup": {
		"body": "bool result = removePickup(Pickup pickup)",
		"description": "GTA SA  0215",
		"prefix": "removePickup",
		"scope": "source.lua"
	},
	"setTaxiLights": {
		"body": "bool result = setTaxiLights(Vehicle taxi, bool light)",
		"description": "GTA SA  0216",
		"prefix": "setTaxiLights",
		"scope": "source.lua"
	},
	"printBigQ": {
		"body": "bool result = printBigQ(GxtString gxtString, int time, int style)",
		"description": "GTA SA  0217",
		"prefix": "printBigQ",
		"scope": "source.lua"
	},
	"setTargetCarForMissionGarage": {
		"body": "bool result = setTargetCarForMissionGarage(GxtString garage, Vehicle car)",
		"description": "GTA SA  021B",
		"prefix": "setTargetCarForMissionGarage",
		"scope": "source.lua"
	},
	"applyBrakesToPlayersCar": {
		"body": "bool result = applyBrakesToPlayersCar(Player player, bool apply)",
		"description": "GTA SA  0221",
		"prefix": "applyBrakesToPlayersCar",
		"scope": "source.lua"
	},
	"setCharHealth": {
		"body": "setCharHealth(Ped ped, int health)",
		"description": "GTA SA  0223",
		"prefix": "setCharHealth",
		"scope": "source.lua"
	},
	"setCarHealth": {
		"body": "setCarHealth(Vehicle car, int health)",
		"description": "GTA SA  0224",
		"prefix": "setCarHealth",
		"scope": "source.lua"
	},
	"getCharHealth": {
		"body": "int health = getCharHealth(Ped ped)",
		"description": "GTA SA  0226",
		"prefix": "getCharHealth",
		"scope": "source.lua"
	},
	"getCarHealth": {
		"body": "int health = getCarHealth(Vehicle car)",
		"description": "GTA SA  0227",
		"prefix": "getCarHealth",
		"scope": "source.lua"
	},
	"changeCarColour": {
		"body": "bool result = changeCarColour(Vehicle car, int primaryColor, int secondaryColor)",
		"description": "GTA SA  0229",
		"prefix": "changeCarColour",
		"scope": "source.lua"
	},
	"switchPedRoadsOn": {
		"body": "switchPedRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  022A",
		"prefix": "switchPedRoadsOn",
		"scope": "source.lua"
	},
	"switchPedRoadsOff": {
		"body": "switchPedRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  022B",
		"prefix": "switchPedRoadsOff",
		"scope": "source.lua"
	},
	"setGangWeapons": {
		"body": "setGangWeapons(int gang, int weapons1, int weapons2, int weapons3)",
		"description": "GTA SA  0237",
		"prefix": "setGangWeapons",
		"scope": "source.lua"
	},
	"isCharTouchingObjectOnFoot": {
		"body": "bool result = isCharTouchingObjectOnFoot(Ped ped, Object object)",
		"description": "GTA SA  023B",
		"prefix": "isCharTouchingObjectOnFoot",
		"scope": "source.lua"
	},
	"loadSpecialCharacter": {
		"body": "loadSpecialCharacter(GxtString gxtString, int id)",
		"description": "GTA SA  023C",
		"prefix": "loadSpecialCharacter",
		"scope": "source.lua"
	},
	"hasSpecialCharacterLoaded": {
		"body": "bool result = hasSpecialCharacterLoaded(int id)",
		"description": "GTA SA  023D",
		"prefix": "hasSpecialCharacterLoaded",
		"scope": "source.lua"
	},
	"isPlayerInRemoteMode": {
		"body": "bool result = isPlayerInRemoteMode(Player player)",
		"description": "GTA SA  0241",
		"prefix": "isPlayerInRemoteMode",
		"scope": "source.lua"
	},
	"setCutsceneOffset": {
		"body": "setCutsceneOffset(float posX, float posY, float posZ)",
		"description": "GTA SA  0244",
		"prefix": "setCutsceneOffset",
		"scope": "source.lua"
	},
	"setAnimGroupForChar": {
		"body": "setAnimGroupForChar(Ped ped, string style)",
		"description": "GTA SA  0245",
		"prefix": "setAnimGroupForChar",
		"scope": "source.lua"
	},
	"requestModel": {
		"body": "requestModel(Model modelId)",
		"description": "GTA SA  0247",
		"prefix": "requestModel",
		"scope": "source.lua"
	},
	"hasModelLoaded": {
		"body": "bool result = hasModelLoaded(Model modelId)",
		"description": "GTA SA  0248",
		"prefix": "hasModelLoaded",
		"scope": "source.lua"
	},
	"markModelAsNoLongerNeeded": {
		"body": "markModelAsNoLongerNeeded(Model modelId)",
		"description": "GTA SA  0249",
		"prefix": "markModelAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"drawCorona": {
		"body": "drawCorona(float atX, float atY, float atZ, float radius, int type, bool lensflares, int r, int g, int b)",
		"description": "GTA SA  024F",
		"prefix": "drawCorona",
		"scope": "source.lua"
	},
	"storeClock": {
		"body": "storeClock()",
		"description": "GTA SA  0253",
		"prefix": "storeClock",
		"scope": "source.lua"
	},
	"restoreClock": {
		"body": "restoreClock()",
		"description": "GTA SA  0254",
		"prefix": "restoreClock",
		"scope": "source.lua"
	},
	"isPlayerPlaying": {
		"body": "bool result = isPlayerPlaying(Player player)",
		"description": "GTA SA  0256",
		"prefix": "isPlayerPlaying",
		"scope": "source.lua"
	},
	"getControllerMode": {
		"body": "int mode = getControllerMode()",
		"description": "GTA SA  0293",
		"prefix": "getControllerMode",
		"scope": "source.lua"
	},
	"setCanResprayCar": {
		"body": "setCanResprayCar(Vehicle car, bool sprayable)",
		"description": "GTA SA  0294",
		"prefix": "setCanResprayCar",
		"scope": "source.lua"
	},
	"unloadSpecialCharacter": {
		"body": "unloadSpecialCharacter(int id)",
		"description": "GTA SA  0296",
		"prefix": "unloadSpecialCharacter",
		"scope": "source.lua"
	},
	"resetNumOfModelsKilledByPlayer": {
		"body": "resetNumOfModelsKilledByPlayer(Player player)",
		"description": "GTA SA  0297",
		"prefix": "resetNumOfModelsKilledByPlayer",
		"scope": "source.lua"
	},
	"getNumOfModelsKilledByPlayer": {
		"body": "int quantity = getNumOfModelsKilledByPlayer(Player player, Model modelId)",
		"description": "GTA SA  0298",
		"prefix": "getNumOfModelsKilledByPlayer",
		"scope": "source.lua"
	},
	"activateGarage": {
		"body": "activateGarage(GxtString garage)",
		"description": "GTA SA  0299",
		"prefix": "activateGarage",
		"scope": "source.lua"
	},
	"createObjectNoOffset": {
		"body": "Object object = createObjectNoOffset(Model modelId, float atX, float atY, float atZ)",
		"description": "GTA SA  029B",
		"prefix": "createObjectNoOffset",
		"scope": "source.lua"
	},
	"isCharStopped": {
		"body": "bool result = isCharStopped(Ped ped)",
		"description": "GTA SA  02A0",
		"prefix": "isCharStopped",
		"scope": "source.lua"
	},
	"switchWidescreen": {
		"body": "switchWidescreen(bool enable)",
		"description": "GTA SA  02A3",
		"prefix": "switchWidescreen",
		"scope": "source.lua"
	},
	"addSpriteBlipForContactPoint": {
		"body": "Marker marker = addSpriteBlipForContactPoint(float atX, float atY, float atZ, int icon)",
		"description": "GTA SA  02A7",
		"prefix": "addSpriteBlipForContactPoint",
		"scope": "source.lua"
	},
	"addSpriteBlipForCoord": {
		"body": "Marker marker = addSpriteBlipForCoord(float atX, float atY, float atZ, int type)",
		"description": "GTA SA  02A8",
		"prefix": "addSpriteBlipForCoord",
		"scope": "source.lua"
	},
	"setCharOnlyDamagedByPlayer": {
		"body": "setCharOnlyDamagedByPlayer(Ped ped, bool enabled)",
		"description": "GTA SA  02A9",
		"prefix": "setCharOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"setCarOnlyDamagedByPlayer": {
		"body": "setCarOnlyDamagedByPlayer(Vehicle car, bool enabled)",
		"description": "GTA SA  02AA",
		"prefix": "setCarOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"setCharProofs": {
		"body": "setCharProofs(Ped ped, bool BP, bool FP, bool EP, bool CP, bool MP)",
		"description": "GTA SA  02AB",
		"prefix": "setCharProofs",
		"scope": "source.lua"
	},
	"setCarProofs": {
		"body": "setCarProofs(Vehicle car, bool BP, bool FP, bool EP, bool CP, bool MP)",
		"description": "GTA SA  02AC",
		"prefix": "setCarProofs",
		"scope": "source.lua"
	},
	"deactivateGarage": {
		"body": "deactivateGarage(GxtString garage)",
		"description": "GTA SA  02B9",
		"prefix": "deactivateGarage",
		"scope": "source.lua"
	},
	"isCarInWater": {
		"body": "bool result = isCarInWater(Vehicle car)",
		"description": "GTA SA  02BF",
		"prefix": "isCarInWater",
		"scope": "source.lua"
	},
	"getClosestCharNode": {
		"body": "float nodeX, float nodeY, float nodeZ = getClosestCharNode(float closestToX, float closestToY, float closestToZ)",
		"description": "GTA SA  02C0",
		"prefix": "getClosestCharNode",
		"scope": "source.lua"
	},
	"getClosestCarNode": {
		"body": "float nodeX, float nodeY, float nodeZ = getClosestCarNode(float closestToX, float closestToY, float closestToZ)",
		"description": "GTA SA  02C1",
		"prefix": "getClosestCarNode",
		"scope": "source.lua"
	},
	"carGotoCoordinatesAccurate": {
		"body": "carGotoCoordinatesAccurate(Vehicle car, float toX, float toY, float toZ)",
		"description": "GTA SA  02C2",
		"prefix": "carGotoCoordinatesAccurate",
		"scope": "source.lua"
	},
	"isCarOnScreen": {
		"body": "bool result = isCarOnScreen(Vehicle car)",
		"description": "GTA SA  02CA",
		"prefix": "isCarOnScreen",
		"scope": "source.lua"
	},
	"isCharOnScreen": {
		"body": "bool result = isCharOnScreen(Ped ped)",
		"description": "GTA SA  02CB",
		"prefix": "isCharOnScreen",
		"scope": "source.lua"
	},
	"isObjectOnScreen": {
		"body": "bool result = isObjectOnScreen(Object object)",
		"description": "GTA SA  02CC",
		"prefix": "isObjectOnScreen",
		"scope": "source.lua"
	},
	"getGroundZFor3dCoord": {
		"body": "float z = getGroundZFor3dCoord(float atX, float atY, float atZ)",
		"description": "GTA SA  02CE",
		"prefix": "getGroundZFor3dCoord",
		"scope": "source.lua"
	},
	"startScriptFire": {
		"body": "int fire = startScriptFire(float atX, float atY, float atZ, int propagation, int size)",
		"description": "GTA SA  02CF",
		"prefix": "startScriptFire",
		"scope": "source.lua"
	},
	"isScriptFireExtinguished": {
		"body": "bool result = isScriptFireExtinguished(int fire)",
		"description": "GTA SA  02D0",
		"prefix": "isScriptFireExtinguished",
		"scope": "source.lua"
	},
	"removeScriptFire": {
		"body": "removeScriptFire(int fire)",
		"description": "GTA SA  02D1",
		"prefix": "removeScriptFire",
		"scope": "source.lua"
	},
	"boatGotoCoords": {
		"body": "boatGotoCoords(Vehicle boat, float toX, float toY, float toZ)",
		"description": "GTA SA  02D3",
		"prefix": "boatGotoCoords",
		"scope": "source.lua"
	},
	"boatStop": {
		"body": "boatStop(Vehicle car)",
		"description": "GTA SA  02D4",
		"prefix": "boatStop",
		"scope": "source.lua"
	},
	"isCharShootingInArea": {
		"body": "bool result = isCharShootingInArea(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, int weapon)",
		"description": "GTA SA  02D6",
		"prefix": "isCharShootingInArea",
		"scope": "source.lua"
	},
	"isCurrentCharWeapon": {
		"body": "bool result = isCurrentCharWeapon(Ped ped, int weapon)",
		"description": "GTA SA  02D8",
		"prefix": "isCurrentCharWeapon",
		"scope": "source.lua"
	},
	"setBoatCruiseSpeed": {
		"body": "setBoatCruiseSpeed(Vehicle boat, float speed)",
		"description": "GTA SA  02DB",
		"prefix": "setBoatCruiseSpeed",
		"scope": "source.lua"
	},
	"getRandomCharInZone": {
		"body": "Ped ped = getRandomCharInZone(GxtString zone, bool pedtype, bool gang, bool criminal_prostitute)",
		"description": "GTA SA  02DD",
		"prefix": "getRandomCharInZone",
		"scope": "source.lua"
	},
	"isCharShooting": {
		"body": "bool result = isCharShooting(Ped ped)",
		"description": "GTA SA  02E0",
		"prefix": "isCharShooting",
		"scope": "source.lua"
	},
	"createMoneyPickup": {
		"body": "Pickup pickup = createMoneyPickup(float atX, float atY, float atZ, int cash, bool permanenceFlag)",
		"description": "GTA SA  02E1",
		"prefix": "createMoneyPickup",
		"scope": "source.lua"
	},
	"setCharAccuracy": {
		"body": "setCharAccuracy(Ped ped, int accuracy)",
		"description": "GTA SA  02E2",
		"prefix": "setCharAccuracy",
		"scope": "source.lua"
	},
	"getCarSpeed": {
		"body": "float speed = getCarSpeed(Vehicle car)",
		"description": "GTA SA  02E3",
		"prefix": "getCarSpeed",
		"scope": "source.lua"
	},
	"loadCutscene": {
		"body": "loadCutscene(GxtString cutscene)",
		"description": "GTA SA  02E4",
		"prefix": "loadCutscene",
		"scope": "source.lua"
	},
	"createCutsceneObject": {
		"body": "Object object = createCutsceneObject(Model modelId)",
		"description": "GTA SA  02E5",
		"prefix": "createCutsceneObject",
		"scope": "source.lua"
	},
	"setCutsceneAnim": {
		"body": "setCutsceneAnim(int cutscene, GxtString anim)",
		"description": "GTA SA  02E6",
		"prefix": "setCutsceneAnim",
		"scope": "source.lua"
	},
	"startCutscene": {
		"body": "startCutscene()",
		"description": "GTA SA  02E7",
		"prefix": "startCutscene",
		"scope": "source.lua"
	},
	"getCutsceneTime": {
		"body": "int time = getCutsceneTime()",
		"description": "GTA SA  02E8",
		"prefix": "getCutsceneTime",
		"scope": "source.lua"
	},
	"hasCutsceneFinished": {
		"body": "bool result = hasCutsceneFinished()",
		"description": "GTA SA  02E9",
		"prefix": "hasCutsceneFinished",
		"scope": "source.lua"
	},
	"clearCutscene": {
		"body": "clearCutscene()",
		"description": "GTA SA  02EA",
		"prefix": "clearCutscene",
		"scope": "source.lua"
	},
	"restoreCameraJumpcut": {
		"body": "restoreCameraJumpcut()",
		"description": "GTA SA  02EB",
		"prefix": "restoreCameraJumpcut",
		"scope": "source.lua"
	},
	"setCollectable1Total": {
		"body": "setCollectable1Total(int total)",
		"description": "GTA SA  02ED",
		"prefix": "setCollectable1Total",
		"scope": "source.lua"
	},
	"isProjectileInArea": {
		"body": "bool result = isProjectileInArea(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  02EE",
		"prefix": "isProjectileInArea",
		"scope": "source.lua"
	},
	"isCharModel": {
		"body": "bool result = isCharModel(Ped ped, Model modelId)",
		"description": "GTA SA  02F2",
		"prefix": "isCharModel",
		"scope": "source.lua"
	},
	"loadSpecialModel": {
		"body": "loadSpecialModel(Model modelId, GxtString gxtString)",
		"description": "GTA SA  02F3",
		"prefix": "loadSpecialModel",
		"scope": "source.lua"
	},
	"getCarForwardX": {
		"body": "float forwardX = getCarForwardX(Vehicle car)",
		"description": "GTA SA  02F8",
		"prefix": "getCarForwardX",
		"scope": "source.lua"
	},
	"getCarForwardY": {
		"body": "float forwardY = getCarForwardY(Vehicle car)",
		"description": "GTA SA  02F9",
		"prefix": "getCarForwardY",
		"scope": "source.lua"
	},
	"changeGarageType": {
		"body": "changeGarageType(GxtString garage, int type)",
		"description": "GTA SA  02FA",
		"prefix": "changeGarageType",
		"scope": "source.lua"
	},
	"printWith2NumbersNow": {
		"body": "printWith2NumbersNow(GxtString gxtString, int numbers1, int numbers2, int time, int flag)",
		"description": "GTA SA  02FD",
		"prefix": "printWith2NumbersNow",
		"scope": "source.lua"
	},
	"printWith3Numbers": {
		"body": "printWith3Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int time, int flag)",
		"description": "GTA SA  02FF",
		"prefix": "printWith3Numbers",
		"scope": "source.lua"
	},
	"printWith4Numbers": {
		"body": "printWith4Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)",
		"description": "GTA SA  0302",
		"prefix": "printWith4Numbers",
		"scope": "source.lua"
	},
	"printWith4NumbersNow": {
		"body": "printWith4NumbersNow(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)",
		"description": "GTA SA  0303",
		"prefix": "printWith4NumbersNow",
		"scope": "source.lua"
	},
	"printWith6Numbers": {
		"body": "printWith6Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int numbers5, int numbers6, int time, int flag)",
		"description": "GTA SA  0308",
		"prefix": "printWith6Numbers",
		"scope": "source.lua"
	},
	"playerMadeProgress": {
		"body": "playerMadeProgress(int progress)",
		"description": "GTA SA  030C",
		"prefix": "playerMadeProgress",
		"scope": "source.lua"
	},
	"setProgressTotal": {
		"body": "setProgressTotal(int maxProgress)",
		"description": "GTA SA  030D",
		"prefix": "setProgressTotal",
		"scope": "source.lua"
	},
	"registerMissionGiven": {
		"body": "registerMissionGiven()",
		"description": "GTA SA  0317",
		"prefix": "registerMissionGiven",
		"scope": "source.lua"
	},
	"registerMissionPassed": {
		"body": "registerMissionPassed(GxtString mission)",
		"description": "GTA SA  0318",
		"prefix": "registerMissionPassed",
		"scope": "source.lua"
	},
	"removeAllScriptFires": {
		"body": "removeAllScriptFires()",
		"description": "GTA SA  031A",
		"prefix": "removeAllScriptFires",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByWeapon": {
		"body": "bool result = hasCharBeenDamagedByWeapon(Ped ped, int weapon)",
		"description": "GTA SA  031D",
		"prefix": "hasCharBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByWeapon": {
		"body": "bool result = hasCarBeenDamagedByWeapon(Vehicle car, int weapon)",
		"description": "GTA SA  031E",
		"prefix": "hasCarBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"explodeCharHead": {
		"body": "explodeCharHead(Ped ped)",
		"description": "GTA SA  0321",
		"prefix": "explodeCharHead",
		"scope": "source.lua"
	},
	"anchorBoat": {
		"body": "anchorBoat(Vehicle boat, bool anchor)",
		"description": "GTA SA  0323",
		"prefix": "anchorBoat",
		"scope": "source.lua"
	},
	"startCarFire": {
		"body": "int fire = startCarFire(Vehicle car)",
		"description": "GTA SA  0325",
		"prefix": "startCarFire",
		"scope": "source.lua"
	},
	"startCharFire": {
		"body": "int fire = startCharFire(Ped ped)",
		"description": "GTA SA  0326",
		"prefix": "startCharFire",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInArea": {
		"body": "Vehicle car = getRandomCarOfTypeInArea(float cornerAX, float cornerAY, float cornerBX, float cornerBY, Model modelId)",
		"description": "GTA SA  0327",
		"prefix": "getRandomCarOfTypeInArea",
		"scope": "source.lua"
	},
	"hasResprayHappened": {
		"body": "bool result = hasResprayHappened(Vehicle car)",
		"description": "GTA SA  0329",
		"prefix": "hasResprayHappened",
		"scope": "source.lua"
	},
	"setCameraZoom": {
		"body": "setCameraZoom(int mode)",
		"description": "GTA SA  032A",
		"prefix": "setCameraZoom",
		"scope": "source.lua"
	},
	"createPickupWithAmmo": {
		"body": "Pickup pickup = createPickupWithAmmo(Model modelId, int type, int ammo, float atX, float atY, float atZ)",
		"description": "GTA SA  032B",
		"prefix": "createPickupWithAmmo",
		"scope": "source.lua"
	},
	"setCarRamCar": {
		"body": "setCarRamCar(Vehicle car, Vehicle car)",
		"description": "GTA SA  032C",
		"prefix": "setCarRamCar",
		"scope": "source.lua"
	},
	"setPlayerNeverGetsTired": {
		"body": "setPlayerNeverGetsTired(Player player, bool infiniteRun)",
		"description": "GTA SA  0330",
		"prefix": "setPlayerNeverGetsTired",
		"scope": "source.lua"
	},
	"setPlayerFastReload": {
		"body": "setPlayerFastReload(Player player, bool fastReload)",
		"description": "GTA SA  0331",
		"prefix": "setPlayerFastReload",
		"scope": "source.lua"
	},
	"setCharBleeding": {
		"body": "setCharBleeding(Ped ped, bool bleeding)",
		"description": "GTA SA  0332",
		"prefix": "setCharBleeding",
		"scope": "source.lua"
	},
	"setFreeResprays": {
		"body": "setFreeResprays(bool enable)",
		"description": "GTA SA  0335",
		"prefix": "setFreeResprays",
		"scope": "source.lua"
	},
	"setCharVisible": {
		"body": "setCharVisible(Ped ped, bool visible)",
		"description": "GTA SA  0337",
		"prefix": "setCharVisible",
		"scope": "source.lua"
	},
	"setCarVisible": {
		"body": "setCarVisible(Vehicle car, bool visible)",
		"description": "GTA SA  0338",
		"prefix": "setCarVisible",
		"scope": "source.lua"
	},
	"isAreaOccupied": {
		"body": "bool result = isAreaOccupied(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool solid, bool car, bool actor, bool object, bool particle)",
		"description": "GTA SA  0339",
		"prefix": "isAreaOccupied",
		"scope": "source.lua"
	},
	"displayText": {
		"body": "displayText(float posX, float posY, GxtString gxtString)",
		"description": "GTA SA  033E",
		"prefix": "displayText",
		"scope": "source.lua"
	},
	"setTextScale": {
		"body": "setTextScale(float sizeX, float sizeY)",
		"description": "GTA SA  033F",
		"prefix": "setTextScale",
		"scope": "source.lua"
	},
	"setTextColour": {
		"body": "setTextColour(int r, int g, int b, int a)",
		"description": "GTA SA  0340",
		"prefix": "setTextColour",
		"scope": "source.lua"
	},
	"setTextJustify": {
		"body": "setTextJustify(bool alignJustify)",
		"description": "GTA SA  0341",
		"prefix": "setTextJustify",
		"scope": "source.lua"
	},
	"setTextCentre": {
		"body": "setTextCentre(bool centered)",
		"description": "GTA SA  0342",
		"prefix": "setTextCentre",
		"scope": "source.lua"
	},
	"setTextWrapx": {
		"body": "setTextWrapx(float linewidth)",
		"description": "GTA SA  0343",
		"prefix": "setTextWrapx",
		"scope": "source.lua"
	},
	"setTextCentreSize": {
		"body": "setTextCentreSize(float linewidth)",
		"description": "GTA SA  0344",
		"prefix": "setTextCentreSize",
		"scope": "source.lua"
	},
	"setTextBackground": {
		"body": "setTextBackground(bool background)",
		"description": "GTA SA  0345",
		"prefix": "setTextBackground",
		"scope": "source.lua"
	},
	"setTextProportional": {
		"body": "setTextProportional(bool proportional)",
		"description": "GTA SA  0348",
		"prefix": "setTextProportional",
		"scope": "source.lua"
	},
	"setTextFont": {
		"body": "setTextFont(int font)",
		"description": "GTA SA  0349",
		"prefix": "setTextFont",
		"scope": "source.lua"
	},
	"rotateObject": {
		"body": "bool result = rotateObject(Object object, float fromAngle, float toAngle, bool flag)",
		"description": "GTA SA  034D",
		"prefix": "rotateObject",
		"scope": "source.lua"
	},
	"slideObject": {
		"body": "bool result = slideObject(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collisionCheck)",
		"description": "GTA SA  034E",
		"prefix": "slideObject",
		"scope": "source.lua"
	},
	"removeCharElegantly": {
		"body": "removeCharElegantly(Ped ped)",
		"description": "GTA SA  034F",
		"prefix": "removeCharElegantly",
		"scope": "source.lua"
	},
	"setCharStayInSamePlace": {
		"body": "setCharStayInSamePlace(Ped ped, bool enabled)",
		"description": "GTA SA  0350",
		"prefix": "setCharStayInSamePlace",
		"scope": "source.lua"
	},
	"isExplosionInArea": {
		"body": "bool result = isExplosionInArea(int explosionType, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  0356",
		"prefix": "isExplosionInArea",
		"scope": "source.lua"
	},
	"placeObjectRelativeToCar": {
		"body": "placeObjectRelativeToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  035C",
		"prefix": "placeObjectRelativeToCar",
		"scope": "source.lua"
	},
	"makeObjectTargettable": {
		"body": "makeObjectTargettable(Object object, bool targetable)",
		"description": "GTA SA  035D",
		"prefix": "makeObjectTargettable",
		"scope": "source.lua"
	},
	"addArmourToChar": {
		"body": "addArmourToChar(Ped ped, int points)",
		"description": "GTA SA  035F",
		"prefix": "addArmourToChar",
		"scope": "source.lua"
	},
	"openGarage": {
		"body": "openGarage(GxtString garage)",
		"description": "GTA SA  0360",
		"prefix": "openGarage",
		"scope": "source.lua"
	},
	"closeGarage": {
		"body": "closeGarage(GxtString garage)",
		"description": "GTA SA  0361",
		"prefix": "closeGarage",
		"scope": "source.lua"
	},
	"warpCharFromCarToCoord": {
		"body": "warpCharFromCarToCoord(Ped ped, float placeAtX, float placeAtY, float placeAtZ)",
		"description": "GTA SA  0362",
		"prefix": "warpCharFromCarToCoord",
		"scope": "source.lua"
	},
	"setVisibilityOfClosestObjectOfType": {
		"body": "setVisibilityOfClosestObjectOfType(float atX, float atY, float atZ, float radius, Model modelId, bool visibility)",
		"description": "GTA SA  0363",
		"prefix": "setVisibilityOfClosestObjectOfType",
		"scope": "source.lua"
	},
	"hasCharSpottedChar": {
		"body": "bool result = hasCharSpottedChar(Ped ped, Ped ped)",
		"description": "GTA SA  0364",
		"prefix": "hasCharSpottedChar",
		"scope": "source.lua"
	},
	"hasObjectBeenDamaged": {
		"body": "bool result = hasObjectBeenDamaged(Object object)",
		"description": "GTA SA  0366",
		"prefix": "hasObjectBeenDamaged",
		"scope": "source.lua"
	},
	"warpCharIntoCar": {
		"body": "warpCharIntoCar(Ped ped, Vehicle car)",
		"description": "GTA SA  036A",
		"prefix": "warpCharIntoCar",
		"scope": "source.lua"
	},
	"printWith2NumbersBig": {
		"body": "printWith2NumbersBig(GxtString gxtString, int numbers1, int numbers2, int time, int style)",
		"description": "GTA SA  036D",
		"prefix": "printWith2NumbersBig",
		"scope": "source.lua"
	},
	"setCameraBehindPlayer": {
		"body": "setCameraBehindPlayer()",
		"description": "GTA SA  0373",
		"prefix": "setCameraBehindPlayer",
		"scope": "source.lua"
	},
	"createRandomChar": {
		"body": "Ped ped = createRandomChar(float atX, float atY, float atZ)",
		"description": "GTA SA  0376",
		"prefix": "createRandomChar",
		"scope": "source.lua"
	},
	"isSniperBulletInArea": {
		"body": "bool result = isSniperBulletInArea(float float1, float float2, float float3, float float4, float float5, float float6)",
		"description": "GTA SA  037E",
		"prefix": "isSniperBulletInArea",
		"scope": "source.lua"
	},
	"setObjectVelocity": {
		"body": "setObjectVelocity(Object object, float velocityInDirectionX, float velocityInDirectionY, float velocityInDirectionZ)",
		"description": "GTA SA  0381",
		"prefix": "setObjectVelocity",
		"scope": "source.lua"
	},
	"setObjectCollision": {
		"body": "setObjectCollision(Object object, bool collision)",
		"description": "GTA SA  0382",
		"prefix": "setObjectCollision",
		"scope": "source.lua"
	},
	"printStringInStringNow": {
		"body": "printStringInStringNow(GxtString gxtString, GxtString string, int time1, int time2)",
		"description": "GTA SA  0384",
		"prefix": "printStringInStringNow",
		"scope": "source.lua"
	},
	"isPointObscuredByAMissionEntity": {
		"body": "bool result = isPointObscuredByAMissionEntity(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  038A",
		"prefix": "isPointObscuredByAMissionEntity",
		"scope": "source.lua"
	},
	"loadAllModelsNow": {
		"body": "loadAllModelsNow()",
		"description": "GTA SA  038B",
		"prefix": "loadAllModelsNow",
		"scope": "source.lua"
	},
	"addToObjectVelocity": {
		"body": "addToObjectVelocity(Object object, float velocityX, float velocityY, float velocityZ)",
		"description": "GTA SA  038C",
		"prefix": "addToObjectVelocity",
		"scope": "source.lua"
	},
	"drawSprite": {
		"body": "drawSprite(int texture, float positionX, float positionY, float width, float height, int r, int g, int b, int a)",
		"description": "GTA SA  038D",
		"prefix": "drawSprite",
		"scope": "source.lua"
	},
	"drawRect": {
		"body": "drawRect(float positionX, float positionY, float width, float height, int r, int g, int b, int a)",
		"description": "GTA SA  038E",
		"prefix": "drawRect",
		"scope": "source.lua"
	},
	"loadSprite": {
		"body": "int id = loadSprite(string name)",
		"description": "GTA SA  038F",
		"prefix": "loadSprite",
		"scope": "source.lua"
	},
	"loadTextureDictionary": {
		"body": "bool result = loadTextureDictionary(zstring txd)",
		"description": "GTA SA  0390",
		"prefix": "loadTextureDictionary",
		"scope": "source.lua"
	},
	"removeTextureDictionary": {
		"body": "removeTextureDictionary()",
		"description": "GTA SA  0391",
		"prefix": "removeTextureDictionary",
		"scope": "source.lua"
	},
	"setObjectDynamic": {
		"body": "setObjectDynamic(Object object, bool moveable)",
		"description": "GTA SA  0392",
		"prefix": "setObjectDynamic",
		"scope": "source.lua"
	},
	"setCharAnimSpeed": {
		"body": "setCharAnimSpeed(Ped ped, string animation, float speed)",
		"description": "GTA SA  0393",
		"prefix": "setCharAnimSpeed",
		"scope": "source.lua"
	},
	"playMissionPassedTune": {
		"body": "playMissionPassedTune(int music)",
		"description": "GTA SA  0394",
		"prefix": "playMissionPassedTune",
		"scope": "source.lua"
	},
	"clearArea": {
		"body": "clearArea(float atX, float atY, float atZ, float radius, bool area)",
		"description": "GTA SA  0395",
		"prefix": "clearArea",
		"scope": "source.lua"
	},
	"freezeOnscreenTimer": {
		"body": "freezeOnscreenTimer(bool timer)",
		"description": "GTA SA  0396",
		"prefix": "freezeOnscreenTimer",
		"scope": "source.lua"
	},
	"switchCarSiren": {
		"body": "switchCarSiren(Vehicle car, bool siren)",
		"description": "GTA SA  0397",
		"prefix": "switchCarSiren",
		"scope": "source.lua"
	},
	"setCarWatertight": {
		"body": "setCarWatertight(Vehicle car, bool watertight)",
		"description": "GTA SA  039C",
		"prefix": "setCarWatertight",
		"scope": "source.lua"
	},
	"setCharCantBeDraggedOut": {
		"body": "setCharCantBeDraggedOut(Ped ped, bool locked)",
		"description": "GTA SA  039E",
		"prefix": "setCharCantBeDraggedOut",
		"scope": "source.lua"
	},
	"turnCarToFaceCoord": {
		"body": "turnCarToFaceCoord(Vehicle car, float coordX, float coordY)",
		"description": "GTA SA  039F",
		"prefix": "turnCarToFaceCoord",
		"scope": "source.lua"
	},
	"drawSphere": {
		"body": "drawSphere(float atX, float atY, float atZ, float radius)",
		"description": "GTA SA  03A1",
		"prefix": "drawSphere",
		"scope": "source.lua"
	},
	"setCarStatus": {
		"body": "setCarStatus(Vehicle car, int action)",
		"description": "GTA SA  03A2",
		"prefix": "setCarStatus",
		"scope": "source.lua"
	},
	"isCharMale": {
		"body": "bool result = isCharMale(Ped ped)",
		"description": "GTA SA  03A3",
		"prefix": "isCharMale",
		"scope": "source.lua"
	},
	"policeRadioMessage": {
		"body": "policeRadioMessage(float float1, float float2, float float3)",
		"description": "GTA SA  03AA",
		"prefix": "policeRadioMessage",
		"scope": "source.lua"
	},
	"setCarStrong": {
		"body": "setCarStrong(Vehicle car, bool strong)",
		"description": "GTA SA  03AB",
		"prefix": "setCarStrong",
		"scope": "source.lua"
	},
	"switchRubbish": {
		"body": "switchRubbish(bool int1)",
		"description": "GTA SA  03AD",
		"prefix": "switchRubbish",
		"scope": "source.lua"
	},
	"switchStreaming": {
		"body": "switchStreaming(bool streaming)",
		"description": "GTA SA  03AF",
		"prefix": "switchStreaming",
		"scope": "source.lua"
	},
	"isGarageOpen": {
		"body": "bool result = isGarageOpen(GxtString garage)",
		"description": "GTA SA  03B0",
		"prefix": "isGarageOpen",
		"scope": "source.lua"
	},
	"isGarageClosed": {
		"body": "bool result = isGarageClosed(GxtString garage)",
		"description": "GTA SA  03B1",
		"prefix": "isGarageClosed",
		"scope": "source.lua"
	},
	"swapNearestBuildingModel": {
		"body": "swapNearestBuildingModel(float atX, float atY, float atZ, float radius, Model from, Model to)",
		"description": "GTA SA  03B6",
		"prefix": "swapNearestBuildingModel",
		"scope": "source.lua"
	},
	"switchWorldProcessing": {
		"body": "switchWorldProcessing(bool cutsceneOnly)",
		"description": "GTA SA  03B7",
		"prefix": "switchWorldProcessing",
		"scope": "source.lua"
	},
	"clearAreaOfCars": {
		"body": "clearAreaOfCars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  03BA",
		"prefix": "clearAreaOfCars",
		"scope": "source.lua"
	},
	"addSphere": {
		"body": "int sphere = addSphere(float atX, float atY, float atZ, float radius)",
		"description": "GTA SA  03BC",
		"prefix": "addSphere",
		"scope": "source.lua"
	},
	"removeSphere": {
		"body": "removeSphere(int sphere)",
		"description": "GTA SA  03BD",
		"prefix": "removeSphere",
		"scope": "source.lua"
	},
	"setEveryoneIgnorePlayer": {
		"body": "setEveryoneIgnorePlayer(Player player, bool ignored)",
		"description": "GTA SA  03BF",
		"prefix": "setEveryoneIgnorePlayer",
		"scope": "source.lua"
	},
	"storeCarCharIsInNoSave": {
		"body": "Vehicle car = storeCarCharIsInNoSave(Ped ped)",
		"description": "GTA SA  03C0",
		"prefix": "storeCarCharIsInNoSave",
		"scope": "source.lua"
	},
	"displayOnscreenTimerWithString": {
		"body": "displayOnscreenTimerWithString(VarId timer, int type, GxtString gxtString)",
		"description": "GTA SA  03C3",
		"prefix": "displayOnscreenTimerWithString",
		"scope": "source.lua"
	},
	"displayOnscreenCounterWithString": {
		"body": "displayOnscreenCounterWithString(VarId var, bool type, GxtString gxtString)",
		"description": "GTA SA  03C4",
		"prefix": "displayOnscreenCounterWithString",
		"scope": "source.lua"
	},
	"createRandomCarForCarPark": {
		"body": "createRandomCarForCarPark(float coordsX, float coordsY, float coordsZ, float zAngle)",
		"description": "GTA SA  03C5",
		"prefix": "createRandomCarForCarPark",
		"scope": "source.lua"
	},
	"setWantedMultiplier": {
		"body": "setWantedMultiplier(float sensitivity)",
		"description": "GTA SA  03C7",
		"prefix": "setWantedMultiplier",
		"scope": "source.lua"
	},
	"setCameraInFrontOfPlayer": {
		"body": "setCameraInFrontOfPlayer()",
		"description": "GTA SA  03C8",
		"prefix": "setCameraInFrontOfPlayer",
		"scope": "source.lua"
	},
	"isCarVisiblyDamaged": {
		"body": "bool result = isCarVisiblyDamaged(Vehicle car)",
		"description": "GTA SA  03C9",
		"prefix": "isCarVisiblyDamaged",
		"scope": "source.lua"
	},
	"doesObjectExist": {
		"body": "bool result = doesObjectExist(Object object)",
		"description": "GTA SA  03CA",
		"prefix": "doesObjectExist",
		"scope": "source.lua"
	},
	"loadScene": {
		"body": "loadScene(float atX, float atY, float atZ)",
		"description": "GTA SA  03CB",
		"prefix": "loadScene",
		"scope": "source.lua"
	},
	"addStuckCarCheck": {
		"body": "addStuckCarCheck(Vehicle car, float stuckCheckDistance, int time)",
		"description": "GTA SA  03CC",
		"prefix": "addStuckCarCheck",
		"scope": "source.lua"
	},
	"removeStuckCarCheck": {
		"body": "removeStuckCarCheck(Vehicle car)",
		"description": "GTA SA  03CD",
		"prefix": "removeStuckCarCheck",
		"scope": "source.lua"
	},
	"isCarStuck": {
		"body": "bool result = isCarStuck(Vehicle car)",
		"description": "GTA SA  03CE",
		"prefix": "isCarStuck",
		"scope": "source.lua"
	},
	"loadMissionAudio": {
		"body": "loadMissionAudio(int asId, int name)",
		"description": "GTA SA  03CF",
		"prefix": "loadMissionAudio",
		"scope": "source.lua"
	},
	"hasMissionAudioLoaded": {
		"body": "bool result = hasMissionAudioLoaded(int id)",
		"description": "GTA SA  03D0",
		"prefix": "hasMissionAudioLoaded",
		"scope": "source.lua"
	},
	"playMissionAudio": {
		"body": "playMissionAudio(int id)",
		"description": "GTA SA  03D1",
		"prefix": "playMissionAudio",
		"scope": "source.lua"
	},
	"hasMissionAudioFinished": {
		"body": "bool result = hasMissionAudioFinished(int id)",
		"description": "GTA SA  03D2",
		"prefix": "hasMissionAudioFinished",
		"scope": "source.lua"
	},
	"getClosestCarNodeWithHeading": {
		"body": "float nodeX, float nodeY, float nodeZ, float angle = getClosestCarNodeWithHeading(float X, float Y, float Z)",
		"description": "GTA SA  03D3",
		"prefix": "getClosestCarNodeWithHeading",
		"scope": "source.lua"
	},
	"hasImportGarageSlotBeenFilled": {
		"body": "bool result = hasImportGarageSlotBeenFilled(int int1, int int2)",
		"description": "GTA SA  03D4",
		"prefix": "hasImportGarageSlotBeenFilled",
		"scope": "source.lua"
	},
	"clearThisPrint": {
		"body": "clearThisPrint(GxtString text)",
		"description": "GTA SA  03D5",
		"prefix": "clearThisPrint",
		"scope": "source.lua"
	},
	"clearThisBigPrint": {
		"body": "clearThisBigPrint(GxtString text)",
		"description": "GTA SA  03D6",
		"prefix": "clearThisBigPrint",
		"scope": "source.lua"
	},
	"setMissionAudioPosition": {
		"body": "setMissionAudioPosition(int id, float locationX, float locationY, float locationZ)",
		"description": "GTA SA  03D7",
		"prefix": "setMissionAudioPosition",
		"scope": "source.lua"
	},
	"activateSaveMenu": {
		"body": "activateSaveMenu()",
		"description": "GTA SA  03D8",
		"prefix": "activateSaveMenu",
		"scope": "source.lua"
	},
	"hasSaveGameFinished": {
		"body": "bool result = hasSaveGameFinished()",
		"description": "GTA SA  03D9",
		"prefix": "hasSaveGameFinished",
		"scope": "source.lua"
	},
	"noSpecialCameraForThisGarage": {
		"body": "noSpecialCameraForThisGarage(int int1)",
		"description": "GTA SA  03DA",
		"prefix": "noSpecialCameraForThisGarage",
		"scope": "source.lua"
	},
	"addBlipForPickup": {
		"body": "Marker marker = addBlipForPickup(Pickup pickup)",
		"description": "GTA SA  03DC",
		"prefix": "addBlipForPickup",
		"scope": "source.lua"
	},
	"setPedDensityMultiplier": {
		"body": "setPedDensityMultiplier(float multiplier)",
		"description": "GTA SA  03DE",
		"prefix": "setPedDensityMultiplier",
		"scope": "source.lua"
	},
	"setTextDrawBeforeFade": {
		"body": "setTextDrawBeforeFade(bool int1)",
		"description": "GTA SA  03E0",
		"prefix": "setTextDrawBeforeFade",
		"scope": "source.lua"
	},
	"getCollectable1sCollected": {
		"body": "int collected = getCollectable1sCollected()",
		"description": "GTA SA  03E1",
		"prefix": "getCollectable1sCollected",
		"scope": "source.lua"
	},
	"setSpritesDrawBeforeFade": {
		"body": "setSpritesDrawBeforeFade(bool antialiased)",
		"description": "GTA SA  03E3",
		"prefix": "setSpritesDrawBeforeFade",
		"scope": "source.lua"
	},
	"setTextRightJustify": {
		"body": "setTextRightJustify(bool alignRight)",
		"description": "GTA SA  03E4",
		"prefix": "setTextRightJustify",
		"scope": "source.lua"
	},
	"printHelp": {
		"body": "printHelp(GxtString gxtString)",
		"description": "GTA SA  03E5",
		"prefix": "printHelp",
		"scope": "source.lua"
	},
	"clearHelp": {
		"body": "clearHelp()",
		"description": "GTA SA  03E6",
		"prefix": "clearHelp",
		"scope": "source.lua"
	},
	"flashHudObject": {
		"body": "flashHudObject(int hudComponent)",
		"description": "GTA SA  03E7",
		"prefix": "flashHudObject",
		"scope": "source.lua"
	},
	"setGenerateCarsAroundCamera": {
		"body": "setGenerateCarsAroundCamera(bool int1)",
		"description": "GTA SA  03EA",
		"prefix": "setGenerateCarsAroundCamera",
		"scope": "source.lua"
	},
	"clearSmallPrints": {
		"body": "clearSmallPrints()",
		"description": "GTA SA  03EB",
		"prefix": "clearSmallPrints",
		"scope": "source.lua"
	},
	"setUpsidedownCarNotDamaged": {
		"body": "setUpsidedownCarNotDamaged(Vehicle car, bool disableFlippedExplosion)",
		"description": "GTA SA  03ED",
		"prefix": "setUpsidedownCarNotDamaged",
		"scope": "source.lua"
	},
	"isPlayerControllable": {
		"body": "bool result = isPlayerControllable(Player player)",
		"description": "GTA SA  03EE",
		"prefix": "isPlayerControllable",
		"scope": "source.lua"
	},
	"makePlayerSafe": {
		"body": "makePlayerSafe(Player player)",
		"description": "GTA SA  03EF",
		"prefix": "makePlayerSafe",
		"scope": "source.lua"
	},
	"getCarColours": {
		"body": "int primaryColor, int secondaryColor = getCarColours(Vehicle car)",
		"description": "GTA SA  03F3",
		"prefix": "getCarColours",
		"scope": "source.lua"
	},
	"setAllCarsCanBeDamaged": {
		"body": "setAllCarsCanBeDamaged(bool enable)",
		"description": "GTA SA  03F4",
		"prefix": "setAllCarsCanBeDamaged",
		"scope": "source.lua"
	},
	"setCarCanBeDamaged": {
		"body": "setCarCanBeDamaged(Vehicle car, bool enable)",
		"description": "GTA SA  03F5",
		"prefix": "setCarCanBeDamaged",
		"scope": "source.lua"
	},
	"setDrunkInputDelay": {
		"body": "setDrunkInputDelay(Player player, int handlingResponsiveness)",
		"description": "GTA SA  03FD",
		"prefix": "setDrunkInputDelay",
		"scope": "source.lua"
	},
	"setCharMoney": {
		"body": "setCharMoney(Ped ped, int money)",
		"description": "GTA SA  03FE",
		"prefix": "setCharMoney",
		"scope": "source.lua"
	},
	"getOffsetFromObjectInWorldCoords": {
		"body": "float X, float Y, float Z = getOffsetFromObjectInWorldCoords(Object object, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  0400",
		"prefix": "getOffsetFromObjectInWorldCoords",
		"scope": "source.lua"
	},
	"getOffsetFromCarInWorldCoords": {
		"body": "float X, float Y, float Z = getOffsetFromCarInWorldCoords(Vehicle car, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  0407",
		"prefix": "getOffsetFromCarInWorldCoords",
		"scope": "source.lua"
	},
	"clearMissionAudio": {
		"body": "clearMissionAudio(int id)",
		"description": "GTA SA  040D",
		"prefix": "clearMissionAudio",
		"scope": "source.lua"
	},
	"setFreeHealthCare": {
		"body": "setFreeHealthCare(Player player, bool free)",
		"description": "GTA SA  0414",
		"prefix": "setFreeHealthCare",
		"scope": "source.lua"
	},
	"loadAndLaunchMissionInternal": {
		"body": "loadAndLaunchMissionInternal(int mission)",
		"description": "GTA SA  0417",
		"prefix": "loadAndLaunchMissionInternal",
		"scope": "source.lua"
	},
	"setObjectDrawLast": {
		"body": "setObjectDrawLast(Object object, bool drawLast)",
		"description": "GTA SA  0418",
		"prefix": "setObjectDrawLast",
		"scope": "source.lua"
	},
	"getAmmoInCharWeapon": {
		"body": "int ammo = getAmmoInCharWeapon(Ped ped, int int)",
		"description": "GTA SA  041A",
		"prefix": "getAmmoInCharWeapon",
		"scope": "source.lua"
	},
	"setNearClip": {
		"body": "setNearClip(float clip)",
		"description": "GTA SA  041D",
		"prefix": "setNearClip",
		"scope": "source.lua"
	},
	"setRadioChannel": {
		"body": "setRadioChannel(int radioStation)",
		"description": "GTA SA  041E",
		"prefix": "setRadioChannel",
		"scope": "source.lua"
	},
	"setCarTraction": {
		"body": "setCarTraction(Vehicle car, float traction)",
		"description": "GTA SA  0423",
		"prefix": "setCarTraction",
		"scope": "source.lua"
	},
	"areMeasurementsInMetres": {
		"body": "bool result = areMeasurementsInMetres()",
		"description": "GTA SA  0424",
		"prefix": "areMeasurementsInMetres",
		"scope": "source.lua"
	},
	"convertMetresToFeet": {
		"body": "float feet = convertMetresToFeet(float meters)",
		"description": "GTA SA  0425",
		"prefix": "convertMetresToFeet",
		"scope": "source.lua"
	},
	"setCarAvoidLevelTransitions": {
		"body": "setCarAvoidLevelTransitions(Vehicle car, bool avoidLevelTransitions)",
		"description": "GTA SA  0428",
		"prefix": "setCarAvoidLevelTransitions",
		"scope": "source.lua"
	},
	"clearAreaOfChars": {
		"body": "clearAreaOfChars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  042B",
		"prefix": "clearAreaOfChars",
		"scope": "source.lua"
	},
	"setTotalNumberOfMissions": {
		"body": "setTotalNumberOfMissions(int totalMissions)",
		"description": "GTA SA  042C",
		"prefix": "setTotalNumberOfMissions",
		"scope": "source.lua"
	},
	"convertMetresToFeetInt": {
		"body": "int imperial = convertMetresToFeetInt(int metric)",
		"description": "GTA SA  042D",
		"prefix": "convertMetresToFeetInt",
		"scope": "source.lua"
	},
	"registerFastestTime": {
		"body": "registerFastestTime(int stat, int to)",
		"description": "GTA SA  042E",
		"prefix": "registerFastestTime",
		"scope": "source.lua"
	},
	"registerHighestScore": {
		"body": "registerHighestScore(int int1, int int2)",
		"description": "GTA SA  042F",
		"prefix": "registerHighestScore",
		"scope": "source.lua"
	},
	"warpCharIntoCarAsPassenger": {
		"body": "warpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerSeat)",
		"description": "GTA SA  0430",
		"prefix": "warpCharIntoCarAsPassenger",
		"scope": "source.lua"
	},
	"isCarPassengerSeatFree": {
		"body": "bool result = isCarPassengerSeatFree(Vehicle car, int seat)",
		"description": "GTA SA  0431",
		"prefix": "isCarPassengerSeatFree",
		"scope": "source.lua"
	},
	"getCharInCarPassengerSeat": {
		"body": "Ped ped = getCharInCarPassengerSeat(Vehicle car, int seat)",
		"description": "GTA SA  0432",
		"prefix": "getCharInCarPassengerSeat",
		"scope": "source.lua"
	},
	"setCharIsChrisCriminal": {
		"body": "setCharIsChrisCriminal(Ped ped, bool flag)",
		"description": "GTA SA  0433",
		"prefix": "setCharIsChrisCriminal",
		"scope": "source.lua"
	},
	"startCredits": {
		"body": "startCredits()",
		"description": "GTA SA  0434",
		"prefix": "startCredits",
		"scope": "source.lua"
	},
	"stopCredits": {
		"body": "stopCredits()",
		"description": "GTA SA  0435",
		"prefix": "stopCredits",
		"scope": "source.lua"
	},
	"areCreditsFinished": {
		"body": "bool result = areCreditsFinished()",
		"description": "GTA SA  0436",
		"prefix": "areCreditsFinished",
		"scope": "source.lua"
	},
	"setMusicDoesFade": {
		"body": "setMusicDoesFade(bool enable)",
		"description": "GTA SA  043C",
		"prefix": "setMusicDoesFade",
		"scope": "source.lua"
	},
	"getCarModel": {
		"body": "Model modelId = getCarModel(int int)",
		"description": "GTA SA  0441",
		"prefix": "getCarModel",
		"scope": "source.lua"
	},
	"areAnyCarCheatsActivated": {
		"body": "bool result = areAnyCarCheatsActivated()",
		"description": "GTA SA  0445",
		"prefix": "areAnyCarCheatsActivated",
		"scope": "source.lua"
	},
	"setCharSuffersCriticalHits": {
		"body": "setCharSuffersCriticalHits(Ped ped, bool enable)",
		"description": "GTA SA  0446",
		"prefix": "setCharSuffersCriticalHits",
		"scope": "source.lua"
	},
	"isCharSittingInCar": {
		"body": "bool result = isCharSittingInCar(Ped ped, Vehicle car)",
		"description": "GTA SA  0448",
		"prefix": "isCharSittingInCar",
		"scope": "source.lua"
	},
	"isCharSittingInAnyCar": {
		"body": "bool result = isCharSittingInAnyCar(Ped ped)",
		"description": "GTA SA  0449",
		"prefix": "isCharSittingInAnyCar",
		"scope": "source.lua"
	},
	"isCharOnFoot": {
		"body": "bool result = isCharOnFoot(Ped ped)",
		"description": "GTA SA  044B",
		"prefix": "isCharOnFoot",
		"scope": "source.lua"
	},
	"loadSplashScreen": {
		"body": "loadSplashScreen(GxtString gxtString)",
		"description": "GTA SA  044D",
		"prefix": "loadSplashScreen",
		"scope": "source.lua"
	},
	"setJamesCarOnPathToPlayer": {
		"body": "setJamesCarOnPathToPlayer(int int1)",
		"description": "GTA SA  0450",
		"prefix": "setJamesCarOnPathToPlayer",
		"scope": "source.lua"
	},
	"setObjectRotation": {
		"body": "setObjectRotation(Object object, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  0453",
		"prefix": "setObjectRotation",
		"scope": "source.lua"
	},
	"getDebugCameraCoordinates": {
		"body": "float X, float Y, float Z = getDebugCameraCoordinates()",
		"description": "GTA SA  0454",
		"prefix": "getDebugCameraCoordinates",
		"scope": "source.lua"
	},
	"isPlayerTargettingChar": {
		"body": "bool result = isPlayerTargettingChar(Player player, Ped ped)",
		"description": "GTA SA  0457",
		"prefix": "isPlayerTargettingChar",
		"scope": "source.lua"
	},
	"isPlayerTargettingObject": {
		"body": "bool result = isPlayerTargettingObject(Player player, Object object)",
		"description": "GTA SA  0458",
		"prefix": "isPlayerTargettingObject",
		"scope": "source.lua"
	},
	"displayTextWithNumber": {
		"body": "displayTextWithNumber(float x, float y, GxtString gxtString, int number)",
		"description": "GTA SA  045A",
		"prefix": "displayTextWithNumber",
		"scope": "source.lua"
	},
	"displayTextWith2Numbers": {
		"body": "displayTextWith2Numbers(float x, float y, GxtString gxtString, int numbersX, int numbersY)",
		"description": "GTA SA  045B",
		"prefix": "displayTextWith2Numbers",
		"scope": "source.lua"
	},
	"failCurrentMission": {
		"body": "failCurrentMission()",
		"description": "GTA SA  045C",
		"prefix": "failCurrentMission",
		"scope": "source.lua"
	},
	"setInterpolationParameters": {
		"body": "setInterpolationParameters(float delay, int time)",
		"description": "GTA SA  0460",
		"prefix": "setInterpolationParameters",
		"scope": "source.lua"
	},
	"getDebugCameraPointAt": {
		"body": "float X, float Y, float Z = getDebugCameraPointAt()",
		"description": "GTA SA  0463",
		"prefix": "getDebugCameraPointAt",
		"scope": "source.lua"
	},
	"attachCharToCar": {
		"body": "attachCharToCar(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngleLimit, int weapon)",
		"description": "GTA SA  0464",
		"prefix": "attachCharToCar",
		"scope": "source.lua"
	},
	"detachCharFromCar": {
		"body": "detachCharFromCar(Ped ped)",
		"description": "GTA SA  0465",
		"prefix": "detachCharFromCar",
		"scope": "source.lua"
	},
	"setCarStayInFastLane": {
		"body": "setCarStayInFastLane(Vehicle car, bool flag)",
		"description": "GTA SA  0466",
		"prefix": "setCarStayInFastLane",
		"scope": "source.lua"
	},
	"clearCharLastWeaponDamage": {
		"body": "clearCharLastWeaponDamage(Ped ped)",
		"description": "GTA SA  0467",
		"prefix": "clearCharLastWeaponDamage",
		"scope": "source.lua"
	},
	"clearCarLastWeaponDamage": {
		"body": "clearCarLastWeaponDamage(Vehicle car)",
		"description": "GTA SA  0468",
		"prefix": "clearCarLastWeaponDamage",
		"scope": "source.lua"
	},
	"getRandomCopInArea": {
		"body": "int int10 = getRandomCopInArea(float float1, float float2, float float3, float float4, bool int5, bool int6, bool int7, bool int8, bool int9)",
		"description": "GTA SA  0469",
		"prefix": "getRandomCopInArea",
		"scope": "source.lua"
	},
	"getDriverOfCar": {
		"body": "Ped ped = getDriverOfCar(Vehicle car)",
		"description": "GTA SA  046C",
		"prefix": "getDriverOfCar",
		"scope": "source.lua"
	},
	"getNumberOfFollowers": {
		"body": "int followers = getNumberOfFollowers(Ped ped)",
		"description": "GTA SA  046D",
		"prefix": "getNumberOfFollowers",
		"scope": "source.lua"
	},
	"giveRemoteControlledModelToPlayer": {
		"body": "giveRemoteControlledModelToPlayer(Player player, float atX, float atY, float atZ, float angle, Model RCModel)",
		"description": "GTA SA  046E",
		"prefix": "giveRemoteControlledModelToPlayer",
		"scope": "source.lua"
	},
	"getCurrentCharWeapon": {
		"body": "int weapon = getCurrentCharWeapon(Ped ped)",
		"description": "GTA SA  0470",
		"prefix": "getCurrentCharWeapon",
		"scope": "source.lua"
	},
	"locateCharAnyMeansObject2d": {
		"body": "bool result = locateCharAnyMeansObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  0471",
		"prefix": "locateCharAnyMeansObject2d",
		"scope": "source.lua"
	},
	"locateCharOnFootObject2d": {
		"body": "bool result = locateCharOnFootObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  0472",
		"prefix": "locateCharOnFootObject2d",
		"scope": "source.lua"
	},
	"locateCharInCarObject2d": {
		"body": "bool result = locateCharInCarObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  0473",
		"prefix": "locateCharInCarObject2d",
		"scope": "source.lua"
	},
	"locateCharAnyMeansObject3d": {
		"body": "bool result = locateCharAnyMeansObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0474",
		"prefix": "locateCharAnyMeansObject3d",
		"scope": "source.lua"
	},
	"locateCharOnFootObject3d": {
		"body": "bool result = locateCharOnFootObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0475",
		"prefix": "locateCharOnFootObject3d",
		"scope": "source.lua"
	},
	"locateCharInCarObject3d": {
		"body": "bool result = locateCharInCarObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)",
		"description": "GTA SA  0476",
		"prefix": "locateCharInCarObject3d",
		"scope": "source.lua"
	},
	"setCarTempAction": {
		"body": "setCarTempAction(Vehicle car, int action, int time)",
		"description": "GTA SA  0477",
		"prefix": "setCarTempAction",
		"scope": "source.lua"
	},
	"isCharOnAnyBike": {
		"body": "bool result = isCharOnAnyBike(Ped ped)",
		"description": "GTA SA  047A",
		"prefix": "isCharOnAnyBike",
		"scope": "source.lua"
	},
	"canCharSeeDeadChar": {
		"body": "bool result = canCharSeeDeadChar(Ped ped, int pedtype)",
		"description": "GTA SA  0480",
		"prefix": "canCharSeeDeadChar",
		"scope": "source.lua"
	},
	"setEnterCarRangeMultiplier": {
		"body": "setEnterCarRangeMultiplier(float float1)",
		"description": "GTA SA  0481",
		"prefix": "setEnterCarRangeMultiplier",
		"scope": "source.lua"
	},
	"getRemoteControlledCar": {
		"body": "Vehicle car = getRemoteControlledCar(Player player)",
		"description": "GTA SA  0484",
		"prefix": "getRemoteControlledCar",
		"scope": "source.lua"
	},
	"isPcVersion": {
		"body": "bool result = isPcVersion()",
		"description": "GTA SA  0485",
		"prefix": "isPcVersion",
		"scope": "source.lua"
	},
	"isModelAvailable": {
		"body": "bool result = isModelAvailable(Model modelId)",
		"description": "GTA SA  0488",
		"prefix": "isModelAvailable",
		"scope": "source.lua"
	},
	"shutCharUp": {
		"body": "shutCharUp(Ped ped, bool muted)",
		"description": "GTA SA  0489",
		"prefix": "shutCharUp",
		"scope": "source.lua"
	},
	"setEnableRcDetonate": {
		"body": "setEnableRcDetonate(bool detonation)",
		"description": "GTA SA  048A",
		"prefix": "setEnableRcDetonate",
		"scope": "source.lua"
	},
	"setCarRandomRouteSeed": {
		"body": "setCarRandomRouteSeed(Vehicle car, int routeSeed)",
		"description": "GTA SA  048B",
		"prefix": "setCarRandomRouteSeed",
		"scope": "source.lua"
	},
	"isAnyPickupAtCoords": {
		"body": "bool result = isAnyPickupAtCoords(float pickupX, float pickupY, float pickupZ)",
		"description": "GTA SA  048C",
		"prefix": "isAnyPickupAtCoords",
		"scope": "source.lua"
	},
	"removeAllCharWeapons": {
		"body": "removeAllCharWeapons(Ped ped)",
		"description": "GTA SA  048F",
		"prefix": "removeAllCharWeapons",
		"scope": "source.lua"
	},
	"hasCharGotWeapon": {
		"body": "bool result = hasCharGotWeapon(Ped ped, int weapon)",
		"description": "GTA SA  0491",
		"prefix": "hasCharGotWeapon",
		"scope": "source.lua"
	},
	"setTankDetonateCars": {
		"body": "setTankDetonateCars(int tank, bool detonate)",
		"description": "GTA SA  0493",
		"prefix": "setTankDetonateCars",
		"scope": "source.lua"
	},
	"getPositionOfAnalogueSticks": {
		"body": "int offset1, int offset2, int offset3, int offset4 = getPositionOfAnalogueSticks(int joystick)",
		"description": "GTA SA  0494",
		"prefix": "getPositionOfAnalogueSticks",
		"scope": "source.lua"
	},
	"isCarOnFire": {
		"body": "bool result = isCarOnFire(Vehicle car)",
		"description": "GTA SA  0495",
		"prefix": "isCarOnFire",
		"scope": "source.lua"
	},
	"isCarTireBurst": {
		"body": "bool result = isCarTireBurst(Vehicle car, int tire)",
		"description": "GTA SA  0496",
		"prefix": "isCarTireBurst",
		"scope": "source.lua"
	},
	"initialiseObjectPath": {
		"body": "initialiseObjectPath(int int1, float float2)",
		"description": "GTA SA  049C",
		"prefix": "initialiseObjectPath",
		"scope": "source.lua"
	},
	"setObjectPathSpeed": {
		"body": "setObjectPathSpeed(int int1, int int2)",
		"description": "GTA SA  049E",
		"prefix": "setObjectPathSpeed",
		"scope": "source.lua"
	},
	"setObjectPathPosition": {
		"body": "setObjectPathPosition(int int1, float float2)",
		"description": "GTA SA  049F",
		"prefix": "setObjectPathPosition",
		"scope": "source.lua"
	},
	"clearObjectPath": {
		"body": "clearObjectPath(int int1)",
		"description": "GTA SA  04A1",
		"prefix": "clearObjectPath",
		"scope": "source.lua"
	},
	"heliGotoCoords": {
		"body": "heliGotoCoords(Vehicle heli, float toX, float toY, float toZ, float altitudeMin, float altitudeMax)",
		"description": "GTA SA  04A2",
		"prefix": "heliGotoCoords",
		"scope": "source.lua"
	},
	"getDeadCharPickupCoords": {
		"body": "float coordsX, float coordsY, float coordsZ = getDeadCharPickupCoords(Ped ped)",
		"description": "GTA SA  04A5",
		"prefix": "getDeadCharPickupCoords",
		"scope": "source.lua"
	},
	"createProtectionPickup": {
		"body": "Pickup pickup = createProtectionPickup(float atX, float atY, float atZ, int int4, int int5)",
		"description": "GTA SA  04A6",
		"prefix": "createProtectionPickup",
		"scope": "source.lua"
	},
	"isCharInAnyBoat": {
		"body": "bool result = isCharInAnyBoat(Ped ped)",
		"description": "GTA SA  04A7",
		"prefix": "isCharInAnyBoat",
		"scope": "source.lua"
	},
	"isCharInAnyHeli": {
		"body": "bool result = isCharInAnyHeli(Ped ped)",
		"description": "GTA SA  04A9",
		"prefix": "isCharInAnyHeli",
		"scope": "source.lua"
	},
	"isCharInAnyPlane": {
		"body": "bool result = isCharInAnyPlane(Ped ped)",
		"description": "GTA SA  04AB",
		"prefix": "isCharInAnyPlane",
		"scope": "source.lua"
	},
	"isCharInWater": {
		"body": "bool result = isCharInWater(Ped ped)",
		"description": "GTA SA  04AD",
		"prefix": "isCharInWater",
		"scope": "source.lua"
	},
	"getCharWeaponInSlot": {
		"body": "int weapon, int ammo, Model modelId = getCharWeaponInSlot(Ped ped, int slot)",
		"description": "GTA SA  04B8",
		"prefix": "getCharWeaponInSlot",
		"scope": "source.lua"
	},
	"getClosestStraightRoad": {
		"body": "float float6, float float7, float float8, float float9, float float10, float float11, float float12 = getClosestStraightRoad(float atX, float atY, float atZ, float height, float radius)",
		"description": "GTA SA  04B9",
		"prefix": "getClosestStraightRoad",
		"scope": "source.lua"
	},
	"setCarForwardSpeed": {
		"body": "setCarForwardSpeed(Vehicle car, float speed)",
		"description": "GTA SA  04BA",
		"prefix": "setCarForwardSpeed",
		"scope": "source.lua"
	},
	"setInteriorVisible": {
		"body": "setInteriorVisible(int interior)",
		"description": "GTA SA  04BB",
		"prefix": "setInteriorVisible",
		"scope": "source.lua"
	},
	"markCarAsConvoyCar": {
		"body": "markCarAsConvoyCar(Vehicle car, bool convoy)",
		"description": "GTA SA  04BD",
		"prefix": "markCarAsConvoyCar",
		"scope": "source.lua"
	},
	"resetHavocCausedByPlayer": {
		"body": "resetHavocCausedByPlayer(int int1)",
		"description": "GTA SA  04BE",
		"prefix": "resetHavocCausedByPlayer",
		"scope": "source.lua"
	},
	"getHavocCausedByPlayer": {
		"body": "int int2 = getHavocCausedByPlayer(int int1)",
		"description": "GTA SA  04BF",
		"prefix": "getHavocCausedByPlayer",
		"scope": "source.lua"
	},
	"createScriptRoadblock": {
		"body": "createScriptRoadblock(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, int type)",
		"description": "GTA SA  04C0",
		"prefix": "createScriptRoadblock",
		"scope": "source.lua"
	},
	"clearAllScriptRoadblocks": {
		"body": "clearAllScriptRoadblocks()",
		"description": "GTA SA  04C1",
		"prefix": "clearAllScriptRoadblocks",
		"scope": "source.lua"
	},
	"getOffsetFromCharInWorldCoords": {
		"body": "float X, float Y, float Z = getOffsetFromCharInWorldCoords(Ped ped, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  04C4",
		"prefix": "getOffsetFromCharInWorldCoords",
		"scope": "source.lua"
	},
	"hasCharBeenPhotographed": {
		"body": "bool result = hasCharBeenPhotographed(Ped ped)",
		"description": "GTA SA  04C5",
		"prefix": "hasCharBeenPhotographed",
		"scope": "source.lua"
	},
	"switchSecurityCamera": {
		"body": "switchSecurityCamera(bool int1)",
		"description": "GTA SA  04C7",
		"prefix": "switchSecurityCamera",
		"scope": "source.lua"
	},
	"isCharInFlyingVehicle": {
		"body": "bool result = isCharInFlyingVehicle(Ped ped)",
		"description": "GTA SA  04C8",
		"prefix": "isCharInFlyingVehicle",
		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForCoord": {
		"body": "Marker marker = addShortRangeSpriteBlipForCoord(float atX, float atY, float atZ, int icon)",
		"description": "GTA SA  04CE",
		"prefix": "addShortRangeSpriteBlipForCoord",
		"scope": "source.lua"
	},
	"setHeliOrientation": {
		"body": "setHeliOrientation(Vehicle heli, float angle)",
		"description": "GTA SA  04D0",
		"prefix": "setHeliOrientation",
		"scope": "source.lua"
	},
	"clearHeliOrientation": {
		"body": "clearHeliOrientation(Vehicle heli)",
		"description": "GTA SA  04D1",
		"prefix": "clearHeliOrientation",
		"scope": "source.lua"
	},
	"planeGotoCoords": {
		"body": "planeGotoCoords(int plane, float X, float Y, float Z, float z1, float z2)",
		"description": "GTA SA  04D2",
		"prefix": "planeGotoCoords",
		"scope": "source.lua"
	},
	"getNthClosestCarNode": {
		"body": "float X, float Y, float Z = getNthClosestCarNode(float X, float Y, float Z, int type)",
		"description": "GTA SA  04D3",
		"prefix": "getNthClosestCarNode",
		"scope": "source.lua"
	},
	"drawWeaponshopCorona": {
		"body": "drawWeaponshopCorona(float X, float Y, float Z, float radius, int type, int flare, int r, int g, int b)",
		"description": "GTA SA  04D5",
		"prefix": "drawWeaponshopCorona",
		"scope": "source.lua"
	},
	"setEnableRcDetonateOnContact": {
		"body": "setEnableRcDetonateOnContact(bool enable)",
		"description": "GTA SA  04D6",
		"prefix": "setEnableRcDetonateOnContact",
		"scope": "source.lua"
	},
	"freezeCharPosition": {
		"body": "freezeCharPosition(int set, bool locked)",
		"description": "GTA SA  04D7",
		"prefix": "freezeCharPosition",
		"scope": "source.lua"
	},
	"setCharDrownsInWater": {
		"body": "setCharDrownsInWater(Ped ped, bool drowns)",
		"description": "GTA SA  04D8",
		"prefix": "setCharDrownsInWater",
		"scope": "source.lua"
	},
	"setObjectRecordsCollisions": {
		"body": "setObjectRecordsCollisions(Object object, bool set)",
		"description": "GTA SA  04D9",
		"prefix": "setObjectRecordsCollisions",
		"scope": "source.lua"
	},
	"hasObjectCollidedWithAnything": {
		"body": "bool result = hasObjectCollidedWithAnything(Object object)",
		"description": "GTA SA  04DA",
		"prefix": "hasObjectCollidedWithAnything",
		"scope": "source.lua"
	},
	"removeRcBuggy": {
		"body": "removeRcBuggy()",
		"description": "GTA SA  04DB",
		"prefix": "removeRcBuggy",
		"scope": "source.lua"
	},
	"getCharArmour": {
		"body": "int armour = getCharArmour(Ped ped)",
		"description": "GTA SA  04DD",
		"prefix": "getCharArmour",
		"scope": "source.lua"
	},
	"setHeliStabiliser": {
		"body": "setHeliStabiliser(Vehicle heli, bool limiter)",
		"description": "GTA SA  04DF",
		"prefix": "setHeliStabiliser",
		"scope": "source.lua"
	},
	"setCarStraightLineDistance": {
		"body": "setCarStraightLineDistance(Vehicle car, int radius)",
		"description": "GTA SA  04E0",
		"prefix": "setCarStraightLineDistance",
		"scope": "source.lua"
	},
	"popCarBoot": {
		"body": "popCarBoot(Vehicle car)",
		"description": "GTA SA  04E1",
		"prefix": "popCarBoot",
		"scope": "source.lua"
	},
	"shutPlayerUp": {
		"body": "shutPlayerUp(Player player, bool shut)",
		"description": "GTA SA  04E2",
		"prefix": "shutPlayerUp",
		"scope": "source.lua"
	},
	"setPlayerMood": {
		"body": "setPlayerMood(Player player, int flag, int time)",
		"description": "GTA SA  04E3",
		"prefix": "setPlayerMood",
		"scope": "source.lua"
	},
	"requestCollision": {
		"body": "requestCollision(float X, float Y)",
		"description": "GTA SA  04E4",
		"prefix": "requestCollision",
		"scope": "source.lua"
	},
	"locateObject2d": {
		"body": "bool result = locateObject2d(Object object, float X, float Y, float radiusX, float radiusY, bool sphere)",
		"description": "GTA SA  04E5",
		"prefix": "locateObject2d",
		"scope": "source.lua"
	},
	"locateObject3d": {
		"body": "bool result = locateObject3d(Object object, float X, float Y, float Z, float radiusX, float radiusY, float radiusZ, bool flag)",
		"description": "GTA SA  04E6",
		"prefix": "locateObject3d",
		"scope": "source.lua"
	},
	"isObjectInWater": {
		"body": "bool result = isObjectInWater(Object object)",
		"description": "GTA SA  04E7",
		"prefix": "isObjectInWater",
		"scope": "source.lua"
	},
	"isObjectInArea2d": {
		"body": "bool result = isObjectInArea2d(Object object, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)",
		"description": "GTA SA  04E9",
		"prefix": "isObjectInArea2d",
		"scope": "source.lua"
	},
	"isObjectInArea3d": {
		"body": "bool result = isObjectInArea3d(Object object, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool flag)",
		"description": "GTA SA  04EA",
		"prefix": "isObjectInArea3d",
		"scope": "source.lua"
	},
	"taskToggleDuck": {
		"body": "taskToggleDuck(Ped ped, bool crouch)",
		"description": "GTA SA  04EB",
		"prefix": "taskToggleDuck",
		"scope": "source.lua"
	},
	"requestAnimation": {
		"body": "requestAnimation(string animation)",
		"description": "GTA SA  04ED",
		"prefix": "requestAnimation",
		"scope": "source.lua"
	},
	"hasAnimationLoaded": {
		"body": "bool result = hasAnimationLoaded(string animation)",
		"description": "GTA SA  04EE",
		"prefix": "hasAnimationLoaded",
		"scope": "source.lua"
	},
	"removeAnimation": {
		"body": "removeAnimation(string animation)",
		"description": "GTA SA  04EF",
		"prefix": "removeAnimation",
		"scope": "source.lua"
	},
	"isCharWaitingForWorldCollision": {
		"body": "bool result = isCharWaitingForWorldCollision(Ped ped)",
		"description": "GTA SA  04F0",
		"prefix": "isCharWaitingForWorldCollision",
		"scope": "source.lua"
	},
	"isCarWaitingForWorldCollision": {
		"body": "bool result = isCarWaitingForWorldCollision(Vehicle car)",
		"description": "GTA SA  04F1",
		"prefix": "isCarWaitingForWorldCollision",
		"scope": "source.lua"
	},
	"attachCharToObject": {
		"body": "attachCharToObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int orientation, float angle, int lockWeapon)",
		"description": "GTA SA  04F4",
		"prefix": "attachCharToObject",
		"scope": "source.lua"
	},
	"displayNthOnscreenCounterWithString": {
		"body": "displayNthOnscreenCounterWithString(VarId text, int type, int line, GxtString gxtString)",
		"description": "GTA SA  04F7",
		"prefix": "displayNthOnscreenCounterWithString",
		"scope": "source.lua"
	},
	"addSetPiece": {
		"body": "addSetPiece(int type, float rectX1, float rectY1, float rectX2, float rectY2, float spawnAX, float spawnAY, float headedTowards1X, float headedTowards1Y, float spawnBX, float spawnBY, float headedTowards2X, float headedTowards2Y)",
		"description": "GTA SA  04F8",
		"prefix": "addSetPiece",
		"scope": "source.lua"
	},
	"setExtraColours": {
		"body": "setExtraColours(int color, bool fade)",
		"description": "GTA SA  04F9",
		"prefix": "setExtraColours",
		"scope": "source.lua"
	},
	"clearExtraColours": {
		"body": "clearExtraColours(bool fade)",
		"description": "GTA SA  04FA",
		"prefix": "clearExtraColours",
		"scope": "source.lua"
	},
	"getWheelieStats": {
		"body": "int twowheelstime, float twowheelsdistance, int wheelietime, float wheelieDistance, int stoppieTime, float stoppieDistance = getWheelieStats(Player player)",
		"description": "GTA SA  04FC",
		"prefix": "getWheelieStats",
		"scope": "source.lua"
	},
	"burstCarTire": {
		"body": "burstCarTire(Vehicle car, int tire)",
		"description": "GTA SA  04FE",
		"prefix": "burstCarTire",
		"scope": "source.lua"
	},
	"isPlayerWearing": {
		"body": "bool result = isPlayerWearing(Player player, string bodypart, int skin)",
		"description": "GTA SA  0500",
		"prefix": "isPlayerWearing",
		"scope": "source.lua"
	},
	"setPlayerCanDoDriveBy": {
		"body": "setPlayerCanDoDriveBy(Player player, bool mode)",
		"description": "GTA SA  0501",
		"prefix": "setPlayerCanDoDriveBy",
		"scope": "source.lua"
	},
	"createSwatRope": {
		"body": "int handleAs = createSwatRope(int pedtype, Model modelId, float X, float Y, float Z)",
		"description": "GTA SA  0503",
		"prefix": "createSwatRope",
		"scope": "source.lua"
	},
	"setCarModelComponents": {
		"body": "setCarModelComponents(Model car, int variation1, int variation2)",
		"description": "GTA SA  0506",
		"prefix": "setCarModelComponents",
		"scope": "source.lua"
	},
	"closeAllCarDoors": {
		"body": "closeAllCarDoors(Vehicle car)",
		"description": "GTA SA  0508",
		"prefix": "closeAllCarDoors",
		"scope": "source.lua"
	},
	"getDistanceBetweenCoords2d": {
		"body": "float distance = getDistanceBetweenCoords2d(float x1, float y1, float x2, float y2)",
		"description": "GTA SA  0509",
		"prefix": "getDistanceBetweenCoords2d",
		"scope": "source.lua"
	},
	"getDistanceBetweenCoords3d": {
		"body": "float distance = getDistanceBetweenCoords3d(float x1, float y1, float z1, float x2, float y2, float z2)",
		"description": "GTA SA  050A",
		"prefix": "getDistanceBetweenCoords3d",
		"scope": "source.lua"
	},
	"sortOutObjectCollisionWithCar": {
		"body": "sortOutObjectCollisionWithCar(Object object, Vehicle car)",
		"description": "GTA SA  050E",
		"prefix": "sortOutObjectCollisionWithCar",
		"scope": "source.lua"
	},
	"getMaxWantedLevel": {
		"body": "int level = getMaxWantedLevel()",
		"description": "GTA SA  050F",
		"prefix": "getMaxWantedLevel",
		"scope": "source.lua"
	},
	"printHelpForever": {
		"body": "printHelpForever(GxtString text)",
		"description": "GTA SA  0512",
		"prefix": "printHelpForever",
		"scope": "source.lua"
	},
	"printHelpForeverWithNumber": {
		"body": "printHelpForeverWithNumber(GxtString text, int number)",
		"description": "GTA SA  0513",
		"prefix": "printHelpForeverWithNumber",
		"scope": "source.lua"
	},
	"createLockedPropertyPickup": {
		"body": "Pickup pickup = createLockedPropertyPickup(float pX, float pY, float pZ, GxtString gxtString)",
		"description": "GTA SA  0517",
		"prefix": "createLockedPropertyPickup",
		"scope": "source.lua"
	},
	"createForsalePropertyPickup": {
		"body": "Pickup pickup = createForsalePropertyPickup(float pX, float pY, float pZ, int price, GxtString gxtString)",
		"description": "GTA SA  0518",
		"prefix": "createForsalePropertyPickup",
		"scope": "source.lua"
	},
	"freezeCarPosition": {
		"body": "freezeCarPosition(Vehicle car, bool locked)",
		"description": "GTA SA  0519",
		"prefix": "freezeCarPosition",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByChar": {
		"body": "bool result = hasCharBeenDamagedByChar(Ped ped, Ped byActor)",
		"description": "GTA SA  051A",
		"prefix": "hasCharBeenDamagedByChar",
		"scope": "source.lua"
	},
	"hasCharBeenDamagedByCar": {
		"body": "bool result = hasCharBeenDamagedByCar(Ped ped, Vehicle byCar)",
		"description": "GTA SA  051B",
		"prefix": "hasCharBeenDamagedByCar",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByChar": {
		"body": "bool result = hasCarBeenDamagedByChar(Vehicle car, Ped byActor)",
		"description": "GTA SA  051C",
		"prefix": "hasCarBeenDamagedByChar",
		"scope": "source.lua"
	},
	"hasCarBeenDamagedByCar": {
		"body": "bool result = hasCarBeenDamagedByCar(Vehicle car, Vehicle byCar)",
		"description": "GTA SA  051D",
		"prefix": "hasCarBeenDamagedByCar",
		"scope": "source.lua"
	},
	"getRadioChannel": {
		"body": "int radio = getRadioChannel()",
		"description": "GTA SA  051E",
		"prefix": "getRadioChannel",
		"scope": "source.lua"
	},
	"setCharStayInCarWhenJacked": {
		"body": "setCharStayInCarWhenJacked(Ped ped, bool stay)",
		"description": "GTA SA  0526",
		"prefix": "setCharStayInCarWhenJacked",
		"scope": "source.lua"
	},
	"setPlayerDrunkenness": {
		"body": "setPlayerDrunkenness(Player player, int drunk)",
		"description": "GTA SA  052C",
		"prefix": "setPlayerDrunkenness",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAreaNoSave": {
		"body": "Vehicle car = getRandomCarOfTypeInAreaNoSave(float x1, float y1, float x2, float y2, Model modelId)",
		"description": "GTA SA  053E",
		"prefix": "getRandomCarOfTypeInAreaNoSave",
		"scope": "source.lua"
	},
	"setCanBurstCarTires": {
		"body": "setCanBurstCarTires(Vehicle car, bool vulnerability)",
		"description": "GTA SA  053F",
		"prefix": "setCanBurstCarTires",
		"scope": "source.lua"
	},
	"fireHunterGun": {
		"body": "fireHunterGun(Vehicle car)",
		"description": "GTA SA  0541",
		"prefix": "fireHunterGun",
		"scope": "source.lua"
	},
	"isCharTouchingVehicle": {
		"body": "bool result = isCharTouchingVehicle(Ped ped, Vehicle car)",
		"description": "GTA SA  0547",
		"prefix": "isCharTouchingVehicle",
		"scope": "source.lua"
	},
	"setCharCanBeShotInVehicle": {
		"body": "setCharCanBeShotInVehicle(Ped ped, bool can)",
		"description": "GTA SA  054A",
		"prefix": "setCharCanBeShotInVehicle",
		"scope": "source.lua"
	},
	"loadMissionText": {
		"body": "loadMissionText(GxtString table)",
		"description": "GTA SA  054C",
		"prefix": "loadMissionText",
		"scope": "source.lua"
	},
	"clearCharLastDamageEntity": {
		"body": "clearCharLastDamageEntity(Ped ped)",
		"description": "GTA SA  054E",
		"prefix": "clearCharLastDamageEntity",
		"scope": "source.lua"
	},
	"clearCarLastDamageEntity": {
		"body": "clearCarLastDamageEntity(Vehicle car)",
		"description": "GTA SA  054F",
		"prefix": "clearCarLastDamageEntity",
		"scope": "source.lua"
	},
	"freezeObjectPosition": {
		"body": "freezeObjectPosition(Object object, bool freeze)",
		"description": "GTA SA  0550",
		"prefix": "freezeObjectPosition",
		"scope": "source.lua"
	},
	"removeWeaponFromChar": {
		"body": "removeWeaponFromChar(Ped ped, int weapon)",
		"description": "GTA SA  0555",
		"prefix": "removeWeaponFromChar",
		"scope": "source.lua"
	},
	"makePlayerFireProof": {
		"body": "makePlayerFireProof(Player player, bool fireproof)",
		"description": "GTA SA  055D",
		"prefix": "makePlayerFireProof",
		"scope": "source.lua"
	},
	"increasePlayerMaxHealth": {
		"body": "increasePlayerMaxHealth(Player player, int increase)",
		"description": "GTA SA  055E",
		"prefix": "increasePlayerMaxHealth",
		"scope": "source.lua"
	},
	"increasePlayerMaxArmour": {
		"body": "increasePlayerMaxArmour(Player player, int increase)",
		"description": "GTA SA  055F",
		"prefix": "increasePlayerMaxArmour",
		"scope": "source.lua"
	},
	"createRandomCharAsDriver": {
		"body": "Ped ped = createRandomCharAsDriver(Vehicle car)",
		"description": "GTA SA  0560",
		"prefix": "createRandomCharAsDriver",
		"scope": "source.lua"
	},
	"createRandomCharAsPassenger": {
		"body": "Ped ped = createRandomCharAsPassenger(Vehicle car, int seat)",
		"description": "GTA SA  0561",
		"prefix": "createRandomCharAsPassenger",
		"scope": "source.lua"
	},
	"ensurePlayerHasDriveByWeapon": {
		"body": "ensurePlayerHasDriveByWeapon(Player player, int ammo)",
		"description": "GTA SA  0563",
		"prefix": "ensurePlayerHasDriveByWeapon",
		"scope": "source.lua"
	},
	"makeHeliComeCrashingDown": {
		"body": "makeHeliComeCrashingDown(Vehicle heli)",
		"description": "GTA SA  0564",
		"prefix": "makeHeliComeCrashingDown",
		"scope": "source.lua"
	},
	"addExplosionNoSound": {
		"body": "addExplosionNoSound(float pX, float pY, float pZ, int type)",
		"description": "GTA SA  0565",
		"prefix": "addExplosionNoSound",
		"scope": "source.lua"
	},
	"linkObjectToInterior": {
		"body": "linkObjectToInterior(Object object, int interior)",
		"description": "GTA SA  0566",
		"prefix": "linkObjectToInterior",
		"scope": "source.lua"
	},
	"setCharNeverTargetted": {
		"body": "setCharNeverTargetted(Ped ped, bool untargetable)",
		"description": "GTA SA  0568",
		"prefix": "setCharNeverTargetted",
		"scope": "source.lua"
	},
	"wasCutsceneSkipped": {
		"body": "bool result = wasCutsceneSkipped()",
		"description": "GTA SA  056A",
		"prefix": "wasCutsceneSkipped",
		"scope": "source.lua"
	},
	"isCharInAnyPoliceVehicle": {
		"body": "bool result = isCharInAnyPoliceVehicle(Ped ped)",
		"description": "GTA SA  056C",
		"prefix": "isCharInAnyPoliceVehicle",
		"scope": "source.lua"
	},
	"doesCharExist": {
		"body": "bool result = doesCharExist(Ped ped)",
		"description": "GTA SA  056D",
		"prefix": "doesCharExist",
		"scope": "source.lua"
	},
	"doesVehicleExist": {
		"body": "bool result = doesVehicleExist(Vehicle car)",
		"description": "GTA SA  056E",
		"prefix": "doesVehicleExist",
		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForContactPoint": {
		"body": "Marker blip = addShortRangeSpriteBlipForContactPoint(float pX, float pY, float pZ, int icon)",
		"description": "GTA SA  0570",
		"prefix": "addShortRangeSpriteBlipForContactPoint",
		"scope": "source.lua"
	},
	"setAllTaxisHaveNitro": {
		"body": "setAllTaxisHaveNitro(bool toggle)",
		"description": "GTA SA  0572",
		"prefix": "setAllTaxisHaveNitro",
		"scope": "source.lua"
	},
	"freezeCarPositionAndDontLoadCollision": {
		"body": "freezeCarPositionAndDontLoadCollision(Vehicle car, bool keep)",
		"description": "GTA SA  0574",
		"prefix": "freezeCarPositionAndDontLoadCollision",
		"scope": "source.lua"
	},
	"freezeCharPositionAndDontLoadCollision": {
		"body": "freezeCharPositionAndDontLoadCollision(Ped ped, bool keep)",
		"description": "GTA SA  0575",
		"prefix": "freezeCharPositionAndDontLoadCollision",
		"scope": "source.lua"
	},
	"setPlayerIsInStadium": {
		"body": "setPlayerIsInStadium(bool set)",
		"description": "GTA SA  057E",
		"prefix": "setPlayerIsInStadium",
		"scope": "source.lua"
	},
	"displayRadar": {
		"body": "displayRadar(bool enable)",
		"description": "GTA SA  0581",
		"prefix": "displayRadar",
		"scope": "source.lua"
	},
	"registerBestPosition": {
		"body": "registerBestPosition(int stat, float float)",
		"description": "GTA SA  0582",
		"prefix": "registerBestPosition",
		"scope": "source.lua"
	},
	"isPlayerInInfoZone": {
		"body": "bool result = isPlayerInInfoZone(Player player, GxtString zone)",
		"description": "GTA SA  0583",
		"prefix": "isPlayerInInfoZone",
		"scope": "source.lua"
	},
	"setLoadCollisionForCarFlag": {
		"body": "setLoadCollisionForCarFlag(Vehicle car, bool enable)",
		"description": "GTA SA  0587",
		"prefix": "setLoadCollisionForCarFlag",
		"scope": "source.lua"
	},
	"setLoadCollisionForCharFlag": {
		"body": "setLoadCollisionForCharFlag(Ped ped, bool enable)",
		"description": "GTA SA  0588",
		"prefix": "setLoadCollisionForCharFlag",
		"scope": "source.lua"
	},
	"addBigGunFlash": {
		"body": "addBigGunFlash(float fromX, float fromY, float fromZ, float toX, float toY, float toZ)",
		"description": "GTA SA  058A",
		"prefix": "addBigGunFlash",
		"scope": "source.lua"
	},
	"getProgressPercentage": {
		"body": "float progress = getProgressPercentage()",
		"description": "GTA SA  058C",
		"prefix": "getProgressPercentage",
		"scope": "source.lua"
	},
	"setVehicleToFadeIn": {
		"body": "setVehicleToFadeIn(Vehicle car, int flag)",
		"description": "GTA SA  0594",
		"prefix": "setVehicleToFadeIn",
		"scope": "source.lua"
	},
	"registerOddjobMissionPassed": {
		"body": "registerOddjobMissionPassed()",
		"description": "GTA SA  0595",
		"prefix": "registerOddjobMissionPassed",
		"scope": "source.lua"
	},
	"isPlayerInShortcutTaxi": {
		"body": "bool result = isPlayerInShortcutTaxi(Player player)",
		"description": "GTA SA  0596",
		"prefix": "isPlayerInShortcutTaxi",
		"scope": "source.lua"
	},
	"isCharDucking": {
		"body": "bool result = isCharDucking(Ped ped)",
		"description": "GTA SA  0597",
		"prefix": "isCharDucking",
		"scope": "source.lua"
	},
	"setOnscreenCounterFlashWhenFirstDisplayed": {
		"body": "setOnscreenCounterFlashWhenFirstDisplayed(VarId text, bool flashing)",
		"description": "GTA SA  059C",
		"prefix": "setOnscreenCounterFlashWhenFirstDisplayed",
		"scope": "source.lua"
	},
	"shuffleCardDecks": {
		"body": "shuffleCardDecks(bool shuffle)",
		"description": "GTA SA  059D",
		"prefix": "shuffleCardDecks",
		"scope": "source.lua"
	},
	"fetchNextCard": {
		"body": "int card = fetchNextCard()",
		"description": "GTA SA  059E",
		"prefix": "fetchNextCard",
		"scope": "source.lua"
	},
	"getObjectVelocity": {
		"body": "float vecX, float vecY, float vecZ = getObjectVelocity(Object object)",
		"description": "GTA SA  059F",
		"prefix": "getObjectVelocity",
		"scope": "source.lua"
	},
	"isDebugCameraOn": {
		"body": "bool result = isDebugCameraOn()",
		"description": "GTA SA  05A0",
		"prefix": "isDebugCameraOn",
		"scope": "source.lua"
	},
	"addToObjectRotationVelocity": {
		"body": "addToObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  05A1",
		"prefix": "addToObjectRotationVelocity",
		"scope": "source.lua"
	},
	"setObjectRotationVelocity": {
		"body": "setObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  05A2",
		"prefix": "setObjectRotationVelocity",
		"scope": "source.lua"
	},
	"isObjectStatic": {
		"body": "bool result = isObjectStatic(Object object)",
		"description": "GTA SA  05A3",
		"prefix": "isObjectStatic",
		"scope": "source.lua"
	},
	"getAngleBetween2dVectors": {
		"body": "float angle = getAngleBetween2dVectors(float vecX, float vecY, float vecX, float vecY)",
		"description": "GTA SA  05A4",
		"prefix": "getAngleBetween2dVectors",
		"scope": "source.lua"
	},
	"do2dRectanglesCollide": {
		"body": "bool result = do2dRectanglesCollide(float areaX, float areaY, float scaleX, float scaleY, float overlapareaX, float overlapareaY, float overlapscaleX, float overlapscaleY)",
		"description": "GTA SA  05A5",
		"prefix": "do2dRectanglesCollide",
		"scope": "source.lua"
	},
	"getObjectRotationVelocity": {
		"body": "float axisX, float axisY, float axisZ = getObjectRotationVelocity(Object object)",
		"description": "GTA SA  05A6",
		"prefix": "getObjectRotationVelocity",
		"scope": "source.lua"
	},
	"addVelocityRelativeToObjectVelocity": {
		"body": "addVelocityRelativeToObjectVelocity(Object object, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  05A7",
		"prefix": "addVelocityRelativeToObjectVelocity",
		"scope": "source.lua"
	},
	"getObjectSpeed": {
		"body": "float speed = getObjectSpeed(Object object)",
		"description": "GTA SA  05A8",
		"prefix": "getObjectSpeed",
		"scope": "source.lua"
	},
	"get2dLinesIntersectPoint": {
		"body": "bool result, float X, float Y = get2dLinesIntersectPoint(float l1x1, float l1y1, float l1x2, float l1y2, float l2x1, float l2y1, float l2x2, float l2y2)",
		"description": "GTA SA  05B0",
		"prefix": "get2dLinesIntersectPoint",
		"scope": "source.lua"
	},
	"taskPause": {
		"body": "taskPause(Ped ped, int timeMS)",
		"description": "GTA SA  05B9",
		"prefix": "taskPause",
		"scope": "source.lua"
	},
	"taskStandStill": {
		"body": "taskStandStill(Ped ped, int timeMS)",
		"description": "GTA SA  05BA",
		"prefix": "taskStandStill",
		"scope": "source.lua"
	},
	"taskFallAndGetUp": {
		"body": "taskFallAndGetUp(Ped ped, bool int2, int time)",
		"description": "GTA SA  05BB",
		"prefix": "taskFallAndGetUp",
		"scope": "source.lua"
	},
	"taskJump": {
		"body": "taskJump(Ped ped, bool jump)",
		"description": "GTA SA  05BC",
		"prefix": "taskJump",
		"scope": "source.lua"
	},
	"taskTired": {
		"body": "taskTired(Ped ped, int timeMS)",
		"description": "GTA SA  05BD",
		"prefix": "taskTired",
		"scope": "source.lua"
	},
	"taskDie": {
		"body": "taskDie(Ped ped)",
		"description": "GTA SA  05BE",
		"prefix": "taskDie",
		"scope": "source.lua"
	},
	"taskLookAtChar": {
		"body": "taskLookAtChar(Ped ped, int lookAt, int timeMS)",
		"description": "GTA SA  05BF",
		"prefix": "taskLookAtChar",
		"scope": "source.lua"
	},
	"taskLookAtVehicle": {
		"body": "taskLookAtVehicle(Ped ped, int lookAt, int timeMS)",
		"description": "GTA SA  05C0",
		"prefix": "taskLookAtVehicle",
		"scope": "source.lua"
	},
	"taskSay": {
		"body": "taskSay(Ped ped, int audio)",
		"description": "GTA SA  05C1",
		"prefix": "taskSay",
		"scope": "source.lua"
	},
	"taskShakeFist": {
		"body": "taskShakeFist(Ped ped)",
		"description": "GTA SA  05C2",
		"prefix": "taskShakeFist",
		"scope": "source.lua"
	},
	"taskCower": {
		"body": "taskCower(Ped ped)",
		"description": "GTA SA  05C3",
		"prefix": "taskCower",
		"scope": "source.lua"
	},
	"taskHandsUp": {
		"body": "taskHandsUp(Ped ped, int timeMS)",
		"description": "GTA SA  05C4",
		"prefix": "taskHandsUp",
		"scope": "source.lua"
	},
	"taskDuck": {
		"body": "taskDuck(Ped ped, int timeMS)",
		"description": "GTA SA  05C5",
		"prefix": "taskDuck",
		"scope": "source.lua"
	},
	"taskUseAtm": {
		"body": "taskUseAtm(Ped ped)",
		"description": "GTA SA  05C7",
		"prefix": "taskUseAtm",
		"scope": "source.lua"
	},
	"taskScratchHead": {
		"body": "taskScratchHead(Ped ped)",
		"description": "GTA SA  05C8",
		"prefix": "taskScratchHead",
		"scope": "source.lua"
	},
	"taskLookAbout": {
		"body": "taskLookAbout(Ped ped, int timeMS)",
		"description": "GTA SA  05C9",
		"prefix": "taskLookAbout",
		"scope": "source.lua"
	},
	"taskEnterCarAsPassenger": {
		"body": "taskEnterCarAsPassenger(Ped ped, Vehicle car, int time, int passengerSeat)",
		"description": "GTA SA  05CA",
		"prefix": "taskEnterCarAsPassenger",
		"scope": "source.lua"
	},
	"taskEnterCarAsDriver": {
		"body": "taskEnterCarAsDriver(Ped ped, Vehicle car, int timeMS)",
		"description": "GTA SA  05CB",
		"prefix": "taskEnterCarAsDriver",
		"scope": "source.lua"
	},
	"taskLeaveCar": {
		"body": "taskLeaveCar(Ped ped, Vehicle car)",
		"description": "GTA SA  05CD",
		"prefix": "taskLeaveCar",
		"scope": "source.lua"
	},
	"taskLeaveCarAndFlee": {
		"body": "taskLeaveCarAndFlee(Ped ped, Vehicle car, float X, float Y, float Z)",
		"description": "GTA SA  05CF",
		"prefix": "taskLeaveCarAndFlee",
		"scope": "source.lua"
	},
	"taskCarDriveToCoord": {
		"body": "taskCarDriveToCoord(Ped ped, Vehicle car, float toX, float toY, float toZ, float speed, int int7, int model, int int9)",
		"description": "GTA SA  05D1",
		"prefix": "taskCarDriveToCoord",
		"scope": "source.lua"
	},
	"taskCarDriveWander": {
		"body": "taskCarDriveWander(Ped ped, Vehicle hijackCar, float searchRadius, int trafficBehavior)",
		"description": "GTA SA  05D2",
		"prefix": "taskCarDriveWander",
		"scope": "source.lua"
	},
	"taskGoStraightToCoord": {
		"body": "taskGoStraightToCoord(Ped ped, float toX, float toY, float toZ, int mode, int time)",
		"description": "GTA SA  05D3",
		"prefix": "taskGoStraightToCoord",
		"scope": "source.lua"
	},
	"taskAchieveHeading": {
		"body": "taskAchieveHeading(Ped ped, float angle)",
		"description": "GTA SA  05D4",
		"prefix": "taskAchieveHeading",
		"scope": "source.lua"
	},
	"flushRoute": {
		"body": "flushRoute()",
		"description": "GTA SA  05D6",
		"prefix": "flushRoute",
		"scope": "source.lua"
	},
	"extendRoute": {
		"body": "extendRoute(float pointX, float pointY, float pointZ)",
		"description": "GTA SA  05D7",
		"prefix": "extendRoute",
		"scope": "source.lua"
	},
	"taskFollowPointRoute": {
		"body": "taskFollowPointRoute(Ped ped, int flags1, int flags2)",
		"description": "GTA SA  05D8",
		"prefix": "taskFollowPointRoute",
		"scope": "source.lua"
	},
	"taskGotoChar": {
		"body": "taskGotoChar(Ped ped, Ped toActor, int timelimit, float stopWithinRadius)",
		"description": "GTA SA  05D9",
		"prefix": "taskGotoChar",
		"scope": "source.lua"
	},
	"taskFleePoint": {
		"body": "taskFleePoint(Ped ped, float fromX, float fromY, float fromZ, float awayRadius, int timelimit)",
		"description": "GTA SA  05DA",
		"prefix": "taskFleePoint",
		"scope": "source.lua"
	},
	"taskFleeChar": {
		"body": "taskFleeChar(Ped ped, Ped fromActor, float radius, int timelimit)",
		"description": "GTA SA  05DB",
		"prefix": "taskFleeChar",
		"scope": "source.lua"
	},
	"taskSmartFleePoint": {
		"body": "taskSmartFleePoint(Ped ped, float fromX, float fromY, float fromZ, float stopAtRadius, int timelimit)",
		"description": "GTA SA  05DC",
		"prefix": "taskSmartFleePoint",
		"scope": "source.lua"
	},
	"taskSmartFleeChar": {
		"body": "taskSmartFleeChar(Ped ped, Ped fromActor, float originRadius, int timelimit)",
		"description": "GTA SA  05DD",
		"prefix": "taskSmartFleeChar",
		"scope": "source.lua"
	},
	"taskWanderStandard": {
		"body": "taskWanderStandard(Ped ped)",
		"description": "GTA SA  05DE",
		"prefix": "taskWanderStandard",
		"scope": "source.lua"
	},
	"taskKillCharOnFoot": {
		"body": "taskKillCharOnFoot(Ped ped, Ped killActor)",
		"description": "GTA SA  05E2",
		"prefix": "taskKillCharOnFoot",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCar": {
		"body": "startPlaybackRecordedCar(Vehicle car, int path)",
		"description": "GTA SA  05EB",
		"prefix": "startPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"stopPlaybackRecordedCar": {
		"body": "stopPlaybackRecordedCar(Vehicle car)",
		"description": "GTA SA  05EC",
		"prefix": "stopPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"pausePlaybackRecordedCar": {
		"body": "pausePlaybackRecordedCar(Vehicle car)",
		"description": "GTA SA  05ED",
		"prefix": "pausePlaybackRecordedCar",
		"scope": "source.lua"
	},
	"unpausePlaybackRecordedCar": {
		"body": "unpausePlaybackRecordedCar(Vehicle car)",
		"description": "GTA SA  05EE",
		"prefix": "unpausePlaybackRecordedCar",
		"scope": "source.lua"
	},
	"setCarEscortCarLeft": {
		"body": "setCarEscortCarLeft(Vehicle car, Vehicle followCar)",
		"description": "GTA SA  05F1",
		"prefix": "setCarEscortCarLeft",
		"scope": "source.lua"
	},
	"setCarEscortCarRight": {
		"body": "setCarEscortCarRight(Vehicle car, Vehicle followCar)",
		"description": "GTA SA  05F2",
		"prefix": "setCarEscortCarRight",
		"scope": "source.lua"
	},
	"setCarEscortCarRear": {
		"body": "setCarEscortCarRear(Vehicle car, Vehicle followCar)",
		"description": "GTA SA  05F3",
		"prefix": "setCarEscortCarRear",
		"scope": "source.lua"
	},
	"setCarEscortCarFront": {
		"body": "setCarEscortCarFront(Vehicle car, Vehicle followCar)",
		"description": "GTA SA  05F4",
		"prefix": "setCarEscortCarFront",
		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoord": {
		"body": "taskFollowPathNodesToCoord(Ped ped, float pathX, float pathY, float pathZ, int mode, int time)",
		"description": "GTA SA  05F5",
		"prefix": "taskFollowPathNodesToCoord",
		"scope": "source.lua"
	},
	"isCharInAngledArea2d": {
		"body": "bool result = isCharInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)",
		"description": "GTA SA  05F6",
		"prefix": "isCharInAngledArea2d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot2d": {
		"body": "bool result = isCharInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)",
		"description": "GTA SA  05F7",
		"prefix": "isCharInAngledAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar2d": {
		"body": "bool result = isCharInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)",
		"description": "GTA SA  05F8",
		"prefix": "isCharInAngledAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea2d": {
		"body": "bool result = isCharStoppedInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)",
		"description": "GTA SA  05F9",
		"prefix": "isCharStoppedInAngledArea2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot2d": {
		"body": "bool result = isCharStoppedInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)",
		"description": "GTA SA  05FA",
		"prefix": "isCharStoppedInAngledAreaOnFoot2d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar2d": {
		"body": "bool result = isCharStoppedInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)",
		"description": "GTA SA  05FB",
		"prefix": "isCharStoppedInAngledAreaInCar2d",
		"scope": "source.lua"
	},
	"isCharInAngledArea3d": {
		"body": "bool result = isCharInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)",
		"description": "GTA SA  05FC",
		"prefix": "isCharInAngledArea3d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot3d": {
		"body": "bool result = isCharInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)",
		"description": "GTA SA  05FD",
		"prefix": "isCharInAngledAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar3d": {
		"body": "bool result = isCharInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)",
		"description": "GTA SA  05FE",
		"prefix": "isCharInAngledAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea3d": {
		"body": "bool result = isCharStoppedInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)",
		"description": "GTA SA  05FF",
		"prefix": "isCharStoppedInAngledArea3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot3d": {
		"body": "bool result = isCharStoppedInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)",
		"description": "GTA SA  0600",
		"prefix": "isCharStoppedInAngledAreaOnFoot3d",
		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar3d": {
		"body": "bool result = isCharStoppedInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)",
		"description": "GTA SA  0601",
		"prefix": "isCharStoppedInAngledAreaInCar3d",
		"scope": "source.lua"
	},
	"isCharInTaxi": {
		"body": "bool result = isCharInTaxi(Ped ped)",
		"description": "GTA SA  0602",
		"prefix": "isCharInTaxi",
		"scope": "source.lua"
	},
	"taskGoToCoordAnyMeans": {
		"body": "taskGoToCoordAnyMeans(Ped ped, float toX, float toY, float toZ, int mode, Vehicle useCar)",
		"description": "GTA SA  0603",
		"prefix": "taskGoToCoordAnyMeans",
		"scope": "source.lua"
	},
	"getHeadingFromVector2d": {
		"body": "float zAngle = getHeadingFromVector2d(float pX, float pY)",
		"description": "GTA SA  0604",
		"prefix": "getHeadingFromVector2d",
		"scope": "source.lua"
	},
	"taskPlayAnim": {
		"body": "taskPlayAnim(Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time)",
		"description": "GTA SA  0605",
		"prefix": "taskPlayAnim",
		"scope": "source.lua"
	},
	"loadPathNodesInArea": {
		"body": "loadPathNodesInArea(float x1, float y1, float x2, float y2)",
		"description": "GTA SA  0606",
		"prefix": "loadPathNodesInArea",
		"scope": "source.lua"
	},
	"releasePathNodes": {
		"body": "releasePathNodes()",
		"description": "GTA SA  0607",
		"prefix": "releasePathNodes",
		"scope": "source.lua"
	},
	"loadCharDecisionMaker": {
		"body": "int maker = loadCharDecisionMaker(int type)",
		"description": "GTA SA  060A",
		"prefix": "loadCharDecisionMaker",
		"scope": "source.lua"
	},
	"setCharDecisionMaker": {
		"body": "setCharDecisionMaker(Ped ped, int maker)",
		"description": "GTA SA  060B",
		"prefix": "setCharDecisionMaker",
		"scope": "source.lua"
	},
	"setTextDropshadow": {
		"body": "setTextDropshadow(int shadow, int r, int g, int b, int a)",
		"description": "GTA SA  060D",
		"prefix": "setTextDropshadow",
		"scope": "source.lua"
	},
	"isPlaybackGoingOnForCar": {
		"body": "bool result = isPlaybackGoingOnForCar(Vehicle car)",
		"description": "GTA SA  060E",
		"prefix": "isPlaybackGoingOnForCar",
		"scope": "source.lua"
	},
	"setSenseRange": {
		"body": "setSenseRange(Ped ped, float accuracy)",
		"description": "GTA SA  060F",
		"prefix": "setSenseRange",
		"scope": "source.lua"
	},
	"isCharPlayingAnim": {
		"body": "bool result = isCharPlayingAnim(Ped ped, string animation)",
		"description": "GTA SA  0611",
		"prefix": "isCharPlayingAnim",
		"scope": "source.lua"
	},
	"setCharAnimPlayingFlag": {
		"body": "setCharAnimPlayingFlag(Ped ped, string animation, bool flag)",
		"description": "GTA SA  0612",
		"prefix": "setCharAnimPlayingFlag",
		"scope": "source.lua"
	},
	"getCharAnimCurrentTime": {
		"body": "float time = getCharAnimCurrentTime(Ped ped, string animation)",
		"description": "GTA SA  0613",
		"prefix": "getCharAnimCurrentTime",
		"scope": "source.lua"
	},
	"setCharAnimCurrentTime": {
		"body": "setCharAnimCurrentTime(Ped ped, string animation, float time)",
		"description": "GTA SA  0614",
		"prefix": "setCharAnimCurrentTime",
		"scope": "source.lua"
	},
	"openSequenceTask": {
		"body": "int task = openSequenceTask()",
		"description": "GTA SA  0615",
		"prefix": "openSequenceTask",
		"scope": "source.lua"
	},
	"closeSequenceTask": {
		"body": "closeSequenceTask(int task)",
		"description": "GTA SA  0616",
		"prefix": "closeSequenceTask",
		"scope": "source.lua"
	},
	"performSequenceTask": {
		"body": "performSequenceTask(Ped ped, int task)",
		"description": "GTA SA  0618",
		"prefix": "performSequenceTask",
		"scope": "source.lua"
	},
	"setCharCollision": {
		"body": "setCharCollision(Ped ped, bool enable)",
		"description": "GTA SA  0619",
		"prefix": "setCharCollision",
		"scope": "source.lua"
	},
	"getCharAnimTotalTime": {
		"body": "float totalTime = getCharAnimTotalTime(Ped ped, string animation)",
		"description": "GTA SA  061A",
		"prefix": "getCharAnimTotalTime",
		"scope": "source.lua"
	},
	"clearSequenceTask": {
		"body": "clearSequenceTask(int task)",
		"description": "GTA SA  061B",
		"prefix": "clearSequenceTask",
		"scope": "source.lua"
	},
	"addAttractor": {
		"body": "int handle = addAttractor(float originX, float originY, float originZ, float zAngle, float unknownAngle, int taskSequence)",
		"description": "GTA SA  061D",
		"prefix": "addAttractor",
		"scope": "source.lua"
	},
	"clearAttractor": {
		"body": "clearAttractor(int handle)",
		"description": "GTA SA  061E",
		"prefix": "clearAttractor",
		"scope": "source.lua"
	},
	"createCharAtAttractor": {
		"body": "Ped ped = createCharAtAttractor(int pedtype, Model modelId, int ASOrigin, int task)",
		"description": "GTA SA  0621",
		"prefix": "createCharAtAttractor",
		"scope": "source.lua"
	},
	"taskLeaveCarImmediately": {
		"body": "taskLeaveCarImmediately(Ped ped, Vehicle car)",
		"description": "GTA SA  0622",
		"prefix": "taskLeaveCarImmediately",
		"scope": "source.lua"
	},
	"incrementIntStat": {
		"body": "incrementIntStat(int stat, int add)",
		"description": "GTA SA  0623",
		"prefix": "incrementIntStat",
		"scope": "source.lua"
	},
	"incrementFloatStat": {
		"body": "incrementFloatStat(int stat, float add)",
		"description": "GTA SA  0624",
		"prefix": "incrementFloatStat",
		"scope": "source.lua"
	},
	"decrementIntStat": {
		"body": "decrementIntStat(int stat, int int)",
		"description": "GTA SA  0625",
		"prefix": "decrementIntStat",
		"scope": "source.lua"
	},
	"decrementFloatStat": {
		"body": "decrementFloatStat(int stat, float float)",
		"description": "GTA SA  0626",
		"prefix": "decrementFloatStat",
		"scope": "source.lua"
	},
	"registerIntStat": {
		"body": "registerIntStat(int stat, int int)",
		"description": "GTA SA  0627",
		"prefix": "registerIntStat",
		"scope": "source.lua"
	},
	"registerFloatStat": {
		"body": "registerFloatStat(int stat, float value)",
		"description": "GTA SA  0628",
		"prefix": "registerFloatStat",
		"scope": "source.lua"
	},
	"setIntStat": {
		"body": "setIntStat(int stat, int int)",
		"description": "GTA SA  0629",
		"prefix": "setIntStat",
		"scope": "source.lua"
	},
	"setFloatStat": {
		"body": "setFloatStat(int stat, float float)",
		"description": "GTA SA  062A",
		"prefix": "setFloatStat",
		"scope": "source.lua"
	},
	"getScriptTaskStatus": {
		"body": "int status = getScriptTaskStatus(Ped ped, int task)",
		"description": "GTA SA  062E",
		"prefix": "getScriptTaskStatus",
		"scope": "source.lua"
	},
	"createGroup": {
		"body": "int group = createGroup(int type)",
		"description": "GTA SA  062F",
		"prefix": "createGroup",
		"scope": "source.lua"
	},
	"setGroupLeader": {
		"body": "setGroupLeader(int group, Ped ped)",
		"description": "GTA SA  0630",
		"prefix": "setGroupLeader",
		"scope": "source.lua"
	},
	"setGroupMember": {
		"body": "setGroupMember(int group, Ped ped)",
		"description": "GTA SA  0631",
		"prefix": "setGroupMember",
		"scope": "source.lua"
	},
	"removeGroup": {
		"body": "removeGroup(int group)",
		"description": "GTA SA  0632",
		"prefix": "removeGroup",
		"scope": "source.lua"
	},
	"taskLeaveAnyCar": {
		"body": "taskLeaveAnyCar(Ped ped)",
		"description": "GTA SA  0633",
		"prefix": "taskLeaveAnyCar",
		"scope": "source.lua"
	},
	"taskKillCharOnFootWhileDucking": {
		"body": "taskKillCharOnFootWhileDucking(Ped ped, int weapon, int flags, int time, int chance)",
		"description": "GTA SA  0634",
		"prefix": "taskKillCharOnFootWhileDucking",
		"scope": "source.lua"
	},
	"taskAimGunAtChar": {
		"body": "taskAimGunAtChar(Ped ped, int aimAt, int timeMS)",
		"description": "GTA SA  0635",
		"prefix": "taskAimGunAtChar",
		"scope": "source.lua"
	},
	"taskGoToCoordWhileShooting": {
		"body": "taskGoToCoordWhileShooting(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, int lookAtActor)",
		"description": "GTA SA  0637",
		"prefix": "taskGoToCoordWhileShooting",
		"scope": "source.lua"
	},
	"taskStayInSamePlace": {
		"body": "taskStayInSamePlace(Ped ped, bool stay)",
		"description": "GTA SA  0638",
		"prefix": "taskStayInSamePlace",
		"scope": "source.lua"
	},
	"taskTurnCharToFaceChar": {
		"body": "taskTurnCharToFaceChar(Ped ped, int rotateTo)",
		"description": "GTA SA  0639",
		"prefix": "taskTurnCharToFaceChar",
		"scope": "source.lua"
	},
	"isCharAtScriptedAttractor": {
		"body": "bool result = isCharAtScriptedAttractor(Ped ped, int origin)",
		"description": "GTA SA  0642",
		"prefix": "isCharAtScriptedAttractor",
		"scope": "source.lua"
	},
	"setSequenceToRepeat": {
		"body": "setSequenceToRepeat(int pack, bool loop)",
		"description": "GTA SA  0643",
		"prefix": "setSequenceToRepeat",
		"scope": "source.lua"
	},
	"getSequenceProgress": {
		"body": "int progess = getSequenceProgress(Ped ped)",
		"description": "GTA SA  0646",
		"prefix": "getSequenceProgress",
		"scope": "source.lua"
	},
	"clearLookAt": {
		"body": "clearLookAt(Ped ped)",
		"description": "GTA SA  0647",
		"prefix": "clearLookAt",
		"scope": "source.lua"
	},
	"setFollowNodeThresholdDistance": {
		"body": "setFollowNodeThresholdDistance(Ped ped, float dist)",
		"description": "GTA SA  0648",
		"prefix": "setFollowNodeThresholdDistance",
		"scope": "source.lua"
	},
	"createFxSystem": {
		"body": "Particle particle = createFxSystem(string particle, float pX, float pY, float pZ, int type)",
		"description": "GTA SA  064B",
		"prefix": "createFxSystem",
		"scope": "source.lua"
	},
	"playFxSystem": {
		"body": "playFxSystem(Particle particle)",
		"description": "GTA SA  064C",
		"prefix": "playFxSystem",
		"scope": "source.lua"
	},
	"stopFxSystem": {
		"body": "stopFxSystem(Particle particle)",
		"description": "GTA SA  064E",
		"prefix": "stopFxSystem",
		"scope": "source.lua"
	},
	"playAndKillFxSystem": {
		"body": "playAndKillFxSystem(Particle particle)",
		"description": "GTA SA  064F",
		"prefix": "playAndKillFxSystem",
		"scope": "source.lua"
	},
	"killFxSystem": {
		"body": "killFxSystem(Particle particle)",
		"description": "GTA SA  0650",
		"prefix": "killFxSystem",
		"scope": "source.lua"
	},
	"getIntStat": {
		"body": "int stat = getIntStat(int stat)",
		"description": "GTA SA  0652",
		"prefix": "getIntStat",
		"scope": "source.lua"
	},
	"getFloatStat": {
		"body": "float stat = getFloatStat(int stat)",
		"description": "GTA SA  0653",
		"prefix": "getFloatStat",
		"scope": "source.lua"
	},
	"setObjectRenderScorched": {
		"body": "setObjectRenderScorched(Object object, bool fireproof)",
		"description": "GTA SA  0654",
		"prefix": "setObjectRenderScorched",
		"scope": "source.lua"
	},
	"taskLookAtObject": {
		"body": "taskLookAtObject(Ped ped, int lookAt, int timeMS)",
		"description": "GTA SA  0655",
		"prefix": "taskLookAtObject",
		"scope": "source.lua"
	},
	"limitAngle": {
		"body": "float float = limitAngle(float angle)",
		"description": "GTA SA  0656",
		"prefix": "limitAngle",
		"scope": "source.lua"
	},
	"openCarDoor": {
		"body": "openCarDoor(Vehicle car, int door)",
		"description": "GTA SA  0657",
		"prefix": "openCarDoor",
		"scope": "source.lua"
	},
	"getPickupCoordinates": {
		"body": "float X, float Y, float Z = getPickupCoordinates(Pickup pickup)",
		"description": "GTA SA  065B",
		"prefix": "getPickupCoordinates",
		"scope": "source.lua"
	},
	"removeDecisionMaker": {
		"body": "removeDecisionMaker(int maker)",
		"description": "GTA SA  065C",
		"prefix": "removeDecisionMaker",
		"scope": "source.lua"
	},
	"getCharModel": {
		"body": "Model modelId = getCharModel(Ped ped)",
		"description": "GTA SA  0665",
		"prefix": "getCharModel",
		"scope": "source.lua"
	},
	"taskAimGunAtCoord": {
		"body": "taskAimGunAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)",
		"description": "GTA SA  0667",
		"prefix": "taskAimGunAtCoord",
		"scope": "source.lua"
	},
	"taskShootAtCoord": {
		"body": "taskShootAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)",
		"description": "GTA SA  0668",
		"prefix": "taskShootAtCoord",
		"scope": "source.lua"
	},
	"createFxSystemOnChar": {
		"body": "Particle particle = createFxSystemOnChar(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, int type)",
		"description": "GTA SA  0669",
		"prefix": "createFxSystemOnChar",
		"scope": "source.lua"
	},
	"createFxSystemOnCharWithDirection": {
		"body": "Particle particle = createFxSystemOnCharWithDirection(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)",
		"description": "GTA SA  066A",
		"prefix": "createFxSystemOnCharWithDirection",
		"scope": "source.lua"
	},
	"createFxSystemOnCar": {
		"body": "Particle particle = createFxSystemOnCar(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, int type)",
		"description": "GTA SA  066B",
		"prefix": "createFxSystemOnCar",
		"scope": "source.lua"
	},
	"createFxSystemOnCarWithDirection": {
		"body": "Particle particle = createFxSystemOnCarWithDirection(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)",
		"description": "GTA SA  066C",
		"prefix": "createFxSystemOnCarWithDirection",
		"scope": "source.lua"
	},
	"createFxSystemOnObject": {
		"body": "Particle particle = createFxSystemOnObject(string particle, Object object, float offsetX, float offsetY, float offsetZ, int type)",
		"description": "GTA SA  066D",
		"prefix": "createFxSystemOnObject",
		"scope": "source.lua"
	},
	"createFxSystemOnObjectWithDirection": {
		"body": "Particle particle = createFxSystemOnObjectWithDirection(string particle, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int flag)",
		"description": "GTA SA  066E",
		"prefix": "createFxSystemOnObjectWithDirection",
		"scope": "source.lua"
	},
	"taskDestroyCar": {
		"body": "taskDestroyCar(Ped ped, Vehicle car)",
		"description": "GTA SA  0672",
		"prefix": "taskDestroyCar",
		"scope": "source.lua"
	},
	"taskDiveAndGetUp": {
		"body": "taskDiveAndGetUp(Ped ped, float toOffsetX, float toOffsetY, int time)",
		"description": "GTA SA  0673",
		"prefix": "taskDiveAndGetUp",
		"scope": "source.lua"
	},
	"customPlateForNextCar": {
		"body": "customPlateForNextCar(Model modelId, string numberplate)",
		"description": "GTA SA  0674",
		"prefix": "customPlateForNextCar",
		"scope": "source.lua"
	},
	"taskShuffleToNextCarSeat": {
		"body": "taskShuffleToNextCarSeat(Ped ped, Vehicle car)",
		"description": "GTA SA  0676",
		"prefix": "taskShuffleToNextCarSeat",
		"scope": "source.lua"
	},
	"taskChatWithChar": {
		"body": "taskChatWithChar(Ped ped, int withActor, bool flag, int unknownFlag)",
		"description": "GTA SA  0677",
		"prefix": "taskChatWithChar",
		"scope": "source.lua"
	},
	"attachCameraToVehicle": {
		"body": "attachCameraToVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)",
		"description": "GTA SA  0679",
		"prefix": "attachCameraToVehicle",
		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtVehicle": {
		"body": "attachCameraToVehicleLookAtVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, int toCar, float tilt, int switchstyle)",
		"description": "GTA SA  067A",
		"prefix": "attachCameraToVehicleLookAtVehicle",
		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtChar": {
		"body": "attachCameraToVehicleLookAtChar(Vehicle car, float offsetX, float offsetY, float offsetZ, Ped ped, float tilt, int switchstyle)",
		"description": "GTA SA  067B",
		"prefix": "attachCameraToVehicleLookAtChar",
		"scope": "source.lua"
	},
	"attachCameraToChar": {
		"body": "attachCameraToChar(Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)",
		"description": "GTA SA  067C",
		"prefix": "attachCameraToChar",
		"scope": "source.lua"
	},
	"attachCameraToCharLookAtChar": {
		"body": "attachCameraToCharLookAtChar(Ped ped, float offsetX, float offsetY, float offsetZ, int targetActor, float tilt, int switchstyle)",
		"description": "GTA SA  067E",
		"prefix": "attachCameraToCharLookAtChar",
		"scope": "source.lua"
	},
	"forceCarLights": {
		"body": "forceCarLights(Vehicle car, int lights)",
		"description": "GTA SA  067F",
		"prefix": "forceCarLights",
		"scope": "source.lua"
	},
	"addPedtypeAsAttractorUser": {
		"body": "addPedtypeAsAttractorUser(int ASOrigin, int pedtype)",
		"description": "GTA SA  0680",
		"prefix": "addPedtypeAsAttractorUser",
		"scope": "source.lua"
	},
	"attachObjectToCar": {
		"body": "attachObjectToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  0681",
		"prefix": "attachObjectToCar",
		"scope": "source.lua"
	},
	"detachObject": {
		"body": "detachObject(Object object, float X, float Y, float Z, bool collisionDetection)",
		"description": "GTA SA  0682",
		"prefix": "detachObject",
		"scope": "source.lua"
	},
	"attachCarToCar": {
		"body": "attachCarToCar(Vehicle car, int toCar, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  0683",
		"prefix": "attachCarToCar",
		"scope": "source.lua"
	},
	"detachCar": {
		"body": "detachCar(Vehicle car, float X, float Y, float Z, bool collisionDetection)",
		"description": "GTA SA  0684",
		"prefix": "detachCar",
		"scope": "source.lua"
	},
	"isObjectAttached": {
		"body": "bool result = isObjectAttached(Object object)",
		"description": "GTA SA  0685",
		"prefix": "isObjectAttached",
		"scope": "source.lua"
	},
	"isVehicleAttached": {
		"body": "bool result = isVehicleAttached(Vehicle car)",
		"description": "GTA SA  0686",
		"prefix": "isVehicleAttached",
		"scope": "source.lua"
	},
	"clearCharTasks": {
		"body": "clearCharTasks(Ped ped)",
		"description": "GTA SA  0687",
		"prefix": "clearCharTasks",
		"scope": "source.lua"
	},
	"taskTogglePedThreatScanner": {
		"body": "taskTogglePedThreatScanner(Ped ped, bool unknownFlag1, bool unknownFlag2, bool unknownFlag3)",
		"description": "GTA SA  0688",
		"prefix": "taskTogglePedThreatScanner",
		"scope": "source.lua"
	},
	"popCarDoor": {
		"body": "popCarDoor(Vehicle car, int door, bool visible)",
		"description": "GTA SA  0689",
		"prefix": "popCarDoor",
		"scope": "source.lua"
	},
	"fixCarDoor": {
		"body": "fixCarDoor(Vehicle car, int door)",
		"description": "GTA SA  068A",
		"prefix": "fixCarDoor",
		"scope": "source.lua"
	},
	"taskEveryoneLeaveCar": {
		"body": "taskEveryoneLeaveCar(Vehicle car)",
		"description": "GTA SA  068B",
		"prefix": "taskEveryoneLeaveCar",
		"scope": "source.lua"
	},
	"isPlayerTargettingAnything": {
		"body": "bool result = isPlayerTargettingAnything(Player player)",
		"description": "GTA SA  068C",
		"prefix": "isPlayerTargettingAnything",
		"scope": "source.lua"
	},
	"getActiveCameraCoordinates": {
		"body": "float X, float Y, float Z = getActiveCameraCoordinates()",
		"description": "GTA SA  068D",
		"prefix": "getActiveCameraCoordinates",
		"scope": "source.lua"
	},
	"getActiveCameraPointAt": {
		"body": "float X, float Y, float Z = getActiveCameraPointAt()",
		"description": "GTA SA  068E",
		"prefix": "getActiveCameraPointAt",
		"scope": "source.lua"
	},
	"popCarPanel": {
		"body": "popCarPanel(Vehicle car, int component, bool effectFlag)",
		"description": "GTA SA  0697",
		"prefix": "popCarPanel",
		"scope": "source.lua"
	},
	"fixCarPanel": {
		"body": "fixCarPanel(Vehicle car, int componentB)",
		"description": "GTA SA  0698",
		"prefix": "fixCarPanel",
		"scope": "source.lua"
	},
	"fixCarTire": {
		"body": "fixCarTire(Vehicle car, int tire)",
		"description": "GTA SA  0699",
		"prefix": "fixCarTire",
		"scope": "source.lua"
	},
	"attachObjectToObject": {
		"body": "attachObjectToObject(Object object, int toObject, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  069A",
		"prefix": "attachObjectToObject",
		"scope": "source.lua"
	},
	"attachObjectToChar": {
		"body": "attachObjectToChar(Object object, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  069B",
		"prefix": "attachObjectToChar",
		"scope": "source.lua"
	},
	"getCarSpeedVector": {
		"body": "float vecX, float vecY, float vecZ = getCarSpeedVector(Vehicle car)",
		"description": "GTA SA  06A2",
		"prefix": "getCarSpeedVector",
		"scope": "source.lua"
	},
	"getCarMass": {
		"body": "float mass = getCarMass(Vehicle car)",
		"description": "GTA SA  06A3",
		"prefix": "getCarMass",
		"scope": "source.lua"
	},
	"taskDiveFromAttachmentAndGetUp": {
		"body": "taskDiveFromAttachmentAndGetUp(Ped ped, int timeMS)",
		"description": "GTA SA  06A5",
		"prefix": "taskDiveFromAttachmentAndGetUp",
		"scope": "source.lua"
	},
	"attachCharToBike": {
		"body": "attachCharToBike(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngle1, float shootingAngle2, int weapon)",
		"description": "GTA SA  06A7",
		"prefix": "attachCharToBike",
		"scope": "source.lua"
	},
	"taskGotoCharOffset": {
		"body": "taskGotoCharOffset(Ped ped, int toActor, int timelimit, float approachDistance, float approachAngle)",
		"description": "GTA SA  06A8",
		"prefix": "taskGotoCharOffset",
		"scope": "source.lua"
	},
	"taskLookAtCoord": {
		"body": "taskLookAtCoord(Ped ped, float toX, float toY, float toZ, int timeMS)",
		"description": "GTA SA  06A9",
		"prefix": "taskLookAtCoord",
		"scope": "source.lua"
	},
	"hideCharWeaponForScriptedCutscene": {
		"body": "hideCharWeaponForScriptedCutscene(Ped ped, bool hide)",
		"description": "GTA SA  06AB",
		"prefix": "hideCharWeaponForScriptedCutscene",
		"scope": "source.lua"
	},
	"getCharSpeed": {
		"body": "float speed = getCharSpeed(Ped ped)",
		"description": "GTA SA  06AC",
		"prefix": "getCharSpeed",
		"scope": "source.lua"
	},
	"setGroupDecisionMaker": {
		"body": "setGroupDecisionMaker(int group, int maker)",
		"description": "GTA SA  06AD",
		"prefix": "setGroupDecisionMaker",
		"scope": "source.lua"
	},
	"loadGroupDecisionMaker": {
		"body": "int maker = loadGroupDecisionMaker(int type)",
		"description": "GTA SA  06AE",
		"prefix": "loadGroupDecisionMaker",
		"scope": "source.lua"
	},
	"disablePlayerSprint": {
		"body": "disablePlayerSprint(Player player, bool mode)",
		"description": "GTA SA  06AF",
		"prefix": "disablePlayerSprint",
		"scope": "source.lua"
	},
	"taskSitDown": {
		"body": "taskSitDown(Ped ped, int timeMS)",
		"description": "GTA SA  06B0",
		"prefix": "taskSitDown",
		"scope": "source.lua"
	},
	"createSearchlight": {
		"body": "Searchlight searchlight = createSearchlight(float atX, float atY, float atZ, float targetX, float targetY, float targetZ, float radius1, float radius2)",
		"description": "GTA SA  06B1",
		"prefix": "createSearchlight",
		"scope": "source.lua"
	},
	"deleteSearchlight": {
		"body": "deleteSearchlight(Searchlight searchlight)",
		"description": "GTA SA  06B2",
		"prefix": "deleteSearchlight",
		"scope": "source.lua"
	},
	"doesSearchlightExist": {
		"body": "bool result = doesSearchlightExist(Searchlight searchlight)",
		"description": "GTA SA  06B3",
		"prefix": "doesSearchlightExist",
		"scope": "source.lua"
	},
	"moveSearchlightBetweenCoords": {
		"body": "moveSearchlightBetweenCoords(Searchlight searchlight, float fromX, float fromY, float fromZ, float toX, float toY, float toZ, float speed)",
		"description": "GTA SA  06B4",
		"prefix": "moveSearchlightBetweenCoords",
		"scope": "source.lua"
	},
	"pointSearchlightAtCoord": {
		"body": "pointSearchlightAtCoord(Searchlight searchlight, float toX, float toY, float toZ, float speed)",
		"description": "GTA SA  06B5",
		"prefix": "pointSearchlightAtCoord",
		"scope": "source.lua"
	},
	"pointSearchlightAtChar": {
		"body": "pointSearchlightAtChar(Searchlight searchlight, Ped ped, float speed)",
		"description": "GTA SA  06B6",
		"prefix": "pointSearchlightAtChar",
		"scope": "source.lua"
	},
	"isCharInSearchlight": {
		"body": "bool result = isCharInSearchlight(Searchlight searchlight, Ped ped)",
		"description": "GTA SA  06B7",
		"prefix": "isCharInSearchlight",
		"scope": "source.lua"
	},
	"hasCutsceneLoaded": {
		"body": "bool result = hasCutsceneLoaded()",
		"description": "GTA SA  06B9",
		"prefix": "hasCutsceneLoaded",
		"scope": "source.lua"
	},
	"taskTurnCharToFaceCoord": {
		"body": "taskTurnCharToFaceCoord(Ped ped, float atX, float atY, float atZ)",
		"description": "GTA SA  06BA",
		"prefix": "taskTurnCharToFaceCoord",
		"scope": "source.lua"
	},
	"taskDrivePointRoute": {
		"body": "taskDrivePointRoute(Ped ped, Vehicle car, float speed)",
		"description": "GTA SA  06BB",
		"prefix": "taskDrivePointRoute",
		"scope": "source.lua"
	},
	"fireSingleBullet": {
		"body": "fireSingleBullet(float fromX, float fromY, float fromZ, float targetX, float targetY, float targetZ, int energy)",
		"description": "GTA SA  06BC",
		"prefix": "fireSingleBullet",
		"scope": "source.lua"
	},
	"isLineOfSightClear": {
		"body": "bool result = isLineOfSightClear(float fromX, float fromY, float fromZ, float toX, float toY, float toZ, bool checkBuildings, bool checkVehicles, bool checkActors, bool checkObjects, bool checkParticles)",
		"description": "GTA SA  06BD",
		"prefix": "isLineOfSightClear",
		"scope": "source.lua"
	},
	"getCarRoll": {
		"body": "float roll = getCarRoll(Vehicle car)",
		"description": "GTA SA  06BE",
		"prefix": "getCarRoll",
		"scope": "source.lua"
	},
	"pointSearchlightAtVehicle": {
		"body": "pointSearchlightAtVehicle(Searchlight searchlight, Vehicle car, float speed)",
		"description": "GTA SA  06BF",
		"prefix": "pointSearchlightAtVehicle",
		"scope": "source.lua"
	},
	"isVehicleInSearchlight": {
		"body": "bool result = isVehicleInSearchlight(int int, Vehicle car)",
		"description": "GTA SA  06C0",
		"prefix": "isVehicleInSearchlight",
		"scope": "source.lua"
	},
	"createSearchlightOnVehicle": {
		"body": "Searchlight searchlight = createSearchlightOnVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float targetX, float targetY, float targetZ, float radius, float radius)",
		"description": "GTA SA  06C1",
		"prefix": "createSearchlightOnVehicle",
		"scope": "source.lua"
	},
	"taskGoToCoordWhileAiming": {
		"body": "taskGoToCoordWhileAiming(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, Ped ped, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  06C2",
		"prefix": "taskGoToCoordWhileAiming",
		"scope": "source.lua"
	},
	"getNumberOfFiresInRange": {
		"body": "int num = getNumberOfFiresInRange(float atX, float atY, float atZ, float radius)",
		"description": "GTA SA  06C3",
		"prefix": "getNumberOfFiresInRange",
		"scope": "source.lua"
	},
	"addBlipForSearchlight": {
		"body": "Marker marker = addBlipForSearchlight(Searchlight searchlight)",
		"description": "GTA SA  06C4",
		"prefix": "addBlipForSearchlight",
		"scope": "source.lua"
	},
	"skipToEndAndStopPlaybackRecordedCar": {
		"body": "skipToEndAndStopPlaybackRecordedCar(Vehicle car)",
		"description": "GTA SA  06C5",
		"prefix": "skipToEndAndStopPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"taskCarTempAction": {
		"body": "taskCarTempAction(Ped ped, Vehicle car, int performAction, int timelimit)",
		"description": "GTA SA  06C7",
		"prefix": "taskCarTempAction",
		"scope": "source.lua"
	},
	"setLaRiots": {
		"body": "setLaRiots(bool enable)",
		"description": "GTA SA  06C8",
		"prefix": "setLaRiots",
		"scope": "source.lua"
	},
	"removeCharFromGroup": {
		"body": "removeCharFromGroup(Ped ped)",
		"description": "GTA SA  06C9",
		"prefix": "removeCharFromGroup",
		"scope": "source.lua"
	},
	"attachSearchlightToSearchlightObject": {
		"body": "attachSearchlightToSearchlightObject(Searchlight searchlight, int tower, int housing, int bulb, float offsetX, float offsetY, float offsetZ)",
		"description": "GTA SA  06CA",
		"prefix": "attachSearchlightToSearchlightObject",
		"scope": "source.lua"
	},
	"switchEmergencyServices": {
		"body": "switchEmergencyServices(bool enable)",
		"description": "GTA SA  06D0",
		"prefix": "switchEmergencyServices",
		"scope": "source.lua"
	},
	"createCheckpoint": {
		"body": "Checkpoint checkpoint = createCheckpoint(int type, float atX, float atY, float atZ, float pointX, float pointY, float pointZ, float radius)",
		"description": "GTA SA  06D5",
		"prefix": "createCheckpoint",
		"scope": "source.lua"
	},
	"deleteCheckpoint": {
		"body": "deleteCheckpoint(Checkpoint checkpoint)",
		"description": "GTA SA  06D6",
		"prefix": "deleteCheckpoint",
		"scope": "source.lua"
	},
	"switchRandomTrains": {
		"body": "switchRandomTrains(bool enable)",
		"description": "GTA SA  06D7",
		"prefix": "switchRandomTrains",
		"scope": "source.lua"
	},
	"createMissionTrain": {
		"body": "Vehicle train = createMissionTrain(int type, float atX, float atY, float atZ, bool direction)",
		"description": "GTA SA  06D8",
		"prefix": "createMissionTrain",
		"scope": "source.lua"
	},
	"deleteMissionTrains": {
		"body": "deleteMissionTrains()",
		"description": "GTA SA  06D9",
		"prefix": "deleteMissionTrains",
		"scope": "source.lua"
	},
	"markMissionTrainsAsNoLongerNeeded": {
		"body": "markMissionTrainsAsNoLongerNeeded()",
		"description": "GTA SA  06DA",
		"prefix": "markMissionTrainsAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"deleteAllTrains": {
		"body": "deleteAllTrains()",
		"description": "GTA SA  06DB",
		"prefix": "deleteAllTrains",
		"scope": "source.lua"
	},
	"setTrainSpeed": {
		"body": "setTrainSpeed(Vehicle train, float speed)",
		"description": "GTA SA  06DC",
		"prefix": "setTrainSpeed",
		"scope": "source.lua"
	},
	"setTrainCruiseSpeed": {
		"body": "setTrainCruiseSpeed(Vehicle train, float speed)",
		"description": "GTA SA  06DD",
		"prefix": "setTrainCruiseSpeed",
		"scope": "source.lua"
	},
	"getTrainCaboose": {
		"body": "int caboose = getTrainCaboose(Vehicle train)",
		"description": "GTA SA  06DE",
		"prefix": "getTrainCaboose",
		"scope": "source.lua"
	},
	"deletePlayer": {
		"body": "deletePlayer(Player player)",
		"description": "GTA SA  06DF",
		"prefix": "deletePlayer",
		"scope": "source.lua"
	},
	"setTwoPlayerCameraMode": {
		"body": "setTwoPlayerCameraMode(bool mode)",
		"description": "GTA SA  06E0",
		"prefix": "setTwoPlayerCameraMode",
		"scope": "source.lua"
	},
	"taskCarMission": {
		"body": "taskCarMission(Ped ped, Vehicle car, int targetCar, int order, float maxSpeed, int trafficFlag)",
		"description": "GTA SA  06E1",
		"prefix": "taskCarMission",
		"scope": "source.lua"
	},
	"taskGoToObject": {
		"body": "taskGoToObject(Ped ped, int toObject, int timelimit, float stopWithinRadius)",
		"description": "GTA SA  06E2",
		"prefix": "taskGoToObject",
		"scope": "source.lua"
	},
	"taskWeaponRoll": {
		"body": "taskWeaponRoll(Ped ped, bool roll)",
		"description": "GTA SA  06E3",
		"prefix": "taskWeaponRoll",
		"scope": "source.lua"
	},
	"taskCharArrestChar": {
		"body": "taskCharArrestChar(Ped ped, int bustActor)",
		"description": "GTA SA  06E4",
		"prefix": "taskCharArrestChar",
		"scope": "source.lua"
	},
	"getAvailableVehicleMod": {
		"body": "Model itemID = getAvailableVehicleMod(Vehicle car, int poolIndex)",
		"description": "GTA SA  06E5",
		"prefix": "getAvailableVehicleMod",
		"scope": "source.lua"
	},
	"getVehicleModType": {
		"body": "int type = getVehicleModType(Model component)",
		"description": "GTA SA  06E6",
		"prefix": "getVehicleModType",
		"scope": "source.lua"
	},
	"addVehicleMod": {
		"body": "int componentId = addVehicleMod(Vehicle car, Model component)",
		"description": "GTA SA  06E7",
		"prefix": "addVehicleMod",
		"scope": "source.lua"
	},
	"removeVehicleMod": {
		"body": "removeVehicleMod(Vehicle car, int componentId)",
		"description": "GTA SA  06E8",
		"prefix": "removeVehicleMod",
		"scope": "source.lua"
	},
	"requestVehicleMod": {
		"body": "requestVehicleMod(Model component)",
		"description": "GTA SA  06E9",
		"prefix": "requestVehicleMod",
		"scope": "source.lua"
	},
	"hasVehicleModLoaded": {
		"body": "bool result = hasVehicleModLoaded(Model component)",
		"description": "GTA SA  06EA",
		"prefix": "hasVehicleModLoaded",
		"scope": "source.lua"
	},
	"markVehicleModAsNoLongerNeeded": {
		"body": "markVehicleModAsNoLongerNeeded(Model component)",
		"description": "GTA SA  06EB",
		"prefix": "markVehicleModAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"getNumAvailablePaintjobs": {
		"body": "int num = getNumAvailablePaintjobs(Vehicle car)",
		"description": "GTA SA  06EC",
		"prefix": "getNumAvailablePaintjobs",
		"scope": "source.lua"
	},
	"giveVehiclePaintjob": {
		"body": "giveVehiclePaintjob(int set, int paintjob)",
		"description": "GTA SA  06ED",
		"prefix": "giveVehiclePaintjob",
		"scope": "source.lua"
	},
	"isGroupMember": {
		"body": "bool result = isGroupMember(Ped ped, int group)",
		"description": "GTA SA  06EE",
		"prefix": "isGroupMember",
		"scope": "source.lua"
	},
	"isGroupLeader": {
		"body": "bool result = isGroupLeader(Ped ped, int group)",
		"description": "GTA SA  06EF",
		"prefix": "isGroupLeader",
		"scope": "source.lua"
	},
	"setGroupSeparationRange": {
		"body": "setGroupSeparationRange(int group, float range)",
		"description": "GTA SA  06F0",
		"prefix": "setGroupSeparationRange",
		"scope": "source.lua"
	},
	"limitTwoPlayerDistance": {
		"body": "limitTwoPlayerDistance(float distance)",
		"description": "GTA SA  06F1",
		"prefix": "limitTwoPlayerDistance",
		"scope": "source.lua"
	},
	"releaseTwoPlayerDistance": {
		"body": "releaseTwoPlayerDistance()",
		"description": "GTA SA  06F2",
		"prefix": "releaseTwoPlayerDistance",
		"scope": "source.lua"
	},
	"setPlayerPlayerTargetting": {
		"body": "setPlayerPlayerTargetting(bool can)",
		"description": "GTA SA  06F3",
		"prefix": "setPlayerPlayerTargetting",
		"scope": "source.lua"
	},
	"getScriptFireCoords": {
		"body": "float X, float Y, float Z = getScriptFireCoords(int fire)",
		"description": "GTA SA  06F5",
		"prefix": "getScriptFireCoords",
		"scope": "source.lua"
	},
	"getNthClosestCarNodeWithHeading": {
		"body": "float X, float Y, float Z, float ZAngle = getNthClosestCarNodeWithHeading(float forX, float forY, float forZ, int direction)",
		"description": "GTA SA  06F8",
		"prefix": "getNthClosestCarNodeWithHeading",
		"scope": "source.lua"
	},
	"setPlayersCanBeInSeparateCars": {
		"body": "setPlayersCanBeInSeparateCars(bool allow)",
		"description": "GTA SA  06FA",
		"prefix": "setPlayersCanBeInSeparateCars",
		"scope": "source.lua"
	},
	"doesCarHaveStuckCarCheck": {
		"body": "bool result = doesCarHaveStuckCarCheck(Vehicle car)",
		"description": "GTA SA  06FC",
		"prefix": "doesCarHaveStuckCarCheck",
		"scope": "source.lua"
	},
	"setPlaybackSpeed": {
		"body": "setPlaybackSpeed(Vehicle car, float speed)",
		"description": "GTA SA  06FD",
		"prefix": "setPlaybackSpeed",
		"scope": "source.lua"
	},
	"areAnyCharsNearChar": {
		"body": "bool result = areAnyCharsNearChar(Ped ped, float range)",
		"description": "GTA SA  06FF",
		"prefix": "areAnyCharsNearChar",
		"scope": "source.lua"
	},
	"skipCutsceneEnd": {
		"body": "skipCutsceneEnd()",
		"description": "GTA SA  0701",
		"prefix": "skipCutsceneEnd",
		"scope": "source.lua"
	},
	"getPercentageTaggedInArea": {
		"body": "int percentage = getPercentageTaggedInArea(float x1, float y1, float x2, float y2)",
		"description": "GTA SA  0702",
		"prefix": "getPercentageTaggedInArea",
		"scope": "source.lua"
	},
	"setTagStatusInArea": {
		"body": "setTagStatusInArea(float x1, float y1, float x2, float y2, bool value)",
		"description": "GTA SA  0703",
		"prefix": "setTagStatusInArea",
		"scope": "source.lua"
	},
	"carGotoCoordinatesRacing": {
		"body": "carGotoCoordinatesRacing(Vehicle car, float toX, float toY, float toZ)",
		"description": "GTA SA  0704",
		"prefix": "carGotoCoordinatesRacing",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCarUsingAi": {
		"body": "startPlaybackRecordedCarUsingAi(Vehicle car, int path)",
		"description": "GTA SA  0705",
		"prefix": "startPlaybackRecordedCarUsingAi",
		"scope": "source.lua"
	},
	"skipInPlaybackRecordedCar": {
		"body": "skipInPlaybackRecordedCar(Vehicle car, float path)",
		"description": "GTA SA  0706",
		"prefix": "skipInPlaybackRecordedCar",
		"scope": "source.lua"
	},
	"clearCharDecisionMakerEventResponse": {
		"body": "clearCharDecisionMakerEventResponse(int maker, int event)",
		"description": "GTA SA  0708",
		"prefix": "clearCharDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"addCharDecisionMakerEventResponse": {
		"body": "addCharDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)",
		"description": "GTA SA  0709",
		"prefix": "addCharDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"taskPickUpObject": {
		"body": "taskPickUpObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int boneId1, int boneId2, string performAnimation, int IFPFile, int time)",
		"description": "GTA SA  070A",
		"prefix": "taskPickUpObject",
		"scope": "source.lua"
	},
	"dropObject": {
		"body": "dropObject(Ped ped, bool object)",
		"description": "GTA SA  070B",
		"prefix": "dropObject",
		"scope": "source.lua"
	},
	"explodeCarInCutscene": {
		"body": "explodeCarInCutscene(Vehicle car)",
		"description": "GTA SA  070C",
		"prefix": "explodeCarInCutscene",
		"scope": "source.lua"
	},
	"buildPlayerModel": {
		"body": "buildPlayerModel(Player player)",
		"description": "GTA SA  070D",
		"prefix": "buildPlayerModel",
		"scope": "source.lua"
	},
	"planeAttackPlayer": {
		"body": "planeAttackPlayer(int hydra, Vehicle car, float radius)",
		"description": "GTA SA  070E",
		"prefix": "planeAttackPlayer",
		"scope": "source.lua"
	},
	"planeFlyInDirection": {
		"body": "planeFlyInDirection(int plane, float direction, float altitudemin, float altitudemax)",
		"description": "GTA SA  070F",
		"prefix": "planeFlyInDirection",
		"scope": "source.lua"
	},
	"planeFollowEntity": {
		"body": "planeFollowEntity(int plane, Ped ped, Vehicle car, float radius)",
		"description": "GTA SA  0710",
		"prefix": "planeFollowEntity",
		"scope": "source.lua"
	},
	"taskDriveBy": {
		"body": "taskDriveBy(Ped ped, int drivebyActor, Vehicle car, float pX, float pY, float pZ, float radiusX, int radiusY, bool radiusZ, int firingRate)",
		"description": "GTA SA  0713",
		"prefix": "taskDriveBy",
		"scope": "source.lua"
	},
	"setCarStayInSlowLane": {
		"body": "setCarStayInSlowLane(Vehicle car, bool stay)",
		"description": "GTA SA  0714",
		"prefix": "setCarStayInSlowLane",
		"scope": "source.lua"
	},
	"takeRemoteControlOfCar": {
		"body": "takeRemoteControlOfCar(Player player, Vehicle car)",
		"description": "GTA SA  0715",
		"prefix": "takeRemoteControlOfCar",
		"scope": "source.lua"
	},
	"isClosestObjectOfTypeSmashedOrDamaged": {
		"body": "bool result = isClosestObjectOfTypeSmashedOrDamaged(Model object, float atX, float atY, float atZ, float radius, bool smashed, bool damaged)",
		"description": "GTA SA  0716",
		"prefix": "isClosestObjectOfTypeSmashedOrDamaged",
		"scope": "source.lua"
	},
	"startSettingUpConversation": {
		"body": "startSettingUpConversation(Ped ped)",
		"description": "GTA SA  0717",
		"prefix": "startSettingUpConversation",
		"scope": "source.lua"
	},
	"finishSettingUpConversation": {
		"body": "finishSettingUpConversation()",
		"description": "GTA SA  0719",
		"prefix": "finishSettingUpConversation",
		"scope": "source.lua"
	},
	"isConversationAtNode": {
		"body": "bool result = isConversationAtNode(Ped ped, GxtString gxtString)",
		"description": "GTA SA  071A",
		"prefix": "isConversationAtNode",
		"scope": "source.lua"
	},
	"getObjectHealth": {
		"body": "int health = getObjectHealth(Object object)",
		"description": "GTA SA  071E",
		"prefix": "getObjectHealth",
		"scope": "source.lua"
	},
	"setObjectHealth": {
		"body": "setObjectHealth(Object object, int health)",
		"description": "GTA SA  071F",
		"prefix": "setObjectHealth",
		"scope": "source.lua"
	},
	"breakObject": {
		"body": "breakObject(Object object, int intensity)",
		"description": "GTA SA  0723",
		"prefix": "breakObject",
		"scope": "source.lua"
	},
	"heliAttackPlayer": {
		"body": "heliAttackPlayer(Vehicle heli, Player player, float radius)",
		"description": "GTA SA  0724",
		"prefix": "heliAttackPlayer",
		"scope": "source.lua"
	},
	"heliFollowEntity": {
		"body": "heliFollowEntity(Vehicle heli, Ped ped, Vehicle car, float radius)",
		"description": "GTA SA  0726",
		"prefix": "heliFollowEntity",
		"scope": "source.lua"
	},
	"policeHeliChaseEntity": {
		"body": "policeHeliChaseEntity(Vehicle heli, Ped ped, Vehicle car, float radius)",
		"description": "GTA SA  0727",
		"prefix": "policeHeliChaseEntity",
		"scope": "source.lua"
	},
	"taskUseMobilePhone": {
		"body": "taskUseMobilePhone(Ped ped, bool hold)",
		"description": "GTA SA  0729",
		"prefix": "taskUseMobilePhone",
		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsDriver": {
		"body": "taskWarpCharIntoCarAsDriver(Ped ped, Vehicle car)",
		"description": "GTA SA  072A",
		"prefix": "taskWarpCharIntoCarAsDriver",
		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsPassenger": {
		"body": "taskWarpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerseat)",
		"description": "GTA SA  072B",
		"prefix": "taskWarpCharIntoCarAsPassenger",
		"scope": "source.lua"
	},
	"switchCopsOnBikes": {
		"body": "switchCopsOnBikes(bool generate)",
		"description": "GTA SA  072C",
		"prefix": "switchCopsOnBikes",
		"scope": "source.lua"
	},
	"isFlameInAngledArea2d": {
		"body": "bool result = isFlameInAngledArea2d(float x1, float y1, float x2, float y2, float angle, bool sphere)",
		"description": "GTA SA  072D",
		"prefix": "isFlameInAngledArea2d",
		"scope": "source.lua"
	},
	"isFlameInAngledArea3d": {
		"body": "bool result = isFlameInAngledArea3d(float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)",
		"description": "GTA SA  072E",
		"prefix": "isFlameInAngledArea3d",
		"scope": "source.lua"
	},
	"addStuckCarCheckWithWarp": {
		"body": "addStuckCarCheckWithWarp(Vehicle car, float checkDistance, int time, bool stuck, bool flipped, bool warp, int path)",
		"description": "GTA SA  072F",
		"prefix": "addStuckCarCheckWithWarp",
		"scope": "source.lua"
	},
	"damageCarPanel": {
		"body": "damageCarPanel(Vehicle car, int door)",
		"description": "GTA SA  0730",
		"prefix": "damageCarPanel",
		"scope": "source.lua"
	},
	"setCarRoll": {
		"body": "setCarRoll(Vehicle car, float roll)",
		"description": "GTA SA  0731",
		"prefix": "setCarRoll",
		"scope": "source.lua"
	},
	"suppressCarModel": {
		"body": "bool result = suppressCarModel(Model modelId)",
		"description": "GTA SA  0732",
		"prefix": "suppressCarModel",
		"scope": "source.lua"
	},
	"dontSuppressCarModel": {
		"body": "dontSuppressCarModel(Model modelId)",
		"description": "GTA SA  0733",
		"prefix": "dontSuppressCarModel",
		"scope": "source.lua"
	},
	"dontSuppressAnyCarModels": {
		"body": "dontSuppressAnyCarModels()",
		"description": "GTA SA  0734",
		"prefix": "dontSuppressAnyCarModels",
		"scope": "source.lua"
	},
	"isPs2KeyboardKeyPressed": {
		"body": "bool result = isPs2KeyboardKeyPressed(int key)",
		"description": "GTA SA  0735",
		"prefix": "isPs2KeyboardKeyPressed",
		"scope": "source.lua"
	},
	"isPs2KeyboardKeyJustPressed": {
		"body": "bool result = isPs2KeyboardKeyJustPressed(int key)",
		"description": "GTA SA  0736",
		"prefix": "isPs2KeyboardKeyJustPressed",
		"scope": "source.lua"
	},
	"isCharHoldingObject": {
		"body": "bool result = isCharHoldingObject(Ped ped, int liftingObject)",
		"description": "GTA SA  0737",
		"prefix": "isCharHoldingObject",
		"scope": "source.lua"
	},
	"setCarCanGoAgainstTraffic": {
		"body": "setCarCanGoAgainstTraffic(Vehicle car, bool can)",
		"description": "GTA SA  073B",
		"prefix": "setCarCanGoAgainstTraffic",
		"scope": "source.lua"
	},
	"damageCarDoor": {
		"body": "damageCarDoor(Vehicle car, int door)",
		"description": "GTA SA  073C",
		"prefix": "damageCarDoor",
		"scope": "source.lua"
	},
	"getRandomCarInSphereNoSave": {
		"body": "Vehicle car = getRandomCarInSphereNoSave(float X, float Y, float Z, float radius, int model)",
		"description": "GTA SA  073E",
		"prefix": "getRandomCarInSphereNoSave",
		"scope": "source.lua"
	},
	"getRandomCharInSphere": {
		"body": "Ped ped = getRandomCharInSphere(float X, float Y, float Z, float radius, bool pedtypeCivilian, bool gang, bool prostitute)",
		"description": "GTA SA  073F",
		"prefix": "getRandomCharInSphere",
		"scope": "source.lua"
	},
	"hasCharBeenArrested": {
		"body": "bool result = hasCharBeenArrested(Ped ped)",
		"description": "GTA SA  0741",
		"prefix": "hasCharBeenArrested",
		"scope": "source.lua"
	},
	"setPlaneThrottle": {
		"body": "setPlaneThrottle(int plane, float throttle)",
		"description": "GTA SA  0742",
		"prefix": "setPlaneThrottle",
		"scope": "source.lua"
	},
	"heliLandAtCoords": {
		"body": "heliLandAtCoords(Vehicle heli, float X, float Y, float Z, float minaltitude, float maxaltitude)",
		"description": "GTA SA  0743",
		"prefix": "heliLandAtCoords",
		"scope": "source.lua"
	},
	"planeStartsInAir": {
		"body": "planeStartsInAir(int hydra)",
		"description": "GTA SA  0745",
		"prefix": "planeStartsInAir",
		"scope": "source.lua"
	},
	"setRelationship": {
		"body": "setRelationship(int acquaintance, int pedtype, int toPedtype)",
		"description": "GTA SA  0746",
		"prefix": "setRelationship",
		"scope": "source.lua"
	},
	"clearRelationship": {
		"body": "clearRelationship(int acquaintance, int pedtype, int toPedtype)",
		"description": "GTA SA  0747",
		"prefix": "clearRelationship",
		"scope": "source.lua"
	},
	"clearGroupDecisionMakerEventResponse": {
		"body": "clearGroupDecisionMakerEventResponse(int maker, int event)",
		"description": "GTA SA  0749",
		"prefix": "clearGroupDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"addGroupDecisionMakerEventResponse": {
		"body": "addGroupDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)",
		"description": "GTA SA  074A",
		"prefix": "addGroupDecisionMakerEventResponse",
		"scope": "source.lua"
	},
	"drawSpriteWithRotation": {
		"body": "drawSpriteWithRotation(int texture, float x, float y, float scaleX, float scaleY, float angle, int r, int g, int b, int a)",
		"description": "GTA SA  074B",
		"prefix": "drawSpriteWithRotation",
		"scope": "source.lua"
	},
	"taskUseAttractor": {
		"body": "taskUseAttractor(Ped ped, int attractor)",
		"description": "GTA SA  074C",
		"prefix": "taskUseAttractor",
		"scope": "source.lua"
	},
	"taskShootAtChar": {
		"body": "taskShootAtChar(Ped ped, int atActor, int timelimit)",
		"description": "GTA SA  074D",
		"prefix": "taskShootAtChar",
		"scope": "source.lua"
	},
	"setInformRespectedFriends": {
		"body": "setInformRespectedFriends(int flags, float radius, int pedsToScan)",
		"description": "GTA SA  074E",
		"prefix": "setInformRespectedFriends",
		"scope": "source.lua"
	},
	"isCharRespondingToEvent": {
		"body": "bool result = isCharRespondingToEvent(Ped ped, int event)",
		"description": "GTA SA  074F",
		"prefix": "isCharRespondingToEvent",
		"scope": "source.lua"
	},
	"setObjectVisible": {
		"body": "setObjectVisible(Object object, bool visibility)",
		"description": "GTA SA  0750",
		"prefix": "setObjectVisible",
		"scope": "source.lua"
	},
	"taskFleeCharAnyMeans": {
		"body": "taskFleeCharAnyMeans(Ped ped, int fleeFrom, float runDistance, int time, bool changeCourse, int unkTime1, int unkTime2, float awayRadius)",
		"description": "GTA SA  0751",
		"prefix": "taskFleeCharAnyMeans",
		"scope": "source.lua"
	},
	"flushPatrolRoute": {
		"body": "flushPatrolRoute()",
		"description": "GTA SA  0754",
		"prefix": "flushPatrolRoute",
		"scope": "source.lua"
	},
	"extendPatrolRoute": {
		"body": "extendPatrolRoute(float X, float Y, float Z, string animation, string IFPFile)",
		"description": "GTA SA  0755",
		"prefix": "extendPatrolRoute",
		"scope": "source.lua"
	},
	"playObjectAnim": {
		"body": "bool result = playObjectAnim(Object object, string animation, string IFPFile, float framedelta, bool lockF, bool loop)",
		"description": "GTA SA  075A",
		"prefix": "playObjectAnim",
		"scope": "source.lua"
	},
	"setRadarZoom": {
		"body": "setRadarZoom(int zoom)",
		"description": "GTA SA  075B",
		"prefix": "setRadarZoom",
		"scope": "source.lua"
	},
	"doesBlipExist": {
		"body": "bool result = doesBlipExist(Marker marker)",
		"description": "GTA SA  075C",
		"prefix": "doesBlipExist",
		"scope": "source.lua"
	},
	"loadPrices": {
		"body": "loadPrices(GxtString shopping)",
		"description": "GTA SA  075D",
		"prefix": "loadPrices",
		"scope": "source.lua"
	},
	"loadShop": {
		"body": "loadShop(GxtString shopping)",
		"description": "GTA SA  075E",
		"prefix": "loadShop",
		"scope": "source.lua"
	},
	"getNumberOfItemsInShop": {
		"body": "int num = getNumberOfItemsInShop()",
		"description": "GTA SA  075F",
		"prefix": "getNumberOfItemsInShop",
		"scope": "source.lua"
	},
	"getItemInShop": {
		"body": "int item = getItemInShop(int index)",
		"description": "GTA SA  0760",
		"prefix": "getItemInShop",
		"scope": "source.lua"
	},
	"getPriceOfItem": {
		"body": "int price = getPriceOfItem(int item)",
		"description": "GTA SA  0761",
		"prefix": "getPriceOfItem",
		"scope": "source.lua"
	},
	"taskDead": {
		"body": "taskDead(Ped ped)",
		"description": "GTA SA  0762",
		"prefix": "taskDead",
		"scope": "source.lua"
	},
	"setCarAsMissionCar": {
		"body": "setCarAsMissionCar(Vehicle car)",
		"description": "GTA SA  0763",
		"prefix": "setCarAsMissionCar",
		"scope": "source.lua"
	},
	"setZonePopulationType": {
		"body": "setZonePopulationType(GxtString zone, int popcycle)",
		"description": "GTA SA  0767",
		"prefix": "setZonePopulationType",
		"scope": "source.lua"
	},
	"setZoneDealerStrength": {
		"body": "setZoneDealerStrength(GxtString zone, int density)",
		"description": "GTA SA  076A",
		"prefix": "setZoneDealerStrength",
		"scope": "source.lua"
	},
	"getZoneDealerStrength": {
		"body": "int strength = getZoneDealerStrength(GxtString zone)",
		"description": "GTA SA  076B",
		"prefix": "getZoneDealerStrength",
		"scope": "source.lua"
	},
	"setZoneGangStrength": {
		"body": "setZoneGangStrength(GxtString zone, int gang, int density)",
		"description": "GTA SA  076C",
		"prefix": "setZoneGangStrength",
		"scope": "source.lua"
	},
	"getZoneGangStrength": {
		"body": "int density = getZoneGangStrength(GxtString zone, int gang)",
		"description": "GTA SA  076D",
		"prefix": "getZoneGangStrength",
		"scope": "source.lua"
	},
	"isMessageBeingDisplayed": {
		"body": "bool result = isMessageBeingDisplayed()",
		"description": "GTA SA  076F",
		"prefix": "isMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"setCharIsTargetPriority": {
		"body": "setCharIsTargetPriority(Ped ped, bool targetPriority)",
		"description": "GTA SA  0770",
		"prefix": "setCharIsTargetPriority",
		"scope": "source.lua"
	},
	"customPlateDesignForNextCar": {
		"body": "customPlateDesignForNextCar(Model modelNumplate, int townTexture)",
		"description": "GTA SA  0771",
		"prefix": "customPlateDesignForNextCar",
		"scope": "source.lua"
	},
	"taskGotoCar": {
		"body": "taskGotoCar(Ped ped, Vehicle car, int timeMS, float stopAtDistance)",
		"description": "GTA SA  0772",
		"prefix": "taskGotoCar",
		"scope": "source.lua"
	},
	"requestIpl": {
		"body": "requestIpl(string group)",
		"description": "GTA SA  0776",
		"prefix": "requestIpl",
		"scope": "source.lua"
	},
	"removeIpl": {
		"body": "removeIpl(string group)",
		"description": "GTA SA  0777",
		"prefix": "removeIpl",
		"scope": "source.lua"
	},
	"removeIplDiscreetly": {
		"body": "removeIplDiscreetly(string group)",
		"description": "GTA SA  0778",
		"prefix": "removeIplDiscreetly",
		"scope": "source.lua"
	},
	"setCharRelationship": {
		"body": "setCharRelationship(Ped ped, int acquaintance, int pedtype)",
		"description": "GTA SA  077A",
		"prefix": "setCharRelationship",
		"scope": "source.lua"
	},
	"clearCharRelationship": {
		"body": "clearCharRelationship(Ped ped, int acquaintance, int pedtype)",
		"description": "GTA SA  077B",
		"prefix": "clearCharRelationship",
		"scope": "source.lua"
	},
	"clearAllCharRelationships": {
		"body": "clearAllCharRelationships(Ped ped, int acquaintance)",
		"description": "GTA SA  077C",
		"prefix": "clearAllCharRelationships",
		"scope": "source.lua"
	},
	"getCarPitch": {
		"body": "float pitch = getCarPitch(Vehicle car)",
		"description": "GTA SA  077D",
		"prefix": "getCarPitch",
		"scope": "source.lua"
	},
	"getActiveInterior": {
		"body": "int interior = getActiveInterior()",
		"description": "GTA SA  077E",
		"prefix": "getActiveInterior",
		"scope": "source.lua"
	},
	"heliKeepEntityInView": {
		"body": "heliKeepEntityInView(Vehicle heli, Ped ped, Vehicle car, float minaltitude, float maxaltitude)",
		"description": "GTA SA  0780",
		"prefix": "heliKeepEntityInView",
		"scope": "source.lua"
	},
	"getWeapontypeModel": {
		"body": "int model = getWeapontypeModel(int id)",
		"description": "GTA SA  0781",
		"prefix": "getWeapontypeModel",
		"scope": "source.lua"
	},
	"getWeapontypeSlot": {
		"body": "int slot = getWeapontypeSlot(int id)",
		"description": "GTA SA  0782",
		"prefix": "getWeapontypeSlot",
		"scope": "source.lua"
	},
	"getShoppingExtraInfo": {
		"body": "int info = getShoppingExtraInfo(int item, int flag)",
		"description": "GTA SA  0783",
		"prefix": "getShoppingExtraInfo",
		"scope": "source.lua"
	},
	"givePlayerClothes": {
		"body": "givePlayerClothes(Player player, int texture, int model, int bodypart)",
		"description": "GTA SA  0784",
		"prefix": "givePlayerClothes",
		"scope": "source.lua"
	},
	"getNumberOfFiresInArea": {
		"body": "int num = getNumberOfFiresInArea(float x1, float y1, float z1, float x2, float y2, float z2)",
		"description": "GTA SA  0786",
		"prefix": "getNumberOfFiresInArea",
		"scope": "source.lua"
	},
	"attachWinchToHeli": {
		"body": "attachWinchToHeli(Vehicle heli, bool magnet)",
		"description": "GTA SA  0788",
		"prefix": "attachWinchToHeli",
		"scope": "source.lua"
	},
	"releaseEntityFromWinch": {
		"body": "releaseEntityFromWinch(Vehicle heli)",
		"description": "GTA SA  0789",
		"prefix": "releaseEntityFromWinch",
		"scope": "source.lua"
	},
	"getTrainCarriage": {
		"body": "int carriage = getTrainCarriage(Vehicle train, int handle)",
		"description": "GTA SA  078A",
		"prefix": "getTrainCarriage",
		"scope": "source.lua"
	},
	"grabEntityOnWinch": {
		"body": "Vehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnWinch(Vehicle heli)",
		"description": "GTA SA  078B",
		"prefix": "grabEntityOnWinch",
		"scope": "source.lua"
	},
	"getNameOfItem": {
		"body": "GxtString name = getNameOfItem(int item)",
		"description": "GTA SA  078C",
		"prefix": "getNameOfItem",
		"scope": "source.lua"
	},
	"taskClimb": {
		"body": "taskClimb(Ped ped, bool climb)",
		"description": "GTA SA  078F",
		"prefix": "taskClimb",
		"scope": "source.lua"
	},
	"buyItem": {
		"body": "buyItem(int item)",
		"description": "GTA SA  0790",
		"prefix": "buyItem",
		"scope": "source.lua"
	},
	"clearCharTasksImmediately": {
		"body": "clearCharTasksImmediately(Ped ped)",
		"description": "GTA SA  0792",
		"prefix": "clearCharTasksImmediately",
		"scope": "source.lua"
	},
	"storeClothesState": {
		"body": "storeClothesState()",
		"description": "GTA SA  0793",
		"prefix": "storeClothesState",
		"scope": "source.lua"
	},
	"restoreClothesState": {
		"body": "restoreClothesState()",
		"description": "GTA SA  0794",
		"prefix": "restoreClothesState",
		"scope": "source.lua"
	},
	"getRopeHeightForObject": {
		"body": "float length = getRopeHeightForObject(int magnet)",
		"description": "GTA SA  0796",
		"prefix": "getRopeHeightForObject",
		"scope": "source.lua"
	},
	"setRopeHeightForObject": {
		"body": "setRopeHeightForObject(int magnet, float length)",
		"description": "GTA SA  0797",
		"prefix": "setRopeHeightForObject",
		"scope": "source.lua"
	},
	"grabEntityOnRopeForObject": {
		"body": "Vehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnRopeForObject(int magnet)",
		"description": "GTA SA  0798",
		"prefix": "grabEntityOnRopeForObject",
		"scope": "source.lua"
	},
	"releaseEntityFromRopeForObject": {
		"body": "releaseEntityFromRopeForObject(int magnet)",
		"description": "GTA SA  0799",
		"prefix": "releaseEntityFromRopeForObject",
		"scope": "source.lua"
	},
	"playerEnteredDockCrane": {
		"body": "playerEnteredDockCrane()",
		"description": "GTA SA  079D",
		"prefix": "playerEnteredDockCrane",
		"scope": "source.lua"
	},
	"playerEnteredBuildingsiteCrane": {
		"body": "playerEnteredBuildingsiteCrane()",
		"description": "GTA SA  079E",
		"prefix": "playerEnteredBuildingsiteCrane",
		"scope": "source.lua"
	},
	"playerLeftCrane": {
		"body": "playerLeftCrane()",
		"description": "GTA SA  079F",
		"prefix": "playerLeftCrane",
		"scope": "source.lua"
	},
	"performSequenceTaskFromProgress": {
		"body": "performSequenceTaskFromProgress(Ped ped, int sequence, int unkProgress1, int unkProgress2)",
		"description": "GTA SA  07A0",
		"prefix": "performSequenceTaskFromProgress",
		"scope": "source.lua"
	},
	"setNextDesiredMoveState": {
		"body": "setNextDesiredMoveState(int speed)",
		"description": "GTA SA  07A1",
		"prefix": "setNextDesiredMoveState",
		"scope": "source.lua"
	},
	"taskGotoCharAiming": {
		"body": "taskGotoCharAiming(Ped ped, int followActor, float minradius, float maxradius)",
		"description": "GTA SA  07A3",
		"prefix": "taskGotoCharAiming",
		"scope": "source.lua"
	},
	"getSequenceProgressRecursive": {
		"body": "int unkProgress1, int unkProgress2 = getSequenceProgressRecursive(Ped ped)",
		"description": "GTA SA  07A4",
		"prefix": "getSequenceProgressRecursive",
		"scope": "source.lua"
	},
	"taskKillCharOnFootTimed": {
		"body": "taskKillCharOnFootTimed(Ped ped, int attackActor, int time)",
		"description": "GTA SA  07A5",
		"prefix": "taskKillCharOnFootTimed",
		"scope": "source.lua"
	},
	"getNearestTagPosition": {
		"body": "float X, float Y, float Z = getNearestTagPosition(float X, float Y, float Z)",
		"description": "GTA SA  07A6",
		"prefix": "getNearestTagPosition",
		"scope": "source.lua"
	},
	"taskJetpack": {
		"body": "taskJetpack(Ped ped)",
		"description": "GTA SA  07A7",
		"prefix": "taskJetpack",
		"scope": "source.lua"
	},
	"setArea51SamSite": {
		"body": "setArea51SamSite(bool enable)",
		"description": "GTA SA  07A8",
		"prefix": "setArea51SamSite",
		"scope": "source.lua"
	},
	"isCharInAnySearchlight": {
		"body": "bool result, Searchlight searchlight = isCharInAnySearchlight(Ped ped)",
		"description": "GTA SA  07A9",
		"prefix": "isCharInAnySearchlight",
		"scope": "source.lua"
	},
	"isTrailerAttachedToCab": {
		"body": "bool result = isTrailerAttachedToCab(Vehicle car, int trailer)",
		"description": "GTA SA  07AB",
		"prefix": "isTrailerAttachedToCab",
		"scope": "source.lua"
	},
	"detachTrailerFromCab": {
		"body": "detachTrailerFromCab(int trailer, int cab)",
		"description": "GTA SA  07AC",
		"prefix": "detachTrailerFromCab",
		"scope": "source.lua"
	},
	"getPlayerGroup": {
		"body": "int group = getPlayerGroup(Player player)",
		"description": "GTA SA  07AF",
		"prefix": "getPlayerGroup",
		"scope": "source.lua"
	},
	"getLoadedShop": {
		"body": "GxtString shop = getLoadedShop()",
		"description": "GTA SA  07B0",
		"prefix": "getLoadedShop",
		"scope": "source.lua"
	},
	"getBeatProximity": {
		"body": "int int2, int int3, int int4 = getBeatProximity(int track)",
		"description": "GTA SA  07B1",
		"prefix": "getBeatProximity",
		"scope": "source.lua"
	},
	"setGroupDefaultTaskAllocator": {
		"body": "setGroupDefaultTaskAllocator(int group, int command)",
		"description": "GTA SA  07B3",
		"prefix": "setGroupDefaultTaskAllocator",
		"scope": "source.lua"
	},
	"setPlayerGroupRecruitment": {
		"body": "setPlayerGroupRecruitment(Player player, bool enabled)",
		"description": "GTA SA  07B4",
		"prefix": "setPlayerGroupRecruitment",
		"scope": "source.lua"
	},
	"activateHeliSpeedCheat": {
		"body": "activateHeliSpeedCheat(Vehicle heli, int power)",
		"description": "GTA SA  07BB",
		"prefix": "activateHeliSpeedCheat",
		"scope": "source.lua"
	},
	"taskSetCharDecisionMaker": {
		"body": "taskSetCharDecisionMaker(Ped ped, int maker)",
		"description": "GTA SA  07BC",
		"prefix": "taskSetCharDecisionMaker",
		"scope": "source.lua"
	},
	"deleteMissionTrain": {
		"body": "deleteMissionTrain(Vehicle train)",
		"description": "GTA SA  07BD",
		"prefix": "deleteMissionTrain",
		"scope": "source.lua"
	},
	"markMissionTrainAsNoLongerNeeded": {
		"body": "markMissionTrainAsNoLongerNeeded(Vehicle train)",
		"description": "GTA SA  07BE",
		"prefix": "markMissionTrainAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"setBlipAlwaysDisplayOnZoomedRadar": {
		"body": "setBlipAlwaysDisplayOnZoomedRadar(Marker marker, bool displayAlways)",
		"description": "GTA SA  07BF",
		"prefix": "setBlipAlwaysDisplayOnZoomedRadar",
		"scope": "source.lua"
	},
	"requestCarRecording": {
		"body": "requestCarRecording(int path)",
		"description": "GTA SA  07C0",
		"prefix": "requestCarRecording",
		"scope": "source.lua"
	},
	"hasCarRecordingBeenLoaded": {
		"body": "bool result = hasCarRecordingBeenLoaded(int path)",
		"description": "GTA SA  07C1",
		"prefix": "hasCarRecordingBeenLoaded",
		"scope": "source.lua"
	},
	"getObjectQuaternion": {
		"body": "float x, float y, float z, float w = getObjectQuaternion(Object object)",
		"description": "GTA SA  07C3",
		"prefix": "getObjectQuaternion",
		"scope": "source.lua"
	},
	"setObjectQuaternion": {
		"body": "setObjectQuaternion(Object object, float x, float y, float z, float w)",
		"description": "GTA SA  07C4",
		"prefix": "setObjectQuaternion",
		"scope": "source.lua"
	},
	"getVehicleQuaternion": {
		"body": "float x, float y, float z, float w = getVehicleQuaternion(Vehicle car)",
		"description": "GTA SA  07C5",
		"prefix": "getVehicleQuaternion",
		"scope": "source.lua"
	},
	"setVehicleQuaternion": {
		"body": "setVehicleQuaternion(Vehicle car, float x, float y, float z, float w)",
		"description": "GTA SA  07C6",
		"prefix": "setVehicleQuaternion",
		"scope": "source.lua"
	},
	"setMissionTrainCoordinates": {
		"body": "setMissionTrainCoordinates(Vehicle train, float X, float Y, float Z)",
		"description": "GTA SA  07C7",
		"prefix": "setMissionTrainCoordinates",
		"scope": "source.lua"
	},
	"taskComplexPickupObject": {
		"body": "taskComplexPickupObject(Ped ped, Object object)",
		"description": "GTA SA  07C9",
		"prefix": "taskComplexPickupObject",
		"scope": "source.lua"
	},
	"listenToPlayerGroupCommands": {
		"body": "listenToPlayerGroupCommands(Ped ped, bool listen)",
		"description": "GTA SA  07CB",
		"prefix": "listenToPlayerGroupCommands",
		"scope": "source.lua"
	},
	"setPlayerEnterCarButton": {
		"body": "setPlayerEnterCarButton(Player player, bool can)",
		"description": "GTA SA  07CC",
		"prefix": "setPlayerEnterCarButton",
		"scope": "source.lua"
	},
	"taskCharSlideToCoord": {
		"body": "taskCharSlideToCoord(Ped ped, float toX, float toY, float toZ, float angle, float withinRadius)",
		"description": "GTA SA  07CD",
		"prefix": "taskCharSlideToCoord",
		"scope": "source.lua"
	},
	"getCurrentDayOfWeek": {
		"body": "int weekday = getCurrentDayOfWeek()",
		"description": "GTA SA  07D0",
		"prefix": "getCurrentDayOfWeek",
		"scope": "source.lua"
	},
	"registerScriptBrainForCodeUse": {
		"body": "registerScriptBrainForCodeUse(int id, GxtString gxtString)",
		"description": "GTA SA  07D3",
		"prefix": "registerScriptBrainForCodeUse",
		"scope": "source.lua"
	},
	"applyForceToCar": {
		"body": "applyForceToCar(Vehicle car, float vecX, float vecY, float vecZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  07D5",
		"prefix": "applyForceToCar",
		"scope": "source.lua"
	},
	"addToCarRotationVelocity": {
		"body": "addToCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  07DA",
		"prefix": "addToCarRotationVelocity",
		"scope": "source.lua"
	},
	"setCarRotationVelocity": {
		"body": "setCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  07DB",
		"prefix": "setCarRotationVelocity",
		"scope": "source.lua"
	},
	"setCharShootRate": {
		"body": "setCharShootRate(Ped ped, int rate)",
		"description": "GTA SA  07DD",
		"prefix": "setCharShootRate",
		"scope": "source.lua"
	},
	"isModelInCdimage": {
		"body": "bool result = isModelInCdimage(Model modelId)",
		"description": "GTA SA  07DE",
		"prefix": "isModelInCdimage",
		"scope": "source.lua"
	},
	"removeOilPuddlesInArea": {
		"body": "removeOilPuddlesInArea(float x1, float y1, float x2, float y2)",
		"description": "GTA SA  07DF",
		"prefix": "removeOilPuddlesInArea",
		"scope": "source.lua"
	},
	"setBlipAsFriendly": {
		"body": "setBlipAsFriendly(Marker marker, bool type)",
		"description": "GTA SA  07E0",
		"prefix": "setBlipAsFriendly",
		"scope": "source.lua"
	},
	"taskSwimToCoord": {
		"body": "taskSwimToCoord(Ped ped, float toX, float toY, float toZ)",
		"description": "GTA SA  07E1",
		"prefix": "taskSwimToCoord",
		"scope": "source.lua"
	},
	"getModelDimensions": {
		"body": "float x1, float y1, float z1, float x2, float y2, float z2 = getModelDimensions(Model modelId)",
		"description": "GTA SA  07E4",
		"prefix": "getModelDimensions",
		"scope": "source.lua"
	},
	"copyCharDecisionMaker": {
		"body": "int maker = copyCharDecisionMaker(Ped ped)",
		"description": "GTA SA  07E5",
		"prefix": "copyCharDecisionMaker",
		"scope": "source.lua"
	},
	"copyGroupDecisionMaker": {
		"body": "int maker = copyGroupDecisionMaker(int group)",
		"description": "GTA SA  07E6",
		"prefix": "copyGroupDecisionMaker",
		"scope": "source.lua"
	},
	"taskDrivePointRouteAdvanced": {
		"body": "taskDrivePointRouteAdvanced(Ped ped, Vehicle car, float speed, int flag1, int flag2, int flag3)",
		"description": "GTA SA  07E7",
		"prefix": "taskDrivePointRouteAdvanced",
		"scope": "source.lua"
	},
	"isRelationshipSet": {
		"body": "bool result = isRelationshipSet(int acquaintance, int ofActors, int toActors)",
		"description": "GTA SA  07E8",
		"prefix": "isRelationshipSet",
		"scope": "source.lua"
	},
	"setCarAlwaysCreateSkids": {
		"body": "setCarAlwaysCreateSkids(Vehicle car, bool enable)",
		"description": "GTA SA  07EE",
		"prefix": "setCarAlwaysCreateSkids",
		"scope": "source.lua"
	},
	"getCityFromCoords": {
		"body": "int city = getCityFromCoords(float X, float Y, float Z)",
		"description": "GTA SA  07EF",
		"prefix": "getCityFromCoords",
		"scope": "source.lua"
	},
	"hasObjectOfTypeBeenSmashed": {
		"body": "bool result = hasObjectOfTypeBeenSmashed(float X, float Y, float Z, float radius, Model modelId)",
		"description": "GTA SA  07F0",
		"prefix": "hasObjectOfTypeBeenSmashed",
		"scope": "source.lua"
	},
	"isPlayerPerformingWheelie": {
		"body": "bool result = isPlayerPerformingWheelie(Player player)",
		"description": "GTA SA  07F1",
		"prefix": "isPlayerPerformingWheelie",
		"scope": "source.lua"
	},
	"isPlayerPerformingStoppie": {
		"body": "bool result = isPlayerPerformingStoppie(Player player)",
		"description": "GTA SA  07F2",
		"prefix": "isPlayerPerformingStoppie",
		"scope": "source.lua"
	},
	"setCheckpointCoords": {
		"body": "setCheckpointCoords(Checkpoint checkpoint, float X, float Y, float Z)",
		"description": "GTA SA  07F3",
		"prefix": "setCheckpointCoords",
		"scope": "source.lua"
	},
	"controlCarHydraulics": {
		"body": "controlCarHydraulics(Vehicle car, float f1, float f2, float f3, float f4)",
		"description": "GTA SA  07F5",
		"prefix": "controlCarHydraulics",
		"scope": "source.lua"
	},
	"getGroupSize": {
		"body": "int numberOfLeaders, int numberOfMembers = getGroupSize(int group)",
		"description": "GTA SA  07F6",
		"prefix": "getGroupSize",
		"scope": "source.lua"
	},
	"setObjectCollisionDamageEffect": {
		"body": "setObjectCollisionDamageEffect(Object object, bool destructible)",
		"description": "GTA SA  07F7",
		"prefix": "setObjectCollisionDamageEffect",
		"scope": "source.lua"
	},
	"setCarFollowCar": {
		"body": "setCarFollowCar(Vehicle car, int followCar, float radius)",
		"description": "GTA SA  07F8",
		"prefix": "setCarFollowCar",
		"scope": "source.lua"
	},
	"playerEnteredQuarryCrane": {
		"body": "playerEnteredQuarryCrane()",
		"description": "GTA SA  07F9",
		"prefix": "playerEnteredQuarryCrane",
		"scope": "source.lua"
	},
	"playerEnteredLasVegasCrane": {
		"body": "playerEnteredLasVegasCrane()",
		"description": "GTA SA  07FA",
		"prefix": "playerEnteredLasVegasCrane",
		"scope": "source.lua"
	},
	"switchEntryExit": {
		"body": "switchEntryExit(GxtString interior, bool access)",
		"description": "GTA SA  07FB",
		"prefix": "switchEntryExit",
		"scope": "source.lua"
	},
	"displayTextWithFloat": {
		"body": "displayTextWithFloat(float X, float Y, GxtString GXT, float value, int flag)",
		"description": "GTA SA  07FC",
		"prefix": "displayTextWithFloat",
		"scope": "source.lua"
	},
	"doesGroupExist": {
		"body": "bool result = doesGroupExist(int group)",
		"description": "GTA SA  07FD",
		"prefix": "doesGroupExist",
		"scope": "source.lua"
	},
	"giveMeleeAttackToChar": {
		"body": "giveMeleeAttackToChar(Ped ped, int fightingStyle, int moves)",
		"description": "GTA SA  07FE",
		"prefix": "giveMeleeAttackToChar",
		"scope": "source.lua"
	},
	"setCarHydraulics": {
		"body": "setCarHydraulics(Vehicle car, bool hydraulics)",
		"description": "GTA SA  07FF",
		"prefix": "setCarHydraulics",
		"scope": "source.lua"
	},
	"is2playerGameGoingOn": {
		"body": "bool result = is2playerGameGoingOn()",
		"description": "GTA SA  0800",
		"prefix": "is2playerGameGoingOn",
		"scope": "source.lua"
	},
	"getCameraFov": {
		"body": "float fov = getCameraFov()",
		"description": "GTA SA  0801",
		"prefix": "getCameraFov",
		"scope": "source.lua"
	},
	"doesCarHaveHydraulics": {
		"body": "bool result = doesCarHaveHydraulics(Vehicle car)",
		"description": "GTA SA  0803",
		"prefix": "doesCarHaveHydraulics",
		"scope": "source.lua"
	},
	"taskCharSlideToCoordAndPlayAnim": {
		"body": "taskCharSlideToCoordAndPlayAnim(Ped ped, float toX, float toY, float toZ, float angle, float radius, string animation, int ifp1, float ifp2, bool LA, bool LX, bool LY, bool LF, int LT)",
		"description": "GTA SA  0804",
		"prefix": "taskCharSlideToCoordAndPlayAnim",
		"scope": "source.lua"
	},
	"getTotalNumberOfPedsKilledByPlayer": {
		"body": "int number = getTotalNumberOfPedsKilledByPlayer(Player player)",
		"description": "GTA SA  0806",
		"prefix": "getTotalNumberOfPedsKilledByPlayer",
		"scope": "source.lua"
	},
	"getLevelDesignCoordsForObject": {
		"body": "float X, float Y, float Z = getLevelDesignCoordsForObject(Object object, int spoot)",
		"description": "GTA SA  080A",
		"prefix": "getLevelDesignCoordsForObject",
		"scope": "source.lua"
	},
	"getCharHighestPriorityEvent": {
		"body": "int event = getCharHighestPriorityEvent(Ped ped)",
		"description": "GTA SA  080E",
		"prefix": "getCharHighestPriorityEvent",
		"scope": "source.lua"
	},
	"getParkingNodeInArea": {
		"body": "float X, float Y, float Z = getParkingNodeInArea(float x1, float y1, float z1, float x2, float y2, float z2)",
		"description": "GTA SA  0810",
		"prefix": "getParkingNodeInArea",
		"scope": "source.lua"
	},
	"getCarCharIsUsing": {
		"body": "Vehicle car = getCarCharIsUsing(Ped ped)",
		"description": "GTA SA  0811",
		"prefix": "getCarCharIsUsing",
		"scope": "source.lua"
	},
	"taskPlayAnimNonInterruptable": {
		"body": "taskPlayAnimNonInterruptable(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)",
		"description": "GTA SA  0812",
		"prefix": "taskPlayAnimNonInterruptable",
		"scope": "source.lua"
	},
	"addStuntJump": {
		"body": "addStuntJump(float startX, float startY, float startZ, float radiusX, float radiusY, float radiusZ, float goalX, float goalY, float goalZ, float radius2X, float radius2Y, float radius2Z, float cameraX, float cameraY, float cameraZ, int reward)",
		"description": "GTA SA  0814",
		"prefix": "addStuntJump",
		"scope": "source.lua"
	},
	"setObjectCoordinatesAndVelocity": {
		"body": "setObjectCoordinatesAndVelocity(Object object, float X, float Y, float Z)",
		"description": "GTA SA  0815",
		"prefix": "setObjectCoordinatesAndVelocity",
		"scope": "source.lua"
	},
	"setCharKindaStayInSamePlace": {
		"body": "setCharKindaStayInSamePlace(Ped ped, bool stay)",
		"description": "GTA SA  0816",
		"prefix": "setCharKindaStayInSamePlace",
		"scope": "source.lua"
	},
	"taskFollowPatrolRoute": {
		"body": "taskFollowPatrolRoute(Ped ped, int walkMode, int routeMode)",
		"description": "GTA SA  0817",
		"prefix": "taskFollowPatrolRoute",
		"scope": "source.lua"
	},
	"isCharInAir": {
		"body": "bool result = isCharInAir(Ped ped)",
		"description": "GTA SA  0818",
		"prefix": "isCharInAir",
		"scope": "source.lua"
	},
	"getCharHeightAboveGround": {
		"body": "float height = getCharHeightAboveGround(Ped ped)",
		"description": "GTA SA  0819",
		"prefix": "getCharHeightAboveGround",
		"scope": "source.lua"
	},
	"setCharWeaponSkill": {
		"body": "setCharWeaponSkill(Ped ped, int skill)",
		"description": "GTA SA  081A",
		"prefix": "setCharWeaponSkill",
		"scope": "source.lua"
	},
	"setTextEdge": {
		"body": "setTextEdge(int size, int r, int g, int b, int a)",
		"description": "GTA SA  081C",
		"prefix": "setTextEdge",
		"scope": "source.lua"
	},
	"setCarEngineBroken": {
		"body": "setCarEngineBroken(Vehicle car, bool broken)",
		"description": "GTA SA  081D",
		"prefix": "setCarEngineBroken",
		"scope": "source.lua"
	},
	"isThisModelABoat": {
		"body": "bool result = isThisModelABoat(Model modelId)",
		"description": "GTA SA  081E",
		"prefix": "isThisModelABoat",
		"scope": "source.lua"
	},
	"isThisModelAPlane": {
		"body": "bool result = isThisModelAPlane(Model modelId)",
		"description": "GTA SA  081F",
		"prefix": "isThisModelAPlane",
		"scope": "source.lua"
	},
	"isThisModelAHeli": {
		"body": "bool result = isThisModelAHeli(Model modelId)",
		"description": "GTA SA  0820",
		"prefix": "isThisModelAHeli",
		"scope": "source.lua"
	},
	"setFirstPersonInCarCameraMode": {
		"body": "setFirstPersonInCarCameraMode(bool enable)",
		"description": "GTA SA  0822",
		"prefix": "setFirstPersonInCarCameraMode",
		"scope": "source.lua"
	},
	"taskGreetPartner": {
		"body": "taskGreetPartner(Ped ped, Ped ped2, float unk1, int unk2)",
		"description": "GTA SA  0823",
		"prefix": "taskGreetPartner",
		"scope": "source.lua"
	},
	"setHeliBladesFullSpeed": {
		"body": "setHeliBladesFullSpeed(Vehicle heli)",
		"description": "GTA SA  0825",
		"prefix": "setHeliBladesFullSpeed",
		"scope": "source.lua"
	},
	"displayHud": {
		"body": "displayHud(bool enable)",
		"description": "GTA SA  0826",
		"prefix": "displayHud",
		"scope": "source.lua"
	},
	"connectLods": {
		"body": "connectLods(Object object, int lod)",
		"description": "GTA SA  0827",
		"prefix": "connectLods",
		"scope": "source.lua"
	},
	"setMaxFireGenerations": {
		"body": "setMaxFireGenerations(int max)",
		"description": "GTA SA  0828",
		"prefix": "setMaxFireGenerations",
		"scope": "source.lua"
	},
	"taskDieNamedAnim": {
		"body": "taskDieNamedAnim(Ped ped, string animation, string ifp1, float ifp2, int time)",
		"description": "GTA SA  0829",
		"prefix": "taskDieNamedAnim",
		"scope": "source.lua"
	},
	"setPlayerDuckButton": {
		"body": "setPlayerDuckButton(Player player, bool able)",
		"description": "GTA SA  082A",
		"prefix": "setPlayerDuckButton",
		"scope": "source.lua"
	},
	"setPoolTableCoords": {
		"body": "setPoolTableCoords(float x1, float y1, float z1, float x2, float y2, float z2)",
		"description": "GTA SA  0830",
		"prefix": "setPoolTableCoords",
		"scope": "source.lua"
	},
	"hasObjectBeenPhotographed": {
		"body": "bool result = hasObjectBeenPhotographed(Object object)",
		"description": "GTA SA  0833",
		"prefix": "hasObjectBeenPhotographed",
		"scope": "source.lua"
	},
	"doCameraBump": {
		"body": "doCameraBump(float rotationZ, float rotationY)",
		"description": "GTA SA  0834",
		"prefix": "doCameraBump",
		"scope": "source.lua"
	},
	"getCurrentDate": {
		"body": "int day, int month = getCurrentDate()",
		"description": "GTA SA  0835",
		"prefix": "getCurrentDate",
		"scope": "source.lua"
	},
	"setObjectAnimSpeed": {
		"body": "setObjectAnimSpeed(Object object, string animation, float speed)",
		"description": "GTA SA  0836",
		"prefix": "setObjectAnimSpeed",
		"scope": "source.lua"
	},
	"isObjectPlayingAnim": {
		"body": "bool result = isObjectPlayingAnim(Object object, string anim)",
		"description": "GTA SA  0837",
		"prefix": "isObjectPlayingAnim",
		"scope": "source.lua"
	},
	"getObjectAnimCurrentTime": {
		"body": "float progress = getObjectAnimCurrentTime(Object object, string animation)",
		"description": "GTA SA  0839",
		"prefix": "getObjectAnimCurrentTime",
		"scope": "source.lua"
	},
	"setObjectAnimCurrentTime": {
		"body": "setObjectAnimCurrentTime(Object object, string animation, float progress)",
		"description": "GTA SA  083A",
		"prefix": "setObjectAnimCurrentTime",
		"scope": "source.lua"
	},
	"setCharVelocity": {
		"body": "setCharVelocity(Ped ped, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  083C",
		"prefix": "setCharVelocity",
		"scope": "source.lua"
	},
	"getCharVelocity": {
		"body": "float vecX, float vecY, float vecZ = getCharVelocity(Ped ped)",
		"description": "GTA SA  083D",
		"prefix": "getCharVelocity",
		"scope": "source.lua"
	},
	"setCharRotation": {
		"body": "setCharRotation(Ped ped, float vecX, float vecY, float vecZ)",
		"description": "GTA SA  083E",
		"prefix": "setCharRotation",
		"scope": "source.lua"
	},
	"getCarUprightValue": {
		"body": "float value = getCarUprightValue(Vehicle car)",
		"description": "GTA SA  083F",
		"prefix": "getCarUprightValue",
		"scope": "source.lua"
	},
	"setVehicleInterior": {
		"body": "setVehicleInterior(Vehicle car, int interior)",
		"description": "GTA SA  0840",
		"prefix": "setVehicleInterior",
		"scope": "source.lua"
	},
	"selectWeaponsForVehicle": {
		"body": "selectWeaponsForVehicle(Vehicle car, bool gun)",
		"description": "GTA SA  0841",
		"prefix": "selectWeaponsForVehicle",
		"scope": "source.lua"
	},
	"getCityPlayerIsIn": {
		"body": "int city = getCityPlayerIsIn(Player player)",
		"description": "GTA SA  0842",
		"prefix": "getCityPlayerIsIn",
		"scope": "source.lua"
	},
	"getNameOfZone": {
		"body": "GxtString name = getNameOfZone(float X, float Y, float Z)",
		"description": "GTA SA  0843",
		"prefix": "getNameOfZone",
		"scope": "source.lua"
	},
	"activateInteriorPeds": {
		"body": "activateInteriorPeds(bool activate)",
		"description": "GTA SA  084D",
		"prefix": "activateInteriorPeds",
		"scope": "source.lua"
	},
	"setVehicleCanBeTargetted": {
		"body": "setVehicleCanBeTargetted(Vehicle car, bool unk)",
		"description": "GTA SA  084E",
		"prefix": "setVehicleCanBeTargetted",
		"scope": "source.lua"
	},
	"taskFollowFootsteps": {
		"body": "taskFollowFootsteps(Ped ped, int followActor)",
		"description": "GTA SA  0850",
		"prefix": "taskFollowFootsteps",
		"scope": "source.lua"
	},
	"damageChar": {
		"body": "damageChar(Ped ped, int health, bool affectArmour)",
		"description": "GTA SA  0851",
		"prefix": "damageChar",
		"scope": "source.lua"
	},
	"setCarCanBeVisiblyDamaged": {
		"body": "setCarCanBeVisiblyDamaged(Vehicle car, bool can)",
		"description": "GTA SA  0852",
		"prefix": "setCarCanBeVisiblyDamaged",
		"scope": "source.lua"
	},
	"setHeliReachedTargetDistance": {
		"body": "setHeliReachedTargetDistance(Vehicle heli, int dist)",
		"description": "GTA SA  0853",
		"prefix": "setHeliReachedTargetDistance",
		"scope": "source.lua"
	},
	"getSoundLevelAtCoords": {
		"body": "float level = getSoundLevelAtCoords(Ped ped, float X, float Y, float Z)",
		"description": "GTA SA  0855",
		"prefix": "getSoundLevelAtCoords",
		"scope": "source.lua"
	},
	"setCharAllowedToDuck": {
		"body": "setCharAllowedToDuck(Ped ped, bool enable)",
		"description": "GTA SA  0856",
		"prefix": "setCharAllowedToDuck",
		"scope": "source.lua"
	},
	"setHeadingForAttachedPlayer": {
		"body": "setHeadingForAttachedPlayer(Player player, float toAngle, float rotationSpeed)",
		"description": "GTA SA  0858",
		"prefix": "setHeadingForAttachedPlayer",
		"scope": "source.lua"
	},
	"taskWalkAlongsideChar": {
		"body": "taskWalkAlongsideChar(Ped ped, int alongisdeActor)",
		"description": "GTA SA  0859",
		"prefix": "taskWalkAlongsideChar",
		"scope": "source.lua"
	},
	"createEmergencyServicesCar": {
		"body": "createEmergencyServicesCar(Model car, float X, float Y, float Z)",
		"description": "GTA SA  085A",
		"prefix": "createEmergencyServicesCar",
		"scope": "source.lua"
	},
	"taskKindaStayInSamePlace": {
		"body": "taskKindaStayInSamePlace(Ped ped, bool stay)",
		"description": "GTA SA  085B",
		"prefix": "taskKindaStayInSamePlace",
		"scope": "source.lua"
	},
	"startPlaybackRecordedCarLooped": {
		"body": "startPlaybackRecordedCarLooped(Vehicle car, int path)",
		"description": "GTA SA  085E",
		"prefix": "startPlaybackRecordedCarLooped",
		"scope": "source.lua"
	},
	"setCharInterior": {
		"body": "setCharInterior(Ped ped, int interior)",
		"description": "GTA SA  0860",
		"prefix": "setCharInterior",
		"scope": "source.lua"
	},
	"isAttachedPlayerHeadingAchieved": {
		"body": "bool result = isAttachedPlayerHeadingAchieved(Player player)",
		"description": "GTA SA  0861",
		"prefix": "isAttachedPlayerHeadingAchieved",
		"scope": "source.lua"
	},
	"enableEntryExitPlayerGroupWarping": {
		"body": "enableEntryExitPlayerGroupWarping(float X, float Y, float radius, bool access)",
		"description": "GTA SA  0864",
		"prefix": "enableEntryExitPlayerGroupWarping",
		"scope": "source.lua"
	},
	"getClosestStealableObject": {
		"body": "Object object = getClosestStealableObject(float X, float Y, float Z, float radius)",
		"description": "GTA SA  0866",
		"prefix": "getClosestStealableObject",
		"scope": "source.lua"
	},
	"isProceduralInteriorActive": {
		"body": "bool result = isProceduralInteriorActive(int interior)",
		"description": "GTA SA  0867",
		"prefix": "isProceduralInteriorActive",
		"scope": "source.lua"
	},
	"removeCarRecording": {
		"body": "removeCarRecording(int path)",
		"description": "GTA SA  0873",
		"prefix": "removeCarRecording",
		"scope": "source.lua"
	},
	"setZonePopulationRace": {
		"body": "setZonePopulationRace(GxtString zone, int popcycle)",
		"description": "GTA SA  0874",
		"prefix": "setZonePopulationRace",
		"scope": "source.lua"
	},
	"setObjectOnlyDamagedByPlayer": {
		"body": "setObjectOnlyDamagedByPlayer(Object object, bool player)",
		"description": "GTA SA  0875",
		"prefix": "setObjectOnlyDamagedByPlayer",
		"scope": "source.lua"
	},
	"createBirds": {
		"body": "createBirds(float x1, float y1, float z1, float x2, float y2, float z2, int flag1, int flag2)",
		"description": "GTA SA  0876",
		"prefix": "createBirds",
		"scope": "source.lua"
	},
	"setVehicleDirtLevel": {
		"body": "setVehicleDirtLevel(Vehicle car, float level)",
		"description": "GTA SA  0878",
		"prefix": "setVehicleDirtLevel",
		"scope": "source.lua"
	},
	"setGangWarsActive": {
		"body": "setGangWarsActive(bool enable)",
		"description": "GTA SA  0879",
		"prefix": "setGangWarsActive",
		"scope": "source.lua"
	},
	"isGangWarGoingOn": {
		"body": "bool result = isGangWarGoingOn()",
		"description": "GTA SA  087A",
		"prefix": "isGangWarGoingOn",
		"scope": "source.lua"
	},
	"givePlayerClothesOutsideShop": {
		"body": "givePlayerClothesOutsideShop(Player player, string clothes, string model, int bodyPart)",
		"description": "GTA SA  087B",
		"prefix": "givePlayerClothesOutsideShop",
		"scope": "source.lua"
	},
	"clearLoadedShop": {
		"body": "clearLoadedShop()",
		"description": "GTA SA  087C",
		"prefix": "clearLoadedShop",
		"scope": "source.lua"
	},
	"setGroupSequence": {
		"body": "setGroupSequence(int group, int Aspack)",
		"description": "GTA SA  087D",
		"prefix": "setGroupSequence",
		"scope": "source.lua"
	},
	"setCharDropsWeaponsWhenDead": {
		"body": "setCharDropsWeaponsWhenDead(Ped ped, bool droppable)",
		"description": "GTA SA  087E",
		"prefix": "setCharDropsWeaponsWhenDead",
		"scope": "source.lua"
	},
	"setCharNeverLeavesGroup": {
		"body": "setCharNeverLeavesGroup(Ped ped, bool set)",
		"description": "GTA SA  087F",
		"prefix": "setCharNeverLeavesGroup",
		"scope": "source.lua"
	},
	"setPlayerFireButton": {
		"body": "setPlayerFireButton(Player player, bool able)",
		"description": "GTA SA  0881",
		"prefix": "setPlayerFireButton",
		"scope": "source.lua"
	},
	"attachFxSystemToCharBone": {
		"body": "attachFxSystemToCharBone(Particle particle, Ped ped, int mode)",
		"description": "GTA SA  0883",
		"prefix": "attachFxSystemToCharBone",
		"scope": "source.lua"
	},
	"registerAttractorScriptBrainForCodeUse": {
		"body": "registerAttractorScriptBrainForCodeUse(int handle, GxtString script)",
		"description": "GTA SA  0884",
		"prefix": "registerAttractorScriptBrainForCodeUse",
		"scope": "source.lua"
	},
	"setHeadingLimitForAttachedChar": {
		"body": "setHeadingLimitForAttachedChar(Ped ped, int orientation, float limit)",
		"description": "GTA SA  0887",
		"prefix": "setHeadingLimitForAttachedChar",
		"scope": "source.lua"
	},
	"addBlipForDeadChar": {
		"body": "Marker blip = addBlipForDeadChar(Ped ped)",
		"description": "GTA SA  0888",
		"prefix": "addBlipForDeadChar",
		"scope": "source.lua"
	},
	"getDeadCharCoordinates": {
		"body": "float X, float Y, float Z = getDeadCharCoordinates(Ped ped)",
		"description": "GTA SA  0889",
		"prefix": "getDeadCharCoordinates",
		"scope": "source.lua"
	},
	"taskPlayAnimWithFlags": {
		"body": "taskPlayAnimWithFlags(Ped ped, string animation, string ifp, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time, bool force, bool lockZ)",
		"description": "GTA SA  088A",
		"prefix": "taskPlayAnimWithFlags",
		"scope": "source.lua"
	},
	"setVehicleAirResistanceMultiplier": {
		"body": "setVehicleAirResistanceMultiplier(Vehicle car, float multiplier)",
		"description": "GTA SA  088B",
		"prefix": "setVehicleAirResistanceMultiplier",
		"scope": "source.lua"
	},
	"setCarCoordinatesNoOffset": {
		"body": "setCarCoordinatesNoOffset(Vehicle car, float X, float Y, float Z)",
		"description": "GTA SA  088C",
		"prefix": "setCarCoordinatesNoOffset",
		"scope": "source.lua"
	},
	"setUsesCollisionOfClosestObjectOfType": {
		"body": "setUsesCollisionOfClosestObjectOfType(float X, float Y, float Z, float radius, Model modelId, bool collisionDetection)",
		"description": "GTA SA  088D",
		"prefix": "setUsesCollisionOfClosestObjectOfType",
		"scope": "source.lua"
	},
	"setTimeOneDayForward": {
		"body": "setTimeOneDayForward()",
		"description": "GTA SA  088E",
		"prefix": "setTimeOneDayForward",
		"scope": "source.lua"
	},
	"setTimerBeepCountdownTime": {
		"body": "setTimerBeepCountdownTime(VarId timer, int reach)",
		"description": "GTA SA  0890",
		"prefix": "setTimerBeepCountdownTime",
		"scope": "source.lua"
	},
	"attachTrailerToCab": {
		"body": "attachTrailerToCab(int trailer, int cab)",
		"description": "GTA SA  0893",
		"prefix": "attachTrailerToCab",
		"scope": "source.lua"
	},
	"isVehicleTouchingObject": {
		"body": "bool result = isVehicleTouchingObject(Vehicle car, Object object)",
		"description": "GTA SA  0897",
		"prefix": "isVehicleTouchingObject",
		"scope": "source.lua"
	},
	"enableCraneControls": {
		"body": "enableCraneControls(bool UP, bool DOWN, bool RELEASE)",
		"description": "GTA SA  0898",
		"prefix": "enableCraneControls",
		"scope": "source.lua"
	},
	"isPlayerInPositionForConversation": {
		"body": "bool result = isPlayerInPositionForConversation(Ped ped)",
		"description": "GTA SA  089B",
		"prefix": "isPlayerInPositionForConversation",
		"scope": "source.lua"
	},
	"enableConversation": {
		"body": "enableConversation(Ped ped, bool enable)",
		"description": "GTA SA  089C",
		"prefix": "enableConversation",
		"scope": "source.lua"
	},
	"getRandomCharInSphereOnlyDrugsBuyers": {
		"body": "Ped ped = getRandomCharInSphereOnlyDrugsBuyers(float X, float Y, float Z, float radius)",
		"description": "GTA SA  089E",
		"prefix": "getRandomCharInSphereOnlyDrugsBuyers",
		"scope": "source.lua"
	},
	"getPedType": {
		"body": "int pedtype = getPedType(Ped ped)",
		"description": "GTA SA  089F",
		"prefix": "getPedType",
		"scope": "source.lua"
	},
	"taskUseClosestMapAttractor": {
		"body": "bool result = taskUseClosestMapAttractor(Ped ped, float radius, Model nearModel, float offsetX, float offsetY, float offsetZ, string scriptNamed)",
		"description": "GTA SA  08A0",
		"prefix": "taskUseClosestMapAttractor",
		"scope": "source.lua"
	},
	"planeAttackPlayerUsingDogFight": {
		"body": "planeAttackPlayerUsingDogFight(int hydra, Player player, float radius)",
		"description": "GTA SA  08A2",
		"prefix": "planeAttackPlayerUsingDogFight",
		"scope": "source.lua"
	},
	"canTriggerGangWarWhenOnAMission": {
		"body": "canTriggerGangWarWhenOnAMission(bool can)",
		"description": "GTA SA  08A3",
		"prefix": "canTriggerGangWarWhenOnAMission",
		"scope": "source.lua"
	},
	"controlMovableVehiclePart": {
		"body": "controlMovableVehiclePart(Vehicle car, float angle)",
		"description": "GTA SA  08A4",
		"prefix": "controlMovableVehiclePart",
		"scope": "source.lua"
	},
	"winchCanPickVehicleUp": {
		"body": "winchCanPickVehicleUp(Vehicle car, bool attractive)",
		"description": "GTA SA  08A5",
		"prefix": "winchCanPickVehicleUp",
		"scope": "source.lua"
	},
	"openCarDoorABit": {
		"body": "openCarDoorABit(Vehicle car, int door, float rotation)",
		"description": "GTA SA  08A6",
		"prefix": "openCarDoorABit",
		"scope": "source.lua"
	},
	"isCarDoorFullyOpen": {
		"body": "bool result = isCarDoorFullyOpen(Vehicle car, int door)",
		"description": "GTA SA  08A7",
		"prefix": "isCarDoorFullyOpen",
		"scope": "source.lua"
	},
	"setAlwaysDraw3dMarkers": {
		"body": "setAlwaysDraw3dMarkers(bool set)",
		"description": "GTA SA  08A8",
		"prefix": "setAlwaysDraw3dMarkers",
		"scope": "source.lua"
	},
	"streamScript": {
		"body": "streamScript(int script)",
		"description": "GTA SA  08A9",
		"prefix": "streamScript",
		"scope": "source.lua"
	},
	"hasStreamedScriptLoaded": {
		"body": "bool result = hasStreamedScriptLoaded(int script)",
		"description": "GTA SA  08AB",
		"prefix": "hasStreamedScriptLoaded",
		"scope": "source.lua"
	},
	"setGangWarsTrainingMission": {
		"body": "setGangWarsTrainingMission(bool set)",
		"description": "GTA SA  08AC",
		"prefix": "setGangWarsTrainingMission",
		"scope": "source.lua"
	},
	"setCharHasUsedEntryExit": {
		"body": "setCharHasUsedEntryExit(Ped ped, float X, float Y, float radius)",
		"description": "GTA SA  08AD",
		"prefix": "setCharHasUsedEntryExit",
		"scope": "source.lua"
	},
	"setCharMaxHealth": {
		"body": "setCharMaxHealth(Ped ped, int health)",
		"description": "GTA SA  08AF",
		"prefix": "setCharMaxHealth",
		"scope": "source.lua"
	},
	"setNightVision": {
		"body": "setNightVision(bool enable)",
		"description": "GTA SA  08B1",
		"prefix": "setNightVision",
		"scope": "source.lua"
	},
	"setInfraredVision": {
		"body": "setInfraredVision(bool enable)",
		"description": "GTA SA  08B2",
		"prefix": "setInfraredVision",
		"scope": "source.lua"
	},
	"setZoneForGangWarsTraining": {
		"body": "setZoneForGangWarsTraining(GxtString zone)",
		"description": "GTA SA  08B3",
		"prefix": "setZoneForGangWarsTraining",
		"scope": "source.lua"
	},
	"setCharCanBeKnockedOffBike": {
		"body": "setCharCanBeKnockedOffBike(Ped ped, bool can)",
		"description": "GTA SA  08C6",
		"prefix": "setCharCanBeKnockedOffBike",
		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGang": {
		"body": "setCharCoordinatesDontWarpGang(Ped ped, float X, float Y, float Z)",
		"description": "GTA SA  08C7",
		"prefix": "setCharCoordinatesDontWarpGang",
		"scope": "source.lua"
	},
	"addPriceModifier": {
		"body": "addPriceModifier(int item, int price)",
		"description": "GTA SA  08C8",
		"prefix": "addPriceModifier",
		"scope": "source.lua"
	},
	"removePriceModifier": {
		"body": "removePriceModifier(int item)",
		"description": "GTA SA  08C9",
		"prefix": "removePriceModifier",
		"scope": "source.lua"
	},
	"initZonePopulationSettings": {
		"body": "initZonePopulationSettings()",
		"description": "GTA SA  08CA",
		"prefix": "initZonePopulationSettings",
		"scope": "source.lua"
	},
	"explodeCarInCutsceneShakeAndBits": {
		"body": "explodeCarInCutsceneShakeAndBits(Vehicle car, bool shake, bool effect, bool sound)",
		"description": "GTA SA  08CB",
		"prefix": "explodeCarInCutsceneShakeAndBits",
		"scope": "source.lua"
	},
	"isSkipCutsceneButtonPressed": {
		"body": "bool result = isSkipCutsceneButtonPressed()",
		"description": "GTA SA  08D0",
		"prefix": "isSkipCutsceneButtonPressed",
		"scope": "source.lua"
	},
	"getCutsceneOffset": {
		"body": "bool result, float X, float Y, float Z = getCutsceneOffset()",
		"description": "GTA SA  08D1",
		"prefix": "getCutsceneOffset",
		"scope": "source.lua"
	},
	"setObjectScale": {
		"body": "setObjectScale(Object object, float scale)",
		"description": "GTA SA  08D2",
		"prefix": "setObjectScale",
		"scope": "source.lua"
	},
	"getCurrentPopulationZoneType": {
		"body": "int popcycle = getCurrentPopulationZoneType()",
		"description": "GTA SA  08D3",
		"prefix": "getCurrentPopulationZoneType",
		"scope": "source.lua"
	},
	"createMenu": {
		"body": "int menu = createMenu(GxtString title, float posX, float posY, float width, int columns, bool interactive, bool background, int alignment)",
		"description": "GTA SA  08D4",
		"prefix": "createMenu",
		"scope": "source.lua"
	},
	"setMenuColumnOrientation": {
		"body": "setMenuColumnOrientation(int menu, int column, int alignment)",
		"description": "GTA SA  08D6",
		"prefix": "setMenuColumnOrientation",
		"scope": "source.lua"
	},
	"getMenuItemSelected": {
		"body": "int item = getMenuItemSelected(int menu)",
		"description": "GTA SA  08D7",
		"prefix": "getMenuItemSelected",
		"scope": "source.lua"
	},
	"getMenuItemAccepted": {
		"body": "int item = getMenuItemAccepted(int menu)",
		"description": "GTA SA  08D8",
		"prefix": "getMenuItemAccepted",
		"scope": "source.lua"
	},
	"activateMenuItem": {
		"body": "activateMenuItem(int menu, int row, bool enable)",
		"description": "GTA SA  08D9",
		"prefix": "activateMenuItem",
		"scope": "source.lua"
	},
	"deleteMenu": {
		"body": "deleteMenu(int menu)",
		"description": "GTA SA  08DA",
		"prefix": "deleteMenu",
		"scope": "source.lua"
	},
	"setMenuColumn": {
		"body": "setMenuColumn(int menu, int column, GxtString header, GxtString data1, GxtString data2, GxtString data3, GxtString data4, GxtString data5, GxtString data6, GxtString data7, GxtString data8, GxtString data9, GxtString data10, GxtString data11, GxtString data12)",
		"description": "GTA SA  08DB",
		"prefix": "setMenuColumn",
		"scope": "source.lua"
	},
	"setBlipEntryExit": {
		"body": "setBlipEntryExit(Marker marker, float X, float Y, float radius)",
		"description": "GTA SA  08DC",
		"prefix": "setBlipEntryExit",
		"scope": "source.lua"
	},
	"switchDeathPenalties": {
		"body": "switchDeathPenalties(bool lose)",
		"description": "GTA SA  08DD",
		"prefix": "switchDeathPenalties",
		"scope": "source.lua"
	},
	"switchArrestPenalties": {
		"body": "switchArrestPenalties(bool lose)",
		"description": "GTA SA  08DE",
		"prefix": "switchArrestPenalties",
		"scope": "source.lua"
	},
	"setExtraHospitalRestartPoint": {
		"body": "setExtraHospitalRestartPoint(float X, float Y, float Z, float radius, float angle)",
		"description": "GTA SA  08DF",
		"prefix": "setExtraHospitalRestartPoint",
		"scope": "source.lua"
	},
	"setExtraPoliceStationRestartPoint": {
		"body": "setExtraPoliceStationRestartPoint(float X, float Y, float Z, float radius, float angle)",
		"description": "GTA SA  08E0",
		"prefix": "setExtraPoliceStationRestartPoint",
		"scope": "source.lua"
	},
	"findNumberTagsTagged": {
		"body": "int num = findNumberTagsTagged()",
		"description": "GTA SA  08E1",
		"prefix": "findNumberTagsTagged",
		"scope": "source.lua"
	},
	"getTerritoryUnderControlPercentage": {
		"body": "int percentage = getTerritoryUnderControlPercentage()",
		"description": "GTA SA  08E2",
		"prefix": "getTerritoryUnderControlPercentage",
		"scope": "source.lua"
	},
	"isObjectInAngledArea2d": {
		"body": "bool result = isObjectInAngledArea2d(Object object, float x1, float y1, float x2, float y2, float radius, bool sphere)",
		"description": "GTA SA  08E3",
		"prefix": "isObjectInAngledArea2d",
		"scope": "source.lua"
	},
	"isObjectInAngledArea3d": {
		"body": "bool result = isObjectInAngledArea3d(Object object, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)",
		"description": "GTA SA  08E4",
		"prefix": "isObjectInAngledArea3d",
		"scope": "source.lua"
	},
	"getRandomCharInSphereNoBrain": {
		"body": "Ped ped = getRandomCharInSphereNoBrain(float X, float Y, float Z, float radius)",
		"description": "GTA SA  08E5",
		"prefix": "getRandomCharInSphereNoBrain",
		"scope": "source.lua"
	},
	"setPlaneUndercarriageUp": {
		"body": "setPlaneUndercarriageUp(int plane, bool set)",
		"description": "GTA SA  08E6",
		"prefix": "setPlaneUndercarriageUp",
		"scope": "source.lua"
	},
	"disableAllEntryExits": {
		"body": "disableAllEntryExits(bool disable)",
		"description": "GTA SA  08E7",
		"prefix": "disableAllEntryExits",
		"scope": "source.lua"
	},
	"attachAnimsToModel": {
		"body": "attachAnimsToModel(Model modelId, GxtString externalScript)",
		"description": "GTA SA  08E8",
		"prefix": "attachAnimsToModel",
		"scope": "source.lua"
	},
	"setObjectAsStealable": {
		"body": "setObjectAsStealable(Object object, bool liftable)",
		"description": "GTA SA  08E9",
		"prefix": "setObjectAsStealable",
		"scope": "source.lua"
	},
	"setCreateRandomGangMembers": {
		"body": "setCreateRandomGangMembers(bool enable)",
		"description": "GTA SA  08EA",
		"prefix": "setCreateRandomGangMembers",
		"scope": "source.lua"
	},
	"addSparks": {
		"body": "addSparks(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, int density)",
		"description": "GTA SA  08EB",
		"prefix": "addSparks",
		"scope": "source.lua"
	},
	"getVehicleClass": {
		"body": "int class = getVehicleClass(Vehicle car)",
		"description": "GTA SA  08EC",
		"prefix": "getVehicleClass",
		"scope": "source.lua"
	},
	"clearConversationForChar": {
		"body": "clearConversationForChar(Ped ped)",
		"description": "GTA SA  08ED",
		"prefix": "clearConversationForChar",
		"scope": "source.lua"
	},
	"setMenuItemWithNumber": {
		"body": "setMenuItemWithNumber(int panel, int column, int row, GxtString gxtString, int number)",
		"description": "GTA SA  08EE",
		"prefix": "setMenuItemWithNumber",
		"scope": "source.lua"
	},
	"setMenuItemWith2Numbers": {
		"body": "setMenuItemWith2Numbers(int panel, int column, int row, GxtString gxtString, int numbers1, int numbers2)",
		"description": "GTA SA  08EF",
		"prefix": "setMenuItemWith2Numbers",
		"scope": "source.lua"
	},
	"setCutsceneModelTexture": {
		"body": "setCutsceneModelTexture(GxtString cutsceneModel, GxtString textureName)",
		"description": "GTA SA  08F0",
		"prefix": "setCutsceneModelTexture",
		"scope": "source.lua"
	},
	"getNameOfInfoZone": {
		"body": "GxtString nameB = getNameOfInfoZone(float atX, float atY, float atZ)",
		"description": "GTA SA  08F1",
		"prefix": "getNameOfInfoZone",
		"scope": "source.lua"
	},
	"vehicleCanBeTargettedByHsMissile": {
		"body": "vehicleCanBeTargettedByHsMissile(Vehicle car, bool targetable)",
		"description": "GTA SA  08F2",
		"prefix": "vehicleCanBeTargettedByHsMissile",
		"scope": "source.lua"
	},
	"setFreebiesInVehicle": {
		"body": "setFreebiesInVehicle(Vehicle car, bool containsGoodies)",
		"description": "GTA SA  08F3",
		"prefix": "setFreebiesInVehicle",
		"scope": "source.lua"
	},
	"setScriptLimitToGangSize": {
		"body": "setScriptLimitToGangSize(bool max)",
		"description": "GTA SA  08F4",
		"prefix": "setScriptLimitToGangSize",
		"scope": "source.lua"
	},
	"makePlayerGangDisappear": {
		"body": "makePlayerGangDisappear()",
		"description": "GTA SA  08F5",
		"prefix": "makePlayerGangDisappear",
		"scope": "source.lua"
	},
	"makePlayerGangReappear": {
		"body": "makePlayerGangReappear()",
		"description": "GTA SA  08F6",
		"prefix": "makePlayerGangReappear",
		"scope": "source.lua"
	},
	"getClothesItem": {
		"body": "int textureCRC, int modelCRC = getClothesItem(Player player, int bodypart)",
		"description": "GTA SA  08F7",
		"prefix": "getClothesItem",
		"scope": "source.lua"
	},
	"showUpdateStats": {
		"body": "showUpdateStats(bool display)",
		"description": "GTA SA  08F8",
		"prefix": "showUpdateStats",
		"scope": "source.lua"
	},
	"setCoordBlipAppearance": {
		"body": "setCoordBlipAppearance(Checkpoint checkpoint, int type)",
		"description": "GTA SA  08FB",
		"prefix": "setCoordBlipAppearance",
		"scope": "source.lua"
	},
	"setHeathazeEffect": {
		"body": "setHeathazeEffect(bool enable)",
		"description": "GTA SA  08FD",
		"prefix": "setHeathazeEffect",
		"scope": "source.lua"
	},
	"isHelpMessageBeingDisplayed": {
		"body": "bool result = isHelpMessageBeingDisplayed()",
		"description": "GTA SA  08FE",
		"prefix": "isHelpMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"hasObjectBeenDamagedByWeapon": {
		"body": "bool result = hasObjectBeenDamagedByWeapon(Object object, int type)",
		"description": "GTA SA  08FF",
		"prefix": "hasObjectBeenDamagedByWeapon",
		"scope": "source.lua"
	},
	"clearObjectLastWeaponDamage": {
		"body": "clearObjectLastWeaponDamage(Object object)",
		"description": "GTA SA  0900",
		"prefix": "clearObjectLastWeaponDamage",
		"scope": "source.lua"
	},
	"setPlayerJumpButton": {
		"body": "setPlayerJumpButton(Player player, bool enable)",
		"description": "GTA SA  0901",
		"prefix": "setPlayerJumpButton",
		"scope": "source.lua"
	},
	"getHudColour": {
		"body": "int r, int g, int b, int a = getHudColour(int interface)",
		"description": "GTA SA  0904",
		"prefix": "getHudColour",
		"scope": "source.lua"
	},
	"lockDoor": {
		"body": "lockDoor(int door, bool lock)",
		"description": "GTA SA  0905",
		"prefix": "lockDoor",
		"scope": "source.lua"
	},
	"setObjectMass": {
		"body": "setObjectMass(Object object, float mass)",
		"description": "GTA SA  0906",
		"prefix": "setObjectMass",
		"scope": "source.lua"
	},
	"getObjectMass": {
		"body": "float mass = getObjectMass(int int)",
		"description": "GTA SA  0907",
		"prefix": "getObjectMass",
		"scope": "source.lua"
	},
	"setObjectTurnMass": {
		"body": "setObjectTurnMass(Object object, float turnMass)",
		"description": "GTA SA  0908",
		"prefix": "setObjectTurnMass",
		"scope": "source.lua"
	},
	"getObjectTurnMass": {
		"body": "float turnMass = getObjectTurnMass(Object object)",
		"description": "GTA SA  0909",
		"prefix": "getObjectTurnMass",
		"scope": "source.lua"
	},
	"setSpecificZoneToTriggerGangWar": {
		"body": "setSpecificZoneToTriggerGangWar(GxtString zone)",
		"description": "GTA SA  090C",
		"prefix": "setSpecificZoneToTriggerGangWar",
		"scope": "source.lua"
	},
	"clearSpecificZonesToTriggerGangWar": {
		"body": "clearSpecificZonesToTriggerGangWar()",
		"description": "GTA SA  090D",
		"prefix": "clearSpecificZonesToTriggerGangWar",
		"scope": "source.lua"
	},
	"setActiveMenuItem": {
		"body": "setActiveMenuItem(int panel, int activeRow)",
		"description": "GTA SA  090E",
		"prefix": "setActiveMenuItem",
		"scope": "source.lua"
	},
	"markStreamedScriptAsNoLongerNeeded": {
		"body": "markStreamedScriptAsNoLongerNeeded(int externalScript)",
		"description": "GTA SA  090F",
		"prefix": "markStreamedScriptAsNoLongerNeeded",
		"scope": "source.lua"
	},
	"removeStreamedScript": {
		"body": "removeStreamedScript(int externalScript)",
		"description": "GTA SA  0910",
		"prefix": "removeStreamedScript",
		"scope": "source.lua"
	},
	"setMessageFormatting": {
		"body": "setMessageFormatting(bool priority, int leftmargin, int maxwidth)",
		"description": "GTA SA  0912",
		"prefix": "setMessageFormatting",
		"scope": "source.lua"
	},
	"startNewStreamedScript": {
		"body": "startNewStreamedScript(int externalScript, table args)",
		"description": "GTA SA  0913",
		"prefix": "startNewStreamedScript",
		"scope": "source.lua"
	},
	"setWeatherToAppropriateTypeNow": {
		"body": "setWeatherToAppropriateTypeNow()",
		"description": "GTA SA  0915",
		"prefix": "setWeatherToAppropriateTypeNow",
		"scope": "source.lua"
	},
	"winchCanPickObjectUp": {
		"body": "winchCanPickObjectUp(Object object, bool enable)",
		"description": "GTA SA  0916",
		"prefix": "winchCanPickObjectUp",
		"scope": "source.lua"
	},
	"switchAudioZone": {
		"body": "switchAudioZone(GxtString zone, bool enableSound)",
		"description": "GTA SA  0917",
		"prefix": "switchAudioZone",
		"scope": "source.lua"
	},
	"setCarEngineOn": {
		"body": "setCarEngineOn(Vehicle car, bool on)",
		"description": "GTA SA  0918",
		"prefix": "setCarEngineOn",
		"scope": "source.lua"
	},
	"setCarLightsOn": {
		"body": "setCarLightsOn(Vehicle car, bool lights)",
		"description": "GTA SA  0919",
		"prefix": "setCarLightsOn",
		"scope": "source.lua"
	},
	"getUserOfClosestMapAttractor": {
		"body": "Ped ped = getUserOfClosestMapAttractor(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, string externalScriptNamed)",
		"description": "GTA SA  091C",
		"prefix": "getUserOfClosestMapAttractor",
		"scope": "source.lua"
	},
	"switchRoadsBackToOriginal": {
		"body": "switchRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  091D",
		"prefix": "switchRoadsBackToOriginal",
		"scope": "source.lua"
	},
	"switchPedRoadsBackToOriginal": {
		"body": "switchPedRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  091E",
		"prefix": "switchPedRoadsBackToOriginal",
		"scope": "source.lua"
	},
	"getPlaneUndercarriagePosition": {
		"body": "int landingGearStatus = getPlaneUndercarriagePosition(int plane)",
		"description": "GTA SA  091F",
		"prefix": "getPlaneUndercarriagePosition",
		"scope": "source.lua"
	},
	"cameraSetVectorTrack": {
		"body": "cameraSetVectorTrack(float pointX, float pointY, float pointZ, float transverseX, float transverseY, float transverseZ, int time, bool smooth)",
		"description": "GTA SA  0920",
		"prefix": "cameraSetVectorTrack",
		"scope": "source.lua"
	},
	"cameraSetLerpFov": {
		"body": "cameraSetLerpFov(float from, float to, int timelimit, bool smoothTransition)",
		"description": "GTA SA  0922",
		"prefix": "cameraSetLerpFov",
		"scope": "source.lua"
	},
	"switchAmbientPlanes": {
		"body": "switchAmbientPlanes(bool enable)",
		"description": "GTA SA  0923",
		"prefix": "switchAmbientPlanes",
		"scope": "source.lua"
	},
	"setDarknessEffect": {
		"body": "setDarknessEffect(bool enable, int value)",
		"description": "GTA SA  0924",
		"prefix": "setDarknessEffect",
		"scope": "source.lua"
	},
	"cameraResetNewScriptables": {
		"body": "cameraResetNewScriptables()",
		"description": "GTA SA  0925",
		"prefix": "cameraResetNewScriptables",
		"scope": "source.lua"
	},
	"getNumberOfInstancesOfStreamedScript": {
		"body": "int value = getNumberOfInstancesOfStreamedScript(int externalScript)",
		"description": "GTA SA  0926",
		"prefix": "getNumberOfInstancesOfStreamedScript",
		"scope": "source.lua"
	},
	"allocateStreamedScriptToRandomPed": {
		"body": "allocateStreamedScriptToRandomPed(int externalScript, Model actorModel, int priority)",
		"description": "GTA SA  0928",
		"prefix": "allocateStreamedScriptToRandomPed",
		"scope": "source.lua"
	},
	"allocateStreamedScriptToObject": {
		"body": "allocateStreamedScriptToObject(int externalScript, Model objectModel, int priority, float radius, int type)",
		"description": "GTA SA  0929",
		"prefix": "allocateStreamedScriptToObject",
		"scope": "source.lua"
	},
	"getGroupMember": {
		"body": "int handle = getGroupMember(int group, int member)",
		"description": "GTA SA  092B",
		"prefix": "getGroupMember",
		"scope": "source.lua"
	},
	"getWaterHeightAtCoords": {
		"body": "float height = getWaterHeightAtCoords(float atX, float atY, bool ignoreWaves)",
		"description": "GTA SA  092E",
		"prefix": "getWaterHeightAtCoords",
		"scope": "source.lua"
	},
	"cameraPersistTrack": {
		"body": "cameraPersistTrack(bool lock)",
		"description": "GTA SA  092F",
		"prefix": "cameraPersistTrack",
		"scope": "source.lua"
	},
	"cameraPersistPos": {
		"body": "cameraPersistPos(bool lock)",
		"description": "GTA SA  0930",
		"prefix": "cameraPersistPos",
		"scope": "source.lua"
	},
	"cameraPersistFov": {
		"body": "cameraPersistFov(bool lock)",
		"description": "GTA SA  0931",
		"prefix": "cameraPersistFov",
		"scope": "source.lua"
	},
	"cameraIsVectorMoveRunning": {
		"body": "bool result = cameraIsVectorMoveRunning()",
		"description": "GTA SA  0933",
		"prefix": "cameraIsVectorMoveRunning",
		"scope": "source.lua"
	},
	"cameraIsVectorTrackRunning": {
		"body": "bool result = cameraIsVectorTrackRunning()",
		"description": "GTA SA  0934",
		"prefix": "cameraIsVectorTrackRunning",
		"scope": "source.lua"
	},
	"cameraSetVectorMove": {
		"body": "cameraSetVectorMove(float cameraX, float cameraY, float cameraZ, float positionX, float positionY, float positionZ, int time, bool smoothTransition)",
		"description": "GTA SA  0936",
		"prefix": "cameraSetVectorMove",
		"scope": "source.lua"
	},
	"drawWindow": {
		"body": "drawWindow(float cornerAX, float cornerAY, float cornerBX, float cornerBY, GxtString gxtString, int style)",
		"description": "GTA SA  0937",
		"prefix": "drawWindow",
		"scope": "source.lua"
	},
	"attachCarToObject": {
		"body": "attachCarToObject(Vehicle car, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)",
		"description": "GTA SA  0939",
		"prefix": "attachCarToObject",
		"scope": "source.lua"
	},
	"setGarageResprayFree": {
		"body": "setGarageResprayFree(GxtString garage, bool free)",
		"description": "GTA SA  093A",
		"prefix": "setGarageResprayFree",
		"scope": "source.lua"
	},
	"setCharBulletproofVest": {
		"body": "setCharBulletproofVest(Ped ped, bool enable)",
		"description": "GTA SA  093B",
		"prefix": "setCharBulletproofVest",
		"scope": "source.lua"
	},
	"setCinemaCamera": {
		"body": "setCinemaCamera(bool lock)",
		"description": "GTA SA  093D",
		"prefix": "setCinemaCamera",
		"scope": "source.lua"
	},
	"setCharFireDamageMultiplier": {
		"body": "setCharFireDamageMultiplier(Ped ped, float multiplier)",
		"description": "GTA SA  093E",
		"prefix": "setCharFireDamageMultiplier",
		"scope": "source.lua"
	},
	"setGroupFollowStatus": {
		"body": "setGroupFollowStatus(int group, bool status)",
		"description": "GTA SA  0940",
		"prefix": "setGroupFollowStatus",
		"scope": "source.lua"
	},
	"setSearchlightClipIfColliding": {
		"body": "setSearchlightClipIfColliding(Searchlight searchlight, bool flag)",
		"description": "GTA SA  0941",
		"prefix": "setSearchlightClipIfColliding",
		"scope": "source.lua"
	},
	"hasPlayerBoughtItem": {
		"body": "bool result = hasPlayerBoughtItem(int item)",
		"description": "GTA SA  0942",
		"prefix": "hasPlayerBoughtItem",
		"scope": "source.lua"
	},
	"setCameraInFrontOfChar": {
		"body": "setCameraInFrontOfChar(Ped ped)",
		"description": "GTA SA  0944",
		"prefix": "setCameraInFrontOfChar",
		"scope": "source.lua"
	},
	"getPlayerMaxArmour": {
		"body": "int maxArmour = getPlayerMaxArmour(Player player)",
		"description": "GTA SA  0945",
		"prefix": "getPlayerMaxArmour",
		"scope": "source.lua"
	},
	"setCharUsesUpperbodyDamageAnimsOnly": {
		"body": "setCharUsesUpperbodyDamageAnimsOnly(Ped ped, bool uninterupted)",
		"description": "GTA SA  0946",
		"prefix": "setCharUsesUpperbodyDamageAnimsOnly",
		"scope": "source.lua"
	},
	"setCharSayContext": {
		"body": "int spokenPhrase = setCharSayContext(Ped ped, int speech)",
		"description": "GTA SA  0947",
		"prefix": "setCharSayContext",
		"scope": "source.lua"
	},
	"addExplosionVariableShake": {
		"body": "addExplosionVariableShake(float atX, float atY, float atZ, int type, float cameraShake)",
		"description": "GTA SA  0948",
		"prefix": "addExplosionVariableShake",
		"scope": "source.lua"
	},
	"attachMissionAudioToChar": {
		"body": "attachMissionAudioToChar(int id, Ped ped)",
		"description": "GTA SA  0949",
		"prefix": "attachMissionAudioToChar",
		"scope": "source.lua"
	},
	"updatePickupMoneyPerDay": {
		"body": "updatePickupMoneyPerDay(Pickup pickup, int cash)",
		"description": "GTA SA  094A",
		"prefix": "updatePickupMoneyPerDay",
		"scope": "source.lua"
	},
	"getNameOfEntryExitCharUsed": {
		"body": "GxtString interiorName = getNameOfEntryExitCharUsed(Ped ped)",
		"description": "GTA SA  094B",
		"prefix": "getNameOfEntryExitCharUsed",
		"scope": "source.lua"
	},
	"getPositionOfEntryExitCharUsed": {
		"body": "float coordX, float coordY, float coordZ, int number = getPositionOfEntryExitCharUsed(Ped ped)",
		"description": "GTA SA  094C",
		"prefix": "getPositionOfEntryExitCharUsed",
		"scope": "source.lua"
	},
	"isCharTalking": {
		"body": "bool result = isCharTalking(Ped ped)",
		"description": "GTA SA  094D",
		"prefix": "isCharTalking",
		"scope": "source.lua"
	},
	"disableCharSpeech": {
		"body": "disableCharSpeech(Ped ped, bool disable)",
		"description": "GTA SA  094E",
		"prefix": "disableCharSpeech",
		"scope": "source.lua"
	},
	"enableCharSpeech": {
		"body": "enableCharSpeech(Ped ped)",
		"description": "GTA SA  094F",
		"prefix": "enableCharSpeech",
		"scope": "source.lua"
	},
	"setUpSkip": {
		"body": "setUpSkip(float posX, float posY, float posZ, float angle)",
		"description": "GTA SA  0950",
		"prefix": "setUpSkip",
		"scope": "source.lua"
	},
	"clearSkip": {
		"body": "clearSkip()",
		"description": "GTA SA  0951",
		"prefix": "clearSkip",
		"scope": "source.lua"
	},
	"preloadBeatTrack": {
		"body": "preloadBeatTrack(int soundtrack)",
		"description": "GTA SA  0952",
		"prefix": "preloadBeatTrack",
		"scope": "source.lua"
	},
	"getBeatTrackStatus": {
		"body": "int status = getBeatTrackStatus()",
		"description": "GTA SA  0953",
		"prefix": "getBeatTrackStatus",
		"scope": "source.lua"
	},
	"playBeatTrack": {
		"body": "playBeatTrack()",
		"description": "GTA SA  0954",
		"prefix": "playBeatTrack",
		"scope": "source.lua"
	},
	"stopBeatTrack": {
		"body": "stopBeatTrack()",
		"description": "GTA SA  0955",
		"prefix": "stopBeatTrack",
		"scope": "source.lua"
	},
	"findMaxNumberOfGroupMembers": {
		"body": "int max = findMaxNumberOfGroupMembers()",
		"description": "GTA SA  0956",
		"prefix": "findMaxNumberOfGroupMembers",
		"scope": "source.lua"
	},
	"vehicleDoesProvideCover": {
		"body": "vehicleDoesProvideCover(Vehicle car, bool providesCover)",
		"description": "GTA SA  0957",
		"prefix": "vehicleDoesProvideCover",
		"scope": "source.lua"
	},
	"createSnapshotPickup": {
		"body": "Pickup pickup = createSnapshotPickup(float atX, float atY, float atZ)",
		"description": "GTA SA  0958",
		"prefix": "createSnapshotPickup",
		"scope": "source.lua"
	},
	"createHorseshoePickup": {
		"body": "Pickup pickup = createHorseshoePickup(float atX, float atY, float atZ)",
		"description": "GTA SA  0959",
		"prefix": "createHorseshoePickup",
		"scope": "source.lua"
	},
	"createOysterPickup": {
		"body": "Pickup pickup = createOysterPickup(float atX, float atY, float atZ)",
		"description": "GTA SA  095A",
		"prefix": "createOysterPickup",
		"scope": "source.lua"
	},
	"hasObjectBeenUprooted": {
		"body": "bool result = hasObjectBeenUprooted(Object object)",
		"description": "GTA SA  095B",
		"prefix": "hasObjectBeenUprooted",
		"scope": "source.lua"
	},
	"addSmokeParticle": {
		"body": "addSmokeParticle(float atX, float atY, float atZ, float velocityX, float velocityY, float velocityZ, int r, int g, int b, int a, float size, float factor)",
		"description": "GTA SA  095C",
		"prefix": "addSmokeParticle",
		"scope": "source.lua"
	},
	"isCharStuckUnderCar": {
		"body": "bool result = isCharStuckUnderCar(Ped ped)",
		"description": "GTA SA  095D",
		"prefix": "isCharStuckUnderCar",
		"scope": "source.lua"
	},
	"controlCarDoor": {
		"body": "controlCarDoor(Vehicle car, int door, int unlatch, float angle)",
		"description": "GTA SA  095E",
		"prefix": "controlCarDoor",
		"scope": "source.lua"
	},
	"getDoorAngleRatio": {
		"body": "float angle = getDoorAngleRatio(Vehicle car, int door)",
		"description": "GTA SA  095F",
		"prefix": "getDoorAngleRatio",
		"scope": "source.lua"
	},
	"setPlayerDisplayVitalStatsButton": {
		"body": "setPlayerDisplayVitalStatsButton(Player player, bool display)",
		"description": "GTA SA  0960",
		"prefix": "setPlayerDisplayVitalStatsButton",
		"scope": "source.lua"
	},
	"setCharKeepTask": {
		"body": "setCharKeepTask(Ped ped, bool keepTasks)",
		"description": "GTA SA  0961",
		"prefix": "setCharKeepTask",
		"scope": "source.lua"
	},
	"createMenuGrid": {
		"body": "int id = createMenuGrid(GxtString gxtString, int positionX, int positionY, float width, int columns, bool interactive, bool background, int alignment)",
		"description": "GTA SA  0964",
		"prefix": "createMenuGrid",
		"scope": "source.lua"
	},
	"isCharSwimming": {
		"body": "bool result = isCharSwimming(Ped ped)",
		"description": "GTA SA  0965",
		"prefix": "isCharSwimming",
		"scope": "source.lua"
	},
	"getCharSwimState": {
		"body": "int status = getCharSwimState(Ped ped)",
		"description": "GTA SA  0966",
		"prefix": "getCharSwimState",
		"scope": "source.lua"
	},
	"startCharFacialTalk": {
		"body": "startCharFacialTalk(Ped ped, int time)",
		"description": "GTA SA  0967",
		"prefix": "startCharFacialTalk",
		"scope": "source.lua"
	},
	"stopCharFacialTalk": {
		"body": "stopCharFacialTalk(Ped ped)",
		"description": "GTA SA  0968",
		"prefix": "stopCharFacialTalk",
		"scope": "source.lua"
	},
	"isBigVehicle": {
		"body": "bool result = isBigVehicle(Vehicle car)",
		"description": "GTA SA  0969",
		"prefix": "isBigVehicle",
		"scope": "source.lua"
	},
	"switchPoliceHelis": {
		"body": "switchPoliceHelis(bool enable)",
		"description": "GTA SA  096A",
		"prefix": "switchPoliceHelis",
		"scope": "source.lua"
	},
	"storeCarModState": {
		"body": "storeCarModState()",
		"description": "GTA SA  096B",
		"prefix": "storeCarModState",
		"scope": "source.lua"
	},
	"restoreCarModState": {
		"body": "restoreCarModState()",
		"description": "GTA SA  096C",
		"prefix": "restoreCarModState",
		"scope": "source.lua"
	},
	"getCurrentCarMod": {
		"body": "Model modelId = getCurrentCarMod(Vehicle car, int slot)",
		"description": "GTA SA  096D",
		"prefix": "getCurrentCarMod",
		"scope": "source.lua"
	},
	"isCarLowRider": {
		"body": "bool result = isCarLowRider(Vehicle car)",
		"description": "GTA SA  096E",
		"prefix": "isCarLowRider",
		"scope": "source.lua"
	},
	"isCarStreetRacer": {
		"body": "bool result = isCarStreetRacer(Vehicle car)",
		"description": "GTA SA  096F",
		"prefix": "isCarStreetRacer",
		"scope": "source.lua"
	},
	"forceDeathRestart": {
		"body": "forceDeathRestart()",
		"description": "GTA SA  0970",
		"prefix": "forceDeathRestart",
		"scope": "source.lua"
	},
	"syncWater": {
		"body": "syncWater()",
		"description": "GTA SA  0971",
		"prefix": "syncWater",
		"scope": "source.lua"
	},
	"setCharCoordinatesNoOffset": {
		"body": "setCharCoordinatesNoOffset(Ped ped, float atX, float atY, float atZ)",
		"description": "GTA SA  0972",
		"prefix": "setCharCoordinatesNoOffset",
		"scope": "source.lua"
	},
	"doesScriptFireExist": {
		"body": "bool result = doesScriptFireExist(int fire)",
		"description": "GTA SA  0973",
		"prefix": "doesScriptFireExist",
		"scope": "source.lua"
	},
	"resetStuffUponResurrection": {
		"body": "resetStuffUponResurrection()",
		"description": "GTA SA  0974",
		"prefix": "resetStuffUponResurrection",
		"scope": "source.lua"
	},
	"isEmergencyServicesVehicle": {
		"body": "bool result = isEmergencyServicesVehicle(Vehicle car)",
		"description": "GTA SA  0975",
		"prefix": "isEmergencyServicesVehicle",
		"scope": "source.lua"
	},
	"killFxSystemNow": {
		"body": "killFxSystemNow(Particle particle)",
		"description": "GTA SA  0976",
		"prefix": "killFxSystemNow",
		"scope": "source.lua"
	},
	"isObjectWithinBrainActivationRange": {
		"body": "bool result = isObjectWithinBrainActivationRange(Player player)",
		"description": "GTA SA  0977",
		"prefix": "isObjectWithinBrainActivationRange",
		"scope": "source.lua"
	},
	"copySharedCharDecisionMaker": {
		"body": "int to = copySharedCharDecisionMaker(int from)",
		"description": "GTA SA  0978",
		"prefix": "copySharedCharDecisionMaker",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtPosition": {
		"body": "reportMissionAudioEventAtPosition(float atX, float atY, float atZ, int event)",
		"description": "GTA SA  097A",
		"prefix": "reportMissionAudioEventAtPosition",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtObject": {
		"body": "reportMissionAudioEventAtObject(int at, int event)",
		"description": "GTA SA  097B",
		"prefix": "reportMissionAudioEventAtObject",
		"scope": "source.lua"
	},
	"attachMissionAudioToObject": {
		"body": "attachMissionAudioToObject(int id, Object object)",
		"description": "GTA SA  097C",
		"prefix": "attachMissionAudioToObject",
		"scope": "source.lua"
	},
	"getNumCarColours": {
		"body": "int colours = getNumCarColours(Vehicle car)",
		"description": "GTA SA  097D",
		"prefix": "getNumCarColours",
		"scope": "source.lua"
	},
	"extinguishFireAtPoint": {
		"body": "extinguishFireAtPoint(float atX, float atY, float atZ, float radius)",
		"description": "GTA SA  0980",
		"prefix": "extinguishFireAtPoint",
		"scope": "source.lua"
	},
	"hasTrainDerailed": {
		"body": "bool result = hasTrainDerailed(Vehicle train)",
		"description": "GTA SA  0981",
		"prefix": "hasTrainDerailed",
		"scope": "source.lua"
	},
	"setCharForceDieInCar": {
		"body": "setCharForceDieInCar(Ped ped, bool stayInCarWhenDead)",
		"description": "GTA SA  0982",
		"prefix": "setCharForceDieInCar",
		"scope": "source.lua"
	},
	"setOnlyCreateGangMembers": {
		"body": "setOnlyCreateGangMembers(bool enable)",
		"description": "GTA SA  0983",
		"prefix": "setOnlyCreateGangMembers",
		"scope": "source.lua"
	},
	"getObjectModel": {
		"body": "Model modelId = getObjectModel(Object object)",
		"description": "GTA SA  0984",
		"prefix": "getObjectModel",
		"scope": "source.lua"
	},
	"setCharUsesCollisionClosestObjectOfType": {
		"body": "setCharUsesCollisionClosestObjectOfType(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, bool solid, int forActor)",
		"description": "GTA SA  0985",
		"prefix": "setCharUsesCollisionClosestObjectOfType",
		"scope": "source.lua"
	},
	"clearAllScriptFireFlags": {
		"body": "clearAllScriptFireFlags()",
		"description": "GTA SA  0986",
		"prefix": "clearAllScriptFireFlags",
		"scope": "source.lua"
	},
	"getCarBlockingCar": {
		"body": "int blockingCar = getCarBlockingCar(Vehicle car)",
		"description": "GTA SA  0987",
		"prefix": "getCarBlockingCar",
		"scope": "source.lua"
	},
	"getCurrentVehiclePaintjob": {
		"body": "int paintjob = getCurrentVehiclePaintjob(Vehicle car)",
		"description": "GTA SA  0988",
		"prefix": "getCurrentVehiclePaintjob",
		"scope": "source.lua"
	},
	"setHelpMessageBoxSize": {
		"body": "setHelpMessageBoxSize(int width)",
		"description": "GTA SA  0989",
		"prefix": "setHelpMessageBoxSize",
		"scope": "source.lua"
	},
	"setGunshotSenseRangeForRiot2": {
		"body": "setGunshotSenseRangeForRiot2(float range)",
		"description": "GTA SA  098A",
		"prefix": "setGunshotSenseRangeForRiot2",
		"scope": "source.lua"
	},
	"getCarMovingComponentOffset": {
		"body": "float angle = getCarMovingComponentOffset(Vehicle car)",
		"description": "GTA SA  098D",
		"prefix": "getCarMovingComponentOffset",
		"scope": "source.lua"
	},
	"setNamedEntryExitFlag": {
		"body": "setNamedEntryExitFlag(GxtString interior, int bitmask, bool flag)",
		"description": "GTA SA  098E",
		"prefix": "setNamedEntryExitFlag",
		"scope": "source.lua"
	},
	"pauseCurrentBeatTrack": {
		"body": "pauseCurrentBeatTrack(bool paused)",
		"description": "GTA SA  0991",
		"prefix": "pauseCurrentBeatTrack",
		"scope": "source.lua"
	},
	"setPlayerWeaponsScrollable": {
		"body": "setPlayerWeaponsScrollable(Player player, bool scrollable)",
		"description": "GTA SA  0992",
		"prefix": "setPlayerWeaponsScrollable",
		"scope": "source.lua"
	},
	"markRoadNodeAsDontWander": {
		"body": "markRoadNodeAsDontWander(float atX, float atY, float atZ)",
		"description": "GTA SA  0994",
		"prefix": "markRoadNodeAsDontWander",
		"scope": "source.lua"
	},
	"unmarkAllRoadNodesAsDontWander": {
		"body": "unmarkAllRoadNodesAsDontWander()",
		"description": "GTA SA  0995",
		"prefix": "unmarkAllRoadNodesAsDontWander",
		"scope": "source.lua"
	},
	"setCheckpointHeading": {
		"body": "setCheckpointHeading(Checkpoint checkpoint, float angle)",
		"description": "GTA SA  0996",
		"prefix": "setCheckpointHeading",
		"scope": "source.lua"
	},
	"setMissionRespectTotal": {
		"body": "setMissionRespectTotal(int respect)",
		"description": "GTA SA  0997",
		"prefix": "setMissionRespectTotal",
		"scope": "source.lua"
	},
	"awardPlayerMissionRespect": {
		"body": "awardPlayerMissionRespect(int respect)",
		"description": "GTA SA  0998",
		"prefix": "awardPlayerMissionRespect",
		"scope": "source.lua"
	},
	"setCarCollision": {
		"body": "setCarCollision(Vehicle car, bool collision)",
		"description": "GTA SA  099A",
		"prefix": "setCarCollision",
		"scope": "source.lua"
	},
	"changePlaybackToUseAi": {
		"body": "changePlaybackToUseAi(Vehicle car)",
		"description": "GTA SA  099B",
		"prefix": "changePlaybackToUseAi",
		"scope": "source.lua"
	},
	"cameraSetShakeSimulationSimple": {
		"body": "cameraSetShakeSimulationSimple(int type, float timelimit, float intensity)",
		"description": "GTA SA  099C",
		"prefix": "cameraSetShakeSimulationSimple",
		"scope": "source.lua"
	},
	"isNightVisionActive": {
		"body": "bool result = isNightVisionActive()",
		"description": "GTA SA  099D",
		"prefix": "isNightVisionActive",
		"scope": "source.lua"
	},
	"setCreateRandomCops": {
		"body": "setCreateRandomCops(bool enable)",
		"description": "GTA SA  099E",
		"prefix": "setCreateRandomCops",
		"scope": "source.lua"
	},
	"taskSetIgnoreWeaponRangeFlag": {
		"body": "taskSetIgnoreWeaponRangeFlag(Ped ped, bool ignore)",
		"description": "GTA SA  099F",
		"prefix": "taskSetIgnoreWeaponRangeFlag",
		"scope": "source.lua"
	},
	"taskPickUpSecondObject": {
		"body": "taskPickUpSecondObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int bone, int int7, string animation, string file, int time)",
		"description": "GTA SA  09A0",
		"prefix": "taskPickUpSecondObject",
		"scope": "source.lua"
	},
	"dropSecondObject": {
		"body": "dropSecondObject(Ped ped, bool to)",
		"description": "GTA SA  09A1",
		"prefix": "dropSecondObject",
		"scope": "source.lua"
	},
	"removeObjectElegantly": {
		"body": "removeObjectElegantly(Object object)",
		"description": "GTA SA  09A2",
		"prefix": "removeObjectElegantly",
		"scope": "source.lua"
	},
	"drawCrosshair": {
		"body": "drawCrosshair(bool draw)",
		"description": "GTA SA  09A3",
		"prefix": "drawCrosshair",
		"scope": "source.lua"
	},
	"setUpConversationNodeWithSpeech": {
		"body": "setUpConversationNodeWithSpeech(GxtString question, GxtString answerY, GxtString answerN, int questionWav, int answerYWav, int answerNWav)",
		"description": "GTA SA  09A4",
		"prefix": "setUpConversationNodeWithSpeech",
		"scope": "source.lua"
	},
	"showBlipsOnAllLevels": {
		"body": "showBlipsOnAllLevels(bool enable)",
		"description": "GTA SA  09A6",
		"prefix": "showBlipsOnAllLevels",
		"scope": "source.lua"
	},
	"setCharDruggedUp": {
		"body": "setCharDruggedUp(Ped ped, bool druggedUp)",
		"description": "GTA SA  09A7",
		"prefix": "setCharDruggedUp",
		"scope": "source.lua"
	},
	"isCharHeadMissing": {
		"body": "bool result = isCharHeadMissing(Ped ped)",
		"description": "GTA SA  09A8",
		"prefix": "isCharHeadMissing",
		"scope": "source.lua"
	},
	"getHashKey": {
		"body": "int CRC32 = getHashKey(string string)",
		"description": "GTA SA  09A9",
		"prefix": "getHashKey",
		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithSpeech": {
		"body": "setUpConversationEndNodeWithSpeech(GxtString gxtString, int speech)",
		"description": "GTA SA  09AA",
		"prefix": "setUpConversationEndNodeWithSpeech",
		"scope": "source.lua"
	},
	"randomPassengerSay": {
		"body": "randomPassengerSay(int passengers, int audioTable)",
		"description": "GTA SA  09AB",
		"prefix": "randomPassengerSay",
		"scope": "source.lua"
	},
	"hideAllFrontendBlips": {
		"body": "hideAllFrontendBlips(bool hide)",
		"description": "GTA SA  09AC",
		"prefix": "hideAllFrontendBlips",
		"scope": "source.lua"
	},
	"setPlayerInCarCameraMode": {
		"body": "setPlayerInCarCameraMode(int mode)",
		"description": "GTA SA  09AD",
		"prefix": "setPlayerInCarCameraMode",
		"scope": "source.lua"
	},
	"isCharInAnyTrain": {
		"body": "bool result = isCharInAnyTrain(Ped ped)",
		"description": "GTA SA  09AE",
		"prefix": "isCharInAnyTrain",
		"scope": "source.lua"
	},
	"setUpSkipAfterMission": {
		"body": "setUpSkipAfterMission(float posX, float posY, float posZ, float angle)",
		"description": "GTA SA  09AF",
		"prefix": "setUpSkipAfterMission",
		"scope": "source.lua"
	},
	"setVehicleIsConsideredByPlayer": {
		"body": "setVehicleIsConsideredByPlayer(Vehicle car, bool accessible)",
		"description": "GTA SA  09B0",
		"prefix": "setVehicleIsConsideredByPlayer",
		"scope": "source.lua"
	},
	"getRandomCarModelInMemory": {
		"body": "Model modelId, int class = getRandomCarModelInMemory(bool unk)",
		"description": "GTA SA  09B2",
		"prefix": "getRandomCarModelInMemory",
		"scope": "source.lua"
	},
	"getCarDoorLockStatus": {
		"body": "int doorStatus = getCarDoorLockStatus(Vehicle car)",
		"description": "GTA SA  09B3",
		"prefix": "getCarDoorLockStatus",
		"scope": "source.lua"
	},
	"setClosestEntryExitFlag": {
		"body": "setClosestEntryExitFlag(float atX, float atY, float radius, int bitmask, bool flag)",
		"description": "GTA SA  09B4",
		"prefix": "setClosestEntryExitFlag",
		"scope": "source.lua"
	},
	"setCharSignalAfterKill": {
		"body": "setCharSignalAfterKill(Ped ped, bool signal)",
		"description": "GTA SA  09B5",
		"prefix": "setCharSignalAfterKill",
		"scope": "source.lua"
	},
	"setCharWantedByPolice": {
		"body": "setCharWantedByPolice(Ped ped, bool wanted)",
		"description": "GTA SA  09B6",
		"prefix": "setCharWantedByPolice",
		"scope": "source.lua"
	},
	"setZoneNoCops": {
		"body": "setZoneNoCops(GxtString zone, bool disableCops)",
		"description": "GTA SA  09B7",
		"prefix": "setZoneNoCops",
		"scope": "source.lua"
	},
	"addBlood": {
		"body": "addBlood(float atX, float atY, float atZ, float offsetX, float offsetY, float offsetZ, int density, int onActor)",
		"description": "GTA SA  09B8",
		"prefix": "addBlood",
		"scope": "source.lua"
	},
	"displayCarNames": {
		"body": "displayCarNames(bool show)",
		"description": "GTA SA  09B9",
		"prefix": "displayCarNames",
		"scope": "source.lua"
	},
	"displayZoneNames": {
		"body": "displayZoneNames(bool show)",
		"description": "GTA SA  09BA",
		"prefix": "displayZoneNames",
		"scope": "source.lua"
	},
	"isCarDoorDamaged": {
		"body": "bool result = isCarDoorDamaged(Vehicle car, int door)",
		"description": "GTA SA  09BB",
		"prefix": "isCarDoorDamaged",
		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGangNoOffset": {
		"body": "setCharCoordinatesDontWarpGangNoOffset(Ped ped, float atX, float atY, float atZ)",
		"description": "GTA SA  09BC",
		"prefix": "setCharCoordinatesDontWarpGangNoOffset",
		"scope": "source.lua"
	},
	"setMinigameInProgress": {
		"body": "setMinigameInProgress(bool enable)",
		"description": "GTA SA  09BD",
		"prefix": "setMinigameInProgress",
		"scope": "source.lua"
	},
	"isMinigameInProgress": {
		"body": "bool result = isMinigameInProgress()",
		"description": "GTA SA  09BE",
		"prefix": "isMinigameInProgress",
		"scope": "source.lua"
	},
	"setForceRandomCarModel": {
		"body": "setForceRandomCarModel(Model modelId)",
		"description": "GTA SA  09BF",
		"prefix": "setForceRandomCarModel",
		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAngledAreaNoSave": {
		"body": "Vehicle car = getRandomCarOfTypeInAngledAreaNoSave(float x1, float y1, float x2, float y2, float angle, int int6)",
		"description": "GTA SA  09C0",
		"prefix": "getRandomCarOfTypeInAngledAreaNoSave",
		"scope": "source.lua"
	},
	"addNextMessageToPreviousBriefs": {
		"body": "addNextMessageToPreviousBriefs(bool int1)",
		"description": "GTA SA  09C1",
		"prefix": "addNextMessageToPreviousBriefs",
		"scope": "source.lua"
	},
	"failKillFrenzy": {
		"body": "failKillFrenzy()",
		"description": "GTA SA  09C2",
		"prefix": "failKillFrenzy",
		"scope": "source.lua"
	},
	"isCopVehicleInArea3dNoSave": {
		"body": "bool result = isCopVehicleInArea3dNoSave(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)",
		"description": "GTA SA  09C3",
		"prefix": "isCopVehicleInArea3dNoSave",
		"scope": "source.lua"
	},
	"setPetrolTankWeakpoint": {
		"body": "setPetrolTankWeakpoint(Vehicle car, bool enabled)",
		"description": "GTA SA  09C4",
		"prefix": "setPetrolTankWeakpoint",
		"scope": "source.lua"
	},
	"isCharUsingMapAttractor": {
		"body": "bool result = isCharUsingMapAttractor(Ped ped)",
		"description": "GTA SA  09C5",
		"prefix": "isCharUsingMapAttractor",
		"scope": "source.lua"
	},
	"setPlayerModel": {
		"body": "setPlayerModel(Player player, Model modelId)",
		"description": "GTA SA  09C7",
		"prefix": "setPlayerModel",
		"scope": "source.lua"
	},
	"areSubtitlesSwitchedOn": {
		"body": "bool result = areSubtitlesSwitchedOn()",
		"description": "GTA SA  09C8",
		"prefix": "areSubtitlesSwitchedOn",
		"scope": "source.lua"
	},
	"removeCharFromCarMaintainPosition": {
		"body": "removeCharFromCarMaintainPosition(Ped ped, Vehicle car)",
		"description": "GTA SA  09C9",
		"prefix": "removeCharFromCarMaintainPosition",
		"scope": "source.lua"
	},
	"setObjectProofs": {
		"body": "setObjectProofs(Object object, bool BP, bool FP, bool EP, bool CP, bool MP)",
		"description": "GTA SA  09CA",
		"prefix": "setObjectProofs",
		"scope": "source.lua"
	},
	"isCarTouchingCar": {
		"body": "bool result = isCarTouchingCar(Vehicle car1, Vehicle car2)",
		"description": "GTA SA  09CB",
		"prefix": "isCarTouchingCar",
		"scope": "source.lua"
	},
	"doesObjectHaveThisModel": {
		"body": "bool result = doesObjectHaveThisModel(Object object, Model modelId)",
		"description": "GTA SA  09CC",
		"prefix": "doesObjectHaveThisModel",
		"scope": "source.lua"
	},
	"setTrainForcedToSlowDown": {
		"body": "setTrainForcedToSlowDown(Vehicle train, bool forced)",
		"description": "GTA SA  09CF",
		"prefix": "setTrainForcedToSlowDown",
		"scope": "source.lua"
	},
	"isVehicleOnAllWheels": {
		"body": "bool result = isVehicleOnAllWheels(Vehicle car)",
		"description": "GTA SA  09D0",
		"prefix": "isVehicleOnAllWheels",
		"scope": "source.lua"
	},
	"doesPickupExist": {
		"body": "bool result = doesPickupExist(Pickup pickup)",
		"description": "GTA SA  09D1",
		"prefix": "doesPickupExist",
		"scope": "source.lua"
	},
	"enableAmbientCrime": {
		"body": "enableAmbientCrime(bool enable)",
		"description": "GTA SA  09D2",
		"prefix": "enableAmbientCrime",
		"scope": "source.lua"
	},
	"clearWantedLevelInGarage": {
		"body": "clearWantedLevelInGarage()",
		"description": "GTA SA  09D4",
		"prefix": "clearWantedLevelInGarage",
		"scope": "source.lua"
	},
	"setCharSayContextImportant": {
		"body": "int unk = setCharSayContextImportant(Ped ped, int soundslot, bool flags1, bool flags2, bool flags3)",
		"description": "GTA SA  09D5",
		"prefix": "setCharSayContextImportant",
		"scope": "source.lua"
	},
	"setCharSayScript": {
		"body": "setCharSayScript(Ped ped, int sound, bool flags1, bool flags2, bool flags3)",
		"description": "GTA SA  09D6",
		"prefix": "setCharSayScript",
		"scope": "source.lua"
	},
	"forceInteriorLightingForPlayer": {
		"body": "forceInteriorLightingForPlayer(Player player, bool force)",
		"description": "GTA SA  09D7",
		"prefix": "forceInteriorLightingForPlayer",
		"scope": "source.lua"
	},
	"useDetonator": {
		"body": "useDetonator()",
		"description": "GTA SA  09D9",
		"prefix": "useDetonator",
		"scope": "source.lua"
	},
	"isMoneyPickupAtCoords": {
		"body": "bool result = isMoneyPickupAtCoords(float atX, float atY, float atZ)",
		"description": "GTA SA  09DA",
		"prefix": "isMoneyPickupAtCoords",
		"scope": "source.lua"
	},
	"setMenuColumnWidth": {
		"body": "setMenuColumnWidth(int panel, int column, int width)",
		"description": "GTA SA  09DB",
		"prefix": "setMenuColumnWidth",
		"scope": "source.lua"
	},
	"makeRoomInPlayerGangForMissionPeds": {
		"body": "makeRoomInPlayerGangForMissionPeds(int group)",
		"description": "GTA SA  09DD",
		"prefix": "makeRoomInPlayerGangForMissionPeds",
		"scope": "source.lua"
	},
	"isCharGettingInToACar": {
		"body": "bool result = isCharGettingInToACar(Ped ped)",
		"description": "GTA SA  09DE",
		"prefix": "isCharGettingInToACar",
		"scope": "source.lua"
	},
	"setUpSkipForSpecificVehicle": {
		"body": "setUpSkipForSpecificVehicle(float posX, float posY, float posZ, float angle, Vehicle car)",
		"description": "GTA SA  09E0",
		"prefix": "setUpSkipForSpecificVehicle",
		"scope": "source.lua"
	},
	"getCarModelValue": {
		"body": "int price = getCarModelValue(Model modelId)",
		"description": "GTA SA  09E1",
		"prefix": "getCarModelValue",
		"scope": "source.lua"
	},
	"createCarGeneratorWithPlate": {
		"body": "int generator = createCarGeneratorWithPlate(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay, string plate)",
		"description": "GTA SA  09E2",
		"prefix": "createCarGeneratorWithPlate",
		"scope": "source.lua"
	},
	"findTrainDirection": {
		"body": "bool result = findTrainDirection(Vehicle train)",
		"description": "GTA SA  09E3",
		"prefix": "findTrainDirection",
		"scope": "source.lua"
	},
	"setAircraftCarrierSamSite": {
		"body": "setAircraftCarrierSamSite(bool enable)",
		"description": "GTA SA  09E4",
		"prefix": "setAircraftCarrierSamSite",
		"scope": "source.lua"
	},
	"drawLightWithRange": {
		"body": "drawLightWithRange(float atX, float atY, float atZ, int r, int g, int b, float radius)",
		"description": "GTA SA  09E5",
		"prefix": "drawLightWithRange",
		"scope": "source.lua"
	},
	"enableBurglaryHouses": {
		"body": "enableBurglaryHouses(bool enable)",
		"description": "GTA SA  09E6",
		"prefix": "enableBurglaryHouses",
		"scope": "source.lua"
	},
	"isPlayerControlOn": {
		"body": "bool result = isPlayerControlOn(Player player)",
		"description": "GTA SA  09E7",
		"prefix": "isPlayerControlOn",
		"scope": "source.lua"
	},
	"getCharActiveInterior": {
		"body": "int interior = getCharActiveInterior(Ped ped)",
		"description": "GTA SA  09E8",
		"prefix": "getCharActiveInterior",
		"scope": "source.lua"
	},
	"giveNonPlayerCarNitro": {
		"body": "giveNonPlayerCarNitro(Vehicle car)",
		"description": "GTA SA  09E9",
		"prefix": "giveNonPlayerCarNitro",
		"scope": "source.lua"
	},
	"playerTakeOffGoggles": {
		"body": "playerTakeOffGoggles(Player player, bool useAnim)",
		"description": "GTA SA  09EB",
		"prefix": "playerTakeOffGoggles",
		"scope": "source.lua"
	},
	"allowFixedCameraCollision": {
		"body": "allowFixedCameraCollision(bool allow)",
		"description": "GTA SA  09EC",
		"prefix": "allowFixedCameraCollision",
		"scope": "source.lua"
	},
	"hasCharSpottedCharInFront": {
		"body": "bool result = hasCharSpottedCharInFront(Ped ped, Ped ped2)",
		"description": "GTA SA  09ED",
		"prefix": "hasCharSpottedCharInFront",
		"scope": "source.lua"
	},
	"forceBigMessageAndCounter": {
		"body": "forceBigMessageAndCounter(bool stayOnScreen)",
		"description": "GTA SA  09EE",
		"prefix": "forceBigMessageAndCounter",
		"scope": "source.lua"
	},
	"setVehicleCameraTweak": {
		"body": "setVehicleCameraTweak(Model carModel, float distance, float altitudeMultiplier, float angleX)",
		"description": "GTA SA  09EF",
		"prefix": "setVehicleCameraTweak",
		"scope": "source.lua"
	},
	"resetVehicleCameraTweak": {
		"body": "resetVehicleCameraTweak()",
		"description": "GTA SA  09F0",
		"prefix": "resetVehicleCameraTweak",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtChar": {
		"body": "reportMissionAudioEventAtChar(Ped ped, int event)",
		"description": "GTA SA  09F1",
		"prefix": "reportMissionAudioEventAtChar",
		"scope": "source.lua"
	},
	"doesDecisionMakerExist": {
		"body": "bool result = doesDecisionMakerExist(int maker)",
		"description": "GTA SA  09F2",
		"prefix": "doesDecisionMakerExist",
		"scope": "source.lua"
	},
	"ignoreHeightDifferenceFollowingNodes": {
		"body": "ignoreHeightDifferenceFollowingNodes(Ped ped, bool ignore)",
		"description": "GTA SA  09F4",
		"prefix": "ignoreHeightDifferenceFollowingNodes",
		"scope": "source.lua"
	},
	"shutAllCharsUp": {
		"body": "shutAllCharsUp(bool enable)",
		"description": "GTA SA  09F5",
		"prefix": "shutAllCharsUp",
		"scope": "source.lua"
	},
	"setCharGetOutUpsideDownCar": {
		"body": "setCharGetOutUpsideDownCar(Ped ped, bool canGetOut)",
		"description": "GTA SA  09F6",
		"prefix": "setCharGetOutUpsideDownCar",
		"scope": "source.lua"
	},
	"reportMissionAudioEventAtCar": {
		"body": "reportMissionAudioEventAtCar(Vehicle car, int event)",
		"description": "GTA SA  09F7",
		"prefix": "reportMissionAudioEventAtCar",
		"scope": "source.lua"
	},
	"doWeaponStuffAtStartOf2pGame": {
		"body": "doWeaponStuffAtStartOf2pGame()",
		"description": "GTA SA  09F8",
		"prefix": "doWeaponStuffAtStartOf2pGame",
		"scope": "source.lua"
	},
	"hasGameJustReturnedFromFrontend": {
		"body": "bool result = hasGameJustReturnedFromFrontend()",
		"description": "GTA SA  09FA",
		"prefix": "hasGameJustReturnedFromFrontend",
		"scope": "source.lua"
	},
	"getCurrentLanguage": {
		"body": "int language = getCurrentLanguage()",
		"description": "GTA SA  09FB",
		"prefix": "getCurrentLanguage",
		"scope": "source.lua"
	},
	"isObjectIntersectingWorld": {
		"body": "bool result = isObjectIntersectingWorld(Object object)",
		"description": "GTA SA  09FC",
		"prefix": "isObjectIntersectingWorld",
		"scope": "source.lua"
	},
	"getStringWidth": {
		"body": "int width = getStringWidth(GxtString gxtString)",
		"description": "GTA SA  09FD",
		"prefix": "getStringWidth",
		"scope": "source.lua"
	},
	"resetVehicleHydraulics": {
		"body": "resetVehicleHydraulics(Vehicle car)",
		"description": "GTA SA  09FE",
		"prefix": "resetVehicleHydraulics",
		"scope": "source.lua"
	},
	"setRespawnPointForDurationOfMission": {
		"body": "setRespawnPointForDurationOfMission(float posX, float posY, float posZ)",
		"description": "GTA SA  09FF",
		"prefix": "setRespawnPointForDurationOfMission",
		"scope": "source.lua"
	},
	"isThisModelACar": {
		"body": "bool result = isThisModelACar(Model modelId)",
		"description": "GTA SA  0A01",
		"prefix": "isThisModelACar",
		"scope": "source.lua"
	},
	"switchOnGroundSearchlight": {
		"body": "switchOnGroundSearchlight(Searchlight searchlight, bool lightsThroughObstacles)",
		"description": "GTA SA  0A02",
		"prefix": "switchOnGroundSearchlight",
		"scope": "source.lua"
	},
	"isGangWarFightingGoingOn": {
		"body": "bool result = isGangWarFightingGoingOn()",
		"description": "GTA SA  0A03",
		"prefix": "isGangWarFightingGoingOn",
		"scope": "source.lua"
	},
	"isNextStationAllowed": {
		"body": "bool result = isNextStationAllowed(Vehicle train)",
		"description": "GTA SA  0A06",
		"prefix": "isNextStationAllowed",
		"scope": "source.lua"
	},
	"skipToNextAllowedStation": {
		"body": "skipToNextAllowedStation(Vehicle train)",
		"description": "GTA SA  0A07",
		"prefix": "skipToNextAllowedStation",
		"scope": "source.lua"
	},
	"getStringWidthWithNumber": {
		"body": "int width = getStringWidthWithNumber(GxtString gxtString, int number)",
		"description": "GTA SA  0A08",
		"prefix": "getStringWidthWithNumber",
		"scope": "source.lua"
	},
	"shutCharUpForScriptedSpeech": {
		"body": "shutCharUpForScriptedSpeech(Ped ped, bool muted)",
		"description": "GTA SA  0A09",
		"prefix": "shutCharUpForScriptedSpeech",
		"scope": "source.lua"
	},
	"enableDisabledAttractorsOnObject": {
		"body": "enableDisabledAttractorsOnObject(Object object, bool enable)",
		"description": "GTA SA  0A0A",
		"prefix": "enableDisabledAttractorsOnObject",
		"scope": "source.lua"
	},
	"loadSceneInDirection": {
		"body": "loadSceneInDirection(float coordX, float coordY, float coordZ, float angle)",
		"description": "GTA SA  0A0B",
		"prefix": "loadSceneInDirection",
		"scope": "source.lua"
	},
	"isPlayerUsingJetpack": {
		"body": "bool result = isPlayerUsingJetpack(Player player)",
		"description": "GTA SA  0A0C",
		"prefix": "isPlayerUsingJetpack",
		"scope": "source.lua"
	},
	"clearThisPrintBigNow": {
		"body": "clearThisPrintBigNow(int style)",
		"description": "GTA SA  0A0E",
		"prefix": "clearThisPrintBigNow",
		"scope": "source.lua"
	},
	"hasLanguageChanged": {
		"body": "bool result = hasLanguageChanged()",
		"description": "GTA SA  0A0F",
		"prefix": "hasLanguageChanged",
		"scope": "source.lua"
	},
	"incrementIntStatNoMessage": {
		"body": "incrementIntStatNoMessage(int stat, int value)",
		"description": "GTA SA  0A10",
		"prefix": "incrementIntStatNoMessage",
		"scope": "source.lua"
	},
	"setExtraCarColours": {
		"body": "setExtraCarColours(Vehicle car, int tertiaryColor, int quaternaryColor)",
		"description": "GTA SA  0A11",
		"prefix": "setExtraCarColours",
		"scope": "source.lua"
	},
	"getExtraCarColours": {
		"body": "int tertiaryColor, int quaternaryColor = getExtraCarColours(Vehicle car)",
		"description": "GTA SA  0A12",
		"prefix": "getExtraCarColours",
		"scope": "source.lua"
	},
	"manageAllPopulation": {
		"body": "manageAllPopulation()",
		"description": "GTA SA  0A13",
		"prefix": "manageAllPopulation",
		"scope": "source.lua"
	},
	"setNoResprays": {
		"body": "setNoResprays(bool enable)",
		"description": "GTA SA  0A14",
		"prefix": "setNoResprays",
		"scope": "source.lua"
	},
	"hasCarBeenResprayed": {
		"body": "bool result = hasCarBeenResprayed(Vehicle car)",
		"description": "GTA SA  0A15",
		"prefix": "hasCarBeenResprayed",
		"scope": "source.lua"
	},
	"attachMissionAudioToCar": {
		"body": "attachMissionAudioToCar(int audioId, Vehicle car)",
		"description": "GTA SA  0A16",
		"prefix": "attachMissionAudioToCar",
		"scope": "source.lua"
	},
	"setHasBeenOwnedForCarGenerator": {
		"body": "setHasBeenOwnedForCarGenerator(int generator, bool owned)",
		"description": "GTA SA  0A17",
		"prefix": "setHasBeenOwnedForCarGenerator",
		"scope": "source.lua"
	},
	"setUpConversationNodeWithScriptedSpeech": {
		"body": "setUpConversationNodeWithScriptedSpeech(GxtString questionGXT, GxtString answerYesGXT, GxtString answerNoGXT, int questionWAV, int answerYesWAV, int answerNoWAV)",
		"description": "GTA SA  0A18",
		"prefix": "setUpConversationNodeWithScriptedSpeech",
		"scope": "source.lua"
	},
	"setAreaName": {
		"body": "setAreaName(GxtString gxtString)",
		"description": "GTA SA  0A19",
		"prefix": "setAreaName",
		"scope": "source.lua"
	},
	"taskPlayAnimSecondary": {
		"body": "taskPlayAnimSecondary(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)",
		"description": "GTA SA  0A1A",
		"prefix": "taskPlayAnimSecondary",
		"scope": "source.lua"
	},
	"isCharTouchingChar": {
		"body": "bool result = isCharTouchingChar(Ped ped, Ped ped2)",
		"description": "GTA SA  0A1B",
		"prefix": "isCharTouchingChar",
		"scope": "source.lua"
	},
	"disableHeliAudio": {
		"body": "disableHeliAudio(Vehicle helicopter, bool disable)",
		"description": "GTA SA  0A1C",
		"prefix": "disableHeliAudio",
		"scope": "source.lua"
	},
	"taskHandGesture": {
		"body": "taskHandGesture(Ped ped, Ped ped2)",
		"description": "GTA SA  0A1D",
		"prefix": "taskHandGesture",
		"scope": "source.lua"
	},
	"takePhoto": {
		"body": "takePhoto(bool unk)",
		"description": "GTA SA  0A1E",
		"prefix": "takePhoto",
		"scope": "source.lua"
	},
	"incrementFloatStatNoMessage": {
		"body": "incrementFloatStatNoMessage(int stat, float value)",
		"description": "GTA SA  0A1F",
		"prefix": "incrementFloatStatNoMessage",
		"scope": "source.lua"
	},
	"setPlayerGroupToFollowAlways": {
		"body": "setPlayerGroupToFollowAlways(Player player, bool followAlways)",
		"description": "GTA SA  0A20",
		"prefix": "setPlayerGroupToFollowAlways",
		"scope": "source.lua"
	},
	"improveCarByCheating": {
		"body": "improveCarByCheating(Vehicle car, bool affectedByCheats)",
		"description": "GTA SA  0A21",
		"prefix": "improveCarByCheating",
		"scope": "source.lua"
	},
	"changeCarColourFromMenu": {
		"body": "changeCarColourFromMenu(int panelID, Vehicle car, int colorslot, int activeRow)",
		"description": "GTA SA  0A22",
		"prefix": "changeCarColourFromMenu",
		"scope": "source.lua"
	},
	"highlightMenuItem": {
		"body": "highlightMenuItem(int panel, int row, bool highlight)",
		"description": "GTA SA  0A23",
		"prefix": "highlightMenuItem",
		"scope": "source.lua"
	},
	"setDisableMilitaryZones": {
		"body": "setDisableMilitaryZones(bool disable)",
		"description": "GTA SA  0A24",
		"prefix": "setDisableMilitaryZones",
		"scope": "source.lua"
	},
	"setCameraPositionUnfixed": {
		"body": "setCameraPositionUnfixed(float xAngle, float zAngle)",
		"description": "GTA SA  0A25",
		"prefix": "setCameraPositionUnfixed",
		"scope": "source.lua"
	},
	"setRadioToPlayersFavouriteStation": {
		"body": "setRadioToPlayersFavouriteStation()",
		"description": "GTA SA  0A26",
		"prefix": "setRadioToPlayersFavouriteStation",
		"scope": "source.lua"
	},
	"setDeathWeaponsPersist": {
		"body": "setDeathWeaponsPersist(Ped ped, bool persist)",
		"description": "GTA SA  0A27",
		"prefix": "setDeathWeaponsPersist",
		"scope": "source.lua"
	},
	"setCharSwimSpeed": {
		"body": "setCharSwimSpeed(Ped ped, float speed)",
		"description": "GTA SA  0A28",
		"prefix": "setCharSwimSpeed",
		"scope": "source.lua"
	},
	"isPlayerClimbing": {
		"body": "bool result = isPlayerClimbing(Player player)",
		"description": "GTA SA  0A29",
		"prefix": "isPlayerClimbing",
		"scope": "source.lua"
	},
	"isThisHelpMessageBeingDisplayed": {
		"body": "bool result = isThisHelpMessageBeingDisplayed(GxtString gxtString)",
		"description": "GTA SA  0A2A",
		"prefix": "isThisHelpMessageBeingDisplayed",
		"scope": "source.lua"
	},
	"isWidescreenOnInOptions": {
		"body": "bool result = isWidescreenOnInOptions()",
		"description": "GTA SA  0A2B",
		"prefix": "isWidescreenOnInOptions",
		"scope": "source.lua"
	},
	"drawSubtitlesBeforeFade": {
		"body": "drawSubtitlesBeforeFade(bool flag)",
		"description": "GTA SA  0A2C",
		"prefix": "drawSubtitlesBeforeFade",
		"scope": "source.lua"
	},
	"drawOddjobTitleBeforeFade": {
		"body": "drawOddjobTitleBeforeFade(bool flag)",
		"description": "GTA SA  0A2D",
		"prefix": "drawOddjobTitleBeforeFade",
		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoordWithRadius": {
		"body": "taskFollowPathNodesToCoordWithRadius(Ped ped, float toX, float toY, float toZ, int mode, int time, float stopRadius)",
		"description": "GTA SA  0A2E",
		"prefix": "taskFollowPathNodesToCoordWithRadius",
		"scope": "source.lua"
	},
	"setPhotoCameraEffect": {
		"body": "setPhotoCameraEffect(bool firstPersonView)",
		"description": "GTA SA  0A2F",
		"prefix": "setPhotoCameraEffect",
		"scope": "source.lua"
	},
	"fixCar": {
		"body": "fixCar(Vehicle car)",
		"description": "GTA SA  0A30",
		"prefix": "fixCar",
		"scope": "source.lua"
	},
	"setPlayerGroupToFollowNever": {
		"body": "setPlayerGroupToFollowNever(Player player, bool neverFollow)",
		"description": "GTA SA  0A31",
		"prefix": "setPlayerGroupToFollowNever",
		"scope": "source.lua"
	},
	"isCharAttachedToAnyCar": {
		"body": "bool result = isCharAttachedToAnyCar(Ped ped)",
		"description": "GTA SA  0A32",
		"prefix": "isCharAttachedToAnyCar",
		"scope": "source.lua"
	},
	"storeCarCharIsAttachedToNoSave": {
		"body": "Ped ped = storeCarCharIsAttachedToNoSave(Vehicle car)",
		"description": "GTA SA  0A33",
		"prefix": "storeCarCharIsAttachedToNoSave",
		"scope": "source.lua"
	},
	"setUpSkipForVehicleFinishedByScript": {
		"body": "setUpSkipForVehicleFinishedByScript(float posX, float posY, float posZ, float angle, Vehicle car)",
		"description": "GTA SA  0A35",
		"prefix": "setUpSkipForVehicleFinishedByScript",
		"scope": "source.lua"
	},
	"isSkipWaitingForScriptToFadeIn": {
		"body": "bool result = isSkipWaitingForScriptToFadeIn()",
		"description": "GTA SA  0A36",
		"prefix": "isSkipWaitingForScriptToFadeIn",
		"scope": "source.lua"
	},
	"forceAllVehicleLightsOff": {
		"body": "forceAllVehicleLightsOff(bool off)",
		"description": "GTA SA  0A37",
		"prefix": "forceAllVehicleLightsOff",
		"scope": "source.lua"
	},
	"getPlayerInCarCameraMode": {
		"body": "int mode = getPlayerInCarCameraMode()",
		"description": "GTA SA  0A39",
		"prefix": "getPlayerInCarCameraMode",
		"scope": "source.lua"
	},
	"isLastBuildingModelShotByPlayer": {
		"body": "bool result = isLastBuildingModelShotByPlayer(Player player, Model modelId)",
		"description": "GTA SA  0A3A",
		"prefix": "isLastBuildingModelShotByPlayer",
		"scope": "source.lua"
	},
	"clearLastBuildingModelShotByPlayer": {
		"body": "clearLastBuildingModelShotByPlayer(Player player)",
		"description": "GTA SA  0A3B",
		"prefix": "clearLastBuildingModelShotByPlayer",
		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithScriptedSpeech": {
		"body": "setUpConversationEndNodeWithScriptedSpeech(GxtString dialogueGxt, int wav)",
		"description": "GTA SA  0A3C",
		"prefix": "setUpConversationEndNodeWithScriptedSpeech",
		"scope": "source.lua"
	},
	"activatePimpCheat": {
		"body": "activatePimpCheat(bool enable)",
		"description": "GTA SA  0A3D",
		"prefix": "activatePimpCheat",
		"scope": "source.lua"
	},
	"getRandomCharInAreaOffsetNoSave": {
		"body": "Ped ped = getRandomCharInAreaOffsetNoSave(float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ)",
		"description": "GTA SA  0A3E",
		"prefix": "getRandomCharInAreaOffsetNoSave",
		"scope": "source.lua"
	},
	"setScriptCoopGame": {
		"body": "setScriptCoopGame(bool enable)",
		"description": "GTA SA  0A3F",
		"prefix": "setScriptCoopGame",
		"scope": "source.lua"
	},
	"createUser3dMarker": {
		"body": "Marker marker = createUser3dMarker(float atX, float atY, float atZ, int color)",
		"description": "GTA SA  0A40",
		"prefix": "createUser3dMarker",
		"scope": "source.lua"
	},
	"removeUser3dMarker": {
		"body": "removeUser3dMarker(Marker marker)",
		"description": "GTA SA  0A41",
		"prefix": "removeUser3dMarker",
		"scope": "source.lua"
	},
	"getRidOfPlayerProstitute": {
		"body": "getRidOfPlayerProstitute()",
		"description": "GTA SA  0A43",
		"prefix": "getRidOfPlayerProstitute",
		"scope": "source.lua"
	},
	"displayNonMinigameHelpMessages": {
		"body": "displayNonMinigameHelpMessages(bool display)",
		"description": "GTA SA  0A44",
		"prefix": "displayNonMinigameHelpMessages",
		"scope": "source.lua"
	},
	"setRailtrackResistanceMult": {
		"body": "setRailtrackResistanceMult(float tracksFriction)",
		"description": "GTA SA  0A45",
		"prefix": "setRailtrackResistanceMult",
		"scope": "source.lua"
	},
	"switchObjectBrains": {
		"body": "switchObjectBrains(int externalScript, bool canBeStreamedIn)",
		"description": "GTA SA  0A46",
		"prefix": "switchObjectBrains",
		"scope": "source.lua"
	},
	"finishSettingUpConversationNoSubtitles": {
		"body": "finishSettingUpConversationNoSubtitles()",
		"description": "GTA SA  0A47",
		"prefix": "finishSettingUpConversationNoSubtitles",
		"scope": "source.lua"
	},
	"allowPauseInWidescreen": {
		"body": "allowPauseInWidescreen(bool enable)",
		"description": "GTA SA  0A48",
		"prefix": "allowPauseInWidescreen",
		"scope": "source.lua"
	},
	"getPcMouseMovement": {
		"body": "float x, float y = getPcMouseMovement()",
		"description": "GTA SA  0A4A",
		"prefix": "getPcMouseMovement",
		"scope": "source.lua"
	},
	"isPcUsingJoypad": {
		"body": "bool result = isPcUsingJoypad()",
		"description": "GTA SA  0A4B",
		"prefix": "isPcUsingJoypad",
		"scope": "source.lua"
	},
	"isMouseUsingVerticalInversion": {
		"body": "bool result = isMouseUsingVerticalInversion()",
		"description": "GTA SA  0A4C",
		"prefix": "isMouseUsingVerticalInversion",
		"scope": "source.lua"
	},
	"startNewCustomScript": {
		"body": "bool result = startNewCustomScript(zstring filepath, table args)",
		"description": "GTA SA  0A92",
		"prefix": "startNewCustomScript",
		"scope": "source.lua"
	},
	"launchCustomMission": {
		"body": "launchCustomMission(zstring filepath, table args)",
		"description": "GTA SA  0A94",
		"prefix": "launchCustomMission",
		"scope": "source.lua"
	},
	"getScmThreadStructNamed": {
		"body": "int handle = getScmThreadStructNamed(GxtString thread)",
		"description": "GTA SA  0AAA",
		"prefix": "getScmThreadStructNamed",
		"scope": "source.lua"
	},
	"loadAudioStream": {
		"body": "bool result, int handle = loadAudioStream(zstring audio)",
		"description": "GTA SA  0AAC",
		"prefix": "loadAudioStream",
		"scope": "source.lua"
	},
	"setAudioStreamState": {
		"body": "setAudioStreamState(int handle, int state)",
		"description": "GTA SA  0AAD",
		"prefix": "setAudioStreamState",
		"scope": "source.lua"
	},
	"releaseAudioStream": {
		"body": "releaseAudioStream(int handle)",
		"description": "GTA SA  0AAE",
		"prefix": "releaseAudioStream",
		"scope": "source.lua"
	},
	"getAudioStreamLength": {
		"body": "int length = getAudioStreamLength(int handle)",
		"description": "GTA SA  0AAF",
		"prefix": "getAudioStreamLength",
		"scope": "source.lua"
	},
	"setCleoSharedVar": {
		"body": "setCleoSharedVar(int var, int value)",
		"description": "GTA SA  0AB3",
		"prefix": "setCleoSharedVar",
		"scope": "source.lua"
	},
	"getCleoSharedVar": {
		"body": "int value = getCleoSharedVar(int var)",
		"description": "GTA SA  0AB4",
		"prefix": "getCleoSharedVar",
		"scope": "source.lua"
	},
	"getAudioStreamState": {
		"body": "int state = getAudioStreamState(int handle)",
		"description": "GTA SA  0AB9",
		"prefix": "getAudioStreamState",
		"scope": "source.lua"
	},
	"getAudioStreamVolume": {
		"body": "float volume = getAudioStreamVolume(int audio)",
		"description": "GTA SA  0ABB",
		"prefix": "getAudioStreamVolume",
		"scope": "source.lua"
	},
	"setAudioStreamVolume": {
		"body": "setAudioStreamVolume(int audio, float volume)",
		"description": "GTA SA  0ABC",
		"prefix": "setAudioStreamVolume",
		"scope": "source.lua"
	},
	"setAudioStreamLooped": {
		"body": "setAudioStreamLooped(int audio, bool loop)",
		"description": "GTA SA  0AC0",
		"prefix": "setAudioStreamLooped",
		"scope": "source.lua"
	},
	"load3dAudioStream": {
		"body": "int handle = load3dAudioStream(zstring audio)",
		"description": "GTA SA  0AC1",
		"prefix": "load3dAudioStream",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCoordinates": {
		"body": "setPlay3dAudioStreamAtCoordinates(int handle, float posX, float posY, float posZ)",
		"description": "GTA SA  0AC2",
		"prefix": "setPlay3dAudioStreamAtCoordinates",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtObject": {
		"body": "setPlay3dAudioStreamAtObject(int audio, Object object)",
		"description": "GTA SA  0AC3",
		"prefix": "setPlay3dAudioStreamAtObject",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtChar": {
		"body": "setPlay3dAudioStreamAtChar(int audio, Ped ped)",
		"description": "GTA SA  0AC4",
		"prefix": "setPlay3dAudioStreamAtChar",
		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCar": {
		"body": "setPlay3dAudioStreamAtCar(int audio, Vehicle car)",
		"description": "GTA SA  0AC5",
		"prefix": "setPlay3dAudioStreamAtCar",
		"scope": "source.lua"
	},
	"sampSpawnPlayer": {
		"body": "sampSpawnPlayer()",
		"description": "GTA SA  0AF6",
		"prefix": "sampSpawnPlayer",
		"scope": "source.lua"
	},
	"sampGetBase": {
		"body": "int handle = sampGetBase()",
		"description": "GTA SA  0AF7",
		"prefix": "sampGetBase",
		"scope": "source.lua"
	},
	"sampAddChatMessage": {
		"body": "sampAddChatMessage(zstring text, int color)",
		"description": "GTA SA  0AF8",
		"prefix": "sampAddChatMessage",
		"scope": "source.lua"
	},
	"sampSendChat": {
		"body": "sampSendChat(zstring text)",
		"description": "GTA SA  0AF9",
		"prefix": "sampSendChat",
		"scope": "source.lua"
	},
	"isSampAvailable": {
		"body": "bool result = isSampAvailable()",
		"description": "GTA SA  0AFA",
		"prefix": "isSampAvailable",
		"scope": "source.lua"
	},
	"sampRequestClass": {
		"body": "sampRequestClass(int class)",
		"description": "GTA SA  0AFB",
		"prefix": "sampRequestClass",
		"scope": "source.lua"
	},
	"sampSendScmEvent": {
		"body": "sampSendScmEvent(int event, int id, int param1, int param2)",
		"description": "GTA SA  0AFC",
		"prefix": "sampSendScmEvent",
		"scope": "source.lua"
	},
	"sampSetSpecialAction": {
		"body": "sampSetSpecialAction(int action)",
		"description": "GTA SA  0AFD",
		"prefix": "sampSetSpecialAction",
		"scope": "source.lua"
	},
	"sampSendDeathByPlayer": {
		"body": "sampSendDeathByPlayer(int playerId, int reason)",
		"description": "GTA SA  0AFE",
		"prefix": "sampSendDeathByPlayer",
		"scope": "source.lua"
	},
	"sampGetCarHandleBySampVehicleId": {
		"body": "bool result, Vehicle car = sampGetCarHandleBySampVehicleId(int id)",
		"description": "GTA SA  0AFF",
		"prefix": "sampGetCarHandleBySampVehicleId",
		"scope": "source.lua"
	},
	"sampGetCharHandleBySampPlayerId": {
		"body": "bool result, Ped ped = sampGetCharHandleBySampPlayerId(int id)",
		"description": "GTA SA  0B20",
		"prefix": "sampGetCharHandleBySampPlayerId",
		"scope": "source.lua"
	},
	"sampIsChatInputActive": {
		"body": "bool result = sampIsChatInputActive()",
		"description": "GTA SA  0B21",
		"prefix": "sampIsChatInputActive",
		"scope": "source.lua"
	},
	"sampSetSendrate": {
		"body": "sampSetSendrate(int type, int rate)",
		"description": "GTA SA  0B22",
		"prefix": "sampSetSendrate",
		"scope": "source.lua"
	},
	"sampIsPlayerConnected": {
		"body": "bool result = sampIsPlayerConnected(int id)",
		"description": "GTA SA  0B23",
		"prefix": "sampIsPlayerConnected",
		"scope": "source.lua"
	},
	"sampGetPlayerStructPtr": {
		"body": "int structPtr = sampGetPlayerStructPtr(int id)",
		"description": "GTA SA  0B24",
		"prefix": "sampGetPlayerStructPtr",
		"scope": "source.lua"
	},
	"sampGetPlayerHealth": {
		"body": "int health = sampGetPlayerHealth(int id)",
		"description": "GTA SA  0B25",
		"prefix": "sampGetPlayerHealth",
		"scope": "source.lua"
	},
	"sampGetPlayerArmor": {
		"body": "int armor = sampGetPlayerArmor(int id)",
		"description": "GTA SA  0B26",
		"prefix": "sampGetPlayerArmor",
		"scope": "source.lua"
	},
	"sampSetGamestate": {
		"body": "sampSetGamestate(int gamestate)",
		"description": "GTA SA  0B27",
		"prefix": "sampSetGamestate",
		"scope": "source.lua"
	},
	"sampDisconnectWithReason": {
		"body": "sampDisconnectWithReason(bool timeout)",
		"description": "GTA SA  0B28",
		"prefix": "sampDisconnectWithReason",
		"scope": "source.lua"
	},
	"sampSetLocalPlayerName": {
		"body": "sampSetLocalPlayerName(zstring name)",
		"description": "GTA SA  0B29",
		"prefix": "sampSetLocalPlayerName",
		"scope": "source.lua"
	},
	"sampGetPlayerPing": {
		"body": "int ping = sampGetPlayerPing(int id)",
		"description": "GTA SA  0B2A",
		"prefix": "sampGetPlayerPing",
		"scope": "source.lua"
	},
	"sampGetPlayerIdByCharHandle": {
		"body": "bool result, int id = sampGetPlayerIdByCharHandle(Ped handle)",
		"description": "GTA SA  0B2B",
		"prefix": "sampGetPlayerIdByCharHandle",
		"scope": "source.lua"
	},
	"sampGetVehicleIdByCarHandle": {
		"body": "bool result, int id = sampGetVehicleIdByCarHandle(Vehicle car)",
		"description": "GTA SA  0B2C",
		"prefix": "sampGetVehicleIdByCarHandle",
		"scope": "source.lua"
	},
	"sampGetStreamedOutPlayerPos": {
		"body": "bool result, float posX, float posY, float posZ = sampGetStreamedOutPlayerPos(int id)",
		"description": "GTA SA  0B2F",
		"prefix": "sampGetStreamedOutPlayerPos",
		"scope": "source.lua"
	},
	"sampSendEnterVehicle": {
		"body": "sampSendEnterVehicle(int id, bool passenger)",
		"description": "GTA SA  0B30",
		"prefix": "sampSendEnterVehicle",
		"scope": "source.lua"
	},
	"sampSendExitVehicle": {
		"body": "sampSendExitVehicle(int id)",
		"description": "GTA SA  0B31",
		"prefix": "sampSendExitVehicle",
		"scope": "source.lua"
	},
	"sampSendSpawn": {
		"body": "sampSendSpawn()",
		"description": "GTA SA  0B32",
		"prefix": "sampSendSpawn",
		"scope": "source.lua"
	},
	"sampSendDamageVehicle": {
		"body": "sampSendDamageVehicle(Vehicle car, int panel, int doors, int lights, int tires)",
		"description": "GTA SA  0B33",
		"prefix": "sampSendDamageVehicle",
		"scope": "source.lua"
	},
	"sampRegisterChatCommand": {
		"body": "bool result = sampRegisterChatCommand(zstring cmd, function func)",
		"description": "GTA SA  0B34",
		"prefix": "sampRegisterChatCommand",
		"scope": "source.lua"
	},
	"sampGetPlayerNickname": {
		"body": "zstring name = sampGetPlayerNickname(int id)",
		"description": "GTA SA  0B36",
		"prefix": "sampGetPlayerNickname",
		"scope": "source.lua"
	},
	"sampGetPlayerColor": {
		"body": "int color = sampGetPlayerColor(int id)",
		"description": "GTA SA  0B37",
		"prefix": "sampGetPlayerColor",
		"scope": "source.lua"
	},
	"sampConnectToServer": {
		"body": "sampConnectToServer(zstring ip, int port)",
		"description": "GTA SA  0B38",
		"prefix": "sampConnectToServer",
		"scope": "source.lua"
	},
	"sampGetCurrentServerAddress": {
		"body": "zstring ip, int port = sampGetCurrentServerAddress()",
		"description": "GTA SA  0B39",
		"prefix": "sampGetCurrentServerAddress",
		"scope": "source.lua"
	},
	"sampGetCurrentServerName": {
		"body": "zstring name = sampGetCurrentServerName()",
		"description": "GTA SA  0B3A",
		"prefix": "sampGetCurrentServerName",
		"scope": "source.lua"
	},
	"sampShowDialog": {
		"body": "sampShowDialog(int id, zstring caption, zstring text, zstring button1, zstring button2, int style)",
		"description": "GTA SA  0B3B",
		"prefix": "sampShowDialog",
		"scope": "source.lua"
	},
	"sampHasDialogRespond": {
		"body": "bool result, int button, int list, zstring input = sampHasDialogRespond(int id)",
		"description": "GTA SA  0B3C",
		"prefix": "sampHasDialogRespond",
		"scope": "source.lua"
	},
	"raknetNewBitStream": {
		"body": "Bitstream bs = raknetNewBitStream()",
		"description": "GTA SA  0B3D",
		"prefix": "raknetNewBitStream",
		"scope": "source.lua"
	},
	"raknetDeleteBitStream": {
		"body": "raknetDeleteBitStream(Bitstream bs)",
		"description": "GTA SA  0B3E",
		"prefix": "raknetDeleteBitStream",
		"scope": "source.lua"
	},
	"raknetResetBitStream": {
		"body": "raknetResetBitStream(Bitstream bs)",
		"description": "GTA SA  0B3F",
		"prefix": "raknetResetBitStream",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBool": {
		"body": "raknetBitStreamWriteBool(Bitstream bs, bool value)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteBool",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt8": {
		"body": "raknetBitStreamWriteInt8(Bitstream bs, int value)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteInt8",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt16": {
		"body": "raknetBitStreamWriteInt16(Bitstream bs, int value)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteInt16",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt32": {
		"body": "raknetBitStreamWriteInt32(Bitstream bs, int value)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteInt32",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteFloat": {
		"body": "raknetBitStreamWriteFloat(Bitstream bs, float value)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteFloat",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBuffer": {
		"body": "raknetBitStreamWriteBuffer(Bitstream bs, int dest, int size)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteBuffer",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteBitStream": {
		"body": "raknetBitStreamWriteBitStream(Bitstream bs, Bitstream bitStream)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteBitStream",
		"scope": "source.lua"
	},
	"raknetBitStreamWriteString": {
		"body": "raknetBitStreamWriteString(Bitstream bs, string str)",
		"description": "GTA SA  0B40",
		"prefix": "raknetBitStreamWriteString",
		"scope": "source.lua"
	},
	"raknetSendRpcEx": {
		"body": "raknetSendRpcEx(int rpc, Bitstream bs, int priority, int reliability, int channel, bool timestamp)",
		"description": "GTA SA  0B41",
		"prefix": "raknetSendRpcEx",
		"scope": "source.lua"
	},
	"raknetSendBitStreamEx": {
		"body": "raknetSendBitStreamEx(Bitstream bs, int priority, int reliability, int channel)",
		"description": "GTA SA  0B42",
		"prefix": "raknetSendBitStreamEx",
		"scope": "source.lua"
	},
	"sampCreate3dText": {
		"body": "int textlabel = sampCreate3dText(zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)",
		"description": "GTA SA  0B44",
		"prefix": "sampCreate3dText",
		"scope": "source.lua"
	},
	"sampDestroy3dText": {
		"body": "sampDestroy3dText(int textlabel)",
		"description": "GTA SA  0B45",
		"prefix": "sampDestroy3dText",
		"scope": "source.lua"
	},
	"sampIs3dTextDefined": {
		"body": "bool result = sampIs3dTextDefined(int 3dText)",
		"description": "GTA SA  0B46",
		"prefix": "sampIs3dTextDefined",
		"scope": "source.lua"
	},
	"sampCloseCurrentDialogWithButton": {
		"body": "sampCloseCurrentDialogWithButton(int button)",
		"description": "GTA SA  0B47",
		"prefix": "sampCloseCurrentDialogWithButton",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogListItem": {
		"body": "int list = sampGetCurrentDialogListItem()",
		"description": "GTA SA  0B48",
		"prefix": "sampGetCurrentDialogListItem",
		"scope": "source.lua"
	},
	"sampSetCurrentDialogListItem": {
		"body": "sampSetCurrentDialogListItem(int list)",
		"description": "GTA SA  0B49",
		"prefix": "sampSetCurrentDialogListItem",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogEditboxText": {
		"body": "zstring text = sampGetCurrentDialogEditboxText()",
		"description": "GTA SA  0B4A",
		"prefix": "sampGetCurrentDialogEditboxText",
		"scope": "source.lua"
	},
	"sampSetCurrentDialogEditboxText": {
		"body": "sampSetCurrentDialogEditboxText(zstring text)",
		"description": "GTA SA  0B4B",
		"prefix": "sampSetCurrentDialogEditboxText",
		"scope": "source.lua"
	},
	"sampIsDialogActive": {
		"body": "bool result = sampIsDialogActive()",
		"description": "GTA SA  0B4C",
		"prefix": "sampIsDialogActive",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogType": {
		"body": "int type = sampGetCurrentDialogType()",
		"description": "GTA SA  0B4D",
		"prefix": "sampGetCurrentDialogType",
		"scope": "source.lua"
	},
	"sampGetCurrentDialogId": {
		"body": "int id = sampGetCurrentDialogId()",
		"description": "GTA SA  0B4E",
		"prefix": "sampGetCurrentDialogId",
		"scope": "source.lua"
	},
	"sampGetGamestate": {
		"body": "int gamestate = sampGetGamestate()",
		"description": "GTA SA  0B4F",
		"prefix": "sampGetGamestate",
		"scope": "source.lua"
	},
	"sampGetObjectHandleBySampId": {
		"body": "Object object = sampGetObjectHandleBySampId(int id)",
		"description": "GTA SA  0B50",
		"prefix": "sampGetObjectHandleBySampId",
		"scope": "source.lua"
	},
	"sampGetPickupHandleBySampId": {
		"body": "Pickup pickup = sampGetPickupHandleBySampId(int id)",
		"description": "GTA SA  0B51",
		"prefix": "sampGetPickupHandleBySampId",
		"scope": "source.lua"
	},
	"sampGetObjectSampIdByHandle": {
		"body": "int objectId = sampGetObjectSampIdByHandle(Object object)",
		"description": "GTA SA  0B52",
		"prefix": "sampGetObjectSampIdByHandle",
		"scope": "source.lua"
	},
	"sampGetPickupSampIdByHandle": {
		"body": "int pickupId = sampGetPickupSampIdByHandle(Pickup pickup)",
		"description": "GTA SA  0B53",
		"prefix": "sampGetPickupSampIdByHandle",
		"scope": "source.lua"
	},
	"sampGetListboxItemsCount": {
		"body": "int count = sampGetListboxItemsCount()",
		"description": "GTA SA  0B54",
		"prefix": "sampGetListboxItemsCount",
		"scope": "source.lua"
	},
	"sampGetPlayerAnimationId": {
		"body": "int animid = sampGetPlayerAnimationId(int playerId)",
		"description": "GTA SA  0B57",
		"prefix": "sampGetPlayerAnimationId",
		"scope": "source.lua"
	},
	"sampGetAnimationNameAndFile": {
		"body": "zstring name, zstring file = sampGetAnimationNameAndFile(int animid)",
		"description": "GTA SA  0B58",
		"prefix": "sampGetAnimationNameAndFile",
		"scope": "source.lua"
	},
	"sampFindAnimationIdByNameAndFile": {
		"body": "int id = sampFindAnimationIdByNameAndFile(zstring name, zstring file)",
		"description": "GTA SA  0B59",
		"prefix": "sampFindAnimationIdByNameAndFile",
		"scope": "source.lua"
	},
	"getScreenResolution": {
		"body": "int resX, int resY = getScreenResolution()",
		"description": "GTA SA  0B5A",
		"prefix": "getScreenResolution",
		"scope": "source.lua"
	},
	"sampGetListboxItemText": {
		"body": "zstring text = sampGetListboxItemText(int item)",
		"description": "GTA SA  0B5B",
		"prefix": "sampGetListboxItemText",
		"scope": "source.lua"
	},
	"sampIsPlayerPaused": {
		"body": "bool result = sampIsPlayerPaused(int id)",
		"description": "GTA SA  0B5C",
		"prefix": "sampIsPlayerPaused",
		"scope": "source.lua"
	},
	"sampToggleCursor": {
		"body": "sampToggleCursor(bool show)",
		"description": "GTA SA  0B5D",
		"prefix": "sampToggleCursor",
		"scope": "source.lua"
	},
	"sampIsLocalPlayerSpawned": {
		"body": "bool result = sampIsLocalPlayerSpawned()",
		"description": "GTA SA  0B61",
		"prefix": "sampIsLocalPlayerSpawned",
		"scope": "source.lua"
	},
	"sampGetPlayerSpecialAction": {
		"body": "int action = sampGetPlayerSpecialAction(int id)",
		"description": "GTA SA  0B62",
		"prefix": "sampGetPlayerSpecialAction",
		"scope": "source.lua"
	},
	"sampUnregisterChatCommand": {
		"body": "bool result = sampUnregisterChatCommand(zstring cmd)",
		"description": "GTA SA  0B63",
		"prefix": "sampUnregisterChatCommand",
		"scope": "source.lua"
	},
	"sampIsPlayerNpc": {
		"body": "bool result = sampIsPlayerNpc(int id)",
		"description": "GTA SA  0B64",
		"prefix": "sampIsPlayerNpc",
		"scope": "source.lua"
	},
	"sampGetPlayerScore": {
		"body": "int score = sampGetPlayerScore(int id)",
		"description": "GTA SA  0B65",
		"prefix": "sampGetPlayerScore",
		"scope": "source.lua"
	},
	"renderDrawLine": {
		"body": "renderDrawLine(int pos1X, int pos1Y, int pos2X, int pos2Y, int width, int color)",
		"description": "GTA SA  0B68",
		"prefix": "renderDrawLine",
		"scope": "source.lua"
	},
	"renderDrawBox": {
		"body": "renderDrawBox(int posX, int posY, int sizeX, int sizeY, int color)",
		"description": "GTA SA  0B69",
		"prefix": "renderDrawBox",
		"scope": "source.lua"
	},
	"renderDrawBoxWithBorder": {
		"body": "renderDrawBoxWithBorder(int posX, int posY, int sizeX, int sizeY, int color, int bsize, int bcolor)",
		"description": "GTA SA  0B6A",
		"prefix": "renderDrawBoxWithBorder",
		"scope": "source.lua"
	},
	"renderGetFontDrawTextLength": {
		"body": "int length = renderGetFontDrawTextLength(int font, zstring text)",
		"description": "GTA SA  0B6B",
		"prefix": "renderGetFontDrawTextLength",
		"scope": "source.lua"
	},
	"renderGetFontDrawHeight": {
		"body": "int height = renderGetFontDrawHeight(int font)",
		"description": "GTA SA  0B6C",
		"prefix": "renderGetFontDrawHeight",
		"scope": "source.lua"
	},
	"renderCreateFont": {
		"body": "int font = renderCreateFont(zstring font, int height, int flags)",
		"description": "GTA SA  0B6D",
		"prefix": "renderCreateFont",
		"scope": "source.lua"
	},
	"renderReleaseFont": {
		"body": "renderReleaseFont(int font)",
		"description": "GTA SA  0B6E",
		"prefix": "renderReleaseFont",
		"scope": "source.lua"
	},
	"renderFontDrawText": {
		"body": "renderFontDrawText(int font, zstring text, int posX, int posY, int color)",
		"description": "GTA SA  0B6F",
		"prefix": "renderFontDrawText",
		"scope": "source.lua"
	},
	"renderDrawPolygon": {
		"body": "renderDrawPolygon(int posX, int posY, int sizeX, int sizeY, int corners, float rotation, int color)",
		"description": "GTA SA  0B70",
		"prefix": "renderDrawPolygon",
		"scope": "source.lua"
	},
	"renderLoadTextureFromFile": {
		"body": "int texture = renderLoadTextureFromFile(zstring file)",
		"description": "GTA SA  0B71",
		"prefix": "renderLoadTextureFromFile",
		"scope": "source.lua"
	},
	"renderReleaseTexture": {
		"body": "renderReleaseTexture(int texture)",
		"description": "GTA SA  0B72",
		"prefix": "renderReleaseTexture",
		"scope": "source.lua"
	},
	"renderDrawTexture": {
		"body": "renderDrawTexture(int texture, int posX, int posY, int sizeX, int sizeY, float rotation, int color)",
		"description": "GTA SA  0B73",
		"prefix": "renderDrawTexture",
		"scope": "source.lua"
	},
	"sampSetChatString": {
		"body": "sampSetChatString(int id, zstring text, zstring prefix, int color, int pcolor)",
		"description": "GTA SA  0B74",
		"prefix": "sampSetChatString",
		"scope": "source.lua"
	},
	"sampGetChatString": {
		"body": "zstring text, zstring prefix, int color, int pcolor = sampGetChatString(int id)",
		"description": "GTA SA  0B75",
		"prefix": "sampGetChatString",
		"scope": "source.lua"
	},
	"sampSetChatInputText": {
		"body": "sampSetChatInputText(zstring text)",
		"description": "GTA SA  0B76",
		"prefix": "sampSetChatInputText",
		"scope": "source.lua"
	},
	"sampGetChatInputText": {
		"body": "zstring text = sampGetChatInputText()",
		"description": "GTA SA  0B77",
		"prefix": "sampGetChatInputText",
		"scope": "source.lua"
	},
	"sampfuncsLog": {
		"body": "sampfuncsLog(zstring msg)",
		"description": "GTA SA  0B78",
		"prefix": "sampfuncsLog",
		"scope": "source.lua"
	},
	"sampSetChatInputEnabled": {
		"body": "sampSetChatInputEnabled(bool enabled)",
		"description": "GTA SA  0B79",
		"prefix": "sampSetChatInputEnabled",
		"scope": "source.lua"
	},
	"sampGetRakclientInterface": {
		"body": "int rakInt = sampGetRakclientInterface()",
		"description": "GTA SA  0B7A",
		"prefix": "sampGetRakclientInterface",
		"scope": "source.lua"
	},
	"sampGetRakpeer": {
		"body": "int rakpeer = sampGetRakpeer()",
		"description": "GTA SA  0B7B",
		"prefix": "sampGetRakpeer",
		"scope": "source.lua"
	},
	"sampGetRakclientFuncAddressByIndex": {
		"body": "int address = sampGetRakclientFuncAddressByIndex(int index)",
		"description": "GTA SA  0B7C",
		"prefix": "sampGetRakclientFuncAddressByIndex",
		"scope": "source.lua"
	},
	"sampGetRpcCallbackByRpcId": {
		"body": "int callback = sampGetRpcCallbackByRpcId(int index)",
		"description": "GTA SA  0B7D",
		"prefix": "sampGetRpcCallbackByRpcId",
		"scope": "source.lua"
	},
	"sampGetRpcNodeByRpcId": {
		"body": "int node = sampGetRpcNodeByRpcId(int index)",
		"description": "GTA SA  0B7E",
		"prefix": "sampGetRpcNodeByRpcId",
		"scope": "source.lua"
	},
	"sampGetSampInfoPtr": {
		"body": "int sampPtr = sampGetSampInfoPtr()",
		"description": "GTA SA  0B7F",
		"prefix": "sampGetSampInfoPtr",
		"scope": "source.lua"
	},
	"dxutCreateDialog": {
		"body": "DxutDialog dialog = dxutCreateDialog(zstring name)",
		"description": "GTA SA  0B80",
		"prefix": "dxutCreateDialog",
		"scope": "source.lua"
	},
	"dxutPopEvent": {
		"body": "bool result, int event, int id = dxutPopEvent(DxutDialog dialog)",
		"description": "GTA SA  0B81",
		"prefix": "dxutPopEvent",
		"scope": "source.lua"
	},
	"dxutAddButton": {
		"body": "dxutAddButton(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B82",
		"prefix": "dxutAddButton",
		"scope": "source.lua"
	},
	"dxutAddCheckbox": {
		"body": "dxutAddCheckbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B83",
		"prefix": "dxutAddCheckbox",
		"scope": "source.lua"
	},
	"dxutSetDialogPos": {
		"body": "dxutSetDialogPos(DxutDialog dialog, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B84",
		"prefix": "dxutSetDialogPos",
		"scope": "source.lua"
	},
	"dxutGetDialogPosAndSize": {
		"body": "int posX, int posY, int sizeX, int sizeY = dxutGetDialogPosAndSize(DxutDialog dialog)",
		"description": "GTA SA  0B85",
		"prefix": "dxutGetDialogPosAndSize",
		"scope": "source.lua"
	},
	"dxutSetDialogVisible": {
		"body": "dxutSetDialogVisible(DxutDialog dialog, bool visible)",
		"description": "GTA SA  0B86",
		"prefix": "dxutSetDialogVisible",
		"scope": "source.lua"
	},
	"dxutIsDialogVisible": {
		"body": "bool result = dxutIsDialogVisible(DxutDialog dialog)",
		"description": "GTA SA  0B87",
		"prefix": "dxutIsDialogVisible",
		"scope": "source.lua"
	},
	"dxutAddEditbox": {
		"body": "dxutAddEditbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B88",
		"prefix": "dxutAddEditbox",
		"scope": "source.lua"
	},
	"dxutGetControlText": {
		"body": "zstring text = dxutGetControlText(DxutDialog dialog, int id)",
		"description": "GTA SA  0B89",
		"prefix": "dxutGetControlText",
		"scope": "source.lua"
	},
	"raknetSendRpc": {
		"body": "raknetSendRpc(int rpc, Bitstream bs)",
		"description": "GTA SA  0B8A",
		"prefix": "raknetSendRpc",
		"scope": "source.lua"
	},
	"raknetSendBitStream": {
		"body": "raknetSendBitStream(Bitstream bs)",
		"description": "GTA SA  0B8B",
		"prefix": "raknetSendBitStream",
		"scope": "source.lua"
	},
	"sampIsCursorActive": {
		"body": "bool result = sampIsCursorActive()",
		"description": "GTA SA  0B8C",
		"prefix": "sampIsCursorActive",
		"scope": "source.lua"
	},
	"sampSetCursorMode": {
		"body": "sampSetCursorMode(int mode)",
		"description": "GTA SA  0B8D",
		"prefix": "sampSetCursorMode",
		"scope": "source.lua"
	},
	"sampGetCursorMode": {
		"body": "int mode = sampGetCursorMode()",
		"description": "GTA SA  0B8E",
		"prefix": "sampGetCursorMode",
		"scope": "source.lua"
	},
	"dxutSetControlVisible": {
		"body": "dxutSetControlVisible(DxutDialog dialog, int id, bool visible)",
		"description": "GTA SA  0B90",
		"prefix": "dxutSetControlVisible",
		"scope": "source.lua"
	},
	"dxutAddStatic": {
		"body": "dxutAddStatic(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B91",
		"prefix": "dxutAddStatic",
		"scope": "source.lua"
	},
	"dxutIsCheckboxChecked": {
		"body": "bool result = dxutIsCheckboxChecked(DxutDialog dialog, int id)",
		"description": "GTA SA  0B92",
		"prefix": "dxutIsCheckboxChecked",
		"scope": "source.lua"
	},
	"dxutSetDialogBackgroundColor": {
		"body": "dxutSetDialogBackgroundColor(DxutDialog dialog, int color)",
		"description": "GTA SA  0B93",
		"prefix": "dxutSetDialogBackgroundColor",
		"scope": "source.lua"
	},
	"dxutSetControlText": {
		"body": "dxutSetControlText(DxutDialog dialog, int id, zstring text)",
		"description": "GTA SA  0B94",
		"prefix": "dxutSetControlText",
		"scope": "source.lua"
	},
	"dxutControlIsVisible": {
		"body": "bool result = dxutControlIsVisible(DxutDialog dialog, int id)",
		"description": "GTA SA  0B95",
		"prefix": "dxutControlIsVisible",
		"scope": "source.lua"
	},
	"dxutAddSlider": {
		"body": "dxutAddSlider(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY, int max)",
		"description": "GTA SA  0B96",
		"prefix": "dxutAddSlider",
		"scope": "source.lua"
	},
	"dxutGetSliderValue": {
		"body": "int value = dxutGetSliderValue(DxutDialog dialog, int id)",
		"description": "GTA SA  0B97",
		"prefix": "dxutGetSliderValue",
		"scope": "source.lua"
	},
	"dxutSetSliderValue": {
		"body": "dxutSetSliderValue(DxutDialog dialog, int id, int value)",
		"description": "GTA SA  0B98",
		"prefix": "dxutSetSliderValue",
		"scope": "source.lua"
	},
	"dxutAddListbox": {
		"body": "dxutAddListbox(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY)",
		"description": "GTA SA  0B99",
		"prefix": "dxutAddListbox",
		"scope": "source.lua"
	},
	"dxutListboxInsertItem": {
		"body": "dxutListboxInsertItem(DxutDialog dialog, int id, zstring element, int data, int after)",
		"description": "GTA SA  0B9A",
		"prefix": "dxutListboxInsertItem",
		"scope": "source.lua"
	},
	"dxutGetListboxSelectedItemAndCount": {
		"body": "int element, int count = dxutGetListboxSelectedItemAndCount(DxutDialog dialog, int id)",
		"description": "GTA SA  0B9B",
		"prefix": "dxutGetListboxSelectedItemAndCount",
		"scope": "source.lua"
	},
	"dxutListboxDeleteItem": {
		"body": "dxutListboxDeleteItem(DxutDialog dialog, int id, int element)",
		"description": "GTA SA  0B9C",
		"prefix": "dxutListboxDeleteItem",
		"scope": "source.lua"
	},
	"dxutGetListboxItemTextAndData": {
		"body": "zstring text, int data = dxutGetListboxItemTextAndData(DxutDialog dialog, int id, int element)",
		"description": "GTA SA  0B9D",
		"prefix": "dxutGetListboxItemTextAndData",
		"scope": "source.lua"
	},
	"dxutCheckboxSetChecked": {
		"body": "dxutCheckboxSetChecked(DxutDialog dialog, int id, bool checked)",
		"description": "GTA SA  0B9E",
		"prefix": "dxutCheckboxSetChecked",
		"scope": "source.lua"
	},
	"dxutEnableDialogCaption": {
		"body": "dxutEnableDialogCaption(DxutDialog dialog, int enable)",
		"description": "GTA SA  0B9F",
		"prefix": "dxutEnableDialogCaption",
		"scope": "source.lua"
	},
	"dxutIsDialogCaptionEnabled": {
		"body": "bool result = dxutIsDialogCaptionEnabled(DxutDialog dialog)",
		"description": "GTA SA  0BA0",
		"prefix": "dxutIsDialogCaptionEnabled",
		"scope": "source.lua"
	},
	"dxutSetDialogMinimized": {
		"body": "dxutSetDialogMinimized(DxutDialog dialog, bool minimized)",
		"description": "GTA SA  0BA1",
		"prefix": "dxutSetDialogMinimized",
		"scope": "source.lua"
	},
	"dxutIsDialogMinimized": {
		"body": "bool result = dxutIsDialogMinimized(DxutDialog dialog)",
		"description": "GTA SA  0BA2",
		"prefix": "dxutIsDialogMinimized",
		"scope": "source.lua"
	},
	"dxutDeleteControl": {
		"body": "dxutDeleteControl(DxutDialog dialog, int id)",
		"description": "GTA SA  0BA3",
		"prefix": "dxutDeleteControl",
		"scope": "source.lua"
	},
	"dxutDeleteDialog": {
		"body": "dxutDeleteDialog(DxutDialog dialog)",
		"description": "GTA SA  0BA4",
		"prefix": "dxutDeleteDialog",
		"scope": "source.lua"
	},
	"dxutSetFocusOnControl": {
		"body": "dxutSetFocusOnControl(DxutDialog dialog, int id)",
		"description": "GTA SA  0BA5",
		"prefix": "dxutSetFocusOnControl",
		"scope": "source.lua"
	},
	"dxutSetControlSize": {
		"body": "dxutSetControlSize(DxutDialog dialog, int id, int sizeX, int sizeY)",
		"description": "GTA SA  0BA6",
		"prefix": "dxutSetControlSize",
		"scope": "source.lua"
	},
	"dxutGetControlSize": {
		"body": "int sizeX, int sizeY = dxutGetControlSize(DxutDialog dialog, int id)",
		"description": "GTA SA  0BA7",
		"prefix": "dxutGetControlSize",
		"scope": "source.lua"
	},
	"dxutSetControlPos": {
		"body": "dxutSetControlPos(DxutDialog dialog, int id, int posX, int posY)",
		"description": "GTA SA  0BA8",
		"prefix": "dxutSetControlPos",
		"scope": "source.lua"
	},
	"dxutGetControlPos": {
		"body": "int posX, int posY = dxutGetControlPos(DxutDialog dialog, int id)",
		"description": "GTA SA  0BA9",
		"prefix": "dxutGetControlPos",
		"scope": "source.lua"
	},
	"dxutSetCheckboxColor": {
		"body": "dxutSetCheckboxColor(DxutDialog dialog, int id, int color)",
		"description": "GTA SA  0BAA",
		"prefix": "dxutSetCheckboxColor",
		"scope": "source.lua"
	},
	"dxutIsDialogExists": {
		"body": "bool result = dxutIsDialogExists(DxutDialog dialog)",
		"description": "GTA SA  0BAB",
		"prefix": "dxutIsDialogExists",
		"scope": "source.lua"
	},
	"sampGetServerSettingsPtr": {
		"body": "int settings = sampGetServerSettingsPtr()",
		"description": "GTA SA  0BAC",
		"prefix": "sampGetServerSettingsPtr",
		"scope": "source.lua"
	},
	"sampGetSampPoolsPtr": {
		"body": "int pools = sampGetSampPoolsPtr()",
		"description": "GTA SA  0BAD",
		"prefix": "sampGetSampPoolsPtr",
		"scope": "source.lua"
	},
	"sampGetChatInfoPtr": {
		"body": "int chat = sampGetChatInfoPtr()",
		"description": "GTA SA  0BAE",
		"prefix": "sampGetChatInfoPtr",
		"scope": "source.lua"
	},
	"sampGetInputInfoPtr": {
		"body": "int input = sampGetInputInfoPtr()",
		"description": "GTA SA  0BAF",
		"prefix": "sampGetInputInfoPtr",
		"scope": "source.lua"
	},
	"sampGetDialogInfoPtr": {
		"body": "int dialogInfo = sampGetDialogInfoPtr()",
		"description": "GTA SA  0BB0",
		"prefix": "sampGetDialogInfoPtr",
		"scope": "source.lua"
	},
	"sampGetKillInfoPtr": {
		"body": "int kill = sampGetKillInfoPtr()",
		"description": "GTA SA  0BB1",
		"prefix": "sampGetKillInfoPtr",
		"scope": "source.lua"
	},
	"sampGetMiscInfoPtr": {
		"body": "int misc = sampGetMiscInfoPtr()",
		"description": "GTA SA  0BB2",
		"prefix": "sampGetMiscInfoPtr",
		"scope": "source.lua"
	},
	"sampGetTextdrawPoolPtr": {
		"body": "int tdpool = sampGetTextdrawPoolPtr()",
		"description": "GTA SA  0BB3",
		"prefix": "sampGetTextdrawPoolPtr",
		"scope": "source.lua"
	},
	"sampGetObjectPoolPtr": {
		"body": "int objpool = sampGetObjectPoolPtr()",
		"description": "GTA SA  0BB4",
		"prefix": "sampGetObjectPoolPtr",
		"scope": "source.lua"
	},
	"sampGetGangzonePoolPtr": {
		"body": "int gzpool = sampGetGangzonePoolPtr()",
		"description": "GTA SA  0BB5",
		"prefix": "sampGetGangzonePoolPtr",
		"scope": "source.lua"
	},
	"sampGetTextlabelPoolPtr": {
		"body": "int tlabelpool = sampGetTextlabelPoolPtr()",
		"description": "GTA SA  0BB6",
		"prefix": "sampGetTextlabelPoolPtr",
		"scope": "source.lua"
	},
	"sampGetPlayerPoolPtr": {
		"body": "int plpool = sampGetPlayerPoolPtr()",
		"description": "GTA SA  0BB7",
		"prefix": "sampGetPlayerPoolPtr",
		"scope": "source.lua"
	},
	"sampGetVehiclePoolPtr": {
		"body": "int vehpool = sampGetVehiclePoolPtr()",
		"description": "GTA SA  0BB8",
		"prefix": "sampGetVehiclePoolPtr",
		"scope": "source.lua"
	},
	"sampGetPickupPoolPtr": {
		"body": "int pupool = sampGetPickupPoolPtr()",
		"description": "GTA SA  0BB9",
		"prefix": "sampGetPickupPoolPtr",
		"scope": "source.lua"
	},
	"sampStorePlayerOnfootData": {
		"body": "sampStorePlayerOnfootData(int id, int data)",
		"description": "GTA SA  0BBA",
		"prefix": "sampStorePlayerOnfootData",
		"scope": "source.lua"
	},
	"sampStorePlayerIncarData": {
		"body": "sampStorePlayerIncarData(int id, int data)",
		"description": "GTA SA  0BBB",
		"prefix": "sampStorePlayerIncarData",
		"scope": "source.lua"
	},
	"sampStorePlayerPassengerData": {
		"body": "sampStorePlayerPassengerData(int id, int data)",
		"description": "GTA SA  0BBC",
		"prefix": "sampStorePlayerPassengerData",
		"scope": "source.lua"
	},
	"sampStorePlayerTrailerData": {
		"body": "sampStorePlayerTrailerData(int id, int data)",
		"description": "GTA SA  0BBD",
		"prefix": "sampStorePlayerTrailerData",
		"scope": "source.lua"
	},
	"sampStorePlayerAimData": {
		"body": "sampStorePlayerAimData(int id, int data)",
		"description": "GTA SA  0BBE",
		"prefix": "sampStorePlayerAimData",
		"scope": "source.lua"
	},
	"sampSendRconCommand": {
		"body": "sampSendRconCommand(zstring cmd)",
		"description": "GTA SA  0BBF",
		"prefix": "sampSendRconCommand",
		"scope": "source.lua"
	},
	"sampSendOnfootData": {
		"body": "sampSendOnfootData(int data)",
		"description": "GTA SA  0BC0",
		"prefix": "sampSendOnfootData",
		"scope": "source.lua"
	},
	"sampSendIncarData": {
		"body": "sampSendIncarData(int data)",
		"description": "GTA SA  0BC1",
		"prefix": "sampSendIncarData",
		"scope": "source.lua"
	},
	"sampSendPassengerData": {
		"body": "sampSendPassengerData(int data)",
		"description": "GTA SA  0BC2",
		"prefix": "sampSendPassengerData",
		"scope": "source.lua"
	},
	"sampSendAimData": {
		"body": "sampSendAimData(int data)",
		"description": "GTA SA  0BC3",
		"prefix": "sampSendAimData",
		"scope": "source.lua"
	},
	"sampSendBulletData": {
		"body": "sampSendBulletData(int data)",
		"description": "GTA SA  0BC4",
		"prefix": "sampSendBulletData",
		"scope": "source.lua"
	},
	"sampSendTrailerData": {
		"body": "sampSendTrailerData(int data)",
		"description": "GTA SA  0BC5",
		"prefix": "sampSendTrailerData",
		"scope": "source.lua"
	},
	"sampSendUnoccupiedData": {
		"body": "sampSendUnoccupiedData(int data)",
		"description": "GTA SA  0BC6",
		"prefix": "sampSendUnoccupiedData",
		"scope": "source.lua"
	},
	"sampSendSpectatorData": {
		"body": "sampSendSpectatorData(int data)",
		"description": "GTA SA  0BC7",
		"prefix": "sampSendSpectatorData",
		"scope": "source.lua"
	},
	"sampSendClickPlayer": {
		"body": "sampSendClickPlayer(int id, int source)",
		"description": "GTA SA  0BC8",
		"prefix": "sampSendClickPlayer",
		"scope": "source.lua"
	},
	"sampSendDialogResponse": {
		"body": "sampSendDialogResponse(int id, int button, int listitem, zstring input)",
		"description": "GTA SA  0BC9",
		"prefix": "sampSendDialogResponse",
		"scope": "source.lua"
	},
	"sampSendClickTextdraw": {
		"body": "sampSendClickTextdraw(int id)",
		"description": "GTA SA  0BCA",
		"prefix": "sampSendClickTextdraw",
		"scope": "source.lua"
	},
	"sampSendGiveDamage": {
		"body": "sampSendGiveDamage(int id, float damage, int weapon, int bodypart)",
		"description": "GTA SA  0BCB",
		"prefix": "sampSendGiveDamage",
		"scope": "source.lua"
	},
	"sampSendTakeDamage": {
		"body": "sampSendTakeDamage(int id, float damage, int weapon, int bodypart)",
		"description": "GTA SA  0BCC",
		"prefix": "sampSendTakeDamage",
		"scope": "source.lua"
	},
	"sampSendEditObject": {
		"body": "sampSendEditObject(int id, Object object, int response, float posX, float posY, float posZ, float rotX, float rotY, float rotZ)",
		"description": "GTA SA  0BCD",
		"prefix": "sampSendEditObject",
		"scope": "source.lua"
	},
	"sampSendEditAttachedObject": {
		"body": "sampSendEditAttachedObject(int response, int index, int model, int bone, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)",
		"description": "GTA SA  0BCE",
		"prefix": "sampSendEditAttachedObject",
		"scope": "source.lua"
	},
	"sampSendInteriorChange": {
		"body": "sampSendInteriorChange(int id)",
		"description": "GTA SA  0BCF",
		"prefix": "sampSendInteriorChange",
		"scope": "source.lua"
	},
	"sampSendRequestSpawn": {
		"body": "sampSendRequestSpawn()",
		"description": "GTA SA  0BD0",
		"prefix": "sampSendRequestSpawn",
		"scope": "source.lua"
	},
	"sampSendPickedUpPickup": {
		"body": "sampSendPickedUpPickup(int id)",
		"description": "GTA SA  0BD1",
		"prefix": "sampSendPickedUpPickup",
		"scope": "source.lua"
	},
	"sampSendMenuSelectRow": {
		"body": "sampSendMenuSelectRow(int id)",
		"description": "GTA SA  0BD2",
		"prefix": "sampSendMenuSelectRow",
		"scope": "source.lua"
	},
	"sampSendMenuQuit": {
		"body": "sampSendMenuQuit()",
		"description": "GTA SA  0BD3",
		"prefix": "sampSendMenuQuit",
		"scope": "source.lua"
	},
	"sampSendVehicleDestroyed": {
		"body": "sampSendVehicleDestroyed(int id)",
		"description": "GTA SA  0BD4",
		"prefix": "sampSendVehicleDestroyed",
		"scope": "source.lua"
	},
	"sampIsScoreboardOpen": {
		"body": "bool result = sampIsScoreboardOpen()",
		"description": "GTA SA  0BD5",
		"prefix": "sampIsScoreboardOpen",
		"scope": "source.lua"
	},
	"sampToggleScoreboard": {
		"body": "sampToggleScoreboard(bool show)",
		"description": "GTA SA  0BD6",
		"prefix": "sampToggleScoreboard",
		"scope": "source.lua"
	},
	"sampGetDialogText": {
		"body": "zstring text = sampGetDialogText()",
		"description": "GTA SA  0BD7",
		"prefix": "sampGetDialogText",
		"scope": "source.lua"
	},
	"sampGetDialogCaption": {
		"body": "zstring caption = sampGetDialogCaption()",
		"description": "GTA SA  0BD8",
		"prefix": "sampGetDialogCaption",
		"scope": "source.lua"
	},
	"sampSetDialogClientside": {
		"body": "sampSetDialogClientside(bool clientside)",
		"description": "GTA SA  0BD9",
		"prefix": "sampSetDialogClientside",
		"scope": "source.lua"
	},
	"sampIsDialogClientside": {
		"body": "bool result = sampIsDialogClientside()",
		"description": "GTA SA  0BDA",
		"prefix": "sampIsDialogClientside",
		"scope": "source.lua"
	},
	"sampIsChatVisible": {
		"body": "bool result = sampIsChatVisible()",
		"description": "GTA SA  0BDB",
		"prefix": "sampIsChatVisible",
		"scope": "source.lua"
	},
	"sampGetChatDisplayMode": {
		"body": "int mode = sampGetChatDisplayMode()",
		"description": "GTA SA  0BDC",
		"prefix": "sampGetChatDisplayMode",
		"scope": "source.lua"
	},
	"sampSetChatDisplayMode": {
		"body": "sampSetChatDisplayMode(int mode)",
		"description": "GTA SA  0BDD",
		"prefix": "sampSetChatDisplayMode",
		"scope": "source.lua"
	},
	"pauseScmThread": {
		"body": "pauseScmThread(int thread)",
		"description": "GTA SA  0BDE",
		"prefix": "pauseScmThread",
		"scope": "source.lua"
	},
	"resumeScmThread": {
		"body": "resumeScmThread(int thread)",
		"description": "GTA SA  0BDF",
		"prefix": "resumeScmThread",
		"scope": "source.lua"
	},
	"raknetBitStreamReadBool": {
		"body": "bool value = raknetBitStreamReadBool(Bitstream bs)",
		"description": "GTA SA  0BE7",
		"prefix": "raknetBitStreamReadBool",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt8": {
		"body": "int value = raknetBitStreamReadInt8(Bitstream bs)",
		"description": "GTA SA  0BE7",
		"prefix": "raknetBitStreamReadInt8",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt16": {
		"body": "int value = raknetBitStreamReadInt16(Bitstream bs)",
		"description": "GTA SA  0BE7",
		"prefix": "raknetBitStreamReadInt16",
		"scope": "source.lua"
	},
	"raknetBitStreamReadInt32": {
		"body": "int value = raknetBitStreamReadInt32(Bitstream bs)",
		"description": "GTA SA  0BE7",
		"prefix": "raknetBitStreamReadInt32",
		"scope": "source.lua"
	},
	"raknetBitStreamReadFloat": {
		"body": "float value = raknetBitStreamReadFloat(Bitstream bs)",
		"description": "GTA SA  0BE7",
		"prefix": "raknetBitStreamReadFloat",
		"scope": "source.lua"
	},
	"raknetBitStreamReadBuffer": {
		"body": "raknetBitStreamReadBuffer(Bitstream bs, int dest, int size)",
		"description": "GTA SA  0BE8",
		"prefix": "raknetBitStreamReadBuffer",
		"scope": "source.lua"
	},
	"raknetBitStreamReadString": {
		"body": "string value = raknetBitStreamReadString(Bitstream bs, int size)",
		"description": "GTA SA  0BE8",
		"prefix": "raknetBitStreamReadString",
		"scope": "source.lua"
	},
	"raknetBitStreamResetReadPointer": {
		"body": "raknetBitStreamResetReadPointer(Bitstream bs)",
		"description": "GTA SA  0BE9",
		"prefix": "raknetBitStreamResetReadPointer",
		"scope": "source.lua"
	},
	"raknetBitStreamResetWritePointer": {
		"body": "raknetBitStreamResetWritePointer(Bitstream bs)",
		"description": "GTA SA  0BEA",
		"prefix": "raknetBitStreamResetWritePointer",
		"scope": "source.lua"
	},
	"raknetBitStreamIgnoreBits": {
		"body": "raknetBitStreamIgnoreBits(Bitstream bs, int amount)",
		"description": "GTA SA  0BEB",
		"prefix": "raknetBitStreamIgnoreBits",
		"scope": "source.lua"
	},
	"raknetBitStreamSetWriteOffset": {
		"body": "raknetBitStreamSetWriteOffset(Bitstream bs, int offset)",
		"description": "GTA SA  0BEC",
		"prefix": "raknetBitStreamSetWriteOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamSetReadOffset": {
		"body": "raknetBitStreamSetReadOffset(Bitstream bs, int offset)",
		"description": "GTA SA  0BED",
		"prefix": "raknetBitStreamSetReadOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBitsUsed": {
		"body": "int value = raknetBitStreamGetNumberOfBitsUsed(Bitstream bs)",
		"description": "GTA SA  0BEE",
		"prefix": "raknetBitStreamGetNumberOfBitsUsed",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBytesUsed": {
		"body": "int value = raknetBitStreamGetNumberOfBytesUsed(Bitstream bs)",
		"description": "GTA SA  0BEF",
		"prefix": "raknetBitStreamGetNumberOfBytesUsed",
		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfUnreadBits": {
		"body": "int value = raknetBitStreamGetNumberOfUnreadBits(Bitstream bs)",
		"description": "GTA SA  0BF0",
		"prefix": "raknetBitStreamGetNumberOfUnreadBits",
		"scope": "source.lua"
	},
	"raknetBitStreamGetWriteOffset": {
		"body": "int value = raknetBitStreamGetWriteOffset(Bitstream bs)",
		"description": "GTA SA  0BF1",
		"prefix": "raknetBitStreamGetWriteOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetReadOffset": {
		"body": "int value = raknetBitStreamGetReadOffset(Bitstream bs)",
		"description": "GTA SA  0BF2",
		"prefix": "raknetBitStreamGetReadOffset",
		"scope": "source.lua"
	},
	"raknetBitStreamGetDataPtr": {
		"body": "int value = raknetBitStreamGetDataPtr(Bitstream bs)",
		"description": "GTA SA  0BF3",
		"prefix": "raknetBitStreamGetDataPtr",
		"scope": "source.lua"
	},
	"raknetBitStreamDecodeString": {
		"body": "zstring string = raknetBitStreamDecodeString(Bitstream bs, int size)",
		"description": "GTA SA  0BF4",
		"prefix": "raknetBitStreamDecodeString",
		"scope": "source.lua"
	},
	"raknetBitStreamEncodeString": {
		"body": "raknetBitStreamEncodeString(Bitstream bs, zstring string)",
		"description": "GTA SA  0BF5",
		"prefix": "raknetBitStreamEncodeString",
		"scope": "source.lua"
	},
	"raknetEmulRpcReceiveBitStream": {
		"body": "raknetEmulRpcReceiveBitStream(int rpc, Bitstream bs)",
		"description": "GTA SA  0BF6",
		"prefix": "raknetEmulRpcReceiveBitStream",
		"scope": "source.lua"
	},
	"raknetEmulPacketReceiveBitStream": {
		"body": "raknetEmulPacketReceiveBitStream(int packet, Bitstream bs)",
		"description": "GTA SA  0BF7",
		"prefix": "raknetEmulPacketReceiveBitStream",
		"scope": "source.lua"
	},
	"raknetGetRpcName": {
		"body": "zstring name = raknetGetRpcName(int rpc)",
		"description": "GTA SA  0BF8",
		"prefix": "raknetGetRpcName",
		"scope": "source.lua"
	},
	"raknetGetPacketName": {
		"body": "zstring name = raknetGetPacketName(int packet)",
		"description": "GTA SA  0BF9",
		"prefix": "raknetGetPacketName",
		"scope": "source.lua"
	},
	"setSampfuncsGlobalVar": {
		"body": "bool result = setSampfuncsGlobalVar(zstring var, int value)",
		"description": "GTA SA  0BFC",
		"prefix": "setSampfuncsGlobalVar",
		"scope": "source.lua"
	},
	"getSampfuncsGlobalVar": {
		"body": "bool result, int value = getSampfuncsGlobalVar(zstring var)",
		"description": "GTA SA  0BFD",
		"prefix": "getSampfuncsGlobalVar",
		"scope": "source.lua"
	},
	"renderBegin": {
		"body": "renderBegin(int type)",
		"description": "GTA SA  0C3B",
		"prefix": "renderBegin",
		"scope": "source.lua"
	},
	"renderEnd": {
		"body": "renderEnd()",
		"description": "GTA SA  0C3C",
		"prefix": "renderEnd",
		"scope": "source.lua"
	},
	"renderColor": {
		"body": "renderColor(int color)",
		"description": "GTA SA  0C3D",
		"prefix": "renderColor",
		"scope": "source.lua"
	},
	"renderVertex": {
		"body": "renderVertex(float vX, float vY)",
		"description": "GTA SA  0C3E",
		"prefix": "renderVertex",
		"scope": "source.lua"
	},
	"renderSetTexCoord": {
		"body": "renderSetTexCoord(float posX, float posY)",
		"description": "GTA SA  0C3F",
		"prefix": "renderSetTexCoord",
		"scope": "source.lua"
	},
	"renderBindTexture": {
		"body": "renderBindTexture(int texture)",
		"description": "GTA SA  0C40",
		"prefix": "renderBindTexture",
		"scope": "source.lua"
	},
	"renderGetTextureStruct": {
		"body": "int struct = renderGetTextureStruct(int texture)",
		"description": "GTA SA  0C41",
		"prefix": "renderGetTextureStruct",
		"scope": "source.lua"
	},
	"renderGetTextureSprite": {
		"body": "int sprite = renderGetTextureSprite(int texture)",
		"description": "GTA SA  0C42",
		"prefix": "renderGetTextureSprite",
		"scope": "source.lua"
	},
	"renderGetTextureSize": {
		"body": "int sizeX, int sizeY = renderGetTextureSize(int texture)",
		"description": "GTA SA  0C43",
		"prefix": "renderGetTextureSize",
		"scope": "source.lua"
	},
	"renderSetRenderState": {
		"body": "renderSetRenderState(int type, int state)",
		"description": "GTA SA  0C44",
		"prefix": "renderSetRenderState",
		"scope": "source.lua"
	},
	"sampCreate3dTextEx": {
		"body": "sampCreate3dTextEx(int id, zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)",
		"description": "GTA SA  0C45",
		"prefix": "sampCreate3dTextEx",
		"scope": "source.lua"
	},
	"sampGet3dTextInfoById": {
		"body": "zstring string, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId = sampGet3dTextInfoById(int id)",
		"description": "GTA SA  0C46",
		"prefix": "sampGet3dTextInfoById",
		"scope": "source.lua"
	},
	"sampSet3dTextString": {
		"body": "sampSet3dTextString(int id, zstring text)",
		"description": "GTA SA  0C47",
		"prefix": "sampSet3dTextString",
		"scope": "source.lua"
	},
	"sampTextdrawCreate": {
		"body": "sampTextdrawCreate(int id, zstring text, float posX, float posY)",
		"description": "GTA SA  0C48",
		"prefix": "sampTextdrawCreate",
		"scope": "source.lua"
	},
	"sampTextdrawSetBoxColorAndSize": {
		"body": "sampTextdrawSetBoxColorAndSize(int id, int box, int color, float sizeX, float sizeY)",
		"description": "GTA SA  0C49",
		"prefix": "sampTextdrawSetBoxColorAndSize",
		"scope": "source.lua"
	},
	"sampTextdrawSetAlign": {
		"body": "sampTextdrawSetAlign(int id, int align)",
		"description": "GTA SA  0C4A",
		"prefix": "sampTextdrawSetAlign",
		"scope": "source.lua"
	},
	"sampTextdrawSetProportional": {
		"body": "sampTextdrawSetProportional(int id, int proportional)",
		"description": "GTA SA  0C4B",
		"prefix": "sampTextdrawSetProportional",
		"scope": "source.lua"
	},
	"sampTextdrawSetStyle": {
		"body": "sampTextdrawSetStyle(int id, int style)",
		"description": "GTA SA  0C4C",
		"prefix": "sampTextdrawSetStyle",
		"scope": "source.lua"
	},
	"sampTextdrawSetShadow": {
		"body": "sampTextdrawSetShadow(int id, int shadow, int color)",
		"description": "GTA SA  0C4D",
		"prefix": "sampTextdrawSetShadow",
		"scope": "source.lua"
	},
	"sampTextdrawSetOutlineColor": {
		"body": "sampTextdrawSetOutlineColor(int id, int outline, int color)",
		"description": "GTA SA  0C4E",
		"prefix": "sampTextdrawSetOutlineColor",
		"scope": "source.lua"
	},
	"sampTextdrawSetModelRotationZoomVehColor": {
		"body": "sampTextdrawSetModelRotationZoomVehColor(int id, int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2)",
		"description": "GTA SA  0C4F",
		"prefix": "sampTextdrawSetModelRotationZoomVehColor",
		"scope": "source.lua"
	},
	"sampTextdrawSetString": {
		"body": "sampTextdrawSetString(int id, zstring text)",
		"description": "GTA SA  0C50",
		"prefix": "sampTextdrawSetString",
		"scope": "source.lua"
	},
	"sampTextdrawSetPos": {
		"body": "sampTextdrawSetPos(int id, float posX, float posY)",
		"description": "GTA SA  0C51",
		"prefix": "sampTextdrawSetPos",
		"scope": "source.lua"
	},
	"sampTextdrawSetLetterSizeAndColor": {
		"body": "sampTextdrawSetLetterSizeAndColor(int id, float letSizeX, float letSizeY, int color)",
		"description": "GTA SA  0C52",
		"prefix": "sampTextdrawSetLetterSizeAndColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetBoxEnabledColorAndSize": {
		"body": "int box, int color, float sizeX, float sizeY = sampTextdrawGetBoxEnabledColorAndSize(int id)",
		"description": "GTA SA  0C53",
		"prefix": "sampTextdrawGetBoxEnabledColorAndSize",
		"scope": "source.lua"
	},
	"sampTextdrawGetAlign": {
		"body": "int align = sampTextdrawGetAlign(int id)",
		"description": "GTA SA  0C54",
		"prefix": "sampTextdrawGetAlign",
		"scope": "source.lua"
	},
	"sampTextdrawGetProportional": {
		"body": "int prop = sampTextdrawGetProportional(int id)",
		"description": "GTA SA  0C55",
		"prefix": "sampTextdrawGetProportional",
		"scope": "source.lua"
	},
	"sampTextdrawGetStyle": {
		"body": "int style = sampTextdrawGetStyle(int id)",
		"description": "GTA SA  0C56",
		"prefix": "sampTextdrawGetStyle",
		"scope": "source.lua"
	},
	"sampTextdrawGetShadowColor": {
		"body": "int shadow, int color = sampTextdrawGetShadowColor(int id)",
		"description": "GTA SA  0C57",
		"prefix": "sampTextdrawGetShadowColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetOutlineColor": {
		"body": "int outline, int color = sampTextdrawGetOutlineColor(int id)",
		"description": "GTA SA  0C58",
		"prefix": "sampTextdrawGetOutlineColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetModelRotationZoomVehColor": {
		"body": "int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2 = sampTextdrawGetModelRotationZoomVehColor(int id)",
		"description": "GTA SA  0C59",
		"prefix": "sampTextdrawGetModelRotationZoomVehColor",
		"scope": "source.lua"
	},
	"sampTextdrawGetString": {
		"body": "zstring text = sampTextdrawGetString(int id)",
		"description": "GTA SA  0C5A",
		"prefix": "sampTextdrawGetString",
		"scope": "source.lua"
	},
	"sampTextdrawGetPos": {
		"body": "float posX, float posY = sampTextdrawGetPos(int id)",
		"description": "GTA SA  0C5B",
		"prefix": "sampTextdrawGetPos",
		"scope": "source.lua"
	},
	"sampTextdrawGetLetterSizeAndColor": {
		"body": "float letSizeX, float letSizeY, int color = sampTextdrawGetLetterSizeAndColor(int id)",
		"description": "GTA SA  0C5C",
		"prefix": "sampTextdrawGetLetterSizeAndColor",
		"scope": "source.lua"
	},
	"sampTextdrawIsExists": {
		"body": "bool result = sampTextdrawIsExists(int id)",
		"description": "GTA SA  0C5D",
		"prefix": "sampTextdrawIsExists",
		"scope": "source.lua"
	},
	"sampTextdrawDelete": {
		"body": "sampTextdrawDelete(int id)",
		"description": "GTA SA  0C5E",
		"prefix": "sampTextdrawDelete",
		"scope": "source.lua"
	},
	"isSampfuncsGlobalVarDefined": {
		"body": "bool result = isSampfuncsGlobalVarDefined(zstring var)",
		"description": "GTA SA  0C5F",
		"prefix": "isSampfuncsGlobalVarDefined",
		"scope": "source.lua"
	},
	"getSampfuncsGlobalVarAccessForThread": {
		"body": "int read, int write = getSampfuncsGlobalVarAccessForThread(zstring var, int thread)",
		"description": "GTA SA  0C61",
		"prefix": "getSampfuncsGlobalVarAccessForThread",
		"scope": "source.lua"
	},
	"runSampfuncsConsoleCommand": {
		"body": "runSampfuncsConsoleCommand(zstring cmd)",
		"description": "GTA SA  0C62",
		"prefix": "runSampfuncsConsoleCommand",
		"scope": "source.lua"
	},
	"sampfuncsRegisterConsoleCommand": {
		"body": "bool result = sampfuncsRegisterConsoleCommand(zstring cmd, function func)",
		"description": "GTA SA  0C63",
		"prefix": "sampfuncsRegisterConsoleCommand",
		"scope": "source.lua"
	},
	"sampfuncsUnregisterConsoleCommand": {
		"body": "bool result = sampfuncsUnregisterConsoleCommand(zstring cmd)",
		"description": "GTA SA  0C64",
		"prefix": "sampfuncsUnregisterConsoleCommand",
		"scope": "source.lua"
	},
	"createScmThreadAtPointer": {
		"body": "int thread = createScmThreadAtPointer(int pointer, table args)",
		"description": "GTA SA  0C6B",
		"prefix": "createScmThreadAtPointer",
		"scope": "source.lua"
	},
	"setScmThreadLocalVar": {
		"body": "setScmThreadLocalVar(int thread, int var, int value)",
		"description": "GTA SA  0C6C",
		"prefix": "setScmThreadLocalVar",
		"scope": "source.lua"
	},
	"getScmThreadLocalVar": {
		"body": "int value = getScmThreadLocalVar(int thread, int var)",
		"description": "GTA SA  0C6D",
		"prefix": "getScmThreadLocalVar",
		"scope": "source.lua"
	},
	"destroyScmThread": {
		"body": "destroyScmThread(int thread)",
		"description": "GTA SA  0C6E",
		"prefix": "destroyScmThread",
		"scope": "source.lua"
	},
	"restartScmThread": {
		"body": "restartScmThread(int thread, table args)",
		"description": "GTA SA  0C6F",
		"prefix": "restartScmThread",
		"scope": "source.lua"
	},
	"isSampfuncsConsoleActive": {
		"body": "bool result = isSampfuncsConsoleActive()",
		"description": "GTA SA  0C7E",
		"prefix": "isSampfuncsConsoleActive",
		"scope": "source.lua"
	},
	"sampSetClientCommandDescription": {
		"body": "sampSetClientCommandDescription(zstring cmd, zstring text)",
		"description": "GTA SA  0C7F",
		"prefix": "sampSetClientCommandDescription",
		"scope": "source.lua"
	},
	"setSampfuncsConsoleCommandDescription": {
		"body": "setSampfuncsConsoleCommandDescription(zstring cmd, zstring text)",
		"description": "GTA SA  0C80",
		"prefix": "setSampfuncsConsoleCommandDescription",
		"scope": "source.lua"
	},
	"sampForceVehicleSync": {
		"body": "sampForceVehicleSync(int id)",
		"description": "GTA SA  0C81",
		"prefix": "sampForceVehicleSync",
		"scope": "source.lua"
	},
	"sampForceUnoccupiedSyncSeatId": {
		"body": "sampForceUnoccupiedSyncSeatId(int id, int seatId)",
		"description": "GTA SA  0C82",
		"prefix": "sampForceUnoccupiedSyncSeatId",
		"scope": "source.lua"
	},
	"sampForceOnfootSync": {
		"body": "sampForceOnfootSync()",
		"description": "GTA SA  0C83",
		"prefix": "sampForceOnfootSync",
		"scope": "source.lua"
	},
	"sampForceAimSync": {
		"body": "sampForceAimSync()",
		"description": "GTA SA  0C84",
		"prefix": "sampForceAimSync",
		"scope": "source.lua"
	},
	"sampForceTrailerSync": {
		"body": "sampForceTrailerSync(int id)",
		"description": "GTA SA  0C85",
		"prefix": "sampForceTrailerSync",
		"scope": "source.lua"
	},
	"sampForcePassengerSyncSeatId": {
		"body": "sampForcePassengerSyncSeatId(int id, int seatId)",
		"description": "GTA SA  0C86",
		"prefix": "sampForcePassengerSyncSeatId",
		"scope": "source.lua"
	},
	"sampForceStatsSync": {
		"body": "sampForceStatsSync()",
		"description": "GTA SA  0C87",
		"prefix": "sampForceStatsSync",
		"scope": "source.lua"
	},
	"sampForceWeaponsSync": {
		"body": "sampForceWeaponsSync()",
		"description": "GTA SA  0C88",
		"prefix": "sampForceWeaponsSync",
		"scope": "source.lua"
	},
	"sampGetMaxPlayerId": {
		"body": "int id = sampGetMaxPlayerId(bool streamed)",
		"description": "GTA SA  0C8A",
		"prefix": "sampGetMaxPlayerId",
		"scope": "source.lua"
	},
	"sampGetPlayerCount": {
		"body": "int count = sampGetPlayerCount(bool streamed)",
		"description": "GTA SA  0C8B",
		"prefix": "sampGetPlayerCount",
		"scope": "source.lua"
	},
	"renderLoadTextureFromFileInMemory": {
		"body": "bool result, int texture = renderLoadTextureFromFileInMemory(int pointer, int size)",
		"description": "GTA SA  0C8C",
		"prefix": "renderLoadTextureFromFileInMemory",
		"scope": "source.lua"
	},
	"sampProcessChatInput": {
		"body": "sampProcessChatInput(zstring text)",
		"description": "GTA SA  0C8F",
		"prefix": "sampProcessChatInput",
		"scope": "source.lua"
	},
	"sampIsChatCommandDefined": {
		"body": "bool result = sampIsChatCommandDefined(zstring cmd)",
		"description": "GTA SA  0C90",
		"prefix": "sampIsChatCommandDefined",
		"scope": "source.lua"
	},
	"isSampfuncsConsoleCommandDefined": {
		"body": "bool result = isSampfuncsConsoleCommandDefined(zstring cmd)",
		"description": "GTA SA  0C91",
		"prefix": "isSampfuncsConsoleCommandDefined",
		"scope": "source.lua"
	},
	"getCleoLibraryVersion": {
		"body": "int version = getCleoLibraryVersion()",
		"description": "GTA SA  0C92",
		"prefix": "getCleoLibraryVersion",
		"scope": "source.lua"
	},
	"getAllObjects": {
		"body": "table Objects = getAllObjects()",
		"description": "GTA SA ",
		"prefix": "getAllObjects",
		"scope": "source.lua"
	},
	"getAllChars": {
		"body": "table Chars = getAllChars()",
		"description": "GTA SA ",
		"prefix": "getAllChars",
		"scope": "source.lua"
	},
	"getAllVehicles": {
		"body": "table Vehicles = getAllVehicles()",
		"description": "GTA SA ",
		"prefix": "getAllVehicles",
		"scope": "source.lua"
	},
	"script_version_number": {
		"body": "script_version_number(int version)",
		"description": "GTA SA  задаёт числовую версию скрипта, предназначен преимущественно для системы проверки обновлений",
		"prefix": "script_version_number",
		"scope": "source.lua"
	},
	"script_version": {
		"body": "script_version(string version)",
		"description": "GTA SA  задаёт текстовую версию скрипта",
		"prefix": "script_version",
		"scope": "source.lua"
	},
	"script_name": {
		"body": "script_name(string name)",
		"description": "GTA SA  задаёт название скрипта",
		"prefix": "script_name",
		"scope": "source.lua"
	},
	"script_description": {
		"body": "script_description(string description)",
		"description": "GTA SA  задаёт описание скрипта",
		"prefix": "script_description",
		"scope": "source.lua"
	},
	"script_authors": {
		"body": "script_authors(string author, ...)",
		"description": "GTA SA  задаёт список авторов разработчиков",
		"prefix": "script_authors",
		"scope": "source.lua"
	},
	"script_author": {
		"body": "script_author(string author)",
		"description": "GTA SA  псевдоним функции 'script_authors', отличается только более подходящим названием для указания одного автора",
		"prefix": "script_author",
		"scope": "source.lua"
	},
	"script_dependencies": {
		"body": "script_dependencies(string name, ...)",
		"description": "GTA SA  задаёт зависимости скрипта, предназначен для вывода. в будущем получит дополнительную функциональность",
		"prefix": "script_dependencies",
		"scope": "source.lua"
	},
	"script_moonloader": {
		"body": "script_moonloader(int version)",
		"description": "GTA SA  задаёт минимальную требуемую версию MoonLoader, выводит сообщение об ошибке, если версия не соответствует не прекращает работу скрипта",
		"prefix": "script_moonloader",
		"scope": "source.lua"
	},
	"thisScript": {
		"body": "LuaScript s = thisScript()",
		"description": "GTA SA  возвращает объект скрипта из которого была вызвана функция",
		"prefix": "thisScript",
		"scope": "source.lua"
	},
	"wait": {
		"body": "wait(int time)",
		"description": "GTA SA  приостанавливает выполнение основного потока скрипта на заданное время в миллисекундах",
		"prefix": "wait",
		"scope": "source.lua"
	},
	"print": {
		"body": "print(any value, ...)",
		"description": "GTA SA  перезаписанная стандартная функция 'print', выводит текст в файл moonloader.log и вызывает событие 'onScriptMessage'",
		"prefix": "print",
		"scope": "source.lua"
	},
	"getGameGlobal": {
		"body": "int value = getGameGlobal(int index)",
		"description": "GTA SA  возвращает значение глобальной переменной игры по её индексу",
		"prefix": "getGameGlobal",
		"scope": "source.lua"
	},
	"setGameGlobal": {
		"body": "setGameGlobal(int index, int value)",
		"description": "GTA SA  задаёт значение глобальной переменной игры",
		"prefix": "setGameGlobal",
		"scope": "source.lua"
	},
	"getGameGlobalPtr": {
		"body": "int ptr = getGameGlobalPtr(int index)",
		"description": "GTA SA  возвращает адрес глобальной переменной игры по индексу",
		"prefix": "getGameGlobalPtr",
		"scope": "source.lua"
	},
	"isSampfuncsLoaded": {
		"body": "bool loaded = isSampfuncsLoaded()",
		"description": "GTA SA  проверяет плагин SAMPFUNCS на подключенность к игре",
		"prefix": "isSampfuncsLoaded",
		"scope": "source.lua"
	},
	"isCleoLoaded": {
		"body": "bool loaded = isCleoLoaded()",
		"description": "GTA SA  проверяет плагин CLEO на подключенность к игре",
		"prefix": "isCleoLoaded",
		"scope": "source.lua"
	},
	"isSampLoaded": {
		"body": "bool loaded = isSampLoaded()",
		"description": "GTA SA  проверяет, запущен ли SA:MP",
		"prefix": "isSampLoaded",
		"scope": "source.lua"
	},
	"isKeyDown": {
		"body": "bool state = isKeyDown(int keyId)",
		"description": "GTA SA  возвращает статус клавиши по её виртуальному идентификатору  нажата/не нажата",
		"prefix": "isKeyDown",
		"scope": "source.lua"
	},
	"reloadScripts": {
		"body": "reloadScripts()",
		"description": "GTA SA  выгружает все загруженные скрипты и загружает заново из рабочей директории, учитывая добавленные и убранные",
		"prefix": "reloadScripts",
		"scope": "source.lua"
	},
	"isOpcodesAvailable": {
		"body": "bool status = isOpcodesAvailable()",
		"description": "GTA SA  проверяет, доступны ли функции опкодов для использования. на этапе выполнения подпрограммы 'main' они гарантированно доступны, так что проверка не требуется",
		"prefix": "isOpcodesAvailable",
		"scope": "source.lua"
	},
	"representFloatAsInt": {
		"body": "int i = representFloatAsInt(float f)",
		"description": "GTA SA  представляет значение дробного числа как целое. важно знать, что эта функция не предназначена для преобразования типа и используется исключительно в функциях, производящих непосредственные манипуляции с памятью процесса",
		"prefix": "representFloatAsInt",
		"scope": "source.lua"
	},
	"representIntAsFloat": {
		"body": "float i = representIntAsFloat(int i)",
		"description": "GTA SA  представляет значение целого числа как дробное. ^",
		"prefix": "representIntAsFloat",
		"scope": "source.lua"
	},
	"setGxtEntry": {
		"body": "setGxtEntry(string key, string text)",
		"description": "GTA SA  создаёт или перезаписывает существующую GXTзапись для последующего использования во многих функциях игры, выводящих текстовую информацию",
		"prefix": "setGxtEntry",
		"scope": "source.lua"
	},
	"setFreeGxtEntry": {
		"body": "string key = setFreeGxtEntry(string text)",
		"description": "GTA SA  создаёт новую !",
		"prefix": "setFreeGxtEntry",
		"scope": "source.lua"
	},
	"getFreeGxtKey": {
		"body": "string key = getFreeGxtKey()",
		"description": "GTA SA  генерирует и возвращает новый !",
		"prefix": "getFreeGxtKey",
		"scope": "source.lua"
	},
	"getGxtText": {
		"body": "string text = getGxtText(string key)",
		"description": "GTA SA  возвращает текст GXTзаписи по ключу, поиск производится включая записи игры. возвращает пустую строку, если запись не существует",
		"prefix": "getGxtText",
		"scope": "source.lua"
	},
	"clearGxtEntry": {
		"body": "clearGxtEntry(string key)",
		"description": "GTA SA  удаляет GXTзапись по ключу, не затрагивает игровые записи",
		"prefix": "clearGxtEntry",
		"scope": "source.lua"
	},
	"isPauseMenuActive": {
		"body": "bool active = isPauseMenuActive()",
		"description": "GTA SA  проверяет, открыто ли игровое меню паузы",
		"prefix": "isPauseMenuActive",
		"scope": "source.lua"
	},
	"isGameWindowForeground": {
		"body": "bool foreground = isGameWindowForeground()",
		"description": "GTA SA  проверяет, находится ли окно игры на переднем плане",
		"prefix": "isGameWindowForeground",
		"scope": "source.lua"
	},
	"getGameVersion": {
		"body": "int version = getGameVersion()",
		"description": "GTA SA  возвращает индекс версии игры",
		"prefix": "getGameVersion",
		"scope": "source.lua"
	},
	"getMoonloaderVersion": {
		"body": "int version = getMoonloaderVersion()",
		"description": "GTA SA  возвращает версию MoonLoader",
		"prefix": "getMoonloaderVersion",
		"scope": "source.lua"
	},
	"localClock": {
		"body": "double time = localClock()",
		"description": "GTA SA  возвращает значение внутреннего таймера в формате 'секунды.миллисекунды'. в отличие от системного таймера os.clock",
		"prefix": "localClock",
		"scope": "source.lua"
	},
	"freeTextures": {
		"body": "freeTextures()",
		"description": "GTA SA  освобождает все загруженные функцией 'loadSprite' текстуры, принадлежащие вызвавшему скрипту",
		"prefix": "freeTextures",
		"scope": "source.lua"
	},
	"getWorkingDirectory": {
		"body": "string path = getWorkingDirectory()",
		"description": "GTA SA  возвращает полный путь к рабочей директории MoonLoader'а",
		"prefix": "getWorkingDirectory",
		"scope": "source.lua"
	},
	"getGameDirectory": {
		"body": "string path = getGameDirectory()",
		"description": "GTA SA  возвращает полный путь к директории игры",
		"prefix": "getGameDirectory",
		"scope": "source.lua"
	},
	"useRenderCommands": {
		"body": "useRenderCommands(bool enable)",
		"description": "GTA SA  аналог опкода 03F0. отличается тем, что затрагивает только рендер luaскриптами и не влияет на рендер самой игры",
		"prefix": "useRenderCommands",
		"scope": "source.lua"
	},
	"writeMemory": {
		"body": "writeMemory(int address, int size, int value, bool virtualProtect)",
		"description": "GTA SA  записывает значение в память процесса по указанному адресу. для записи дробного нужно предварительно конвертировать его в целое функцией 'representFloatAsInt'. аналог опкода CLEO 0A8C",
		"prefix": "writeMemory",
		"scope": "source.lua"
	},
	"readMemory": {
		"body": "int value = readMemory(int address, int size, bool virtualProtect)",
		"description": "GTA SA  читает значение из памяти процесса по указанному адресу. для чтения дробного нужно конвертировать результирующее значение функцией 'representIntAsFloat'. аналог опкода CLEO 0A8D",
		"prefix": "readMemory",
		"scope": "source.lua"
	},
	"loadDynamicLibrary": {
		"body": "bool result, int handle = loadDynamicLibrary(string library)",
		"description": "GTA SA  загружает динамическую библиотеку по названию и возвращает её хендл адрес",
		"prefix": "loadDynamicLibrary",
		"scope": "source.lua"
	},
	"freeDynamicLibrary": {
		"body": "freeDynamicLibrary(int handle)",
		"description": "GTA SA  выгружает динамическую библиотеку по её хендлу. аналог опкода CLEO 0AA3",
		"prefix": "freeDynamicLibrary",
		"scope": "source.lua"
	},
	"getDynamicLibraryProcedure": {
		"body": "bool result, int proc = getDynamicLibraryProcedure(string proc, int handle)",
		"description": "GTA SA  получает адрес экспортируемой функции по названию и хендлу библиотеки. аналог опкода CLEO 0AA4",
		"prefix": "getDynamicLibraryProcedure",
		"scope": "source.lua"
	},
	"doesFileExist": {
		"body": "bool result = doesFileExist(string file)",
		"description": "GTA SA  проверяет файл на существование. аналог опкода CLEO 0AAB",
		"prefix": "doesFileExist",
		"scope": "source.lua"
	},
	"doesDirectoryExist": {
		"body": "bool result = doesDirectoryExist(string directory)",
		"description": "GTA SA  проверяет директорию на существование. аналог опкода CLEO 0AE4",
		"prefix": "doesDirectoryExist",
		"scope": "source.lua"
	},
	"createDirectory": {
		"body": "bool result = createDirectory(string directory)",
		"description": "GTA SA  создаёт иерархию директорий для указанного пути. аналог опкода CLEO 0AE5",
		"prefix": "createDirectory",
		"scope": "source.lua"
	},
	"popFloat": {
		"body": "float val = popFloat()",
		"description": "GTA SA  извлекает верхнее значение из стека FPU и возвращает его. аналог опкода CLEO 0AE9",
		"prefix": "popFloat",
		"scope": "source.lua"
	},
	"isGameVersionOriginal": {
		"body": "bool result = isGameVersionOriginal()",
		"description": "GTA SA ",
		"prefix": "isGameVersionOriginal",
		"scope": "source.lua"
	},
	"allocateMemory": {
		"body": "int memory = allocateMemory(int size)",
		"description": "GTA SA ",
		"prefix": "allocateMemory",
		"scope": "source.lua"
	},
	"freeMemory": {
		"body": "freeMemory(int memory)",
		"description": "GTA SA ",
		"prefix": "freeMemory",
		"scope": "source.lua"
	},
	"findFirstFile": {
		"body": "Filesearch handle, string name = findFirstFile(string mask)",
		"description": "GTA SA ",
		"prefix": "findFirstFile",
		"scope": "source.lua"
	},
	"findNextFile": {
		"body": "string file = findNextFile(Filesearch handle)",
		"description": "GTA SA ",
		"prefix": "findNextFile",
		"scope": "source.lua"
	},
	"findClose": {
		"body": "findClose(Filesearch handle)",
		"description": "GTA SA ",
		"prefix": "findClose",
		"scope": "source.lua"
	},
	"findAllRandomCharsInSphere": {
		"body": "bool result, Ped ped = findAllRandomCharsInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipDead)",
		"description": "GTA SA ",
		"prefix": "findAllRandomCharsInSphere",
		"scope": "source.lua"
	},
	"findAllRandomVehiclesInSphere": {
		"body": "bool result, Vehicle car = findAllRandomVehiclesInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipWrecked)",
		"description": "GTA SA ",
		"prefix": "findAllRandomVehiclesInSphere",
		"scope": "source.lua"
	},
	"findAllRandomObjectsInSphere": {
		"body": "bool result, Object object = findAllRandomObjectsInSphere(float posX, float posY, float posZ, float radius, bool findNext)",
		"description": "GTA SA ",
		"prefix": "findAllRandomObjectsInSphere",
		"scope": "source.lua"
	},
	"getCharPointer": {
		"body": "int ptr = getCharPointer(Ped ped)",
		"description": "GTA SA ",
		"prefix": "getCharPointer",
		"scope": "source.lua"
	},
	"getCarPointer": {
		"body": "int ptr = getCarPointer(Vehicle car)",
		"description": "GTA SA ",
		"prefix": "getCarPointer",
		"scope": "source.lua"
	},
	"getObjectPointer": {
		"body": "int struct = getObjectPointer(Object object)",
		"description": "GTA SA ",
		"prefix": "getObjectPointer",
		"scope": "source.lua"
	},
	"callFunction": {
		"body": "int returnValue = callFunction(int address, int params, int pop, ...)",
		"description": "GTA SA ",
		"prefix": "callFunction",
		"scope": "source.lua"
	},
	"callMethod": {
		"body": "int returnValue = callMethod(int address, int struct, int params, int pop, ...)",
		"description": "GTA SA ",
		"prefix": "callMethod",
		"scope": "source.lua"
	},
	"storeClosestEntities": {
		"body": "Vehicle car, Ped ped = storeClosestEntities(Ped ped)",
		"description": "GTA SA ",
		"prefix": "storeClosestEntities",
		"scope": "source.lua"
	},
	"switchCarEngine": {
		"body": "switchCarEngine(Vehicle car, bool state)",
		"description": "GTA SA ",
		"prefix": "switchCarEngine",
		"scope": "source.lua"
	},
	"getTargetBlipCoordinates": {
		"body": "bool result, float posX, float posY, float posZ = getTargetBlipCoordinates()",
		"description": "GTA SA ",
		"prefix": "getTargetBlipCoordinates",
		"scope": "source.lua"
	},
	"getCarNumberOfGears": {
		"body": "int gears = getCarNumberOfGears(Vehicle car)",
		"description": "GTA SA ",
		"prefix": "getCarNumberOfGears",
		"scope": "source.lua"
	},
	"getCarCurrentGear": {
		"body": "int gear = getCarCurrentGear(Vehicle car)",
		"description": "GTA SA ",
		"prefix": "getCarCurrentGear",
		"scope": "source.lua"
	},
	"isCarSirenOn": {
		"body": "bool state = isCarSirenOn(Vehicle car)",
		"description": "GTA SA ",
		"prefix": "isCarSirenOn",
		"scope": "source.lua"
	},
	"isCarEngineOn": {
		"body": "bool state = isCarEngineOn(Vehicle car)",
		"description": "GTA SA ",
		"prefix": "isCarEngineOn",
		"scope": "source.lua"
	},
	"printHelpString": {
		"body": "printHelpString(string text)",
		"description": "GTA SA ",
		"prefix": "printHelpString",
		"scope": "source.lua"
	},
	"printStyledString": {
		"body": "printStyledString(string text, int time, int style)",
		"description": "GTA SA ",
		"prefix": "printStyledString",
		"scope": "source.lua"
	},
	"printString": {
		"body": "printString(string text, int time)",
		"description": "GTA SA ",
		"prefix": "printString",
		"scope": "source.lua"
	},
	"printStringNow": {
		"body": "printStringNow(string text, int time)",
		"description": "GTA SA ",
		"prefix": "printStringNow",
		"scope": "source.lua"
	},
	"getCharPlayerIsTargeting": {
		"body": "bool result, Ped ped = getCharPlayerIsTargeting(Player player)",
		"description": "GTA SA ",
		"prefix": "getCharPlayerIsTargeting",
		"scope": "source.lua"
	},
	"getNameOfVehicleModel": {
		"body": "GxtString name = getNameOfVehicleModel(Model modelId)",
		"description": "GTA SA ",
		"prefix": "getNameOfVehicleModel",
		"scope": "source.lua"
	},
	"testCheat": {
		"body": "bool result = testCheat(string text)",
		"description": "GTA SA ",
		"prefix": "testCheat",
		"scope": "source.lua"
	},
	"spawnVehicleByCheating": {
		"body": "bool result = spawnVehicleByCheating(Model modelId)",
		"description": "GTA SA ",
		"prefix": "spawnVehicleByCheating",
		"scope": "source.lua"
	},
	"getCharPointerHandle": {
		"body": "Ped handle = getCharPointerHandle(int ptr)",
		"description": "GTA SA ",
		"prefix": "getCharPointerHandle",
		"scope": "source.lua"
	},
	"getVehiclePointerHandle": {
		"body": "Vehicle handle = getVehiclePointerHandle(int ptr)",
		"description": "GTA SA ",
		"prefix": "getVehiclePointerHandle",
		"scope": "source.lua"
	},
	"getObjectPointerHandle": {
		"body": "Object handle = getObjectPointerHandle(int ptr)",
		"description": "GTA SA ",
		"prefix": "getObjectPointerHandle",
		"scope": "source.lua"
	},
	"processLineOfSight": {
		"body": "bool result, table colPoint = processLineOfSight(float originX, float originY, float originZ, float targetX, float targetY, float targetZ, [bool checkSolid=true], [bool car=false], [bool ped=false], [bool object=false], [bool particle=false], [bool seeThrough=false], [bool ignoreSomeObjects=false], [bool shootThrough=false])",
		"description": "GTA SA ",
		"prefix": "processLineOfSight",
		"scope": "source.lua"
	},
	"setClipboardText": {
		"body": "bool result = setClipboardText(string text)",
		"description": "GTA SA ",
		"prefix": "setClipboardText",
		"scope": "source.lua"
	},
	"getClipboardText": {
		"body": "string text = getClipboardText()",
		"description": "GTA SA ",
		"prefix": "getClipboardText",
		"scope": "source.lua"
	},
	"getStructElement": {
		"body": "int value = getStructElement(int struct, int offset, int size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "getStructElement",
		"scope": "source.lua"
	},
	"setStructElement": {
		"body": "setStructElement(int struct, int offset, int size, int value, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "setStructElement",
		"scope": "source.lua"
	},
	"convertMatrixToQuaternion": {
		"body": "float w, float x, float y, float z = convertMatrixToQuaternion(float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ)",
		"description": "GTA SA ",
		"prefix": "convertMatrixToQuaternion",
		"scope": "source.lua"
	},
	"convertQuaternionToMatrix": {
		"body": "float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ = convertQuaternionToMatrix(float w, float x, float y, float z)",
		"description": "GTA SA ",
		"prefix": "convertQuaternionToMatrix",
		"scope": "source.lua"
	},
	"convert3DCoordsToScreen": {
		"body": "float wposX, float wposY = convert3DCoordsToScreen(float posX, float posY, float posZ)",
		"description": "GTA SA ",
		"prefix": "convert3DCoordsToScreen",
		"scope": "source.lua"
	},
	"setGameKeyState": {
		"body": "setGameKeyState(int key, int state)",
		"description": "GTA SA ",
		"prefix": "setGameKeyState",
		"scope": "source.lua"
	},
	"getCursorPos": {
		"body": "int posX, int posY = getCursorPos()",
		"description": "GTA SA ",
		"prefix": "getCursorPos",
		"scope": "source.lua"
	},
	"convertWindowScreenCoordsToGameScreenCoords": {
		"body": "float gposX, float gposY = convertWindowScreenCoordsToGameScreenCoords(float wposX, float wposY)",
		"description": "GTA SA ",
		"prefix": "convertWindowScreenCoordsToGameScreenCoords",
		"scope": "source.lua"
	},
	"convertGameScreenCoordsToWindowScreenCoords": {
		"body": "float wposX, float wposY = convertGameScreenCoordsToWindowScreenCoords(float gposX, float gposY)",
		"description": "GTA SA ",
		"prefix": "convertGameScreenCoordsToWindowScreenCoords",
		"scope": "source.lua"
	},
	"convertScreenCoordsToWorld3D": {
		"body": "float posX, float posY, float posZ = convertScreenCoordsToWorld3D(float posX, float posY, float depth)",
		"description": "GTA SA ",
		"prefix": "convertScreenCoordsToWorld3D",
		"scope": "source.lua"
	},
	"getModuleHandle": {
		"body": "int handle = getModuleHandle(string module)",
		"description": "GTA SA ",
		"prefix": "getModuleHandle",
		"scope": "source.lua"
	},
	"getModuleProcAddress": {
		"body": "int address = getModuleProcAddress(string module, string proc)",
		"description": "GTA SA ",
		"prefix": "getModuleProcAddress",
		"scope": "source.lua"
	},
	"setVirtualKeyDown": {
		"body": "setVirtualKeyDown(int vkey, bool down)",
		"description": "GTA SA ",
		"prefix": "setVirtualKeyDown",
		"scope": "source.lua"
	},
	"setCharKeyDown": {
		"body": "setCharKeyDown(int ckey, bool down)",
		"description": "GTA SA ",
		"prefix": "setCharKeyDown",
		"scope": "source.lua"
	},
	"downloadUrlToFile": {
		"body": "int index = downloadUrlToFile(string url, string file, function statusCallback)",
		"description": "GTA SA ",
		"prefix": "downloadUrlToFile",
		"scope": "source.lua"
	},
	"isKeyJustPressed": {
		"body": "bool state = isKeyJustPressed(int key)",
		"description": "GTA SA ",
		"prefix": "isKeyJustPressed",
		"scope": "source.lua"
	},
	"convert3DCoordsToScreenEx": {
		"body": "bool result, float x, float y, float z, float w, float h = convert3DCoordsToScreenEx(float posX, float posY, float posZ, [bool checkMin=false], [bool checkMax=false])",
		"description": "GTA SA ",
		"prefix": "convert3DCoordsToScreenEx",
		"scope": "source.lua"
	},
	"getStructFloatElement": {
		"body": "float value = getStructFloatElement(int struct, int offset, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "getStructFloatElement",
		"scope": "source.lua"
	},
	"setStructFloatElement": {
		"body": "setStructFloatElement(int struct, int offset, float value, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "setStructFloatElement",
		"scope": "source.lua"
	},
	"wasKeyPressed": {
		"body": "bool state = wasKeyPressed(int key)",
		"description": "GTA SA ",
		"prefix": "wasKeyPressed",
		"scope": "source.lua"
	},
	"wasKeyReleased": {
		"body": "bool state = wasKeyReleased(int key)",
		"description": "GTA SA ",
		"prefix": "wasKeyReleased",
		"scope": "source.lua"
	},
	"getMousewheelDelta": {
		"body": "int delta = getMousewheelDelta()",
		"description": "GTA SA ",
		"prefix": "getMousewheelDelta",
		"scope": "source.lua"
	},
	"consumeWindowMessage": {
		"body": "consumeWindowMessage([bool game=true], [bool scripts=true])",
		"description": "GTA SA ",
		"prefix": "consumeWindowMessage",
		"scope": "source.lua"
	},
	"addEventHandler": {
		"body": "addEventHandler(string eventName, function callback)",
		"description": "GTA SA ",
		"prefix": "addEventHandler",
		"scope": "source.lua"
	},
	"isGamePaused": {
		"body": "bool paused = isGamePaused()",
		"description": "GTA SA ",
		"prefix": "isGamePaused",
		"scope": "source.lua"
	},
	"gameClock": {
		"body": "double time = gameClock()",
		"description": "GTA SA ",
		"prefix": "gameClock",
		"scope": "source.lua"
	},
	"script_properties": {
		"body": "script_properties(string property, ...)",
		"description": "GTA SA ",
		"prefix": "script_properties",
		"scope": "source.lua"
	},
	"script_url": {
		"body": "script_url(string url)",
		"description": "GTA SA ",
		"prefix": "script_url",
		"scope": "source.lua"
	},
	"import": {
		"body": "any imports, string error = import(string filename)",
		"description": "GTA SA ",
		"prefix": "import",
		"scope": "source.lua"
	},
	"encodeJson": {
		"body": "string json = encodeJson(table data)",
		"description": "GTA SA ",
		"prefix": "encodeJson",
		"scope": "source.lua"
	},
	"decodeJson": {
		"body": "table data = decodeJson(string json)",
		"description": "GTA SA ",
		"prefix": "decodeJson",
		"scope": "source.lua"
	},
	"showCursor": {
		"body": "showCursor(bool show, [bool lockControls])",
		"description": "GTA SA ",
		"prefix": "showCursor",
		"scope": "source.lua"
	},
	"lockPlayerControl": {
		"body": "lockPlayerControl(bool lock)",
		"description": "GTA SA ",
		"prefix": "lockPlayerControl",
		"scope": "source.lua"
	},
	"isPlayerControlLocked": {
		"body": "bool locked = isPlayerControlLocked()",
		"description": "GTA SA ",
		"prefix": "isPlayerControlLocked",
		"scope": "source.lua"
	},
	"setBlipCoordinates": {
		"body": "bool result = setBlipCoordinates(Marker blip, float x, float y, float z)",
		"description": "GTA SA ",
		"prefix": "setBlipCoordinates",
		"scope": "source.lua"
	},
	"setTargetBlipCoordinates": {
		"body": "bool result = setTargetBlipCoordinates(float x, float y, float z)",
		"description": "GTA SA ",
		"prefix": "setTargetBlipCoordinates",
		"scope": "source.lua"
	},
	"placeWaypoint": {
		"body": "bool result = placeWaypoint(float x, float y, float z)",
		"description": "GTA SA ",
		"prefix": "placeWaypoint",
		"scope": "source.lua"
	},
	"removeWaypoint": {
		"body": "bool result = removeWaypoint()",
		"description": "GTA SA ",
		"prefix": "removeWaypoint",
		"scope": "source.lua"
	},
	"getFolderPath": {
		"body": "string path = getFolderPath(int csidl)",
		"description": "GTA SA ",
		"prefix": "getFolderPath",
		"scope": "source.lua"
	},
	"getTimeStepValue": {
		"body": "float value = getTimeStepValue()",
		"description": "GTA SA ",
		"prefix": "getTimeStepValue",
		"scope": "source.lua"
	},
	"getD3DDevicePtr": {
		"body": "uint devicePtr = getD3DDevicePtr()",
		"description": "GTA SA ",
		"prefix": "getD3DDevicePtr",
		"scope": "source.lua"
	},
	"script.load": {
		"body": "LuaScript s = script.load(string file)",
		"description": "GTA SA  загружает скрипт из файла и возвращает объект скрипта. возвращает nil, если скрипт не был загружен",
		"prefix": "script.load",
		"scope": "source.lua"
	},
	"script.find": {
		"body": "LuaScript s = script.find(string name)",
		"description": "GTA SA  ищет загруженный скрипт по имени. возвращает nil, если скрипт не найден",
		"prefix": "script.find",
		"scope": "source.lua"
	},
	"script.list": {
		"body": "table list = script.list()",
		"description": "GTA SA  возвращает массив загруженных скриптов",
		"prefix": "script.list",
		"scope": "source.lua"
	},
	"script.get": {
		"body": "LuaScript script = script.get(int scriptId)",
		"description": "GTA SA  возвращает объект скрипта по идентификатору. если скрипта с указанным идентификатором не существует, то возвращает nil",
		"prefix": "script.get",
		"scope": "source.lua"
	},
	"script.this": {
		"body": "script.this()",
		"description": "GTA SA ",
		"prefix": "script.this",
		"scope": "source.lua"
	},
	"inicfg.load": {
		"body": "table data = inicfg.load([table default], [string file])",
		"description": "GTA SA ",
		"prefix": "inicfg.load",
		"scope": "source.lua"
	},
	"inicfg.save": {
		"body": "bool result = inicfg.save(table data, [string file])",
		"description": "GTA SA ",
		"prefix": "inicfg.save",
		"scope": "source.lua"
	},
	"memory.read": {
		"body": "int value = memory.read(uint address, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.read",
		"scope": "source.lua"
	},
	"memory.write": {
		"body": "memory.write(uint address, int value, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.write",
		"scope": "source.lua"
	},
	"memory.getint8": {
		"body": "int value = memory.getint8(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getint8",
		"scope": "source.lua"
	},
	"memory.setint8": {
		"body": "bool result = memory.setint8(uint address, int byte, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setint8",
		"scope": "source.lua"
	},
	"memory.getint16": {
		"body": "int value = memory.getint16(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getint16",
		"scope": "source.lua"
	},
	"memory.setint16": {
		"body": "bool result = memory.setint16(uint address, int word, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setint16",
		"scope": "source.lua"
	},
	"memory.getint32": {
		"body": "int value = memory.getint32(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getint32",
		"scope": "source.lua"
	},
	"memory.setint32": {
		"body": "bool result = memory.setint32(uint address, int dword, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setint32",
		"scope": "source.lua"
	},
	"memory.getint64": {
		"body": "double value = memory.getint64(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getint64",
		"scope": "source.lua"
	},
	"memory.setint64": {
		"body": "bool result = memory.setint64(uint address, double qword, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setint64",
		"scope": "source.lua"
	},
	"memory.getuint8": {
		"body": "int value = memory.getuint8(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getuint8",
		"scope": "source.lua"
	},
	"memory.setuint8": {
		"body": "bool result = memory.setuint8(uint address, int byte, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setuint8",
		"scope": "source.lua"
	},
	"memory.getuint16": {
		"body": "int value = memory.getuint16(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getuint16",
		"scope": "source.lua"
	},
	"memory.setuint16": {
		"body": "bool result = memory.setuint16(uint address, int word, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setuint16",
		"scope": "source.lua"
	},
	"memory.getuint32": {
		"body": "int value = memory.getuint32(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getuint32",
		"scope": "source.lua"
	},
	"memory.setuint32": {
		"body": "bool result = memory.setuint32(uint address, int dword, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setuint32",
		"scope": "source.lua"
	},
	"memory.getuint64": {
		"body": "double value = memory.getuint64(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getuint64",
		"scope": "source.lua"
	},
	"memory.setuint64": {
		"body": "bool result = memory.setuint64(uint address, double qword, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setuint64",
		"scope": "source.lua"
	},
	"memory.getfloat": {
		"body": "float value = memory.getfloat(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getfloat",
		"scope": "source.lua"
	},
	"memory.setfloat": {
		"body": "bool result = memory.setfloat(uint address, float value, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setfloat",
		"scope": "source.lua"
	},
	"memory.getdouble": {
		"body": "double value = memory.getdouble(uint address, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.getdouble",
		"scope": "source.lua"
	},
	"memory.setdouble": {
		"body": "bool result = memory.setdouble(uint address, double value, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.setdouble",
		"scope": "source.lua"
	},
	"memory.unprotect": {
		"body": "int oldProtection = memory.unprotect(uint address, uint size)",
		"description": "GTA SA ",
		"prefix": "memory.unprotect",
		"scope": "source.lua"
	},
	"memory.protect": {
		"body": "int oldProtection = memory.protect(uint address, uint size, int newProtection)",
		"description": "GTA SA ",
		"prefix": "memory.protect",
		"scope": "source.lua"
	},
	"memory.copy": {
		"body": "memory.copy(uint destAddress, uint srcAddress, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.copy",
		"scope": "source.lua"
	},
	"memory.compare": {
		"body": "bool result = memory.compare(uint address1, uint address2, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.compare",
		"scope": "source.lua"
	},
	"memory.tostring": {
		"body": "string str = memory.tostring(uint address, [uint size], [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.tostring",
		"scope": "source.lua"
	},
	"memory.tohex": {
		"body": "string hexstr = memory.tohex(uint address, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.tohex",
		"scope": "source.lua"
	},
	"memory.hex2bin": {
		"body": "string bin = memory.hex2bin(string hex, [uint dstAddress], [uint size])",
		"description": "GTA SA ",
		"prefix": "memory.hex2bin",
		"scope": "source.lua"
	},
	"memory.fill": {
		"body": "memory.fill(uint address, int value, uint size, [bool unprotect=false])",
		"description": "GTA SA ",
		"prefix": "memory.fill",
		"scope": "source.lua"
	},
	"memory.strptr": {
		"body": "uint address = memory.strptr(string str)",
		"description": "GTA SA ",
		"prefix": "memory.strptr",
		"scope": "source.lua"
	},
	"lua_thread.create": {
		"body": "LuaThread thread = lua_thread.create(function func, ...)",
		"description": "GTA SA ",
		"prefix": "lua_thread.create",
		"scope": "source.lua"
	},
	"lua_thread.create_suspended": {
		"body": "LuaThread thread = lua_thread.create_suspended(function func)",
		"description": "GTA SA ",
		"prefix": "lua_thread.create_suspended",
		"scope": "source.lua"
	},
	"main": {
		"body": "main()",
		"description": "GTA SA  основная подпрограмма, запускается когда игра загружена. пока что только в ней и во вложенных функциях можно использовать задержку 'wait'",
		"prefix": "main",
		"scope": "source.lua"
	},
	"onExitScript": {
		"body": "onExitScript(bool quitGame)",
		"description": "GTA SA  выполняется в скрипте перед его нормальным завершением",
		"prefix": "onExitScript",
		"scope": "source.lua"
	},
	"onScriptMessage": {
		"body": "onScriptMessage(string msg, LuaScript script)",
		"description": "GTA SA  вызывается когда любой скрипт добавляет новое сообщение в лог",
		"prefix": "onScriptMessage",
		"scope": "source.lua"
	},
	"onSystemMessage": {
		"body": "onSystemMessage(string msg, int type, LuaScript script)",
		"description": "GTA SA  вызывается когда MoonLoader добавляет новое сообщение в лог",
		"prefix": "onSystemMessage",
		"scope": "source.lua"
	},
	"onQuitGame": {
		"body": "onQuitGame()",
		"description": "GTA SA  выполняется перед выходом из игры",
		"prefix": "onQuitGame",
		"scope": "source.lua"
	},
	"onSystemInitialized": {
		"body": "onSystemInitialized()",
		"description": "GTA SA  выполняется после загрузки всех скриптов, но перед входом в основной цикл",
		"prefix": "onSystemInitialized",
		"scope": "source.lua"
	},
	"onScriptLoad": {
		"body": "onScriptLoad(LuaScript script)",
		"description": "GTA SA  выполняется при загрузке нового скрипта",
		"prefix": "onScriptLoad",
		"scope": "source.lua"
	},
	"onScriptTerminate": {
		"body": "onScriptTerminate(LuaScript script, bool quitGame)",
		"description": "GTA SA  вызывается перед выгрузкой любого скрипта. выполняется раньше, чем 'onExitScript'",
		"prefix": "onScriptTerminate",
		"scope": "source.lua"
	},
	"onReceiveRpc": {
		"body": "bool process, int id, Bitstream bitStream = onReceiveRpc(int id, Bitstream bitStream)",
		"description": "GTA SA  получение RPC",
		"prefix": "onReceiveRpc",
		"scope": "source.lua"
	},
	"onReceivePacket": {
		"body": "bool process, int id, Bitstream bitStream = onReceivePacket(int id, Bitstream bitStream)",
		"description": "GTA SA  получение пакета",
		"prefix": "onReceivePacket",
		"scope": "source.lua"
	},
	"onSendRpc": {
		"body": "bool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs = onSendRpc(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs)",
		"description": "GTA SA  отправка RPC",
		"prefix": "onSendRpc",
		"scope": "source.lua"
	},
	"onSendPacket": {
		"body": "bool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel = onSendPacket(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel)",
		"description": "GTA SA  отправка пакета",
		"prefix": "onSendPacket",
		"scope": "source.lua"
	},
	"onWindowMessage": {
		"body": "onWindowMessage(uint msg, uint wparam, int lparam)",
		"description": "GTA SA ",
		"prefix": "onWindowMessage",
		"scope": "source.lua"
	},
	"onStartNewGame": {
		"body": "onStartNewGame(int missionPackNumber)",
		"description": "GTA SA ",
		"prefix": "onStartNewGame",
		"scope": "source.lua"
	},
	"onSaveGame": {
		"body": "table newSaveData = onSaveGame(table saveData)",
		"description": "GTA SA ",
		"prefix": "onSaveGame",
		"scope": "source.lua"
	},
	"onLoadGame": {
		"body": "onLoadGame(table saveData)",
		"description": "GTA SA ",
		"prefix": "onLoadGame",
		"scope": "source.lua"
	},
	"onD3DDeviceLost": {
		"body": "onD3DDeviceLost()",
		"description": "GTA SA ",
		"prefix": "onD3DDeviceLost",
		"scope": "source.lua"
	},
	"onD3DDeviceReset": {
		"body": "onD3DDeviceReset()",
		"description": "GTA SA ",
		"prefix": "onD3DDeviceReset",
		"scope": "source.lua"
	},
	"onD3DPresent": {
		"body": "onD3DPresent()",
		"description": "GTA SA ",
		"prefix": "onD3DPresent",
		"scope": "source.lua"
	}

}