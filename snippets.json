{
    "_G": {
        "body": "_G(${0:...})",
        "description": "5.1,5.2,5.3\n\n_G",
        "prefix": "_G",
        "scope": "source.lua"
    },
    "_VERSION": {
        "body": "_VERSION(${0:...})",
        "description": "5.1,5.2,5.3\n\n_VERSION",
        "prefix": "_VERSION",
        "scope": "source.lua"
    },
    "assert": {
        "body": "assert(${1:v}${2:[, message]})",
        "description": "5.1,5.2,5.3\n\nassert()",
        "prefix": "assert",
        "scope": "source.lua"
    },
    "bit32.arshift": {
        "body": "bit32.arshift(${0:...})",
        "description": "5.2\n\nbit32.arshift (x, disp)",
        "prefix": "bit32.arshift",
        "scope": "source.lua"
    },
    "bit32.band": {
        "body": "bit32.band(${0:...})",
        "description": "5.2\n\nbit32.band (...)",
        "prefix": "bit32.band",
        "scope": "source.lua"
    },
    "bit32.bnot": {
        "body": "bit32.bnot(${0:...})",
        "description": "5.2\n\nbit32.bnot (x)",
        "prefix": "bit32.bnot",
        "scope": "source.lua"
    },
    "bit32.bor": {
        "body": "bit32.bor(${0:...})",
        "description": "5.2\n\nbit32.bor (...)",
        "prefix": "bit32.bor",
        "scope": "source.lua"
    },
    "bit32.btest": {
        "body": "bit32.btest(${0:...})",
        "description": "5.2\n\nbit32.btest (...)",
        "prefix": "bit32.btest",
        "scope": "source.lua"
    },
    "bit32.bxor": {
        "body": "bit32.bxor(${0:...})",
        "description": "5.2\n\nbit32.bxor (...)",
        "prefix": "bit32.bxor",
        "scope": "source.lua"
    },
    "bit32.extract": {
        "body": "bit32.extract(${0:...})",
        "description": "5.2\n\nbit32.extract (n, field [, width])",
        "prefix": "bit32.extract",
        "scope": "source.lua"
    },
    "bit32.lrotate": {
        "body": "bit32.lrotate(${0:...})",
        "description": "5.2\n\nbit32.lrotate (x, disp)",
        "prefix": "bit32.lrotate",
        "scope": "source.lua"
    },
    "bit32.lshift": {
        "body": "bit32.lshift(${0:...})",
        "description": "5.2\n\nbit32.lshift (x, disp)",
        "prefix": "bit32.lshift",
        "scope": "source.lua"
    },
    "bit32.replace": {
        "body": "bit32.replace(${0:...})",
        "description": "5.2\n\nbit32.replace (n, v, field [, width])",
        "prefix": "bit32.replace",
        "scope": "source.lua"
    },
    "bit32.rrotate": {
        "body": "bit32.rrotate(${0:...})",
        "description": "5.2\n\nbit32.rrotate (x, disp)",
        "prefix": "bit32.rrotate",
        "scope": "source.lua"
    },
    "bit32.rshift": {
        "body": "bit32.rshift(${0:...})",
        "description": "5.2\n\nbit32.rshift (x, disp)",
        "prefix": "bit32.rshift",
        "scope": "source.lua"
    },
    "collectgarbage": {
        "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
        "description": "5.1,5.2,5.3\n\ncollectgarbage()",
        "prefix": "collectgarbage",
        "scope": "source.lua"
    },
    "coroutine.create": {
        "body": "coroutine.create( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.create",
        "prefix": "coroutine.create",
        "scope": "source.lua"
    },
    "coroutine.isyieldable": {
        "body": "coroutine.isyieldable( )",
        "description": "5.3\n\ncoroutine.isyieldable",
        "prefix": "coroutine.isyieldable",
        "scope": "source.lua"
    },
    "coroutine.resume": {
        "body": "coroutine.resume( ${1:co}${2:[, val1, \u00b7\u00b7\u00b7]} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.resume",
        "prefix": "coroutine.resume",
        "scope": "source.lua"
    },
    "coroutine.running": {
        "body": "coroutine.running( )",
        "description": "5.1,5.2,5.3\n\ncoroutine.running",
        "prefix": "coroutine.running",
        "scope": "source.lua"
    },
    "coroutine.status": {
        "body": "coroutine.status( ${1:co} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.status",
        "prefix": "coroutine.status",
        "scope": "source.lua"
    },
    "coroutine.wrap": {
        "body": "coroutine.wrap( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
        "prefix": "coroutine.wrap",
        "scope": "source.lua"
    },
    "coroutine.yield": {
        "body": "coroutine.yield( ${1:...} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.yield",
        "prefix": "coroutine.yield",
        "scope": "source.lua"
    },
    "debug.debug": {
        "body": "debug.debug()",
        "description": "5.1,5.2,5.3\n\ndebug.debug ()",
        "prefix": "debug.debug",
        "scope": "source.lua"
    },
    "debug.getfenv": {
        "body": "debug.getfenv(${0:...})",
        "description": "5.1\n\ndebug.getfenv (o)",
        "prefix": "debug.getfenv",
        "scope": "source.lua"
    },
    "debug.gethook": {
        "body": "debug.gethook( ${1:[thread]} )",
        "description": "5.1,5.2,5.3\n\ndebug.gethook ([thread])",
        "prefix": "debug.gethook",
        "scope": "source.lua"
    },
    "debug.getinfo": {
        "body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getinfo ([thread,] f [, what])",
        "prefix": "debug.getinfo",
        "scope": "source.lua"
    },
    "debug.getlocal": {
        "body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getlocal ([thread,] f, local)",
        "prefix": "debug.getlocal",
        "scope": "source.lua"
    },
    "debug.getmetatable": {
        "body": "debug.getmetatable( ${1:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.getmetatable (value)",
        "prefix": "debug.getmetatable",
        "scope": "source.lua"
    },
    "debug.getregistry": {
        "body": "debug.getregistry()",
        "description": "5.1,5.2,5.3\n\ndebug.getregistry ()",
        "prefix": "debug.getregistry",
        "scope": "source.lua"
    },
    "debug.getupvalue": {
        "body": "debug.getupvalue( ${1:f}, ${2:up} )",
        "description": "5.1,5.2,5.3\n\ndebug.getupvalue (f, up)",
        "prefix": "debug.getupvalue",
        "scope": "source.lua"
    },
    "debug.getuservalue": {
        "body": "debug.getuservalue(${0:...})",
        "description": "5.2,5.3\n\ndebug.getuservalue (u)",
        "prefix": "debug.getuservalue",
        "scope": "source.lua"
    },
    "debug.getuservalue ": {
        "body": "debug.getuservalue ( ${1:u} )",
        "description": "debug.getuservalue (u)",
        "prefix": "debug.getuservalue ",
        "scope": "source.lua"
    },
    "debug.setfenv": {
        "body": "debug.setfenv(${0:...})",
        "description": "5.1\n\ndebug.setfenv (object, table)",
        "prefix": "debug.setfenv",
        "scope": "source.lua"
    },
    "debug.sethook": {
        "body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
        "description": "5.1,5.2,5.3\n\ndebug.sethook ([thread,] hook, mask [, count])",
        "prefix": "debug.sethook",
        "scope": "source.lua"
    },
    "debug.setlocal": {
        "body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setlocal ([thread,] level, local, value)",
        "prefix": "debug.setlocal",
        "scope": "source.lua"
    },
    "debug.setmetatable": {
        "body": "debug.setmetatable( ${1:value}, ${2:table} )",
        "description": "5.1,5.2,5.3\n\ndebug.setmetatable (value, table)",
        "prefix": "debug.setmetatable",
        "scope": "source.lua"
    },
    "debug.setupvalue": {
        "body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setupvalue (f, up, value)",
        "prefix": "debug.setupvalue",
        "scope": "source.lua"
    },
    "debug.setuservalue": {
        "body": "debug.setuservalue( ${1:udata}, ${2:value} )",
        "description": "5.2,5.3\n\ndebug.setuservalue (udata, value)",
        "prefix": "debug.setuservalue",
        "scope": "source.lua"
    },
    "debug.traceback": {
        "body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
        "description": "5.1,5.2,5.3\n\ndebug.traceback ([thread,] [message [, level]])",
        "prefix": "debug.traceback",
        "scope": "source.lua"
    },
    "debug.upvalueid": {
        "body": "debug.upvalueid( ${1:f}, ${2:n})",
        "description": "5.2,5.3\n\ndebug.upvalueid (f, n)",
        "prefix": "debug.upvalueid",
        "scope": "source.lua"
    },
    "debug.upvaluejoin": {
        "body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
        "description": "5.2,5.3\n\ndebug.upvaluejoin (f1, n1, f2, n2)",
        "prefix": "debug.upvaluejoin",
        "scope": "source.lua"
    },
    "dofile": {
        "body": "dofile(${1:[filename]})",
        "description": "5.1,5.2,5.3\n\ndofile ([filename])",
        "prefix": "dofile",
        "scope": "source.lua"
    },
    "elif": {
        "body": "else if ${1:condition} then\n\t${0:-- body}\n",
        "description": "elif",
        "prefix": "elif",
        "scope": "source.lua"
    },
    "error": {
        "body": "error(${0:...})",
        "description": "5.1,5.2,5.3\n\nerror (message [, level])",
        "prefix": "error",
        "scope": "source.lua"
    },
    "file:close": {
        "body": "file:close(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:close ()",
        "prefix": "file:close",
        "scope": "source.lua"
    },
    "file:flush": {
        "body": "file:flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:flush ()",
        "prefix": "file:flush",
        "scope": "source.lua"
    },
    "file:lines": {
        "body": "file:lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:lines ()",
        "prefix": "file:lines",
        "scope": "source.lua"
    },
    "file:read": {
        "body": "file:read(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:read (...)",
        "prefix": "file:read",
        "scope": "source.lua"
    },
    "file:seek": {
        "body": "file:seek(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:seek ([whence] [, offset])",
        "prefix": "file:seek",
        "scope": "source.lua"
    },
    "file:setvbuf": {
        "body": "file:setvbuf(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:setvbuf (mode [, size])",
        "prefix": "file:setvbuf",
        "scope": "source.lua"
    },
    "file:write": {
        "body": "file:write(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:write (...)",
        "prefix": "file:write",
        "scope": "source.lua"
    },
    "for": {
        "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "description": "for i=1,10",
        "prefix": "for",
        "scope": "source.lua"
    },
    "fori": {
        "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
        "description": "for i,v in ipairs()",
        "prefix": "fori",
        "scope": "source.lua"
    },
    "forp": {
        "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
        "description": "for k,v in pairs()",
        "prefix": "forp",
        "scope": "source.lua"
    },
    "fun": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "fun",
        "scope": "source.lua"
    },
    "function": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "function",
        "scope": "source.lua"
    },
    "getfenv": {
        "body": "getfenv(${0:...})",
        "description": "5.1\n\ngetfenv ([f])",
        "prefix": "getfenv",
        "scope": "source.lua"
    },
    "getmetatable": {
        "body": "getmetatable(${1:object})",
        "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
        "prefix": "getmetatable",
        "scope": "source.lua"
    },
    "if": {
        "body": "if ${1:condition} then\n\t${0:-- body}\nend",
        "description": "if",
        "prefix": "if",
        "scope": "source.lua"
    },
    "ifel": {
        "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
        "description": "ifel",
        "prefix": "ifel",
        "scope": "source.lua"
    },
    "io.close": {
        "body": "io.close(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.close ([file])",
        "prefix": "io.close",
        "scope": "source.lua"
    },
    "io.flush": {
        "body": "io.flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.flush ()",
        "prefix": "io.flush",
        "scope": "source.lua"
    },
    "io.input": {
        "body": "io.input(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.input ([file])",
        "prefix": "io.input",
        "scope": "source.lua"
    },
    "io.lines": {
        "body": "io.lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.lines ([filename])",
        "prefix": "io.lines",
        "scope": "source.lua"
    },
    "io.open": {
        "body": "io.open(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.open (filename [, mode])",
        "prefix": "io.open",
        "scope": "source.lua"
    },
    "io.output": {
        "body": "io.output(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.output ([file])",
        "prefix": "io.output",
        "scope": "source.lua"
    },
    "io.popen": {
        "body": "io.popen(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.popen (prog [, mode])",
        "prefix": "io.popen",
        "scope": "source.lua"
    },
    "io.read": {
        "body": "io.read(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.read (...)",
        "prefix": "io.read",
        "scope": "source.lua"
    },
    "io.tmpfile": {
        "body": "io.tmpfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.tmpfile ()",
        "prefix": "io.tmpfile",
        "scope": "source.lua"
    },
    "io.type": {
        "body": "io.type(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.type (obj)",
        "prefix": "io.type",
        "scope": "source.lua"
    },
    "io.write": {
        "body": "io.write(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.write (...)",
        "prefix": "io.write",
        "scope": "source.lua"
    },
    "ipairs": {
        "body": "ipairs(${0:...})",
        "description": "5.1,5.2,5.3\n\nipairs (t)",
        "prefix": "ipairs",
        "scope": "source.lua"
    },
    "load": {
        "body": "load(${0:...})",
        "description": "5.1,5.2,5.3\n\nload (func [, chunkname])",
        "prefix": "load",
        "scope": "source.lua"
    },
    "loadfile": {
        "body": "loadfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nloadfile ([filename])",
        "prefix": "loadfile",
        "scope": "source.lua"
    },
    "loadstring": {
        "body": "loadstring(${0:...})",
        "description": "5.1\n\nloadstring (string [, chunkname])",
        "prefix": "loadstring",
        "scope": "source.lua"
    },
    "local": {
        "body": "local ${1:x} = ${0:1}",
        "description": "local x = 1",
        "prefix": "local",
        "scope": "source.lua"
    },
    "math.abs": {
        "body": "math.abs( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.abs",
        "prefix": "math.abs",
        "scope": "source.lua"
    },
    "math.acos": {
        "body": "math.acos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.acos",
        "prefix": "math.acos",
        "scope": "source.lua"
    },
    "math.asin": {
        "body": "math.asin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.asin",
        "prefix": "math.asin",
        "scope": "source.lua"
    },
    "math.atan": {
        "body": "math.atan( ${1:y}${2:[, x]} )",
        "description": "5.1,5.2,5.3\n\nmath.atan",
        "prefix": "math.atan",
        "scope": "source.lua"
    },
    "math.atan2": {
        "body": "math.atan2(${0:...})",
        "description": "5.1,5.2\n\nmath.atan2 (y, x)",
        "prefix": "math.atan2",
        "scope": "source.lua"
    },
    "math.ceil": {
        "body": "math.ceil( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.ceil",
        "prefix": "math.ceil",
        "scope": "source.lua"
    },
    "math.cos": {
        "body": "math.cos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.cos",
        "prefix": "math.cos",
        "scope": "source.lua"
    },
    "math.cosh": {
        "body": "math.cosh(${0:...})",
        "description": "5.1,5.2\n\nmath.cosh (x)",
        "prefix": "math.cosh",
        "scope": "source.lua"
    },
    "math.deg": {
        "body": "math.deg( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.deg",
        "prefix": "math.deg",
        "scope": "source.lua"
    },
    "math.exp": {
        "body": "math.exp( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.exp",
        "prefix": "math.exp",
        "scope": "source.lua"
    },
    "math.floor": {
        "body": "math.floor( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.floor",
        "prefix": "math.floor",
        "scope": "source.lua"
    },
    "math.fmod": {
        "body": "math.fmod( ${1:x},${2:y} )",
        "description": "5.1,5.2,5.3\n\nmath.fmod",
        "prefix": "math.fmod",
        "scope": "source.lua"
    },
    "math.frexp": {
        "body": "math.frexp(${0:...})",
        "description": "5.1,5.2\n\nmath.frexp (x)",
        "prefix": "math.frexp",
        "scope": "source.lua"
    },
    "math.huge": {
        "body": "math.huge(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.huge",
        "prefix": "math.huge",
        "scope": "source.lua"
    },
    "math.ldexp": {
        "body": "math.ldexp(${0:...})",
        "description": "5.1,5.2\n\nmath.ldexp (m, e)",
        "prefix": "math.ldexp",
        "scope": "source.lua"
    },
    "math.log": {
        "body": "math.log( ${1:x}${2:[, base]} )",
        "description": "5.1,5.2,5.3\n\nmath.log",
        "prefix": "math.log",
        "scope": "source.lua"
    },
    "math.log10": {
        "body": "math.log10(${0:...})",
        "description": "5.1\n\nmath.log10 (x)",
        "prefix": "math.log10",
        "scope": "source.lua"
    },
    "math.math.randomseed": {
        "body": "math.math.randomseed( ${1:x} )",
        "description": "math.math.randomseed",
        "prefix": "math.math.randomseed",
        "scope": "source.lua"
    },
    "math.max": {
        "body": "math.max( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.max",
        "prefix": "math.max",
        "scope": "source.lua"
    },
    "math.maxinteger": {
        "body": "math.maxinteger(${0:...})",
        "description": "5.3\n\nmath.maxinteger",
        "prefix": "math.maxinteger",
        "scope": "source.lua"
    },
    "math.min": {
        "body": "math.min( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.min",
        "prefix": "math.min",
        "scope": "source.lua"
    },
    "math.mininteger": {
        "body": "math.mininteger(${0:...})",
        "description": "5.3\n\nmath.mininteger",
        "prefix": "math.mininteger",
        "scope": "source.lua"
    },
    "math.modf": {
        "body": "math.modf( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.modf",
        "prefix": "math.modf",
        "scope": "source.lua"
    },
    "math.pi": {
        "body": "math.pi(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.pi",
        "prefix": "math.pi",
        "scope": "source.lua"
    },
    "math.pow": {
        "body": "math.pow(${0:...})",
        "description": "5.1,5.2\n\nmath.pow (x, y)",
        "prefix": "math.pow",
        "scope": "source.lua"
    },
    "math.rad": {
        "body": "math.rad(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.rad (x)",
        "prefix": "math.rad",
        "scope": "source.lua"
    },
    "math.random": {
        "body": "math.random( ${1:[m]}${2:[, n]} )",
        "description": "5.1,5.2,5.3\n\nmath.random",
        "prefix": "math.random",
        "scope": "source.lua"
    },
    "math.randomseed": {
        "body": "math.randomseed(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.randomseed (x)",
        "prefix": "math.randomseed",
        "scope": "source.lua"
    },
    "math.sin": {
        "body": "math.sin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sin",
        "prefix": "math.sin",
        "scope": "source.lua"
    },
    "math.sinh": {
        "body": "math.sinh(${0:...})",
        "description": "5.1,5.2\n\nmath.sinh (x)",
        "prefix": "math.sinh",
        "scope": "source.lua"
    },
    "math.sqrt": {
        "body": "math.sqrt( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sqrt",
        "prefix": "math.sqrt",
        "scope": "source.lua"
    },
    "math.tan": {
        "body": "math.tan( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.tan",
        "prefix": "math.tan",
        "scope": "source.lua"
    },
    "math.tanh": {
        "body": "math.tanh(${0:...})",
        "description": "5.1,5.2\n\nmath.tanh (x)",
        "prefix": "math.tanh",
        "scope": "source.lua"
    },
    "math.tointeger": {
        "body": "math.tointeger( ${1:x} )",
        "description": "5.3\n\nmath.tointeger",
        "prefix": "math.tointeger",
        "scope": "source.lua"
    },
    "math.type": {
        "body": "math.type( ${1:x} )",
        "description": "5.3\n\nmath.type",
        "prefix": "math.type",
        "scope": "source.lua"
    },
    "math.ult": {
        "body": "math.ult(${0:...})",
        "description": "5.3\n\nmath.ult (m, n)",
        "prefix": "math.ult",
        "scope": "source.lua"
    },
    "module": {
        "body": "module(${0:...})",
        "description": "5.1\n\nmodule (name [, ...])",
        "prefix": "module",
        "scope": "source.lua"
    },
    "next": {
        "body": "next(${1:table}${2:[, index]})",
        "description": "5.1,5.2,5.3\n\nnext (table [, index])",
        "prefix": "next",
        "scope": "source.lua"
    },
    "os.clock": {
        "body": "os.clock(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.clock ()",
        "prefix": "os.clock",
        "scope": "source.lua"
    },
    "os.date": {
        "body": "os.date(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.date ([format [, time]])",
        "prefix": "os.date",
        "scope": "source.lua"
    },
    "os.difftime": {
        "body": "os.difftime(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.difftime (t2, t1)",
        "prefix": "os.difftime",
        "scope": "source.lua"
    },
    "os.execute": {
        "body": "os.execute(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.execute ([command])",
        "prefix": "os.execute",
        "scope": "source.lua"
    },
    "os.exit": {
        "body": "os.exit(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.exit ([code])",
        "prefix": "os.exit",
        "scope": "source.lua"
    },
    "os.getenv": {
        "body": "os.getenv(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.getenv (varname)",
        "prefix": "os.getenv",
        "scope": "source.lua"
    },
    "os.remove": {
        "body": "os.remove(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.remove (filename)",
        "prefix": "os.remove",
        "scope": "source.lua"
    },
    "os.rename": {
        "body": "os.rename(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.rename (oldname, newname)",
        "prefix": "os.rename",
        "scope": "source.lua"
    },
    "os.setlocale": {
        "body": "os.setlocale(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.setlocale (locale [, category])",
        "prefix": "os.setlocale",
        "scope": "source.lua"
    },
    "os.time": {
        "body": "os.time(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.time ([table])",
        "prefix": "os.time",
        "scope": "source.lua"
    },
    "os.tmpname": {
        "body": "os.tmpname(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.tmpname ()",
        "prefix": "os.tmpname",
        "scope": "source.lua"
    },
    "package.config": {
        "body": "package.config(${0:...})",
        "description": "5.2,5.3\n\npackage.config",
        "prefix": "package.config",
        "scope": "source.lua"
    },
    "package.cpath": {
        "body": "package.cpath(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.cpath",
        "prefix": "package.cpath",
        "scope": "source.lua"
    },
    "package.loaded": {
        "body": "package.loaded(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loaded",
        "prefix": "package.loaded",
        "scope": "source.lua"
    },
    "package.loaders": {
        "body": "package.loaders(${0:...})",
        "description": "5.1\n\npackage.loaders",
        "prefix": "package.loaders",
        "scope": "source.lua"
    },
    "package.loadlib": {
        "body": "package.loadlib(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loadlib (libname, funcname)",
        "prefix": "package.loadlib",
        "scope": "source.lua"
    },
    "package.path": {
        "body": "package.path(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.path",
        "prefix": "package.path",
        "scope": "source.lua"
    },
    "package.preload": {
        "body": "package.preload(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.preload",
        "prefix": "package.preload",
        "scope": "source.lua"
    },
    "package.searchers": {
        "body": "package.searchers(${0:...})",
        "description": "5.2,5.3\n\npackage.searchers",
        "prefix": "package.searchers",
        "scope": "source.lua"
    },
    "package.searchpath": {
        "body": "package.searchpath(${0:...})",
        "description": "5.2,5.3\n\npackage.searchpath (name, path [, sep [, rep]])",
        "prefix": "package.searchpath",
        "scope": "source.lua"
    },
    "package.seeall": {
        "body": "package.seeall(${0:...})",
        "description": "5.1\n\npackage.seeall (module)",
        "prefix": "package.seeall",
        "scope": "source.lua"
    },
    "pairs": {
        "body": "pairs(${0:...})",
        "description": "5.1,5.2,5.3\n\npairs (t)",
        "prefix": "pairs",
        "scope": "source.lua"
    },
    "pcall": {
        "body": "pcall(${0:...})",
        "description": "5.1,5.2,5.3\n\npcall (f, arg1, ...)",
        "prefix": "pcall",
        "scope": "source.lua"
    },
    "print": {
        "body": "print(${1:...})",
        "description": "5.1,5.2,5.3\n\nprint(...)",
        "prefix": "print",
        "scope": "source.lua"
    },
    "rawequal": {
        "body": "rawequal(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawequal (v1, v2)",
        "prefix": "rawequal",
        "scope": "source.lua"
    },
    "rawget": {
        "body": "rawget(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawget (table, index)",
        "prefix": "rawget",
        "scope": "source.lua"
    },
    "rawlen": {
        "body": "rawlen(${0:...})",
        "description": "5.2,5.3\n\nrawlen (v)",
        "prefix": "rawlen",
        "scope": "source.lua"
    },
    "rawset": {
        "body": "rawset(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawset (table, index, value)",
        "prefix": "rawset",
        "scope": "source.lua"
    },
    "req": {
        "body": "require(\"${1:module}\")",
        "description": "require()",
        "prefix": "req",
        "scope": "source.lua"
    },
    "require": {
        "body": "require(\"${1:module}\")",
        "description": "5.1,5.2,5.3\n\nrequire()",
        "prefix": "require",
        "scope": "source.lua"
    },
    "ret": {
        "body": "return ${1:...}",
        "description": "return ...",
        "prefix": "ret",
        "scope": "source.lua"
    },
    "select": {
        "body": "select(${1:index}, ${2:...})",
        "description": "5.1,5.2,5.3\n\nselect (index, \u00b7\u00b7\u00b7)",
        "prefix": "select",
        "scope": "source.lua"
    },
    "setfenv": {
        "body": "setfenv(${0:...})",
        "description": "5.1\n\nsetfenv (f, table)",
        "prefix": "setfenv",
        "scope": "source.lua"
    },
    "setmetatable": {
        "body": "setmetatable(${1:table}, ${2:metatable})",
        "description": "5.1,5.2,5.3\n\nsetmetatable (table, metatable)",
        "prefix": "setmetatable",
        "scope": "source.lua"
    },
    "string.byte": {
        "body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.byte",
        "prefix": "string.byte",
        "scope": "source.lua"
    },
    "string.char": {
        "body": "string.char( ${1:...} )",
        "description": "5.1,5.2,5.3\n\nstring.char",
        "prefix": "string.char",
        "scope": "source.lua"
    },
    "string.dump": {
        "body": "string.dump(${0:...})",
        "description": "5.1,5.2,5.3\n\nstring.dump (function)",
        "prefix": "string.dump",
        "scope": "source.lua"
    },
    "string.find": {
        "body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
        "description": "5.1,5.2,5.3\n\nstring.find",
        "prefix": "string.find",
        "scope": "source.lua"
    },
    "string.format": {
        "body": "string.format( \"${1:formatstring}\",${2:...} )",
        "description": "5.1,5.2,5.3\n\nstring.format",
        "prefix": "string.format",
        "scope": "source.lua"
    },
    "string.gmatch": {
        "body": "string.gmatch( ${1:s},${2:pattern} )",
        "description": "5.1,5.2,5.3\n\nstring.gmatch",
        "prefix": "string.gmatch",
        "scope": "source.lua"
    },
    "string.gsub": {
        "body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
        "description": "5.1,5.2,5.3\n\nstring.gsub",
        "prefix": "string.gsub",
        "scope": "source.lua"
    },
    "string.len": {
        "body": "string.len( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.len",
        "prefix": "string.len",
        "scope": "source.lua"
    },
    "string.lower": {
        "body": "string.lower( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.lower",
        "prefix": "string.lower",
        "scope": "source.lua"
    },
    "string.match": {
        "body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
        "description": "5.1,5.2,5.3\n\nstring.match",
        "prefix": "string.match",
        "scope": "source.lua"
    },
    "string.pack": {
        "body": "string.pack(${0:...})",
        "description": "5.3\n\nstring.pack (fmt, v1, v2, ...)",
        "prefix": "string.pack",
        "scope": "source.lua"
    },
    "string.packsize": {
        "body": "string.packsize(${0:...})",
        "description": "5.3\n\nstring.packsize (fmt)",
        "prefix": "string.packsize",
        "scope": "source.lua"
    },
    "string.rep": {
        "body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
        "description": "5.1,5.2,5.3\n\nstring.rep",
        "prefix": "string.rep",
        "scope": "source.lua"
    },
    "string.reverse": {
        "body": "string.reverse( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.reverse",
        "prefix": "string.reverse",
        "scope": "source.lua"
    },
    "string.sub": {
        "body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.sub",
        "prefix": "string.sub",
        "scope": "source.lua"
    },
    "string.unpack": {
        "body": "string.unpack(${0:...})",
        "description": "5.3\n\nstring.unpack (fmt, s [, pos])",
        "prefix": "string.unpack",
        "scope": "source.lua"
    },
    "string.upper": {
        "body": "string.upper( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.upper",
        "prefix": "string.upper",
        "scope": "source.lua"
    },
    "table.concat": {
        "body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
        "description": "5.1,5.2,5.3\n\ntable.concat",
        "prefix": "table.concat",
        "scope": "source.lua"
    },
    "table.insert": {
        "body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
        "description": "5.1,5.2,5.3\n\ntable.insert",
        "prefix": "table.insert",
        "scope": "source.lua"
    },
    "table.maxn": {
        "body": "table.maxn(${0:...})",
        "description": "5.1\n\ntable.maxn (table)",
        "prefix": "table.maxn",
        "scope": "source.lua"
    },
    "table.move": {
        "body": "table.move(${0:...})",
        "description": "5.3\n\ntable.move (a1, f, e, t [,a2])",
        "prefix": "table.move",
        "scope": "source.lua"
    },
    "table.pack": {
        "body": "table.pack(${0:...})",
        "description": "5.2,5.3\n\ntable.pack (...)",
        "prefix": "table.pack",
        "scope": "source.lua"
    },
    "table.remove": {
        "body": "table.remove( ${1:list},${2: [pos,]} )",
        "description": "5.1,5.2,5.3\n\ntable.remove",
        "prefix": "table.remove",
        "scope": "source.lua"
    },
    "table.sort": {
        "body": "table.sort( ${1:tablename}${2:, sortfunction} )",
        "description": "5.1,5.2,5.3\n\ntable.sort",
        "prefix": "table.sort",
        "scope": "source.lua"
    },
    "table.unpack": {
        "body": "table.unpack(${0:...})",
        "description": "5.2,5.3\n\ntable.unpack (list [, i [, j]])",
        "prefix": "table.unpack",
        "scope": "source.lua"
    },
    "tonumber": {
        "body": "tonumber(${1:e}${2:[, base]})",
        "description": "5.1,5.2,5.3\n\ntonumber (e [, base])",
        "prefix": "tonumber",
        "scope": "source.lua"
    },
    "tostring": {
        "body": "tostring(${1:v})",
        "description": "5.1,5.2,5.3\n\ntostring (v)",
        "prefix": "tostring",
        "scope": "source.lua"
    },
    "type": {
        "body": "type(${1:v})",
        "description": "5.1,5.2,5.3\n\ntype (v)",
        "prefix": "type",
        "scope": "source.lua"
    },
    "unpack": {
        "body": "unpack(${0:...})",
        "description": "5.1\n\nunpack (list [, i [, j]])",
        "prefix": "unpack",
        "scope": "source.lua"
    },
    "utf8.char": {
        "body": "utf8.char(${0:...})",
        "description": "5.3\n\nutf8.char (...)",
        "prefix": "utf8.char",
        "scope": "source.lua"
    },
    "utf8.charpattern": {
        "body": "utf8.charpattern(${0:...})",
        "description": "5.3\n\nutf8.charpattern",
        "prefix": "utf8.charpattern",
        "scope": "source.lua"
    },
    "utf8.codepoint": {
        "body": "utf8.codepoint(${0:...})",
        "description": "5.3\n\nutf8.codepoint (s [, i [, j]])",
        "prefix": "utf8.codepoint",
        "scope": "source.lua"
    },
    "utf8.codes": {
        "body": "utf8.codes(${0:...})",
        "description": "5.3\n\nutf8.codes (s)",
        "prefix": "utf8.codes",
        "scope": "source.lua"
    },
    "utf8.len": {
        "body": "utf8.len(${0:...})",
        "description": "5.3\n\nutf8.len (s [, i [, j]])",
        "prefix": "utf8.len",
        "scope": "source.lua"
    },
    "utf8.offset": {
        "body": "utf8.offset(${0:...})",
        "description": "5.3\n\nutf8.offset (s, n [, i])",
        "prefix": "utf8.offset",
        "scope": "source.lua"
    },
    "ver": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "ver",
        "scope": "source.lua"
    },
    "version": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "version",
        "scope": "source.lua"
    },
    "xpcall": {
        "body": "xpcall(${0:...})",
        "description": "5.1,5.2,5.3\n\nxpcall (f, err)",
        "prefix": "xpcall",
        "scope": "source.lua"
    },

	
	"PLAYER_PED": {
		"body": "PLAYER_PED",
		"description": "GTA SA\nactor 1\n",
		"prefix": "player_ped",
		"scope": "source.lua"
	},
	"PLAYER_HANDLE": {
		"body": "PLAYER_HANDLE",
		"description": "GTA SA\n player 1\n",
		"prefix": "player_handle",
		"scope": "source.lua"
	},
	
	
	"shakeCam": {
		"body": "shakeCam(${1:int shake})",
		"description": "GTA_SA\nshakeCam(int shake)\n",
		"prefix": "shakeCam"

		"scope": "source.lua"
	},
	"createPlayer": {
		"body": "createPlayer(${1:Model modelId},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nPlayer player = createPlayer(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createPlayer"

		"scope": "source.lua"
	},
	"createChar": {
		"body": "createChar(${1:int pedtype},${2:Model modelId},${3:float atX},${4:float atY},${5:float atZ})",
		"description": "GTA_SA\nPed ped = createChar(int pedtype, Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createChar"

		"scope": "source.lua"
	},
	"deleteChar": {
		"body": "deleteChar(${1:Ped ped})",
		"description": "GTA_SA\ndeleteChar(Ped ped)\n",
		"prefix": "deleteChar"

		"scope": "source.lua"
	},
	"getCharCoordinates": {
		"body": "getCharCoordinates(${1:Ped ped})",
		"description": "GTA_SA\nfloat positionX, float positionY, float positionZ = getCharCoordinates(Ped ped)\n",
		"prefix": "getCharCoordinates"

		"scope": "source.lua"
	},
	"setCharCoordinates": {
		"body": "setCharCoordinates(${1:Ped ped},${2:float posX},${3:float posY},${4:float posZ})",
		"description": "GTA_SA\nsetCharCoordinates(Ped ped, float posX, float posY, float posZ)\n",
		"prefix": "setCharCoordinates"

		"scope": "source.lua"
	},
	"isCharInArea2d": {
		"body": "isCharInArea2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInArea2d"

		"scope": "source.lua"
	},
	"isCharInArea3d": {
		"body": "isCharInArea3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInArea3d"

		"scope": "source.lua"
	},
	"createCar": {
		"body": "createCar(${1:Model modelId},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nVehicle car = createCar(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createCar"

		"scope": "source.lua"
	},
	"deleteCar": {
		"body": "deleteCar(${1:Vehicle car})",
		"description": "GTA_SA\ndeleteCar(Vehicle car)\n",
		"prefix": "deleteCar"

		"scope": "source.lua"
	},
	"carGotoCoordinates": {
		"body": "carGotoCoordinates(${1:Vehicle car},${2:float driveToX},${3:float driveToY},${4:float driveToZ})",
		"description": "GTA_SA\ncarGotoCoordinates(Vehicle car, float driveToX, float driveToY, float driveToZ)\n",
		"prefix": "carGotoCoordinates"

		"scope": "source.lua"
	},
	"carWanderRandomly": {
		"body": "carWanderRandomly(${1:Vehicle car})",
		"description": "GTA_SA\ncarWanderRandomly(Vehicle car)\n",
		"prefix": "carWanderRandomly"

		"scope": "source.lua"
	},
	"carSetIdle": {
		"body": "carSetIdle(${1:Vehicle car})",
		"description": "GTA_SA\ncarSetIdle(Vehicle car)\n",
		"prefix": "carSetIdle"

		"scope": "source.lua"
	},
	"getCarCoordinates": {
		"body": "getCarCoordinates(${1:Vehicle car})",
		"description": "GTA_SA\nfloat positionX, float positionY, float positionZ = getCarCoordinates(Vehicle car)\n",
		"prefix": "getCarCoordinates"

		"scope": "source.lua"
	},
	"setCarCoordinates": {
		"body": "setCarCoordinates(${1:Vehicle car},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nsetCarCoordinates(Vehicle car, float atX, float atY, float atZ)\n",
		"prefix": "setCarCoordinates"

		"scope": "source.lua"
	},
	"setCarCruiseSpeed": {
		"body": "setCarCruiseSpeed(${1:Vehicle car},${2:float maxSpeed})",
		"description": "GTA_SA\nsetCarCruiseSpeed(Vehicle car, float maxSpeed)\n",
		"prefix": "setCarCruiseSpeed"

		"scope": "source.lua"
	},
	"setCarDrivingStyle": {
		"body": "setCarDrivingStyle(${1:Vehicle car},${2:int behaviour})",
		"description": "GTA_SA\nsetCarDrivingStyle(Vehicle car, int behaviour)\n",
		"prefix": "setCarDrivingStyle"

		"scope": "source.lua"
	},
	"setCarMission": {
		"body": "setCarMission(${1:Vehicle car},${2:int driverBehaviour})",
		"description": "GTA_SA\nsetCarMission(Vehicle car, int driverBehaviour)\n",
		"prefix": "setCarMission"

		"scope": "source.lua"
	},
	"isCarInArea2d": {
		"body": "isCarInArea2d(${1:Vehicle car},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCarInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCarInArea2d"

		"scope": "source.lua"
	},
	"isCarInArea3d": {
		"body": "isCarInArea3d(${1:Vehicle car},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCarInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCarInArea3d"

		"scope": "source.lua"
	},
	"printBig": {
		"body": "printBig(${1:GxtString gxtString},${2:int time},${3:int style})",
		"description": "GTA_SA\nprintBig(GxtString gxtString, int time, int style)\n",
		"prefix": "printBig"

		"scope": "source.lua"
	},
	"printText": {
		"body": "printText(${1:GxtString gxtString},${2:int time},${3:int flag})",
		"description": "GTA_SA\nprintText(GxtString gxtString, int time, int flag)\n",
		"prefix": "printText"

		"scope": "source.lua"
	},
	"printTextNow": {
		"body": "printTextNow(${1:GxtString gxtString},${2:int time},${3:int flag})",
		"description": "GTA_SA\nprintTextNow(GxtString gxtString, int time, int flag)\n",
		"prefix": "printTextNow"

		"scope": "source.lua"
	},
	"clearPrints": {
		"body": "clearPrints()",
		"description": "GTA_SA\nclearPrints()\n",
		"prefix": "clearPrints"

		"scope": "source.lua"
	},
	"getTimeOfDay": {
		"body": "getTimeOfDay()",
		"description": "GTA_SA\nint hours, int mins = getTimeOfDay()\n",
		"prefix": "getTimeOfDay"

		"scope": "source.lua"
	},
	"setTimeOfDay": {
		"body": "setTimeOfDay(${1:int hours},${2:int minutes})",
		"description": "GTA_SA\nsetTimeOfDay(int hours, int minutes)\n",
		"prefix": "setTimeOfDay"

		"scope": "source.lua"
	},
	"getMinutesToTimeOfDay": {
		"body": "getMinutesToTimeOfDay(${1:int hours},${2:int minutes})",
		"description": "GTA_SA\nint minutes = getMinutesToTimeOfDay(int hours, int minutes)\n",
		"prefix": "getMinutesToTimeOfDay"

		"scope": "source.lua"
	},
	"isPointOnScreen": {
		"body": "isPointOnScreen(${1:float sphereX},${2:float sphereY},${3:float sphereZ},${4:float radius})",
		"description": "GTA_SA\nbool result = isPointOnScreen(float sphereX, float sphereY, float sphereZ, float radius)\n",
		"prefix": "isPointOnScreen"

		"scope": "source.lua"
	},
	"storeCarCharIsIn": {
		"body": "storeCarCharIsIn(${1:Ped ped})",
		"description": "GTA_SA\nVehicle car = storeCarCharIsIn(Ped ped)\n",
		"prefix": "storeCarCharIsIn"

		"scope": "source.lua"
	},
	"isCharInCar": {
		"body": "isCharInCar(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\nbool result = isCharInCar(Ped ped, Vehicle car)\n",
		"prefix": "isCharInCar"

		"scope": "source.lua"
	},
	"isCharInModel": {
		"body": "isCharInModel(${1:Ped ped},${2:Model carModel})",
		"description": "GTA_SA\nbool result = isCharInModel(Ped ped, Model carModel)\n",
		"prefix": "isCharInModel"

		"scope": "source.lua"
	},
	"isCharInAnyCar": {
		"body": "isCharInAnyCar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyCar(Ped ped)\n",
		"prefix": "isCharInAnyCar"

		"scope": "source.lua"
	},
	"isButtonPressed": {
		"body": "isButtonPressed(${1:Player player},${2:int key})",
		"description": "GTA_SA\nbool result = isButtonPressed(Player player, int key)\n",
		"prefix": "isButtonPressed"

		"scope": "source.lua"
	},
	"getPadState": {
		"body": "getPadState(${1:Player player},${2:int key})",
		"description": "GTA_SA\nint state = getPadState(Player player, int key)\n",
		"prefix": "getPadState"

		"scope": "source.lua"
	},
	"locateCharAnyMeans2d": {
		"body": "locateCharAnyMeans2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeans2d"

		"scope": "source.lua"
	},
	"locateCharOnFoot2d": {
		"body": "locateCharOnFoot2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFoot2d"

		"scope": "source.lua"
	},
	"locateCharInCar2d": {
		"body": "locateCharInCar2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCar2d"

		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans2d": {
		"body": "locateStoppedCharAnyMeans2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharAnyMeans2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharAnyMeans2d"

		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot2d": {
		"body": "locateStoppedCharOnFoot2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharOnFoot2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharOnFoot2d"

		"scope": "source.lua"
	},
	"locateStoppedCharInCar2d": {
		"body": "locateStoppedCharInCar2d(${1:Ped ped},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharInCar2d(Ped ped, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCharInCar2d"

		"scope": "source.lua"
	},
	"locateCharAnyMeansChar2d": {
		"body": "locateCharAnyMeansChar2d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansChar2d"

		"scope": "source.lua"
	},
	"locateCharOnFootChar2d": {
		"body": "locateCharOnFootChar2d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nlocateCharOnFootChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFootChar2d"

		"scope": "source.lua"
	},
	"locateCharInCarChar2d": {
		"body": "locateCharInCarChar2d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCarChar2d(Ped ped, Ped nearPed, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarChar2d"

		"scope": "source.lua"
	},
	"locateCharAnyMeans3d": {
		"body": "locateCharAnyMeans3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeans3d"

		"scope": "source.lua"
	},
	"locateCharOnFoot3d": {
		"body": "locateCharOnFoot3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFoot3d"

		"scope": "source.lua"
	},
	"locateCharInCar3d": {
		"body": "locateCharInCar3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCar3d"

		"scope": "source.lua"
	},
	"locateStoppedCharAnyMeans3d": {
		"body": "locateStoppedCharAnyMeans3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharAnyMeans3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharAnyMeans3d"

		"scope": "source.lua"
	},
	"locateStoppedCharOnFoot3d": {
		"body": "locateStoppedCharOnFoot3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharOnFoot3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharOnFoot3d"

		"scope": "source.lua"
	},
	"locateStoppedCharInCar3d": {
		"body": "locateStoppedCharInCar3d(${1:Ped ped},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCharInCar3d(Ped ped, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCharInCar3d"

		"scope": "source.lua"
	},
	"locateCharAnyMeansChar3d": {
		"body": "locateCharAnyMeansChar3d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeansChar3d"

		"scope": "source.lua"
	},
	"locateCharOnFootChar3d": {
		"body": "locateCharOnFootChar3d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharOnFootChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFootChar3d"

		"scope": "source.lua"
	},
	"locateCharInCarChar3d": {
		"body": "locateCharInCarChar3d(${1:Ped ped},${2:Ped nearPed},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCarChar3d(Ped ped, Ped nearPed, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCarChar3d"

		"scope": "source.lua"
	},
	"createObject": {
		"body": "createObject(${1:Model modelId},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nObject object = createObject(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createObject"

		"scope": "source.lua"
	},
	"deleteObject": {
		"body": "deleteObject(${1:Object object})",
		"description": "GTA_SA\ndeleteObject(Object object)\n",
		"prefix": "deleteObject"

		"scope": "source.lua"
	},
	"givePlayerMoney": {
		"body": "givePlayerMoney(${1:Player player},${2:int money})",
		"description": "GTA_SA\ngivePlayerMoney(Player player, int money)\n",
		"prefix": "givePlayerMoney"

		"scope": "source.lua"
	},
	"getPlayerMoney": {
		"body": "getPlayerMoney(${1:Player player})",
		"description": "GTA_SA\nint money = getPlayerMoney(Player player)\n",
		"prefix": "getPlayerMoney"

		"scope": "source.lua"
	},
	"giveRemoteControlledCarToPlayer": {
		"body": "giveRemoteControlledCarToPlayer(${1:Player player},${2:float float2},${3:float float3},${4:float float4})",
		"description": "GTA_SA\ngiveRemoteControlledCarToPlayer(Player player, float float2, float float3, float float4)\n",
		"prefix": "giveRemoteControlledCarToPlayer"

		"scope": "source.lua"
	},
	"alterWantedLevel": {
		"body": "alterWantedLevel(${1:Player player},${2:int wantedLevel})",
		"description": "GTA_SA\nalterWantedLevel(Player player, int wantedLevel)\n",
		"prefix": "alterWantedLevel"

		"scope": "source.lua"
	},
	"alterWantedLevelNoDrop": {
		"body": "alterWantedLevelNoDrop(${1:Player player},${2:int minimumWantedLevel})",
		"description": "GTA_SA\nalterWantedLevelNoDrop(Player player, int minimumWantedLevel)\n",
		"prefix": "alterWantedLevelNoDrop"

		"scope": "source.lua"
	},
	"isWantedLevelGreater": {
		"body": "isWantedLevelGreater(${1:Player player},${2:int level})",
		"description": "GTA_SA\nbool result = isWantedLevelGreater(Player player, int level)\n",
		"prefix": "isWantedLevelGreater"

		"scope": "source.lua"
	},
	"clearWantedLevel": {
		"body": "clearWantedLevel(${1:Player player})",
		"description": "GTA_SA\nclearWantedLevel(Player player)\n",
		"prefix": "clearWantedLevel"

		"scope": "source.lua"
	},
	"setDeatharrestState": {
		"body": "setDeatharrestState(${1:bool value})",
		"description": "GTA_SA\nsetDeatharrestState(bool value)\n",
		"prefix": "setDeatharrestState"

		"scope": "source.lua"
	},
	"hasDeatharrestBeenExecuted": {
		"body": "hasDeatharrestBeenExecuted()",
		"description": "GTA_SA\nbool result = hasDeatharrestBeenExecuted()\n",
		"prefix": "hasDeatharrestBeenExecuted"

		"scope": "source.lua"
	},
	"addAmmoToChar": {
		"body": "addAmmoToChar(${1:Ped ped},${2:int weapon},${3:int ammo})",
		"description": "GTA_SA\naddAmmoToChar(Ped ped, int weapon, int ammo)\n",
		"prefix": "addAmmoToChar"

		"scope": "source.lua"
	},
	"isPlayerDead": {
		"body": "isPlayerDead(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerDead(Player player)\n",
		"prefix": "isPlayerDead"

		"scope": "source.lua"
	},
	"isCharDead": {
		"body": "isCharDead(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharDead(Ped ped)\n",
		"prefix": "isCharDead"

		"scope": "source.lua"
	},
	"isCarDead": {
		"body": "isCarDead(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarDead(Vehicle car)\n",
		"prefix": "isCarDead"

		"scope": "source.lua"
	},
	"isPlayerPressingHorn": {
		"body": "isPlayerPressingHorn(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerPressingHorn(Player player)\n",
		"prefix": "isPlayerPressingHorn"

		"scope": "source.lua"
	},
	"createCharInsideCar": {
		"body": "createCharInsideCar(${1:Vehicle car},${2:Model pedtype},${3:int model})",
		"description": "GTA_SA\nPed ped = createCharInsideCar(Vehicle car, Model pedtype, int model)\n",
		"prefix": "createCharInsideCar"

		"scope": "source.lua"
	},
	"isCarModel": {
		"body": "isCarModel(${1:Vehicle car},${2:Model modelId})",
		"description": "GTA_SA\nbool result = isCarModel(Vehicle car, Model modelId)\n",
		"prefix": "isCarModel"

		"scope": "source.lua"
	},
	"createCarGenerator": {
		"body": "createCarGenerator(${1:float atX},${2:float atY},${3:float atZ},${4:float angle},${5:Model modelId},${6:int color1},${7:int color2},${8:bool forceSpawn},${9:int alarm},${10:int doorLock},${11:int minDelay},${12:int maxDelay})",
		"description": "GTA_SA\nint carGenerator = createCarGenerator(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay)\n",
		"prefix": "createCarGenerator"

		"scope": "source.lua"
	},
	"switchCarGenerator": {
		"body": "switchCarGenerator(${1:int carGenerator},${2:int carsToGenerate})",
		"description": "GTA_SA\nswitchCarGenerator(int carGenerator, int carsToGenerate)\n",
		"prefix": "switchCarGenerator"

		"scope": "source.lua"
	},
	"displayOnscreenTimer": {
		"body": "displayOnscreenTimer(${1:VarId var},${2:bool countInDirection})",
		"description": "GTA_SA\ndisplayOnscreenTimer(VarId var, bool countInDirection)\n",
		"prefix": "displayOnscreenTimer"

		"scope": "source.lua"
	},
	"clearOnscreenTimer": {
		"body": "clearOnscreenTimer(${1:VarId var})",
		"description": "GTA_SA\nclearOnscreenTimer(VarId var)\n",
		"prefix": "clearOnscreenTimer"

		"scope": "source.lua"
	},
	"clearOnscreenCounter": {
		"body": "clearOnscreenCounter(${1:VarId var})",
		"description": "GTA_SA\nclearOnscreenCounter(VarId var)\n",
		"prefix": "clearOnscreenCounter"

		"scope": "source.lua"
	},
	"isCharInZone": {
		"body": "isCharInZone(${1:Ped ped},${2:GxtString zoneName})",
		"description": "GTA_SA\nbool result = isCharInZone(Ped ped, GxtString zoneName)\n",
		"prefix": "isCharInZone"

		"scope": "source.lua"
	},
	"pointCameraAtCar": {
		"body": "pointCameraAtCar(${1:Vehicle car},${2:int mode},${3:int switchstyle})",
		"description": "GTA_SA\npointCameraAtCar(Vehicle car, int mode, int switchstyle)\n",
		"prefix": "pointCameraAtCar"

		"scope": "source.lua"
	},
	"pointCameraAtChar": {
		"body": "pointCameraAtChar(${1:Ped ped},${2:int mode},${3:int switchstyle})",
		"description": "GTA_SA\npointCameraAtChar(Ped ped, int mode, int switchstyle)\n",
		"prefix": "pointCameraAtChar"

		"scope": "source.lua"
	},
	"restoreCamera": {
		"body": "restoreCamera()",
		"description": "GTA_SA\nrestoreCamera()\n",
		"prefix": "restoreCamera"

		"scope": "source.lua"
	},
	"shakePad": {
		"body": "shakePad(${1:Player player},${2:int time},${3:int intensity})",
		"description": "GTA_SA\nshakePad(Player player, int time, int intensity)\n",
		"prefix": "shakePad"

		"scope": "source.lua"
	},
	"setTimeScale": {
		"body": "setTimeScale(${1:float gamespeed})",
		"description": "GTA_SA\nsetTimeScale(float gamespeed)\n",
		"prefix": "setTimeScale"

		"scope": "source.lua"
	},
	"setFixedCameraPosition": {
		"body": "setFixedCameraPosition(${1:float positionX},${2:float positionY},${3:float positionZ},${4:float rotationX},${5:float rotationY},${6:float rotationZ})",
		"description": "GTA_SA\nsetFixedCameraPosition(float positionX, float positionY, float positionZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "setFixedCameraPosition"

		"scope": "source.lua"
	},
	"pointCameraAtPoint": {
		"body": "pointCameraAtPoint(${1:float pointAtX},${2:float pointAtY},${3:float pointAtZ},${4:int switchstyle})",
		"description": "GTA_SA\npointCameraAtPoint(float pointAtX, float pointAtY, float pointAtZ, int switchstyle)\n",
		"prefix": "pointCameraAtPoint"

		"scope": "source.lua"
	},
	"addBlipForCarOld": {
		"body": "addBlipForCarOld(${1:Vehicle car},${2:int unused},${3:bool visibility})",
		"description": "GTA_SA\nMarker marker = addBlipForCarOld(Vehicle car, int unused, bool visibility)\n",
		"prefix": "addBlipForCarOld"

		"scope": "source.lua"
	},
	"addBlipForCharOld": {
		"body": "addBlipForCharOld(${1:Ped ped},${2:int int2},${3:int int3})",
		"description": "GTA_SA\nMarker marker = addBlipForCharOld(Ped ped, int int2, int int3)\n",
		"prefix": "addBlipForCharOld"

		"scope": "source.lua"
	},
	"removeBlip": {
		"body": "removeBlip(${1:Marker marker})",
		"description": "GTA_SA\nremoveBlip(Marker marker)\n",
		"prefix": "removeBlip"

		"scope": "source.lua"
	},
	"changeBlipColour": {
		"body": "changeBlipColour(${1:Marker marker},${2:int color})",
		"description": "GTA_SA\nchangeBlipColour(Marker marker, int color)\n",
		"prefix": "changeBlipColour"

		"scope": "source.lua"
	},
	"addBlipForCoordOld": {
		"body": "addBlipForCoordOld(${1:float atX},${2:float atY},${3:float atZ},${4:int color},${5:int flag})",
		"description": "GTA_SA\nMarker marker = addBlipForCoordOld(float atX, float atY, float atZ, int color, int flag)\n",
		"prefix": "addBlipForCoordOld"

		"scope": "source.lua"
	},
	"changeBlipScale": {
		"body": "changeBlipScale(${1:Marker marker},${2:int size})",
		"description": "GTA_SA\nchangeBlipScale(Marker marker, int size)\n",
		"prefix": "changeBlipScale"

		"scope": "source.lua"
	},
	"setFadingColour": {
		"body": "setFadingColour(${1:int r},${2:int g},${3:int b})",
		"description": "GTA_SA\nsetFadingColour(int r, int g, int b)\n",
		"prefix": "setFadingColour"

		"scope": "source.lua"
	},
	"doFade": {
		"body": "doFade(${1:bool fade},${2:int time})",
		"description": "GTA_SA\ndoFade(bool fade, int time)\n",
		"prefix": "doFade"

		"scope": "source.lua"
	},
	"getFadingStatus": {
		"body": "getFadingStatus()",
		"description": "GTA_SA\nbool result = getFadingStatus()\n",
		"prefix": "getFadingStatus"

		"scope": "source.lua"
	},
	"addHospitalRestart": {
		"body": "addHospitalRestart(${1:float atX},${2:float atY},${3:float atZ},${4:float angle},${5:int townNumber})",
		"description": "GTA_SA\naddHospitalRestart(float atX, float atY, float atZ, float angle, int townNumber)\n",
		"prefix": "addHospitalRestart"

		"scope": "source.lua"
	},
	"addPoliceRestart": {
		"body": "addPoliceRestart(${1:float atX},${2:float atY},${3:float atZ},${4:float angle},${5:int townNumber})",
		"description": "GTA_SA\naddPoliceRestart(float atX, float atY, float atZ, float angle, int townNumber)\n",
		"prefix": "addPoliceRestart"

		"scope": "source.lua"
	},
	"overrideNextRestart": {
		"body": "overrideNextRestart(${1:float atX},${2:float atY},${3:float atZ},${4:float angle})",
		"description": "GTA_SA\noverrideNextRestart(float atX, float atY, float atZ, float angle)\n",
		"prefix": "overrideNextRestart"

		"scope": "source.lua"
	},
	"drawShadow": {
		"body": "drawShadow(${1:Particle particle},${2:float atX},${3:float atY},${4:float atZ},${5:float rotationFactor},${6:float size},${7:int intensity},${8:int flags1},${9:int flags2},${10:int flags3})",
		"description": "GTA_SA\ndrawShadow(Particle particle, float atX, float atY, float atZ, float rotationFactor, float size, int intensity, int flags1, int flags2, int flags3)\n",
		"prefix": "drawShadow"

		"scope": "source.lua"
	},
	"getCharHeading": {
		"body": "getCharHeading(${1:Ped ped})",
		"description": "GTA_SA\nfloat angle = getCharHeading(Ped ped)\n",
		"prefix": "getCharHeading"

		"scope": "source.lua"
	},
	"setCharHeading": {
		"body": "setCharHeading(${1:Ped ped},${2:float angle})",
		"description": "GTA_SA\nsetCharHeading(Ped ped, float angle)\n",
		"prefix": "setCharHeading"

		"scope": "source.lua"
	},
	"getCarHeading": {
		"body": "getCarHeading(${1:Vehicle car})",
		"description": "GTA_SA\nfloat angle = getCarHeading(Vehicle car)\n",
		"prefix": "getCarHeading"

		"scope": "source.lua"
	},
	"setCarHeading": {
		"body": "setCarHeading(${1:Vehicle car},${2:float angle})",
		"description": "GTA_SA\nsetCarHeading(Vehicle car, float angle)\n",
		"prefix": "setCarHeading"

		"scope": "source.lua"
	},
	"getObjectHeading": {
		"body": "getObjectHeading(${1:Object object})",
		"description": "GTA_SA\nfloat angle = getObjectHeading(Object object)\n",
		"prefix": "getObjectHeading"

		"scope": "source.lua"
	},
	"setObjectHeading": {
		"body": "setObjectHeading(${1:Object object},${2:float angle})",
		"description": "GTA_SA\nsetObjectHeading(Object object, float angle)\n",
		"prefix": "setObjectHeading"

		"scope": "source.lua"
	},
	"isCharTouchingObject": {
		"body": "isCharTouchingObject(${1:Ped ped},${2:Object object})",
		"description": "GTA_SA\nbool result = isCharTouchingObject(Ped ped, Object object)\n",
		"prefix": "isCharTouchingObject"

		"scope": "source.lua"
	},
	"setCharAmmo": {
		"body": "setCharAmmo(${1:Ped ped},${2:int weapon},${3:int ammo})",
		"description": "GTA_SA\nsetCharAmmo(Ped ped, int weapon, int ammo)\n",
		"prefix": "setCharAmmo"

		"scope": "source.lua"
	},
	"declareMissionFlag": {
		"body": "declareMissionFlag(${1:VarId flag})",
		"description": "GTA_SA\ndeclareMissionFlag(VarId flag)\n",
		"prefix": "declareMissionFlag"

		"scope": "source.lua"
	},
	"addBlipForCar": {
		"body": "addBlipForCar(${1:Vehicle car})",
		"description": "GTA_SA\nMarker marker = addBlipForCar(Vehicle car)\n",
		"prefix": "addBlipForCar"

		"scope": "source.lua"
	},
	"addBlipForChar": {
		"body": "addBlipForChar(${1:Ped ped})",
		"description": "GTA_SA\nMarker marker = addBlipForChar(Ped ped)\n",
		"prefix": "addBlipForChar"

		"scope": "source.lua"
	},
	"addBlipForObject": {
		"body": "addBlipForObject(${1:Object object})",
		"description": "GTA_SA\nMarker marker = addBlipForObject(Object object)\n",
		"prefix": "addBlipForObject"

		"scope": "source.lua"
	},
	"addBlipForCoord": {
		"body": "addBlipForCoord(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nCheckpoint checkpoint = addBlipForCoord(float atX, float atY, float atZ)\n",
		"prefix": "addBlipForCoord"

		"scope": "source.lua"
	},
	"changeBlipDisplay": {
		"body": "changeBlipDisplay(${1:Marker marker},${2:int mode})",
		"description": "GTA_SA\nchangeBlipDisplay(Marker marker, int mode)\n",
		"prefix": "changeBlipDisplay"

		"scope": "source.lua"
	},
	"addOneOffSound": {
		"body": "addOneOffSound(${1:float atX},${2:float atY},${3:float atZ},${4:int sound})",
		"description": "GTA_SA\naddOneOffSound(float atX, float atY, float atZ, int sound)\n",
		"prefix": "addOneOffSound"

		"scope": "source.lua"
	},
	"addContinuousSound": {
		"body": "addContinuousSound(${1:float atX},${2:float atY},${3:float atZ},${4:int sound})",
		"description": "GTA_SA\nint unk = addContinuousSound(float atX, float atY, float atZ, int sound)\n",
		"prefix": "addContinuousSound"

		"scope": "source.lua"
	},
	"removeSound": {
		"body": "removeSound(${1:int sound})",
		"description": "GTA_SA\nremoveSound(int sound)\n",
		"prefix": "removeSound"

		"scope": "source.lua"
	},
	"isCarStuckOnRoof": {
		"body": "isCarStuckOnRoof(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarStuckOnRoof(Vehicle car)\n",
		"prefix": "isCarStuckOnRoof"

		"scope": "source.lua"
	},
	"addUpsidedownCarCheck": {
		"body": "addUpsidedownCarCheck(${1:Vehicle car})",
		"description": "GTA_SA\naddUpsidedownCarCheck(Vehicle car)\n",
		"prefix": "addUpsidedownCarCheck"

		"scope": "source.lua"
	},
	"removeUpsidedownCarCheck": {
		"body": "removeUpsidedownCarCheck(${1:Vehicle car})",
		"description": "GTA_SA\nremoveUpsidedownCarCheck(Vehicle car)\n",
		"prefix": "removeUpsidedownCarCheck"

		"scope": "source.lua"
	},
	"isCharInAreaOnFoot2d": {
		"body": "isCharInAreaOnFoot2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInAreaOnFoot2d"

		"scope": "source.lua"
	},
	"isCharInAreaInCar2d": {
		"body": "isCharInAreaInCar2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharInAreaInCar2d"

		"scope": "source.lua"
	},
	"isCharStoppedInArea2d": {
		"body": "isCharStoppedInArea2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInArea2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInArea2d"

		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot2d": {
		"body": "isCharStoppedInAreaOnFoot2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInAreaOnFoot2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInAreaOnFoot2d"

		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar2d": {
		"body": "isCharStoppedInAreaInCar2d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInAreaInCar2d(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCharStoppedInAreaInCar2d"

		"scope": "source.lua"
	},
	"isCharInAreaOnFoot3d": {
		"body": "isCharInAreaOnFoot3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInAreaOnFoot3d"

		"scope": "source.lua"
	},
	"isCharInAreaInCar3d": {
		"body": "isCharInAreaInCar3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharInAreaInCar3d"

		"scope": "source.lua"
	},
	"isCharStoppedInArea3d": {
		"body": "isCharStoppedInArea3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInArea3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInArea3d"

		"scope": "source.lua"
	},
	"isCharStoppedInAreaOnFoot3d": {
		"body": "isCharStoppedInAreaOnFoot3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInAreaOnFoot3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInAreaOnFoot3d"

		"scope": "source.lua"
	},
	"isCharStoppedInAreaInCar3d": {
		"body": "isCharStoppedInAreaInCar3d(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInAreaInCar3d(Ped ped, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCharStoppedInAreaInCar3d"

		"scope": "source.lua"
	},
	"isCarStoppedInArea2d": {
		"body": "isCarStoppedInArea2d(${1:Vehicle car},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isCarStoppedInArea2d(Vehicle car, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isCarStoppedInArea2d"

		"scope": "source.lua"
	},
	"isCarStoppedInArea3d": {
		"body": "isCarStoppedInArea3d(${1:Vehicle car},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isCarStoppedInArea3d(Vehicle car, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool sphere)\n",
		"prefix": "isCarStoppedInArea3d"

		"scope": "source.lua"
	},
	"locateCar2d": {
		"body": "locateCar2d(${1:Vehicle car},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCar2d"

		"scope": "source.lua"
	},
	"locateStoppedCar2d": {
		"body": "locateStoppedCar2d(${1:Vehicle car},${2:float pointX},${3:float pointY},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCar2d(Vehicle car, float pointX, float pointY, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateStoppedCar2d"

		"scope": "source.lua"
	},
	"locateCar3d": {
		"body": "locateCar3d(${1:Vehicle car},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCar3d"

		"scope": "source.lua"
	},
	"locateStoppedCar3d": {
		"body": "locateStoppedCar3d(${1:Vehicle car},${2:float sphereX},${3:float sphereY},${4:float sphereZ},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool sphere})",
		"description": "GTA_SA\nbool result = locateStoppedCar3d(Vehicle car, float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateStoppedCar3d"

		"scope": "source.lua"
	},
	"giveWeaponToChar": {
		"body": "giveWeaponToChar(${1:Ped ped},${2:int weapon},${3:int ammo})",
		"description": "GTA_SA\ngiveWeaponToChar(Ped ped, int weapon, int ammo)\n",
		"prefix": "giveWeaponToChar"

		"scope": "source.lua"
	},
	"setPlayerControl": {
		"body": "setPlayerControl(${1:Player player},${2:bool canMove})",
		"description": "GTA_SA\nbool result = setPlayerControl(Player player, bool canMove)\n",
		"prefix": "setPlayerControl"

		"scope": "source.lua"
	},
	"forceWeather": {
		"body": "forceWeather(${1:int weather})",
		"description": "GTA_SA\nbool result = forceWeather(int weather)\n",
		"prefix": "forceWeather"

		"scope": "source.lua"
	},
	"forceWeatherNow": {
		"body": "forceWeatherNow(${1:int weather})",
		"description": "GTA_SA\nbool result = forceWeatherNow(int weather)\n",
		"prefix": "forceWeatherNow"

		"scope": "source.lua"
	},
	"releaseWeather": {
		"body": "releaseWeather()",
		"description": "GTA_SA\nreleaseWeather()\n",
		"prefix": "releaseWeather"

		"scope": "source.lua"
	},
	"setCurrentCharWeapon": {
		"body": "setCurrentCharWeapon(${1:Ped ped},${2:int weapon})",
		"description": "GTA_SA\nsetCurrentCharWeapon(Ped ped, int weapon)\n",
		"prefix": "setCurrentCharWeapon"

		"scope": "source.lua"
	},
	"getObjectCoordinates": {
		"body": "getObjectCoordinates(${1:Object object})",
		"description": "GTA_SA\nbool result, float positionX, float positionY, float positionZ = getObjectCoordinates(Object object)\n",
		"prefix": "getObjectCoordinates"

		"scope": "source.lua"
	},
	"setObjectCoordinates": {
		"body": "setObjectCoordinates(${1:Object object},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nbool result = setObjectCoordinates(Object object, float atX, float atY, float atZ)\n",
		"prefix": "setObjectCoordinates"

		"scope": "source.lua"
	},
	"getGameTimer": {
		"body": "getGameTimer()",
		"description": "GTA_SA\nint timeMs = getGameTimer()\n",
		"prefix": "getGameTimer"

		"scope": "source.lua"
	},
	"storeWantedLevel": {
		"body": "storeWantedLevel(${1:Player player})",
		"description": "GTA_SA\nbool result, int level = storeWantedLevel(Player player)\n",
		"prefix": "storeWantedLevel"

		"scope": "source.lua"
	},
	"isCarStopped": {
		"body": "isCarStopped(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarStopped(Vehicle car)\n",
		"prefix": "isCarStopped"

		"scope": "source.lua"
	},
	"markCharAsNoLongerNeeded": {
		"body": "markCharAsNoLongerNeeded(${1:Ped ped})",
		"description": "GTA_SA\nbool result = markCharAsNoLongerNeeded(Ped ped)\n",
		"prefix": "markCharAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"markCarAsNoLongerNeeded": {
		"body": "markCarAsNoLongerNeeded(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = markCarAsNoLongerNeeded(Vehicle car)\n",
		"prefix": "markCarAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"markObjectAsNoLongerNeeded": {
		"body": "markObjectAsNoLongerNeeded(${1:Object object})",
		"description": "GTA_SA\nbool result = markObjectAsNoLongerNeeded(Object object)\n",
		"prefix": "markObjectAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"dontRemoveChar": {
		"body": "dontRemoveChar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = dontRemoveChar(Ped ped)\n",
		"prefix": "dontRemoveChar"

		"scope": "source.lua"
	},
	"dontRemoveObject": {
		"body": "dontRemoveObject(${1:Object object})",
		"description": "GTA_SA\nbool result = dontRemoveObject(Object object)\n",
		"prefix": "dontRemoveObject"

		"scope": "source.lua"
	},
	"createCharAsPassenger": {
		"body": "createCharAsPassenger(${1:Vehicle car},${2:Model pedtype},${3:int model},${4:int passengerSeat})",
		"description": "GTA_SA\nbool result, Ped ped = createCharAsPassenger(Vehicle car, Model pedtype, int model, int passengerSeat)\n",
		"prefix": "createCharAsPassenger"

		"scope": "source.lua"
	},
	"printWithNumberBig": {
		"body": "printWithNumberBig(${1:GxtString gxtString},${2:int number},${3:int time},${4:int style})",
		"description": "GTA_SA\nbool result = printWithNumberBig(GxtString gxtString, int number, int time, int style)\n",
		"prefix": "printWithNumberBig"

		"scope": "source.lua"
	},
	"printWithNumber": {
		"body": "printWithNumber(${1:GxtString gxtString},${2:int number},${3:int time},${4:int flag})",
		"description": "GTA_SA\nbool result = printWithNumber(GxtString gxtString, int number, int time, int flag)\n",
		"prefix": "printWithNumber"

		"scope": "source.lua"
	},
	"printWithNumberNow": {
		"body": "printWithNumberNow(${1:GxtString gxtString},${2:int number},${3:int time},${4:int flag})",
		"description": "GTA_SA\nbool result = printWithNumberNow(GxtString gxtString, int number, int time, int flag)\n",
		"prefix": "printWithNumberNow"

		"scope": "source.lua"
	},
	"switchRoadsOn": {
		"body": "switchRoadsOn(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nbool result = switchRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsOn"

		"scope": "source.lua"
	},
	"switchRoadsOff": {
		"body": "switchRoadsOff(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nswitchRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsOff"

		"scope": "source.lua"
	},
	"getNumberOfPassengers": {
		"body": "getNumberOfPassengers(${1:Vehicle car})",
		"description": "GTA_SA\nbool result, int passengers = getNumberOfPassengers(Vehicle car)\n",
		"prefix": "getNumberOfPassengers"

		"scope": "source.lua"
	},
	"getMaximumNumberOfPassengers": {
		"body": "getMaximumNumberOfPassengers(${1:Vehicle car})",
		"description": "GTA_SA\nint maxPassengers = getMaximumNumberOfPassengers(Vehicle car)\n",
		"prefix": "getMaximumNumberOfPassengers"

		"scope": "source.lua"
	},
	"setCarDensityMultiplier": {
		"body": "setCarDensityMultiplier(${1:float multiplier})",
		"description": "GTA_SA\nbool result = setCarDensityMultiplier(float multiplier)\n",
		"prefix": "setCarDensityMultiplier"

		"scope": "source.lua"
	},
	"setCarHeavy": {
		"body": "setCarHeavy(${1:Vehicle car},${2:bool heavy})",
		"description": "GTA_SA\nbool result = setCarHeavy(Vehicle car, bool heavy)\n",
		"prefix": "setCarHeavy"

		"scope": "source.lua"
	},
	"setMaxWantedLevel": {
		"body": "setMaxWantedLevel(${1:int level})",
		"description": "GTA_SA\nsetMaxWantedLevel(int level)\n",
		"prefix": "setMaxWantedLevel"

		"scope": "source.lua"
	},
	"isCarInAirProper": {
		"body": "isCarInAirProper(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarInAirProper(Vehicle car)\n",
		"prefix": "isCarInAirProper"

		"scope": "source.lua"
	},
	"isCarUpsidedown": {
		"body": "isCarUpsidedown(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarUpsidedown(Vehicle car)\n",
		"prefix": "isCarUpsidedown"

		"scope": "source.lua"
	},
	"getPlayerChar": {
		"body": "getPlayerChar(${1:Player player})",
		"description": "GTA_SA\nbool result, Ped ped = getPlayerChar(Player player)\n",
		"prefix": "getPlayerChar"

		"scope": "source.lua"
	},
	"cancelOverrideRestart": {
		"body": "cancelOverrideRestart()",
		"description": "GTA_SA\nbool result = cancelOverrideRestart()\n",
		"prefix": "cancelOverrideRestart"

		"scope": "source.lua"
	},
	"setPoliceIgnorePlayer": {
		"body": "setPoliceIgnorePlayer(${1:Player player},${2:bool ignored})",
		"description": "GTA_SA\nbool result = setPoliceIgnorePlayer(Player player, bool ignored)\n",
		"prefix": "setPoliceIgnorePlayer"

		"scope": "source.lua"
	},
	"startKillFrenzy": {
		"body": "startKillFrenzy(${1:GxtString gxtString},${2:int weapon},${3:int timeLimit},${4:int targets},${5:Model targetModels1},${6:Model targetModels2},${7:Model targetModels3},${8:Model targetModels4},${9:bool completedText})",
		"description": "GTA_SA\nbool result = startKillFrenzy(GxtString gxtString, int weapon, int timeLimit, int targets, Model targetModels1, Model targetModels2, Model targetModels3, Model targetModels4, bool completedText)\n",
		"prefix": "startKillFrenzy"

		"scope": "source.lua"
	},
	"readKillFrenzyStatus": {
		"body": "readKillFrenzyStatus()",
		"description": "GTA_SA\nbool result, int status = readKillFrenzyStatus()\n",
		"prefix": "readKillFrenzyStatus"

		"scope": "source.lua"
	},
	"locateCharAnyMeansCar2d": {
		"body": "locateCharAnyMeansCar2d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansCar2d"

		"scope": "source.lua"
	},
	"locateCharOnFootCar2d": {
		"body": "locateCharOnFootCar2d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:bool flag})",
		"description": "GTA_SA\nbool result = locateCharOnFootCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool flag)\n",
		"prefix": "locateCharOnFootCar2d"

		"scope": "source.lua"
	},
	"locateCharInCarCar2d": {
		"body": "locateCharInCarCar2d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCarCar2d(Ped ped, Vehicle car, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarCar2d"

		"scope": "source.lua"
	},
	"locateCharAnyMeansCar3d": {
		"body": "locateCharAnyMeansCar3d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool flag})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharAnyMeansCar3d"

		"scope": "source.lua"
	},
	"locateCharOnFootCar3d": {
		"body": "locateCharOnFootCar3d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool flag})",
		"description": "GTA_SA\nbool result = locateCharOnFootCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharOnFootCar3d"

		"scope": "source.lua"
	},
	"locateCharInCarCar3d": {
		"body": "locateCharInCarCar3d(${1:Ped ped},${2:Vehicle car},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool flag})",
		"description": "GTA_SA\nbool result = locateCharInCarCar3d(Ped ped, Vehicle car, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateCharInCarCar3d"

		"scope": "source.lua"
	},
	"lockCarDoors": {
		"body": "lockCarDoors(${1:Vehicle car},${2:int status})",
		"description": "GTA_SA\nlockCarDoors(Vehicle car, int status)\n",
		"prefix": "lockCarDoors"

		"scope": "source.lua"
	},
	"explodeCar": {
		"body": "explodeCar(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = explodeCar(Vehicle car)\n",
		"prefix": "explodeCar"

		"scope": "source.lua"
	},
	"addExplosion": {
		"body": "addExplosion(${1:float atX},${2:float atY},${3:float atZ},${4:int radius})",
		"description": "GTA_SA\nbool result = addExplosion(float atX, float atY, float atZ, int radius)\n",
		"prefix": "addExplosion"

		"scope": "source.lua"
	},
	"isCarUpright": {
		"body": "isCarUpright(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarUpright(Vehicle car)\n",
		"prefix": "isCarUpright"

		"scope": "source.lua"
	},
	"createPickup": {
		"body": "createPickup(${1:Model modelId},${2:int type},${3:float atX},${4:float atY},${5:float atZ})",
		"description": "GTA_SA\nbool result, Pickup pickup = createPickup(Model modelId, int type, float atX, float atY, float atZ)\n",
		"prefix": "createPickup"

		"scope": "source.lua"
	},
	"hasPickupBeenCollected": {
		"body": "hasPickupBeenCollected(${1:Pickup pickup})",
		"description": "GTA_SA\nbool result = hasPickupBeenCollected(Pickup pickup)\n",
		"prefix": "hasPickupBeenCollected"

		"scope": "source.lua"
	},
	"removePickup": {
		"body": "removePickup(${1:Pickup pickup})",
		"description": "GTA_SA\nbool result = removePickup(Pickup pickup)\n",
		"prefix": "removePickup"

		"scope": "source.lua"
	},
	"setTaxiLights": {
		"body": "setTaxiLights(${1:Vehicle taxi},${2:bool light})",
		"description": "GTA_SA\nbool result = setTaxiLights(Vehicle taxi, bool light)\n",
		"prefix": "setTaxiLights"

		"scope": "source.lua"
	},
	"printBigQ": {
		"body": "printBigQ(${1:GxtString gxtString},${2:int time},${3:int style})",
		"description": "GTA_SA\nbool result = printBigQ(GxtString gxtString, int time, int style)\n",
		"prefix": "printBigQ"

		"scope": "source.lua"
	},
	"setTargetCarForMissionGarage": {
		"body": "setTargetCarForMissionGarage(${1:GxtString garage},${2:Vehicle car})",
		"description": "GTA_SA\nbool result = setTargetCarForMissionGarage(GxtString garage, Vehicle car)\n",
		"prefix": "setTargetCarForMissionGarage"

		"scope": "source.lua"
	},
	"applyBrakesToPlayersCar": {
		"body": "applyBrakesToPlayersCar(${1:Player player},${2:bool apply})",
		"description": "GTA_SA\nbool result = applyBrakesToPlayersCar(Player player, bool apply)\n",
		"prefix": "applyBrakesToPlayersCar"

		"scope": "source.lua"
	},
	"setCharHealth": {
		"body": "setCharHealth(${1:Ped ped},${2:int health})",
		"description": "GTA_SA\nsetCharHealth(Ped ped, int health)\n",
		"prefix": "setCharHealth"

		"scope": "source.lua"
	},
	"setCarHealth": {
		"body": "setCarHealth(${1:Vehicle car},${2:int health})",
		"description": "GTA_SA\nsetCarHealth(Vehicle car, int health)\n",
		"prefix": "setCarHealth"

		"scope": "source.lua"
	},
	"getCharHealth": {
		"body": "getCharHealth(${1:Ped ped})",
		"description": "GTA_SA\nint health = getCharHealth(Ped ped)\n",
		"prefix": "getCharHealth"

		"scope": "source.lua"
	},
	"getCarHealth": {
		"body": "getCarHealth(${1:Vehicle car})",
		"description": "GTA_SA\nint health = getCarHealth(Vehicle car)\n",
		"prefix": "getCarHealth"

		"scope": "source.lua"
	},
	"changeCarColour": {
		"body": "changeCarColour(${1:Vehicle car},${2:int primaryColor},${3:int secondaryColor})",
		"description": "GTA_SA\nbool result = changeCarColour(Vehicle car, int primaryColor, int secondaryColor)\n",
		"prefix": "changeCarColour"

		"scope": "source.lua"
	},
	"switchPedRoadsOn": {
		"body": "switchPedRoadsOn(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nswitchPedRoadsOn(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsOn"

		"scope": "source.lua"
	},
	"switchPedRoadsOff": {
		"body": "switchPedRoadsOff(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nswitchPedRoadsOff(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsOff"

		"scope": "source.lua"
	},
	"setGangWeapons": {
		"body": "setGangWeapons(${1:int gang},${2:int weapons1},${3:int weapons2},${4:int weapons3})",
		"description": "GTA_SA\nsetGangWeapons(int gang, int weapons1, int weapons2, int weapons3)\n",
		"prefix": "setGangWeapons"

		"scope": "source.lua"
	},
	"isCharTouchingObjectOnFoot": {
		"body": "isCharTouchingObjectOnFoot(${1:Ped ped},${2:Object object})",
		"description": "GTA_SA\nbool result = isCharTouchingObjectOnFoot(Ped ped, Object object)\n",
		"prefix": "isCharTouchingObjectOnFoot"

		"scope": "source.lua"
	},
	"loadSpecialCharacter": {
		"body": "loadSpecialCharacter(${1:GxtString gxtString},${2:int id})",
		"description": "GTA_SA\nloadSpecialCharacter(GxtString gxtString, int id)\n",
		"prefix": "loadSpecialCharacter"

		"scope": "source.lua"
	},
	"hasSpecialCharacterLoaded": {
		"body": "hasSpecialCharacterLoaded(${1:int id})",
		"description": "GTA_SA\nbool result = hasSpecialCharacterLoaded(int id)\n",
		"prefix": "hasSpecialCharacterLoaded"

		"scope": "source.lua"
	},
	"isPlayerInRemoteMode": {
		"body": "isPlayerInRemoteMode(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerInRemoteMode(Player player)\n",
		"prefix": "isPlayerInRemoteMode"

		"scope": "source.lua"
	},
	"setCutsceneOffset": {
		"body": "setCutsceneOffset(${1:float posX},${2:float posY},${3:float posZ})",
		"description": "GTA_SA\nsetCutsceneOffset(float posX, float posY, float posZ)\n",
		"prefix": "setCutsceneOffset"

		"scope": "source.lua"
	},
	"setAnimGroupForChar": {
		"body": "setAnimGroupForChar(${1:Ped ped},${2:string style})",
		"description": "GTA_SA\nsetAnimGroupForChar(Ped ped, string style)\n",
		"prefix": "setAnimGroupForChar"

		"scope": "source.lua"
	},
	"requestModel": {
		"body": "requestModel(${1:Model modelId})",
		"description": "GTA_SA\nrequestModel(Model modelId)\n",
		"prefix": "requestModel"

		"scope": "source.lua"
	},
	"hasModelLoaded": {
		"body": "hasModelLoaded(${1:Model modelId})",
		"description": "GTA_SA\nbool result = hasModelLoaded(Model modelId)\n",
		"prefix": "hasModelLoaded"

		"scope": "source.lua"
	},
	"markModelAsNoLongerNeeded": {
		"body": "markModelAsNoLongerNeeded(${1:Model modelId})",
		"description": "GTA_SA\nmarkModelAsNoLongerNeeded(Model modelId)\n",
		"prefix": "markModelAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"drawCorona": {
		"body": "drawCorona(${1:float atX},${2:float atY},${3:float atZ},${4:float radius},${5:int type},${6:bool lensflares},${7:int r},${8:int g},${9:int b})",
		"description": "GTA_SA\ndrawCorona(float atX, float atY, float atZ, float radius, int type, bool lensflares, int r, int g, int b)\n",
		"prefix": "drawCorona"

		"scope": "source.lua"
	},
	"storeClock": {
		"body": "storeClock()",
		"description": "GTA_SA\nstoreClock()\n",
		"prefix": "storeClock"

		"scope": "source.lua"
	},
	"restoreClock": {
		"body": "restoreClock()",
		"description": "GTA_SA\nrestoreClock()\n",
		"prefix": "restoreClock"

		"scope": "source.lua"
	},
	"isPlayerPlaying": {
		"body": "isPlayerPlaying(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerPlaying(Player player)\n",
		"prefix": "isPlayerPlaying"

		"scope": "source.lua"
	},
	"getControllerMode": {
		"body": "getControllerMode()",
		"description": "GTA_SA\nint mode = getControllerMode()\n",
		"prefix": "getControllerMode"

		"scope": "source.lua"
	},
	"setCanResprayCar": {
		"body": "setCanResprayCar(${1:Vehicle car},${2:bool sprayable})",
		"description": "GTA_SA\nsetCanResprayCar(Vehicle car, bool sprayable)\n",
		"prefix": "setCanResprayCar"

		"scope": "source.lua"
	},
	"unloadSpecialCharacter": {
		"body": "unloadSpecialCharacter(${1:int id})",
		"description": "GTA_SA\nunloadSpecialCharacter(int id)\n",
		"prefix": "unloadSpecialCharacter"

		"scope": "source.lua"
	},
	"resetNumOfModelsKilledByPlayer": {
		"body": "resetNumOfModelsKilledByPlayer(${1:Player player})",
		"description": "GTA_SA\nresetNumOfModelsKilledByPlayer(Player player)\n",
		"prefix": "resetNumOfModelsKilledByPlayer"

		"scope": "source.lua"
	},
	"getNumOfModelsKilledByPlayer": {
		"body": "getNumOfModelsKilledByPlayer(${1:Player player},${2:Model modelId})",
		"description": "GTA_SA\nint quantity = getNumOfModelsKilledByPlayer(Player player, Model modelId)\n",
		"prefix": "getNumOfModelsKilledByPlayer"

		"scope": "source.lua"
	},
	"activateGarage": {
		"body": "activateGarage(${1:GxtString garage})",
		"description": "GTA_SA\nactivateGarage(GxtString garage)\n",
		"prefix": "activateGarage"

		"scope": "source.lua"
	},
	"createObjectNoOffset": {
		"body": "createObjectNoOffset(${1:Model modelId},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nObject object = createObjectNoOffset(Model modelId, float atX, float atY, float atZ)\n",
		"prefix": "createObjectNoOffset"

		"scope": "source.lua"
	},
	"isCharStopped": {
		"body": "isCharStopped(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharStopped(Ped ped)\n",
		"prefix": "isCharStopped"

		"scope": "source.lua"
	},
	"switchWidescreen": {
		"body": "switchWidescreen(${1:bool enable})",
		"description": "GTA_SA\nswitchWidescreen(bool enable)\n",
		"prefix": "switchWidescreen"

		"scope": "source.lua"
	},
	"addSpriteBlipForContactPoint": {
		"body": "addSpriteBlipForContactPoint(${1:float atX},${2:float atY},${3:float atZ},${4:int icon})",
		"description": "GTA_SA\nMarker marker = addSpriteBlipForContactPoint(float atX, float atY, float atZ, int icon)\n",
		"prefix": "addSpriteBlipForContactPoint"

		"scope": "source.lua"
	},
	"addSpriteBlipForCoord": {
		"body": "addSpriteBlipForCoord(${1:float atX},${2:float atY},${3:float atZ},${4:int type})",
		"description": "GTA_SA\nMarker marker = addSpriteBlipForCoord(float atX, float atY, float atZ, int type)\n",
		"prefix": "addSpriteBlipForCoord"

		"scope": "source.lua"
	},
	"setCharOnlyDamagedByPlayer": {
		"body": "setCharOnlyDamagedByPlayer(${1:Ped ped},${2:bool enabled})",
		"description": "GTA_SA\nsetCharOnlyDamagedByPlayer(Ped ped, bool enabled)\n",
		"prefix": "setCharOnlyDamagedByPlayer"

		"scope": "source.lua"
	},
	"setCarOnlyDamagedByPlayer": {
		"body": "setCarOnlyDamagedByPlayer(${1:Vehicle car},${2:bool enabled})",
		"description": "GTA_SA\nsetCarOnlyDamagedByPlayer(Vehicle car, bool enabled)\n",
		"prefix": "setCarOnlyDamagedByPlayer"

		"scope": "source.lua"
	},
	"setCharProofs": {
		"body": "setCharProofs(${1:Ped ped},${2:bool BP},${3:bool FP},${4:bool EP},${5:bool CP},${6:bool MP})",
		"description": "GTA_SA\nsetCharProofs(Ped ped, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setCharProofs"

		"scope": "source.lua"
	},
	"setCarProofs": {
		"body": "setCarProofs(${1:Vehicle car},${2:bool BP},${3:bool FP},${4:bool EP},${5:bool CP},${6:bool MP})",
		"description": "GTA_SA\nsetCarProofs(Vehicle car, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setCarProofs"

		"scope": "source.lua"
	},
	"deactivateGarage": {
		"body": "deactivateGarage(${1:GxtString garage})",
		"description": "GTA_SA\ndeactivateGarage(GxtString garage)\n",
		"prefix": "deactivateGarage"

		"scope": "source.lua"
	},
	"isCarInWater": {
		"body": "isCarInWater(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarInWater(Vehicle car)\n",
		"prefix": "isCarInWater"

		"scope": "source.lua"
	},
	"getClosestCharNode": {
		"body": "getClosestCharNode(${1:float closestToX},${2:float closestToY},${3:float closestToZ})",
		"description": "GTA_SA\nfloat nodeX, float nodeY, float nodeZ = getClosestCharNode(float closestToX, float closestToY, float closestToZ)\n",
		"prefix": "getClosestCharNode"

		"scope": "source.lua"
	},
	"getClosestCarNode": {
		"body": "getClosestCarNode(${1:float closestToX},${2:float closestToY},${3:float closestToZ})",
		"description": "GTA_SA\nfloat nodeX, float nodeY, float nodeZ = getClosestCarNode(float closestToX, float closestToY, float closestToZ)\n",
		"prefix": "getClosestCarNode"

		"scope": "source.lua"
	},
	"carGotoCoordinatesAccurate": {
		"body": "carGotoCoordinatesAccurate(${1:Vehicle car},${2:float toX},${3:float toY},${4:float toZ})",
		"description": "GTA_SA\ncarGotoCoordinatesAccurate(Vehicle car, float toX, float toY, float toZ)\n",
		"prefix": "carGotoCoordinatesAccurate"

		"scope": "source.lua"
	},
	"isCarOnScreen": {
		"body": "isCarOnScreen(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarOnScreen(Vehicle car)\n",
		"prefix": "isCarOnScreen"

		"scope": "source.lua"
	},
	"isCharOnScreen": {
		"body": "isCharOnScreen(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharOnScreen(Ped ped)\n",
		"prefix": "isCharOnScreen"

		"scope": "source.lua"
	},
	"isObjectOnScreen": {
		"body": "isObjectOnScreen(${1:Object object})",
		"description": "GTA_SA\nbool result = isObjectOnScreen(Object object)\n",
		"prefix": "isObjectOnScreen"

		"scope": "source.lua"
	},
	"getGroundZFor3dCoord": {
		"body": "getGroundZFor3dCoord(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nfloat z = getGroundZFor3dCoord(float atX, float atY, float atZ)\n",
		"prefix": "getGroundZFor3dCoord"

		"scope": "source.lua"
	},
	"startScriptFire": {
		"body": "startScriptFire(${1:float atX},${2:float atY},${3:float atZ},${4:int propagation},${5:int size})",
		"description": "GTA_SA\nint fire = startScriptFire(float atX, float atY, float atZ, int propagation, int size)\n",
		"prefix": "startScriptFire"

		"scope": "source.lua"
	},
	"isScriptFireExtinguished": {
		"body": "isScriptFireExtinguished(${1:int fire})",
		"description": "GTA_SA\nbool result = isScriptFireExtinguished(int fire)\n",
		"prefix": "isScriptFireExtinguished"

		"scope": "source.lua"
	},
	"removeScriptFire": {
		"body": "removeScriptFire(${1:int fire})",
		"description": "GTA_SA\nremoveScriptFire(int fire)\n",
		"prefix": "removeScriptFire"

		"scope": "source.lua"
	},
	"boatGotoCoords": {
		"body": "boatGotoCoords(${1:Vehicle boat},${2:float toX},${3:float toY},${4:float toZ})",
		"description": "GTA_SA\nboatGotoCoords(Vehicle boat, float toX, float toY, float toZ)\n",
		"prefix": "boatGotoCoords"

		"scope": "source.lua"
	},
	"boatStop": {
		"body": "boatStop(${1:Vehicle car})",
		"description": "GTA_SA\nboatStop(Vehicle car)\n",
		"prefix": "boatStop"

		"scope": "source.lua"
	},
	"isCharShootingInArea": {
		"body": "isCharShootingInArea(${1:Ped ped},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:int weapon})",
		"description": "GTA_SA\nbool result = isCharShootingInArea(Ped ped, float cornerAX, float cornerAY, float cornerBX, float cornerBY, int weapon)\n",
		"prefix": "isCharShootingInArea"

		"scope": "source.lua"
	},
	"isCurrentCharWeapon": {
		"body": "isCurrentCharWeapon(${1:Ped ped},${2:int weapon})",
		"description": "GTA_SA\nbool result = isCurrentCharWeapon(Ped ped, int weapon)\n",
		"prefix": "isCurrentCharWeapon"

		"scope": "source.lua"
	},
	"setBoatCruiseSpeed": {
		"body": "setBoatCruiseSpeed(${1:Vehicle boat},${2:float speed})",
		"description": "GTA_SA\nsetBoatCruiseSpeed(Vehicle boat, float speed)\n",
		"prefix": "setBoatCruiseSpeed"

		"scope": "source.lua"
	},
	"getRandomCharInZone": {
		"body": "getRandomCharInZone(${1:GxtString zone},${2:bool pedtype},${3:bool gang},${4:bool criminal_prostitute})",
		"description": "GTA_SA\nPed ped = getRandomCharInZone(GxtString zone, bool pedtype, bool gang, bool criminal_prostitute)\n",
		"prefix": "getRandomCharInZone"

		"scope": "source.lua"
	},
	"isCharShooting": {
		"body": "isCharShooting(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharShooting(Ped ped)\n",
		"prefix": "isCharShooting"

		"scope": "source.lua"
	},
	"createMoneyPickup": {
		"body": "createMoneyPickup(${1:float atX},${2:float atY},${3:float atZ},${4:int cash},${5:bool permanenceFlag})",
		"description": "GTA_SA\nPickup pickup = createMoneyPickup(float atX, float atY, float atZ, int cash, bool permanenceFlag)\n",
		"prefix": "createMoneyPickup"

		"scope": "source.lua"
	},
	"setCharAccuracy": {
		"body": "setCharAccuracy(${1:Ped ped},${2:int accuracy})",
		"description": "GTA_SA\nsetCharAccuracy(Ped ped, int accuracy)\n",
		"prefix": "setCharAccuracy"

		"scope": "source.lua"
	},
	"getCarSpeed": {
		"body": "getCarSpeed(${1:Vehicle car})",
		"description": "GTA_SA\nfloat speed = getCarSpeed(Vehicle car)\n",
		"prefix": "getCarSpeed"

		"scope": "source.lua"
	},
	"loadCutscene": {
		"body": "loadCutscene(${1:GxtString cutscene})",
		"description": "GTA_SA\nloadCutscene(GxtString cutscene)\n",
		"prefix": "loadCutscene"

		"scope": "source.lua"
	},
	"createCutsceneObject": {
		"body": "createCutsceneObject(${1:Model modelId})",
		"description": "GTA_SA\nObject object = createCutsceneObject(Model modelId)\n",
		"prefix": "createCutsceneObject"

		"scope": "source.lua"
	},
	"setCutsceneAnim": {
		"body": "setCutsceneAnim(${1:int cutscene},${2:GxtString anim})",
		"description": "GTA_SA\nsetCutsceneAnim(int cutscene, GxtString anim)\n",
		"prefix": "setCutsceneAnim"

		"scope": "source.lua"
	},
	"startCutscene": {
		"body": "startCutscene()",
		"description": "GTA_SA\nstartCutscene()\n",
		"prefix": "startCutscene"

		"scope": "source.lua"
	},
	"getCutsceneTime": {
		"body": "getCutsceneTime()",
		"description": "GTA_SA\nint time = getCutsceneTime()\n",
		"prefix": "getCutsceneTime"

		"scope": "source.lua"
	},
	"hasCutsceneFinished": {
		"body": "hasCutsceneFinished()",
		"description": "GTA_SA\nbool result = hasCutsceneFinished()\n",
		"prefix": "hasCutsceneFinished"

		"scope": "source.lua"
	},
	"clearCutscene": {
		"body": "clearCutscene()",
		"description": "GTA_SA\nclearCutscene()\n",
		"prefix": "clearCutscene"

		"scope": "source.lua"
	},
	"restoreCameraJumpcut": {
		"body": "restoreCameraJumpcut()",
		"description": "GTA_SA\nrestoreCameraJumpcut()\n",
		"prefix": "restoreCameraJumpcut"

		"scope": "source.lua"
	},
	"setCollectable1Total": {
		"body": "setCollectable1Total(${1:int total})",
		"description": "GTA_SA\nsetCollectable1Total(int total)\n",
		"prefix": "setCollectable1Total"

		"scope": "source.lua"
	},
	"isProjectileInArea": {
		"body": "isProjectileInArea(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nbool result = isProjectileInArea(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isProjectileInArea"

		"scope": "source.lua"
	},
	"isCharModel": {
		"body": "isCharModel(${1:Ped ped},${2:Model modelId})",
		"description": "GTA_SA\nbool result = isCharModel(Ped ped, Model modelId)\n",
		"prefix": "isCharModel"

		"scope": "source.lua"
	},
	"loadSpecialModel": {
		"body": "loadSpecialModel(${1:Model modelId},${2:GxtString gxtString})",
		"description": "GTA_SA\nloadSpecialModel(Model modelId, GxtString gxtString)\n",
		"prefix": "loadSpecialModel"

		"scope": "source.lua"
	},
	"getCarForwardX": {
		"body": "getCarForwardX(${1:Vehicle car})",
		"description": "GTA_SA\nfloat forwardX = getCarForwardX(Vehicle car)\n",
		"prefix": "getCarForwardX"

		"scope": "source.lua"
	},
	"getCarForwardY": {
		"body": "getCarForwardY(${1:Vehicle car})",
		"description": "GTA_SA\nfloat forwardY = getCarForwardY(Vehicle car)\n",
		"prefix": "getCarForwardY"

		"scope": "source.lua"
	},
	"changeGarageType": {
		"body": "changeGarageType(${1:GxtString garage},${2:int type})",
		"description": "GTA_SA\nchangeGarageType(GxtString garage, int type)\n",
		"prefix": "changeGarageType"

		"scope": "source.lua"
	},
	"printWith2NumbersNow": {
		"body": "printWith2NumbersNow(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int time},${5:int flag})",
		"description": "GTA_SA\nprintWith2NumbersNow(GxtString gxtString, int numbers1, int numbers2, int time, int flag)\n",
		"prefix": "printWith2NumbersNow"

		"scope": "source.lua"
	},
	"printWith3Numbers": {
		"body": "printWith3Numbers(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int numbers3},${5:int time},${6:int flag})",
		"description": "GTA_SA\nprintWith3Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int time, int flag)\n",
		"prefix": "printWith3Numbers"

		"scope": "source.lua"
	},
	"printWith4Numbers": {
		"body": "printWith4Numbers(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int numbers3},${5:int numbers4},${6:int time},${7:int flag})",
		"description": "GTA_SA\nprintWith4Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)\n",
		"prefix": "printWith4Numbers"

		"scope": "source.lua"
	},
	"printWith4NumbersNow": {
		"body": "printWith4NumbersNow(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int numbers3},${5:int numbers4},${6:int time},${7:int flag})",
		"description": "GTA_SA\nprintWith4NumbersNow(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int time, int flag)\n",
		"prefix": "printWith4NumbersNow"

		"scope": "source.lua"
	},
	"printWith6Numbers": {
		"body": "printWith6Numbers(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int numbers3},${5:int numbers4},${6:int numbers5},${7:int numbers6},${8:int time},${9:int flag})",
		"description": "GTA_SA\nprintWith6Numbers(GxtString gxtString, int numbers1, int numbers2, int numbers3, int numbers4, int numbers5, int numbers6, int time, int flag)\n",
		"prefix": "printWith6Numbers"

		"scope": "source.lua"
	},
	"playerMadeProgress": {
		"body": "playerMadeProgress(${1:int progress})",
		"description": "GTA_SA\nplayerMadeProgress(int progress)\n",
		"prefix": "playerMadeProgress"

		"scope": "source.lua"
	},
	"setProgressTotal": {
		"body": "setProgressTotal(${1:int maxProgress})",
		"description": "GTA_SA\nsetProgressTotal(int maxProgress)\n",
		"prefix": "setProgressTotal"

		"scope": "source.lua"
	},
	"registerMissionGiven": {
		"body": "registerMissionGiven()",
		"description": "GTA_SA\nregisterMissionGiven()\n",
		"prefix": "registerMissionGiven"

		"scope": "source.lua"
	},
	"registerMissionPassed": {
		"body": "registerMissionPassed(${1:GxtString mission})",
		"description": "GTA_SA\nregisterMissionPassed(GxtString mission)\n",
		"prefix": "registerMissionPassed"

		"scope": "source.lua"
	},
	"removeAllScriptFires": {
		"body": "removeAllScriptFires()",
		"description": "GTA_SA\nremoveAllScriptFires()\n",
		"prefix": "removeAllScriptFires"

		"scope": "source.lua"
	},
	"hasCharBeenDamagedByWeapon": {
		"body": "hasCharBeenDamagedByWeapon(${1:Ped ped},${2:int weapon})",
		"description": "GTA_SA\nbool result = hasCharBeenDamagedByWeapon(Ped ped, int weapon)\n",
		"prefix": "hasCharBeenDamagedByWeapon"

		"scope": "source.lua"
	},
	"hasCarBeenDamagedByWeapon": {
		"body": "hasCarBeenDamagedByWeapon(${1:Vehicle car},${2:int weapon})",
		"description": "GTA_SA\nbool result = hasCarBeenDamagedByWeapon(Vehicle car, int weapon)\n",
		"prefix": "hasCarBeenDamagedByWeapon"

		"scope": "source.lua"
	},
	"explodeCharHead": {
		"body": "explodeCharHead(${1:Ped ped})",
		"description": "GTA_SA\nexplodeCharHead(Ped ped)\n",
		"prefix": "explodeCharHead"

		"scope": "source.lua"
	},
	"anchorBoat": {
		"body": "anchorBoat(${1:Vehicle boat},${2:bool anchor})",
		"description": "GTA_SA\nanchorBoat(Vehicle boat, bool anchor)\n",
		"prefix": "anchorBoat"

		"scope": "source.lua"
	},
	"startCarFire": {
		"body": "startCarFire(${1:Vehicle car})",
		"description": "GTA_SA\nint fire = startCarFire(Vehicle car)\n",
		"prefix": "startCarFire"

		"scope": "source.lua"
	},
	"startCharFire": {
		"body": "startCharFire(${1:Ped ped})",
		"description": "GTA_SA\nint fire = startCharFire(Ped ped)\n",
		"prefix": "startCharFire"

		"scope": "source.lua"
	},
	"getRandomCarOfTypeInArea": {
		"body": "getRandomCarOfTypeInArea(${1:float cornerAX},${2:float cornerAY},${3:float cornerBX},${4:float cornerBY},${5:Model modelId})",
		"description": "GTA_SA\nVehicle car = getRandomCarOfTypeInArea(float cornerAX, float cornerAY, float cornerBX, float cornerBY, Model modelId)\n",
		"prefix": "getRandomCarOfTypeInArea"

		"scope": "source.lua"
	},
	"hasResprayHappened": {
		"body": "hasResprayHappened(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = hasResprayHappened(Vehicle car)\n",
		"prefix": "hasResprayHappened"

		"scope": "source.lua"
	},
	"setCameraZoom": {
		"body": "setCameraZoom(${1:int mode})",
		"description": "GTA_SA\nsetCameraZoom(int mode)\n",
		"prefix": "setCameraZoom"

		"scope": "source.lua"
	},
	"createPickupWithAmmo": {
		"body": "createPickupWithAmmo(${1:Model modelId},${2:int type},${3:int ammo},${4:float atX},${5:float atY},${6:float atZ})",
		"description": "GTA_SA\nPickup pickup = createPickupWithAmmo(Model modelId, int type, int ammo, float atX, float atY, float atZ)\n",
		"prefix": "createPickupWithAmmo"

		"scope": "source.lua"
	},
	"setCarRamCar": {
		"body": "setCarRamCar(${1:Vehicle car},${2:Vehicle car})",
		"description": "GTA_SA\nsetCarRamCar(Vehicle car, Vehicle car)\n",
		"prefix": "setCarRamCar"

		"scope": "source.lua"
	},
	"setPlayerNeverGetsTired": {
		"body": "setPlayerNeverGetsTired(${1:Player player},${2:bool infiniteRun})",
		"description": "GTA_SA\nsetPlayerNeverGetsTired(Player player, bool infiniteRun)\n",
		"prefix": "setPlayerNeverGetsTired"

		"scope": "source.lua"
	},
	"setPlayerFastReload": {
		"body": "setPlayerFastReload(${1:Player player},${2:bool fastReload})",
		"description": "GTA_SA\nsetPlayerFastReload(Player player, bool fastReload)\n",
		"prefix": "setPlayerFastReload"

		"scope": "source.lua"
	},
	"setCharBleeding": {
		"body": "setCharBleeding(${1:Ped ped},${2:bool bleeding})",
		"description": "GTA_SA\nsetCharBleeding(Ped ped, bool bleeding)\n",
		"prefix": "setCharBleeding"

		"scope": "source.lua"
	},
	"setFreeResprays": {
		"body": "setFreeResprays(${1:bool enable})",
		"description": "GTA_SA\nsetFreeResprays(bool enable)\n",
		"prefix": "setFreeResprays"

		"scope": "source.lua"
	},
	"setCharVisible": {
		"body": "setCharVisible(${1:Ped ped},${2:bool visible})",
		"description": "GTA_SA\nsetCharVisible(Ped ped, bool visible)\n",
		"prefix": "setCharVisible"

		"scope": "source.lua"
	},
	"setCarVisible": {
		"body": "setCarVisible(${1:Vehicle car},${2:bool visible})",
		"description": "GTA_SA\nsetCarVisible(Vehicle car, bool visible)\n",
		"prefix": "setCarVisible"

		"scope": "source.lua"
	},
	"isAreaOccupied": {
		"body": "isAreaOccupied(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ},${7:bool solid},${8:bool car},${9:bool actor},${10:bool object},${11:bool particle})",
		"description": "GTA_SA\nbool result = isAreaOccupied(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool solid, bool car, bool actor, bool object, bool particle)\n",
		"prefix": "isAreaOccupied"

		"scope": "source.lua"
	},
	"displayText": {
		"body": "displayText(${1:float posX},${2:float posY},${3:GxtString gxtString})",
		"description": "GTA_SA\ndisplayText(float posX, float posY, GxtString gxtString)\n",
		"prefix": "displayText"

		"scope": "source.lua"
	},
	"setTextScale": {
		"body": "setTextScale(${1:float sizeX},${2:float sizeY})",
		"description": "GTA_SA\nsetTextScale(float sizeX, float sizeY)\n",
		"prefix": "setTextScale"

		"scope": "source.lua"
	},
	"setTextColour": {
		"body": "setTextColour(${1:int r},${2:int g},${3:int b},${4:int a})",
		"description": "GTA_SA\nsetTextColour(int r, int g, int b, int a)\n",
		"prefix": "setTextColour"

		"scope": "source.lua"
	},
	"setTextJustify": {
		"body": "setTextJustify(${1:bool alignJustify})",
		"description": "GTA_SA\nsetTextJustify(bool alignJustify)\n",
		"prefix": "setTextJustify"

		"scope": "source.lua"
	},
	"setTextCentre": {
		"body": "setTextCentre(${1:bool centered})",
		"description": "GTA_SA\nsetTextCentre(bool centered)\n",
		"prefix": "setTextCentre"

		"scope": "source.lua"
	},
	"setTextWrapx": {
		"body": "setTextWrapx(${1:float linewidth})",
		"description": "GTA_SA\nsetTextWrapx(float linewidth)\n",
		"prefix": "setTextWrapx"

		"scope": "source.lua"
	},
	"setTextCentreSize": {
		"body": "setTextCentreSize(${1:float linewidth})",
		"description": "GTA_SA\nsetTextCentreSize(float linewidth)\n",
		"prefix": "setTextCentreSize"

		"scope": "source.lua"
	},
	"setTextBackground": {
		"body": "setTextBackground(${1:bool background})",
		"description": "GTA_SA\nsetTextBackground(bool background)\n",
		"prefix": "setTextBackground"

		"scope": "source.lua"
	},
	"setTextProportional": {
		"body": "setTextProportional(${1:bool proportional})",
		"description": "GTA_SA\nsetTextProportional(bool proportional)\n",
		"prefix": "setTextProportional"

		"scope": "source.lua"
	},
	"setTextFont": {
		"body": "setTextFont(${1:int font})",
		"description": "GTA_SA\nsetTextFont(int font)\n",
		"prefix": "setTextFont"

		"scope": "source.lua"
	},
	"rotateObject": {
		"body": "rotateObject(${1:Object object},${2:float fromAngle},${3:float toAngle},${4:bool flag})",
		"description": "GTA_SA\nbool result = rotateObject(Object object, float fromAngle, float toAngle, bool flag)\n",
		"prefix": "rotateObject"

		"scope": "source.lua"
	},
	"slideObject": {
		"body": "slideObject(${1:Object object},${2:float toX},${3:float toY},${4:float toZ},${5:float speedX},${6:float speedY},${7:float speedZ},${8:bool collisionCheck})",
		"description": "GTA_SA\nbool result = slideObject(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collisionCheck)\n",
		"prefix": "slideObject"

		"scope": "source.lua"
	},
	"removeCharElegantly": {
		"body": "removeCharElegantly(${1:Ped ped})",
		"description": "GTA_SA\nremoveCharElegantly(Ped ped)\n",
		"prefix": "removeCharElegantly"

		"scope": "source.lua"
	},
	"setCharStayInSamePlace": {
		"body": "setCharStayInSamePlace(${1:Ped ped},${2:bool enabled})",
		"description": "GTA_SA\nsetCharStayInSamePlace(Ped ped, bool enabled)\n",
		"prefix": "setCharStayInSamePlace"

		"scope": "source.lua"
	},
	"isExplosionInArea": {
		"body": "isExplosionInArea(${1:int explosionType},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ})",
		"description": "GTA_SA\nbool result = isExplosionInArea(int explosionType, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isExplosionInArea"

		"scope": "source.lua"
	},
	"placeObjectRelativeToCar": {
		"body": "placeObjectRelativeToCar(${1:Object object},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ})",
		"description": "GTA_SA\nplaceObjectRelativeToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "placeObjectRelativeToCar"

		"scope": "source.lua"
	},
	"makeObjectTargettable": {
		"body": "makeObjectTargettable(${1:Object object},${2:bool targetable})",
		"description": "GTA_SA\nmakeObjectTargettable(Object object, bool targetable)\n",
		"prefix": "makeObjectTargettable"

		"scope": "source.lua"
	},
	"addArmourToChar": {
		"body": "addArmourToChar(${1:Ped ped},${2:int points})",
		"description": "GTA_SA\naddArmourToChar(Ped ped, int points)\n",
		"prefix": "addArmourToChar"

		"scope": "source.lua"
	},
	"openGarage": {
		"body": "openGarage(${1:GxtString garage})",
		"description": "GTA_SA\nopenGarage(GxtString garage)\n",
		"prefix": "openGarage"

		"scope": "source.lua"
	},
	"closeGarage": {
		"body": "closeGarage(${1:GxtString garage})",
		"description": "GTA_SA\ncloseGarage(GxtString garage)\n",
		"prefix": "closeGarage"

		"scope": "source.lua"
	},
	"warpCharFromCarToCoord": {
		"body": "warpCharFromCarToCoord(${1:Ped ped},${2:float placeAtX},${3:float placeAtY},${4:float placeAtZ})",
		"description": "GTA_SA\nwarpCharFromCarToCoord(Ped ped, float placeAtX, float placeAtY, float placeAtZ)\n",
		"prefix": "warpCharFromCarToCoord"

		"scope": "source.lua"
	},
	"setVisibilityOfClosestObjectOfType": {
		"body": "setVisibilityOfClosestObjectOfType(${1:float atX},${2:float atY},${3:float atZ},${4:float radius},${5:Model modelId},${6:bool visibility})",
		"description": "GTA_SA\nsetVisibilityOfClosestObjectOfType(float atX, float atY, float atZ, float radius, Model modelId, bool visibility)\n",
		"prefix": "setVisibilityOfClosestObjectOfType"

		"scope": "source.lua"
	},
	"hasCharSpottedChar": {
		"body": "hasCharSpottedChar(${1:Ped ped},${2:Ped ped})",
		"description": "GTA_SA\nbool result = hasCharSpottedChar(Ped ped, Ped ped)\n",
		"prefix": "hasCharSpottedChar"

		"scope": "source.lua"
	},
	"hasObjectBeenDamaged": {
		"body": "hasObjectBeenDamaged(${1:Object object})",
		"description": "GTA_SA\nbool result = hasObjectBeenDamaged(Object object)\n",
		"prefix": "hasObjectBeenDamaged"

		"scope": "source.lua"
	},
	"warpCharIntoCar": {
		"body": "warpCharIntoCar(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\nwarpCharIntoCar(Ped ped, Vehicle car)\n",
		"prefix": "warpCharIntoCar"

		"scope": "source.lua"
	},
	"printWith2NumbersBig": {
		"body": "printWith2NumbersBig(${1:GxtString gxtString},${2:int numbers1},${3:int numbers2},${4:int time},${5:int style})",
		"description": "GTA_SA\nprintWith2NumbersBig(GxtString gxtString, int numbers1, int numbers2, int time, int style)\n",
		"prefix": "printWith2NumbersBig"

		"scope": "source.lua"
	},
	"setCameraBehindPlayer": {
		"body": "setCameraBehindPlayer()",
		"description": "GTA_SA\nsetCameraBehindPlayer()\n",
		"prefix": "setCameraBehindPlayer"

		"scope": "source.lua"
	},
	"createRandomChar": {
		"body": "createRandomChar(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nPed ped = createRandomChar(float atX, float atY, float atZ)\n",
		"prefix": "createRandomChar"

		"scope": "source.lua"
	},
	"isSniperBulletInArea": {
		"body": "isSniperBulletInArea(${1:float float1},${2:float float2},${3:float float3},${4:float float4},${5:float float5},${6:float float6})",
		"description": "GTA_SA\nbool result = isSniperBulletInArea(float float1, float float2, float float3, float float4, float float5, float float6)\n",
		"prefix": "isSniperBulletInArea"

		"scope": "source.lua"
	},
	"setObjectVelocity": {
		"body": "setObjectVelocity(${1:Object object},${2:float velocityInDirectionX},${3:float velocityInDirectionY},${4:float velocityInDirectionZ})",
		"description": "GTA_SA\nsetObjectVelocity(Object object, float velocityInDirectionX, float velocityInDirectionY, float velocityInDirectionZ)\n",
		"prefix": "setObjectVelocity"

		"scope": "source.lua"
	},
	"setObjectCollision": {
		"body": "setObjectCollision(${1:Object object},${2:bool collision})",
		"description": "GTA_SA\nsetObjectCollision(Object object, bool collision)\n",
		"prefix": "setObjectCollision"

		"scope": "source.lua"
	},
	"printStringInStringNow": {
		"body": "printStringInStringNow(${1:GxtString gxtString},${2:GxtString string},${3:int time1},${4:int time2})",
		"description": "GTA_SA\nprintStringInStringNow(GxtString gxtString, GxtString string, int time1, int time2)\n",
		"prefix": "printStringInStringNow"

		"scope": "source.lua"
	},
	"isPointObscuredByAMissionEntity": {
		"body": "isPointObscuredByAMissionEntity(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nbool result = isPointObscuredByAMissionEntity(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isPointObscuredByAMissionEntity"

		"scope": "source.lua"
	},
	"loadAllModelsNow": {
		"body": "loadAllModelsNow()",
		"description": "GTA_SA\nloadAllModelsNow()\n",
		"prefix": "loadAllModelsNow"

		"scope": "source.lua"
	},
	"addToObjectVelocity": {
		"body": "addToObjectVelocity(${1:Object object},${2:float velocityX},${3:float velocityY},${4:float velocityZ})",
		"description": "GTA_SA\naddToObjectVelocity(Object object, float velocityX, float velocityY, float velocityZ)\n",
		"prefix": "addToObjectVelocity"

		"scope": "source.lua"
	},
	"drawSprite": {
		"body": "drawSprite(${1:int texture},${2:float positionX},${3:float positionY},${4:float width},${5:float height},${6:int r},${7:int g},${8:int b},${9:int a})",
		"description": "GTA_SA\ndrawSprite(int texture, float positionX, float positionY, float width, float height, int r, int g, int b, int a)\n",
		"prefix": "drawSprite"

		"scope": "source.lua"
	},
	"drawRect": {
		"body": "drawRect(${1:float positionX},${2:float positionY},${3:float width},${4:float height},${5:int r},${6:int g},${7:int b},${8:int a})",
		"description": "GTA_SA\ndrawRect(float positionX, float positionY, float width, float height, int r, int g, int b, int a)\n",
		"prefix": "drawRect"

		"scope": "source.lua"
	},
	"loadSprite": {
		"body": "loadSprite(${1:string name})",
		"description": "GTA_SA\nint id = loadSprite(string name)\n",
		"prefix": "loadSprite"

		"scope": "source.lua"
	},
	"loadTextureDictionary": {
		"body": "loadTextureDictionary(${1:zstring txd})",
		"description": "GTA_SA\nbool result = loadTextureDictionary(zstring txd)\n",
		"prefix": "loadTextureDictionary"

		"scope": "source.lua"
	},
	"removeTextureDictionary": {
		"body": "removeTextureDictionary()",
		"description": "GTA_SA\nremoveTextureDictionary()\n",
		"prefix": "removeTextureDictionary"

		"scope": "source.lua"
	},
	"setObjectDynamic": {
		"body": "setObjectDynamic(${1:Object object},${2:bool moveable})",
		"description": "GTA_SA\nsetObjectDynamic(Object object, bool moveable)\n",
		"prefix": "setObjectDynamic"

		"scope": "source.lua"
	},
	"setCharAnimSpeed": {
		"body": "setCharAnimSpeed(${1:Ped ped},${2:string animation},${3:float speed})",
		"description": "GTA_SA\nsetCharAnimSpeed(Ped ped, string animation, float speed)\n",
		"prefix": "setCharAnimSpeed"

		"scope": "source.lua"
	},
	"playMissionPassedTune": {
		"body": "playMissionPassedTune(${1:int music})",
		"description": "GTA_SA\nplayMissionPassedTune(int music)\n",
		"prefix": "playMissionPassedTune"

		"scope": "source.lua"
	},
	"clearArea": {
		"body": "clearArea(${1:float atX},${2:float atY},${3:float atZ},${4:float radius},${5:bool area})",
		"description": "GTA_SA\nclearArea(float atX, float atY, float atZ, float radius, bool area)\n",
		"prefix": "clearArea"

		"scope": "source.lua"
	},
	"freezeOnscreenTimer": {
		"body": "freezeOnscreenTimer(${1:bool timer})",
		"description": "GTA_SA\nfreezeOnscreenTimer(bool timer)\n",
		"prefix": "freezeOnscreenTimer"

		"scope": "source.lua"
	},
	"switchCarSiren": {
		"body": "switchCarSiren(${1:Vehicle car},${2:bool siren})",
		"description": "GTA_SA\nswitchCarSiren(Vehicle car, bool siren)\n",
		"prefix": "switchCarSiren"

		"scope": "source.lua"
	},
	"setCarWatertight": {
		"body": "setCarWatertight(${1:Vehicle car},${2:bool watertight})",
		"description": "GTA_SA\nsetCarWatertight(Vehicle car, bool watertight)\n",
		"prefix": "setCarWatertight"

		"scope": "source.lua"
	},
	"setCharCantBeDraggedOut": {
		"body": "setCharCantBeDraggedOut(${1:Ped ped},${2:bool locked})",
		"description": "GTA_SA\nsetCharCantBeDraggedOut(Ped ped, bool locked)\n",
		"prefix": "setCharCantBeDraggedOut"

		"scope": "source.lua"
	},
	"turnCarToFaceCoord": {
		"body": "turnCarToFaceCoord(${1:Vehicle car},${2:float coordX},${3:float coordY})",
		"description": "GTA_SA\nturnCarToFaceCoord(Vehicle car, float coordX, float coordY)\n",
		"prefix": "turnCarToFaceCoord"

		"scope": "source.lua"
	},
	"drawSphere": {
		"body": "drawSphere(${1:float atX},${2:float atY},${3:float atZ},${4:float radius})",
		"description": "GTA_SA\ndrawSphere(float atX, float atY, float atZ, float radius)\n",
		"prefix": "drawSphere"

		"scope": "source.lua"
	},
	"setCarStatus": {
		"body": "setCarStatus(${1:Vehicle car},${2:int action})",
		"description": "GTA_SA\nsetCarStatus(Vehicle car, int action)\n",
		"prefix": "setCarStatus"

		"scope": "source.lua"
	},
	"isCharMale": {
		"body": "isCharMale(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharMale(Ped ped)\n",
		"prefix": "isCharMale"

		"scope": "source.lua"
	},
	"policeRadioMessage": {
		"body": "policeRadioMessage(${1:float float1},${2:float float2},${3:float float3})",
		"description": "GTA_SA\npoliceRadioMessage(float float1, float float2, float float3)\n",
		"prefix": "policeRadioMessage"

		"scope": "source.lua"
	},
	"setCarStrong": {
		"body": "setCarStrong(${1:Vehicle car},${2:bool strong})",
		"description": "GTA_SA\nsetCarStrong(Vehicle car, bool strong)\n",
		"prefix": "setCarStrong"

		"scope": "source.lua"
	},
	"switchRubbish": {
		"body": "switchRubbish(${1:bool int1})",
		"description": "GTA_SA\nswitchRubbish(bool int1)\n",
		"prefix": "switchRubbish"

		"scope": "source.lua"
	},
	"switchStreaming": {
		"body": "switchStreaming(${1:bool streaming})",
		"description": "GTA_SA\nswitchStreaming(bool streaming)\n",
		"prefix": "switchStreaming"

		"scope": "source.lua"
	},
	"isGarageOpen": {
		"body": "isGarageOpen(${1:GxtString garage})",
		"description": "GTA_SA\nbool result = isGarageOpen(GxtString garage)\n",
		"prefix": "isGarageOpen"

		"scope": "source.lua"
	},
	"isGarageClosed": {
		"body": "isGarageClosed(${1:GxtString garage})",
		"description": "GTA_SA\nbool result = isGarageClosed(GxtString garage)\n",
		"prefix": "isGarageClosed"

		"scope": "source.lua"
	},
	"swapNearestBuildingModel": {
		"body": "swapNearestBuildingModel(${1:float atX},${2:float atY},${3:float atZ},${4:float radius},${5:Model from},${6:Model to})",
		"description": "GTA_SA\nswapNearestBuildingModel(float atX, float atY, float atZ, float radius, Model from, Model to)\n",
		"prefix": "swapNearestBuildingModel"

		"scope": "source.lua"
	},
	"switchWorldProcessing": {
		"body": "switchWorldProcessing(${1:bool cutsceneOnly})",
		"description": "GTA_SA\nswitchWorldProcessing(bool cutsceneOnly)\n",
		"prefix": "switchWorldProcessing"

		"scope": "source.lua"
	},
	"clearAreaOfCars": {
		"body": "clearAreaOfCars(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nclearAreaOfCars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "clearAreaOfCars"

		"scope": "source.lua"
	},
	"addSphere": {
		"body": "addSphere(${1:float atX},${2:float atY},${3:float atZ},${4:float radius})",
		"description": "GTA_SA\nint sphere = addSphere(float atX, float atY, float atZ, float radius)\n",
		"prefix": "addSphere"

		"scope": "source.lua"
	},
	"removeSphere": {
		"body": "removeSphere(${1:int sphere})",
		"description": "GTA_SA\nremoveSphere(int sphere)\n",
		"prefix": "removeSphere"

		"scope": "source.lua"
	},
	"setEveryoneIgnorePlayer": {
		"body": "setEveryoneIgnorePlayer(${1:Player player},${2:bool ignored})",
		"description": "GTA_SA\nsetEveryoneIgnorePlayer(Player player, bool ignored)\n",
		"prefix": "setEveryoneIgnorePlayer"

		"scope": "source.lua"
	},
	"storeCarCharIsInNoSave": {
		"body": "storeCarCharIsInNoSave(${1:Ped ped})",
		"description": "GTA_SA\nVehicle car = storeCarCharIsInNoSave(Ped ped)\n",
		"prefix": "storeCarCharIsInNoSave"

		"scope": "source.lua"
	},
	"displayOnscreenTimerWithString": {
		"body": "displayOnscreenTimerWithString(${1:VarId timer},${2:int type},${3:GxtString gxtString})",
		"description": "GTA_SA\ndisplayOnscreenTimerWithString(VarId timer, int type, GxtString gxtString)\n",
		"prefix": "displayOnscreenTimerWithString"

		"scope": "source.lua"
	},
	"displayOnscreenCounterWithString": {
		"body": "displayOnscreenCounterWithString(${1:VarId var},${2:bool type},${3:GxtString gxtString})",
		"description": "GTA_SA\ndisplayOnscreenCounterWithString(VarId var, bool type, GxtString gxtString)\n",
		"prefix": "displayOnscreenCounterWithString"

		"scope": "source.lua"
	},
	"createRandomCarForCarPark": {
		"body": "createRandomCarForCarPark(${1:float coordsX},${2:float coordsY},${3:float coordsZ},${4:float zAngle})",
		"description": "GTA_SA\ncreateRandomCarForCarPark(float coordsX, float coordsY, float coordsZ, float zAngle)\n",
		"prefix": "createRandomCarForCarPark"

		"scope": "source.lua"
	},
	"setWantedMultiplier": {
		"body": "setWantedMultiplier(${1:float sensitivity})",
		"description": "GTA_SA\nsetWantedMultiplier(float sensitivity)\n",
		"prefix": "setWantedMultiplier"

		"scope": "source.lua"
	},
	"setCameraInFrontOfPlayer": {
		"body": "setCameraInFrontOfPlayer()",
		"description": "GTA_SA\nsetCameraInFrontOfPlayer()\n",
		"prefix": "setCameraInFrontOfPlayer"

		"scope": "source.lua"
	},
	"isCarVisiblyDamaged": {
		"body": "isCarVisiblyDamaged(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarVisiblyDamaged(Vehicle car)\n",
		"prefix": "isCarVisiblyDamaged"

		"scope": "source.lua"
	},
	"doesObjectExist": {
		"body": "doesObjectExist(${1:Object object})",
		"description": "GTA_SA\nbool result = doesObjectExist(Object object)\n",
		"prefix": "doesObjectExist"

		"scope": "source.lua"
	},
	"loadScene": {
		"body": "loadScene(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nloadScene(float atX, float atY, float atZ)\n",
		"prefix": "loadScene"

		"scope": "source.lua"
	},
	"addStuckCarCheck": {
		"body": "addStuckCarCheck(${1:Vehicle car},${2:float stuckCheckDistance},${3:int time})",
		"description": "GTA_SA\naddStuckCarCheck(Vehicle car, float stuckCheckDistance, int time)\n",
		"prefix": "addStuckCarCheck"

		"scope": "source.lua"
	},
	"removeStuckCarCheck": {
		"body": "removeStuckCarCheck(${1:Vehicle car})",
		"description": "GTA_SA\nremoveStuckCarCheck(Vehicle car)\n",
		"prefix": "removeStuckCarCheck"

		"scope": "source.lua"
	},
	"isCarStuck": {
		"body": "isCarStuck(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarStuck(Vehicle car)\n",
		"prefix": "isCarStuck"

		"scope": "source.lua"
	},
	"loadMissionAudio": {
		"body": "loadMissionAudio(${1:int asId},${2:int name})",
		"description": "GTA_SA\nloadMissionAudio(int asId, int name)\n",
		"prefix": "loadMissionAudio"

		"scope": "source.lua"
	},
	"hasMissionAudioLoaded": {
		"body": "hasMissionAudioLoaded(${1:int id})",
		"description": "GTA_SA\nbool result = hasMissionAudioLoaded(int id)\n",
		"prefix": "hasMissionAudioLoaded"

		"scope": "source.lua"
	},
	"playMissionAudio": {
		"body": "playMissionAudio(${1:int id})",
		"description": "GTA_SA\nplayMissionAudio(int id)\n",
		"prefix": "playMissionAudio"

		"scope": "source.lua"
	},
	"hasMissionAudioFinished": {
		"body": "hasMissionAudioFinished(${1:int id})",
		"description": "GTA_SA\nbool result = hasMissionAudioFinished(int id)\n",
		"prefix": "hasMissionAudioFinished"

		"scope": "source.lua"
	},
	"getClosestCarNodeWithHeading": {
		"body": "getClosestCarNodeWithHeading(${1:float X},${2:float Y},${3:float Z})",
		"description": "GTA_SA\nfloat nodeX, float nodeY, float nodeZ, float angle = getClosestCarNodeWithHeading(float X, float Y, float Z)\n",
		"prefix": "getClosestCarNodeWithHeading"

		"scope": "source.lua"
	},
	"hasImportGarageSlotBeenFilled": {
		"body": "hasImportGarageSlotBeenFilled(${1:int int1},${2:int int2})",
		"description": "GTA_SA\nbool result = hasImportGarageSlotBeenFilled(int int1, int int2)\n",
		"prefix": "hasImportGarageSlotBeenFilled"

		"scope": "source.lua"
	},
	"clearThisPrint": {
		"body": "clearThisPrint(${1:GxtString text})",
		"description": "GTA_SA\nclearThisPrint(GxtString text)\n",
		"prefix": "clearThisPrint"

		"scope": "source.lua"
	},
	"clearThisBigPrint": {
		"body": "clearThisBigPrint(${1:GxtString text})",
		"description": "GTA_SA\nclearThisBigPrint(GxtString text)\n",
		"prefix": "clearThisBigPrint"

		"scope": "source.lua"
	},
	"setMissionAudioPosition": {
		"body": "setMissionAudioPosition(${1:int id},${2:float locationX},${3:float locationY},${4:float locationZ})",
		"description": "GTA_SA\nsetMissionAudioPosition(int id, float locationX, float locationY, float locationZ)\n",
		"prefix": "setMissionAudioPosition"

		"scope": "source.lua"
	},
	"activateSaveMenu": {
		"body": "activateSaveMenu()",
		"description": "GTA_SA\nactivateSaveMenu()\n",
		"prefix": "activateSaveMenu"

		"scope": "source.lua"
	},
	"hasSaveGameFinished": {
		"body": "hasSaveGameFinished()",
		"description": "GTA_SA\nbool result = hasSaveGameFinished()\n",
		"prefix": "hasSaveGameFinished"

		"scope": "source.lua"
	},
	"noSpecialCameraForThisGarage": {
		"body": "noSpecialCameraForThisGarage(${1:int int1})",
		"description": "GTA_SA\nnoSpecialCameraForThisGarage(int int1)\n",
		"prefix": "noSpecialCameraForThisGarage"

		"scope": "source.lua"
	},
	"addBlipForPickup": {
		"body": "addBlipForPickup(${1:Pickup pickup})",
		"description": "GTA_SA\nMarker marker = addBlipForPickup(Pickup pickup)\n",
		"prefix": "addBlipForPickup"

		"scope": "source.lua"
	},
	"setPedDensityMultiplier": {
		"body": "setPedDensityMultiplier(${1:float multiplier})",
		"description": "GTA_SA\nsetPedDensityMultiplier(float multiplier)\n",
		"prefix": "setPedDensityMultiplier"

		"scope": "source.lua"
	},
	"setTextDrawBeforeFade": {
		"body": "setTextDrawBeforeFade(${1:bool int1})",
		"description": "GTA_SA\nsetTextDrawBeforeFade(bool int1)\n",
		"prefix": "setTextDrawBeforeFade"

		"scope": "source.lua"
	},
	"getCollectable1sCollected": {
		"body": "getCollectable1sCollected()",
		"description": "GTA_SA\nint collected = getCollectable1sCollected()\n",
		"prefix": "getCollectable1sCollected"

		"scope": "source.lua"
	},
	"setSpritesDrawBeforeFade": {
		"body": "setSpritesDrawBeforeFade(${1:bool antialiased})",
		"description": "GTA_SA\nsetSpritesDrawBeforeFade(bool antialiased)\n",
		"prefix": "setSpritesDrawBeforeFade"

		"scope": "source.lua"
	},
	"setTextRightJustify": {
		"body": "setTextRightJustify(${1:bool alignRight})",
		"description": "GTA_SA\nsetTextRightJustify(bool alignRight)\n",
		"prefix": "setTextRightJustify"

		"scope": "source.lua"
	},
	"printHelp": {
		"body": "printHelp(${1:GxtString gxtString})",
		"description": "GTA_SA\nprintHelp(GxtString gxtString)\n",
		"prefix": "printHelp"

		"scope": "source.lua"
	},
	"clearHelp": {
		"body": "clearHelp()",
		"description": "GTA_SA\nclearHelp()\n",
		"prefix": "clearHelp"

		"scope": "source.lua"
	},
	"flashHudObject": {
		"body": "flashHudObject(${1:int hudComponent})",
		"description": "GTA_SA\nflashHudObject(int hudComponent)\n",
		"prefix": "flashHudObject"

		"scope": "source.lua"
	},
	"setGenerateCarsAroundCamera": {
		"body": "setGenerateCarsAroundCamera(${1:bool int1})",
		"description": "GTA_SA\nsetGenerateCarsAroundCamera(bool int1)\n",
		"prefix": "setGenerateCarsAroundCamera"

		"scope": "source.lua"
	},
	"clearSmallPrints": {
		"body": "clearSmallPrints()",
		"description": "GTA_SA\nclearSmallPrints()\n",
		"prefix": "clearSmallPrints"

		"scope": "source.lua"
	},
	"setUpsidedownCarNotDamaged": {
		"body": "setUpsidedownCarNotDamaged(${1:Vehicle car},${2:bool disableFlippedExplosion})",
		"description": "GTA_SA\nsetUpsidedownCarNotDamaged(Vehicle car, bool disableFlippedExplosion)\n",
		"prefix": "setUpsidedownCarNotDamaged"

		"scope": "source.lua"
	},
	"isPlayerControllable": {
		"body": "isPlayerControllable(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerControllable(Player player)\n",
		"prefix": "isPlayerControllable"

		"scope": "source.lua"
	},
	"makePlayerSafe": {
		"body": "makePlayerSafe(${1:Player player})",
		"description": "GTA_SA\nmakePlayerSafe(Player player)\n",
		"prefix": "makePlayerSafe"

		"scope": "source.lua"
	},
	"getCarColours": {
		"body": "getCarColours(${1:Vehicle car})",
		"description": "GTA_SA\nint primaryColor, int secondaryColor = getCarColours(Vehicle car)\n",
		"prefix": "getCarColours"

		"scope": "source.lua"
	},
	"setAllCarsCanBeDamaged": {
		"body": "setAllCarsCanBeDamaged(${1:bool enable})",
		"description": "GTA_SA\nsetAllCarsCanBeDamaged(bool enable)\n",
		"prefix": "setAllCarsCanBeDamaged"

		"scope": "source.lua"
	},
	"setCarCanBeDamaged": {
		"body": "setCarCanBeDamaged(${1:Vehicle car},${2:bool enable})",
		"description": "GTA_SA\nsetCarCanBeDamaged(Vehicle car, bool enable)\n",
		"prefix": "setCarCanBeDamaged"

		"scope": "source.lua"
	},
	"setDrunkInputDelay": {
		"body": "setDrunkInputDelay(${1:Player player},${2:int handlingResponsiveness})",
		"description": "GTA_SA\nsetDrunkInputDelay(Player player, int handlingResponsiveness)\n",
		"prefix": "setDrunkInputDelay"

		"scope": "source.lua"
	},
	"setCharMoney": {
		"body": "setCharMoney(${1:Ped ped},${2:int money})",
		"description": "GTA_SA\nsetCharMoney(Ped ped, int money)\n",
		"prefix": "setCharMoney"

		"scope": "source.lua"
	},
	"getOffsetFromObjectInWorldCoords": {
		"body": "getOffsetFromObjectInWorldCoords(${1:Object object},${2:float offsetX},${3:float offsetY},${4:float offsetZ})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getOffsetFromObjectInWorldCoords(Object object, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromObjectInWorldCoords"

		"scope": "source.lua"
	},
	"getOffsetFromCarInWorldCoords": {
		"body": "getOffsetFromCarInWorldCoords(${1:Vehicle car},${2:float offsetX},${3:float offsetY},${4:float offsetZ})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getOffsetFromCarInWorldCoords(Vehicle car, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromCarInWorldCoords"

		"scope": "source.lua"
	},
	"clearMissionAudio": {
		"body": "clearMissionAudio(${1:int id})",
		"description": "GTA_SA\nclearMissionAudio(int id)\n",
		"prefix": "clearMissionAudio"

		"scope": "source.lua"
	},
	"setFreeHealthCare": {
		"body": "setFreeHealthCare(${1:Player player},${2:bool free})",
		"description": "GTA_SA\nsetFreeHealthCare(Player player, bool free)\n",
		"prefix": "setFreeHealthCare"

		"scope": "source.lua"
	},
	"loadAndLaunchMissionInternal": {
		"body": "loadAndLaunchMissionInternal(${1:int mission})",
		"description": "GTA_SA\nloadAndLaunchMissionInternal(int mission)\n",
		"prefix": "loadAndLaunchMissionInternal"

		"scope": "source.lua"
	},
	"setObjectDrawLast": {
		"body": "setObjectDrawLast(${1:Object object},${2:bool drawLast})",
		"description": "GTA_SA\nsetObjectDrawLast(Object object, bool drawLast)\n",
		"prefix": "setObjectDrawLast"

		"scope": "source.lua"
	},
	"getAmmoInCharWeapon": {
		"body": "getAmmoInCharWeapon(${1:Ped ped},${2:int int})",
		"description": "GTA_SA\nint ammo = getAmmoInCharWeapon(Ped ped, int int)\n",
		"prefix": "getAmmoInCharWeapon"

		"scope": "source.lua"
	},
	"setNearClip": {
		"body": "setNearClip(${1:float clip})",
		"description": "GTA_SA\nsetNearClip(float clip)\n",
		"prefix": "setNearClip"

		"scope": "source.lua"
	},
	"setRadioChannel": {
		"body": "setRadioChannel(${1:int radioStation})",
		"description": "GTA_SA\nsetRadioChannel(int radioStation)\n",
		"prefix": "setRadioChannel"

		"scope": "source.lua"
	},
	"setCarTraction": {
		"body": "setCarTraction(${1:Vehicle car},${2:float traction})",
		"description": "GTA_SA\nsetCarTraction(Vehicle car, float traction)\n",
		"prefix": "setCarTraction"

		"scope": "source.lua"
	},
	"areMeasurementsInMetres": {
		"body": "areMeasurementsInMetres()",
		"description": "GTA_SA\nbool result = areMeasurementsInMetres()\n",
		"prefix": "areMeasurementsInMetres"

		"scope": "source.lua"
	},
	"convertMetresToFeet": {
		"body": "convertMetresToFeet(${1:float meters})",
		"description": "GTA_SA\nfloat feet = convertMetresToFeet(float meters)\n",
		"prefix": "convertMetresToFeet"

		"scope": "source.lua"
	},
	"setCarAvoidLevelTransitions": {
		"body": "setCarAvoidLevelTransitions(${1:Vehicle car},${2:bool avoidLevelTransitions})",
		"description": "GTA_SA\nsetCarAvoidLevelTransitions(Vehicle car, bool avoidLevelTransitions)\n",
		"prefix": "setCarAvoidLevelTransitions"

		"scope": "source.lua"
	},
	"clearAreaOfChars": {
		"body": "clearAreaOfChars(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nclearAreaOfChars(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "clearAreaOfChars"

		"scope": "source.lua"
	},
	"setTotalNumberOfMissions": {
		"body": "setTotalNumberOfMissions(${1:int totalMissions})",
		"description": "GTA_SA\nsetTotalNumberOfMissions(int totalMissions)\n",
		"prefix": "setTotalNumberOfMissions"

		"scope": "source.lua"
	},
	"convertMetresToFeetInt": {
		"body": "convertMetresToFeetInt(${1:int metric})",
		"description": "GTA_SA\nint imperial = convertMetresToFeetInt(int metric)\n",
		"prefix": "convertMetresToFeetInt"

		"scope": "source.lua"
	},
	"registerFastestTime": {
		"body": "registerFastestTime(${1:int stat},${2:int to})",
		"description": "GTA_SA\nregisterFastestTime(int stat, int to)\n",
		"prefix": "registerFastestTime"

		"scope": "source.lua"
	},
	"registerHighestScore": {
		"body": "registerHighestScore(${1:int int1},${2:int int2})",
		"description": "GTA_SA\nregisterHighestScore(int int1, int int2)\n",
		"prefix": "registerHighestScore"

		"scope": "source.lua"
	},
	"warpCharIntoCarAsPassenger": {
		"body": "warpCharIntoCarAsPassenger(${1:Ped ped},${2:Vehicle car},${3:int passengerSeat})",
		"description": "GTA_SA\nwarpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerSeat)\n",
		"prefix": "warpCharIntoCarAsPassenger"

		"scope": "source.lua"
	},
	"isCarPassengerSeatFree": {
		"body": "isCarPassengerSeatFree(${1:Vehicle car},${2:int seat})",
		"description": "GTA_SA\nbool result = isCarPassengerSeatFree(Vehicle car, int seat)\n",
		"prefix": "isCarPassengerSeatFree"

		"scope": "source.lua"
	},
	"getCharInCarPassengerSeat": {
		"body": "getCharInCarPassengerSeat(${1:Vehicle car},${2:int seat})",
		"description": "GTA_SA\nPed ped = getCharInCarPassengerSeat(Vehicle car, int seat)\n",
		"prefix": "getCharInCarPassengerSeat"

		"scope": "source.lua"
	},
	"setCharIsChrisCriminal": {
		"body": "setCharIsChrisCriminal(${1:Ped ped},${2:bool flag})",
		"description": "GTA_SA\nsetCharIsChrisCriminal(Ped ped, bool flag)\n",
		"prefix": "setCharIsChrisCriminal"

		"scope": "source.lua"
	},
	"startCredits": {
		"body": "startCredits()",
		"description": "GTA_SA\nstartCredits()\n",
		"prefix": "startCredits"

		"scope": "source.lua"
	},
	"stopCredits": {
		"body": "stopCredits()",
		"description": "GTA_SA\nstopCredits()\n",
		"prefix": "stopCredits"

		"scope": "source.lua"
	},
	"areCreditsFinished": {
		"body": "areCreditsFinished()",
		"description": "GTA_SA\nbool result = areCreditsFinished()\n",
		"prefix": "areCreditsFinished"

		"scope": "source.lua"
	},
	"setMusicDoesFade": {
		"body": "setMusicDoesFade(${1:bool enable})",
		"description": "GTA_SA\nsetMusicDoesFade(bool enable)\n",
		"prefix": "setMusicDoesFade"

		"scope": "source.lua"
	},
	"getCarModel": {
		"body": "getCarModel(${1:int int})",
		"description": "GTA_SA\nModel modelId = getCarModel(int int)\n",
		"prefix": "getCarModel"

		"scope": "source.lua"
	},
	"areAnyCarCheatsActivated": {
		"body": "areAnyCarCheatsActivated()",
		"description": "GTA_SA\nbool result = areAnyCarCheatsActivated()\n",
		"prefix": "areAnyCarCheatsActivated"

		"scope": "source.lua"
	},
	"setCharSuffersCriticalHits": {
		"body": "setCharSuffersCriticalHits(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nsetCharSuffersCriticalHits(Ped ped, bool enable)\n",
		"prefix": "setCharSuffersCriticalHits"

		"scope": "source.lua"
	},
	"isCharSittingInCar": {
		"body": "isCharSittingInCar(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\nbool result = isCharSittingInCar(Ped ped, Vehicle car)\n",
		"prefix": "isCharSittingInCar"

		"scope": "source.lua"
	},
	"isCharSittingInAnyCar": {
		"body": "isCharSittingInAnyCar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharSittingInAnyCar(Ped ped)\n",
		"prefix": "isCharSittingInAnyCar"

		"scope": "source.lua"
	},
	"isCharOnFoot": {
		"body": "isCharOnFoot(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharOnFoot(Ped ped)\n",
		"prefix": "isCharOnFoot"

		"scope": "source.lua"
	},
	"loadSplashScreen": {
		"body": "loadSplashScreen(${1:GxtString gxtString})",
		"description": "GTA_SA\nloadSplashScreen(GxtString gxtString)\n",
		"prefix": "loadSplashScreen"

		"scope": "source.lua"
	},
	"setJamesCarOnPathToPlayer": {
		"body": "setJamesCarOnPathToPlayer(${1:int int1})",
		"description": "GTA_SA\nsetJamesCarOnPathToPlayer(int int1)\n",
		"prefix": "setJamesCarOnPathToPlayer"

		"scope": "source.lua"
	},
	"setObjectRotation": {
		"body": "setObjectRotation(${1:Object object},${2:float rotationX},${3:float rotationY},${4:float rotationZ})",
		"description": "GTA_SA\nsetObjectRotation(Object object, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "setObjectRotation"

		"scope": "source.lua"
	},
	"getDebugCameraCoordinates": {
		"body": "getDebugCameraCoordinates()",
		"description": "GTA_SA\nfloat X, float Y, float Z = getDebugCameraCoordinates()\n",
		"prefix": "getDebugCameraCoordinates"

		"scope": "source.lua"
	},
	"isPlayerTargettingChar": {
		"body": "isPlayerTargettingChar(${1:Player player},${2:Ped ped})",
		"description": "GTA_SA\nbool result = isPlayerTargettingChar(Player player, Ped ped)\n",
		"prefix": "isPlayerTargettingChar"

		"scope": "source.lua"
	},
	"isPlayerTargettingObject": {
		"body": "isPlayerTargettingObject(${1:Player player},${2:Object object})",
		"description": "GTA_SA\nbool result = isPlayerTargettingObject(Player player, Object object)\n",
		"prefix": "isPlayerTargettingObject"

		"scope": "source.lua"
	},
	"displayTextWithNumber": {
		"body": "displayTextWithNumber(${1:float x},${2:float y},${3:GxtString gxtString},${4:int number})",
		"description": "GTA_SA\ndisplayTextWithNumber(float x, float y, GxtString gxtString, int number)\n",
		"prefix": "displayTextWithNumber"

		"scope": "source.lua"
	},
	"displayTextWith2Numbers": {
		"body": "displayTextWith2Numbers(${1:float x},${2:float y},${3:GxtString gxtString},${4:int numbersX},${5:int numbersY})",
		"description": "GTA_SA\ndisplayTextWith2Numbers(float x, float y, GxtString gxtString, int numbersX, int numbersY)\n",
		"prefix": "displayTextWith2Numbers"

		"scope": "source.lua"
	},
	"failCurrentMission": {
		"body": "failCurrentMission()",
		"description": "GTA_SA\nfailCurrentMission()\n",
		"prefix": "failCurrentMission"

		"scope": "source.lua"
	},
	"setInterpolationParameters": {
		"body": "setInterpolationParameters(${1:float delay},${2:int time})",
		"description": "GTA_SA\nsetInterpolationParameters(float delay, int time)\n",
		"prefix": "setInterpolationParameters"

		"scope": "source.lua"
	},
	"getDebugCameraPointAt": {
		"body": "getDebugCameraPointAt()",
		"description": "GTA_SA\nfloat X, float Y, float Z = getDebugCameraPointAt()\n",
		"prefix": "getDebugCameraPointAt"

		"scope": "source.lua"
	},
	"attachCharToCar": {
		"body": "attachCharToCar(${1:Ped ped},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int position},${7:float shootingAngleLimit},${8:int weapon})",
		"description": "GTA_SA\nattachCharToCar(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngleLimit, int weapon)\n",
		"prefix": "attachCharToCar"

		"scope": "source.lua"
	},
	"detachCharFromCar": {
		"body": "detachCharFromCar(${1:Ped ped})",
		"description": "GTA_SA\ndetachCharFromCar(Ped ped)\n",
		"prefix": "detachCharFromCar"

		"scope": "source.lua"
	},
	"setCarStayInFastLane": {
		"body": "setCarStayInFastLane(${1:Vehicle car},${2:bool flag})",
		"description": "GTA_SA\nsetCarStayInFastLane(Vehicle car, bool flag)\n",
		"prefix": "setCarStayInFastLane"

		"scope": "source.lua"
	},
	"clearCharLastWeaponDamage": {
		"body": "clearCharLastWeaponDamage(${1:Ped ped})",
		"description": "GTA_SA\nclearCharLastWeaponDamage(Ped ped)\n",
		"prefix": "clearCharLastWeaponDamage"

		"scope": "source.lua"
	},
	"clearCarLastWeaponDamage": {
		"body": "clearCarLastWeaponDamage(${1:Vehicle car})",
		"description": "GTA_SA\nclearCarLastWeaponDamage(Vehicle car)\n",
		"prefix": "clearCarLastWeaponDamage"

		"scope": "source.lua"
	},
	"getRandomCopInArea": {
		"body": "getRandomCopInArea(${1:float float1},${2:float float2},${3:float float3},${4:float float4},${5:bool int5},${6:bool int6},${7:bool int7},${8:bool int8},${9:bool int9})",
		"description": "GTA_SA\nint int10 = getRandomCopInArea(float float1, float float2, float float3, float float4, bool int5, bool int6, bool int7, bool int8, bool int9)\n",
		"prefix": "getRandomCopInArea"

		"scope": "source.lua"
	},
	"getDriverOfCar": {
		"body": "getDriverOfCar(${1:Vehicle car})",
		"description": "GTA_SA\nPed ped = getDriverOfCar(Vehicle car)\n",
		"prefix": "getDriverOfCar"

		"scope": "source.lua"
	},
	"getNumberOfFollowers": {
		"body": "getNumberOfFollowers(${1:Ped ped})",
		"description": "GTA_SA\nint followers = getNumberOfFollowers(Ped ped)\n",
		"prefix": "getNumberOfFollowers"

		"scope": "source.lua"
	},
	"giveRemoteControlledModelToPlayer": {
		"body": "giveRemoteControlledModelToPlayer(${1:Player player},${2:float atX},${3:float atY},${4:float atZ},${5:float angle},${6:Model RCModel})",
		"description": "GTA_SA\ngiveRemoteControlledModelToPlayer(Player player, float atX, float atY, float atZ, float angle, Model RCModel)\n",
		"prefix": "giveRemoteControlledModelToPlayer"

		"scope": "source.lua"
	},
	"getCurrentCharWeapon": {
		"body": "getCurrentCharWeapon(${1:Ped ped})",
		"description": "GTA_SA\nint weapon = getCurrentCharWeapon(Ped ped)\n",
		"prefix": "getCurrentCharWeapon"

		"scope": "source.lua"
	},
	"locateCharAnyMeansObject2d": {
		"body": "locateCharAnyMeansObject2d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharAnyMeansObject2d"

		"scope": "source.lua"
	},
	"locateCharOnFootObject2d": {
		"body": "locateCharOnFootObject2d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharOnFootObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharOnFootObject2d"

		"scope": "source.lua"
	},
	"locateCharInCarObject2d": {
		"body": "locateCharInCarObject2d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCarObject2d(Ped ped, Object object, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateCharInCarObject2d"

		"scope": "source.lua"
	},
	"locateCharAnyMeansObject3d": {
		"body": "locateCharAnyMeansObject3d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharAnyMeansObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharAnyMeansObject3d"

		"scope": "source.lua"
	},
	"locateCharOnFootObject3d": {
		"body": "locateCharOnFootObject3d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharOnFootObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharOnFootObject3d"

		"scope": "source.lua"
	},
	"locateCharInCarObject3d": {
		"body": "locateCharInCarObject3d(${1:Ped ped},${2:Object object},${3:float radiusX},${4:float radiusY},${5:float radiusZ},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateCharInCarObject3d(Ped ped, Object object, float radiusX, float radiusY, float radiusZ, bool sphere)\n",
		"prefix": "locateCharInCarObject3d"

		"scope": "source.lua"
	},
	"setCarTempAction": {
		"body": "setCarTempAction(${1:Vehicle car},${2:int action},${3:int time})",
		"description": "GTA_SA\nsetCarTempAction(Vehicle car, int action, int time)\n",
		"prefix": "setCarTempAction"

		"scope": "source.lua"
	},
	"isCharOnAnyBike": {
		"body": "isCharOnAnyBike(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharOnAnyBike(Ped ped)\n",
		"prefix": "isCharOnAnyBike"

		"scope": "source.lua"
	},
	"canCharSeeDeadChar": {
		"body": "canCharSeeDeadChar(${1:Ped ped},${2:int pedtype})",
		"description": "GTA_SA\nbool result = canCharSeeDeadChar(Ped ped, int pedtype)\n",
		"prefix": "canCharSeeDeadChar"

		"scope": "source.lua"
	},
	"setEnterCarRangeMultiplier": {
		"body": "setEnterCarRangeMultiplier(${1:float float1})",
		"description": "GTA_SA\nsetEnterCarRangeMultiplier(float float1)\n",
		"prefix": "setEnterCarRangeMultiplier"

		"scope": "source.lua"
	},
	"getRemoteControlledCar": {
		"body": "getRemoteControlledCar(${1:Player player})",
		"description": "GTA_SA\nVehicle car = getRemoteControlledCar(Player player)\n",
		"prefix": "getRemoteControlledCar"

		"scope": "source.lua"
	},
	"isPcVersion": {
		"body": "isPcVersion()",
		"description": "GTA_SA\nbool result = isPcVersion()\n",
		"prefix": "isPcVersion"

		"scope": "source.lua"
	},
	"isModelAvailable": {
		"body": "isModelAvailable(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isModelAvailable(Model modelId)\n",
		"prefix": "isModelAvailable"

		"scope": "source.lua"
	},
	"shutCharUp": {
		"body": "shutCharUp(${1:Ped ped},${2:bool muted})",
		"description": "GTA_SA\nshutCharUp(Ped ped, bool muted)\n",
		"prefix": "shutCharUp"

		"scope": "source.lua"
	},
	"setEnableRcDetonate": {
		"body": "setEnableRcDetonate(${1:bool detonation})",
		"description": "GTA_SA\nsetEnableRcDetonate(bool detonation)\n",
		"prefix": "setEnableRcDetonate"

		"scope": "source.lua"
	},
	"setCarRandomRouteSeed": {
		"body": "setCarRandomRouteSeed(${1:Vehicle car},${2:int routeSeed})",
		"description": "GTA_SA\nsetCarRandomRouteSeed(Vehicle car, int routeSeed)\n",
		"prefix": "setCarRandomRouteSeed"

		"scope": "source.lua"
	},
	"isAnyPickupAtCoords": {
		"body": "isAnyPickupAtCoords(${1:float pickupX},${2:float pickupY},${3:float pickupZ})",
		"description": "GTA_SA\nbool result = isAnyPickupAtCoords(float pickupX, float pickupY, float pickupZ)\n",
		"prefix": "isAnyPickupAtCoords"

		"scope": "source.lua"
	},
	"removeAllCharWeapons": {
		"body": "removeAllCharWeapons(${1:Ped ped})",
		"description": "GTA_SA\nremoveAllCharWeapons(Ped ped)\n",
		"prefix": "removeAllCharWeapons"

		"scope": "source.lua"
	},
	"hasCharGotWeapon": {
		"body": "hasCharGotWeapon(${1:Ped ped},${2:int weapon})",
		"description": "GTA_SA\nbool result = hasCharGotWeapon(Ped ped, int weapon)\n",
		"prefix": "hasCharGotWeapon"

		"scope": "source.lua"
	},
	"setTankDetonateCars": {
		"body": "setTankDetonateCars(${1:int tank},${2:bool detonate})",
		"description": "GTA_SA\nsetTankDetonateCars(int tank, bool detonate)\n",
		"prefix": "setTankDetonateCars"

		"scope": "source.lua"
	},
	"getPositionOfAnalogueSticks": {
		"body": "getPositionOfAnalogueSticks(${1:int joystick})",
		"description": "GTA_SA\nint offset1, int offset2, int offset3, int offset4 = getPositionOfAnalogueSticks(int joystick)\n",
		"prefix": "getPositionOfAnalogueSticks"

		"scope": "source.lua"
	},
	"isCarOnFire": {
		"body": "isCarOnFire(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarOnFire(Vehicle car)\n",
		"prefix": "isCarOnFire"

		"scope": "source.lua"
	},
	"isCarTireBurst": {
		"body": "isCarTireBurst(${1:Vehicle car},${2:int tire})",
		"description": "GTA_SA\nbool result = isCarTireBurst(Vehicle car, int tire)\n",
		"prefix": "isCarTireBurst"

		"scope": "source.lua"
	},
	"initialiseObjectPath": {
		"body": "initialiseObjectPath(${1:int int1},${2:float float2})",
		"description": "GTA_SA\ninitialiseObjectPath(int int1, float float2)\n",
		"prefix": "initialiseObjectPath"

		"scope": "source.lua"
	},
	"setObjectPathSpeed": {
		"body": "setObjectPathSpeed(${1:int int1},${2:int int2})",
		"description": "GTA_SA\nsetObjectPathSpeed(int int1, int int2)\n",
		"prefix": "setObjectPathSpeed"

		"scope": "source.lua"
	},
	"setObjectPathPosition": {
		"body": "setObjectPathPosition(${1:int int1},${2:float float2})",
		"description": "GTA_SA\nsetObjectPathPosition(int int1, float float2)\n",
		"prefix": "setObjectPathPosition"

		"scope": "source.lua"
	},
	"clearObjectPath": {
		"body": "clearObjectPath(${1:int int1})",
		"description": "GTA_SA\nclearObjectPath(int int1)\n",
		"prefix": "clearObjectPath"

		"scope": "source.lua"
	},
	"heliGotoCoords": {
		"body": "heliGotoCoords(${1:Vehicle heli},${2:float toX},${3:float toY},${4:float toZ},${5:float altitudeMin},${6:float altitudeMax})",
		"description": "GTA_SA\nheliGotoCoords(Vehicle heli, float toX, float toY, float toZ, float altitudeMin, float altitudeMax)\n",
		"prefix": "heliGotoCoords"

		"scope": "source.lua"
	},
	"getDeadCharPickupCoords": {
		"body": "getDeadCharPickupCoords(${1:Ped ped})",
		"description": "GTA_SA\nfloat coordsX, float coordsY, float coordsZ = getDeadCharPickupCoords(Ped ped)\n",
		"prefix": "getDeadCharPickupCoords"

		"scope": "source.lua"
	},
	"createProtectionPickup": {
		"body": "createProtectionPickup(${1:float atX},${2:float atY},${3:float atZ},${4:int int4},${5:int int5})",
		"description": "GTA_SA\nPickup pickup = createProtectionPickup(float atX, float atY, float atZ, int int4, int int5)\n",
		"prefix": "createProtectionPickup"

		"scope": "source.lua"
	},
	"isCharInAnyBoat": {
		"body": "isCharInAnyBoat(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyBoat(Ped ped)\n",
		"prefix": "isCharInAnyBoat"

		"scope": "source.lua"
	},
	"isCharInAnyHeli": {
		"body": "isCharInAnyHeli(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyHeli(Ped ped)\n",
		"prefix": "isCharInAnyHeli"

		"scope": "source.lua"
	},
	"isCharInAnyPlane": {
		"body": "isCharInAnyPlane(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyPlane(Ped ped)\n",
		"prefix": "isCharInAnyPlane"

		"scope": "source.lua"
	},
	"isCharInWater": {
		"body": "isCharInWater(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInWater(Ped ped)\n",
		"prefix": "isCharInWater"

		"scope": "source.lua"
	},
	"getCharWeaponInSlot": {
		"body": "getCharWeaponInSlot(${1:Ped ped},${2:int slot})",
		"description": "GTA_SA\nint weapon, int ammo, Model modelId = getCharWeaponInSlot(Ped ped, int slot)\n",
		"prefix": "getCharWeaponInSlot"

		"scope": "source.lua"
	},
	"getClosestStraightRoad": {
		"body": "getClosestStraightRoad(${1:float atX},${2:float atY},${3:float atZ},${4:float height},${5:float radius})",
		"description": "GTA_SA\nfloat float6, float float7, float float8, float float9, float float10, float float11, float float12 = getClosestStraightRoad(float atX, float atY, float atZ, float height, float radius)\n",
		"prefix": "getClosestStraightRoad"

		"scope": "source.lua"
	},
	"setCarForwardSpeed": {
		"body": "setCarForwardSpeed(${1:Vehicle car},${2:float speed})",
		"description": "GTA_SA\nsetCarForwardSpeed(Vehicle car, float speed)\n",
		"prefix": "setCarForwardSpeed"

		"scope": "source.lua"
	},
	"setInteriorVisible": {
		"body": "setInteriorVisible(${1:int interior})",
		"description": "GTA_SA\nsetInteriorVisible(int interior)\n",
		"prefix": "setInteriorVisible"

		"scope": "source.lua"
	},
	"markCarAsConvoyCar": {
		"body": "markCarAsConvoyCar(${1:Vehicle car},${2:bool convoy})",
		"description": "GTA_SA\nmarkCarAsConvoyCar(Vehicle car, bool convoy)\n",
		"prefix": "markCarAsConvoyCar"

		"scope": "source.lua"
	},
	"resetHavocCausedByPlayer": {
		"body": "resetHavocCausedByPlayer(${1:int int1})",
		"description": "GTA_SA\nresetHavocCausedByPlayer(int int1)\n",
		"prefix": "resetHavocCausedByPlayer"

		"scope": "source.lua"
	},
	"getHavocCausedByPlayer": {
		"body": "getHavocCausedByPlayer(${1:int int1})",
		"description": "GTA_SA\nint int2 = getHavocCausedByPlayer(int int1)\n",
		"prefix": "getHavocCausedByPlayer"

		"scope": "source.lua"
	},
	"createScriptRoadblock": {
		"body": "createScriptRoadblock(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ},${7:int type})",
		"description": "GTA_SA\ncreateScriptRoadblock(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, int type)\n",
		"prefix": "createScriptRoadblock"

		"scope": "source.lua"
	},
	"clearAllScriptRoadblocks": {
		"body": "clearAllScriptRoadblocks()",
		"description": "GTA_SA\nclearAllScriptRoadblocks()\n",
		"prefix": "clearAllScriptRoadblocks"

		"scope": "source.lua"
	},
	"getOffsetFromCharInWorldCoords": {
		"body": "getOffsetFromCharInWorldCoords(${1:Ped ped},${2:float offsetX},${3:float offsetY},${4:float offsetZ})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getOffsetFromCharInWorldCoords(Ped ped, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "getOffsetFromCharInWorldCoords"

		"scope": "source.lua"
	},
	"hasCharBeenPhotographed": {
		"body": "hasCharBeenPhotographed(${1:Ped ped})",
		"description": "GTA_SA\nbool result = hasCharBeenPhotographed(Ped ped)\n",
		"prefix": "hasCharBeenPhotographed"

		"scope": "source.lua"
	},
	"switchSecurityCamera": {
		"body": "switchSecurityCamera(${1:bool int1})",
		"description": "GTA_SA\nswitchSecurityCamera(bool int1)\n",
		"prefix": "switchSecurityCamera"

		"scope": "source.lua"
	},
	"isCharInFlyingVehicle": {
		"body": "isCharInFlyingVehicle(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInFlyingVehicle(Ped ped)\n",
		"prefix": "isCharInFlyingVehicle"

		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForCoord": {
		"body": "addShortRangeSpriteBlipForCoord(${1:float atX},${2:float atY},${3:float atZ},${4:int icon})",
		"description": "GTA_SA\nMarker marker = addShortRangeSpriteBlipForCoord(float atX, float atY, float atZ, int icon)\n",
		"prefix": "addShortRangeSpriteBlipForCoord"

		"scope": "source.lua"
	},
	"setHeliOrientation": {
		"body": "setHeliOrientation(${1:Vehicle heli},${2:float angle})",
		"description": "GTA_SA\nsetHeliOrientation(Vehicle heli, float angle)\n",
		"prefix": "setHeliOrientation"

		"scope": "source.lua"
	},
	"clearHeliOrientation": {
		"body": "clearHeliOrientation(${1:Vehicle heli})",
		"description": "GTA_SA\nclearHeliOrientation(Vehicle heli)\n",
		"prefix": "clearHeliOrientation"

		"scope": "source.lua"
	},
	"planeGotoCoords": {
		"body": "planeGotoCoords(${1:int plane},${2:float X},${3:float Y},${4:float Z},${5:float z1},${6:float z2})",
		"description": "GTA_SA\nplaneGotoCoords(int plane, float X, float Y, float Z, float z1, float z2)\n",
		"prefix": "planeGotoCoords"

		"scope": "source.lua"
	},
	"getNthClosestCarNode": {
		"body": "getNthClosestCarNode(${1:float X},${2:float Y},${3:float Z},${4:int type})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getNthClosestCarNode(float X, float Y, float Z, int type)\n",
		"prefix": "getNthClosestCarNode"

		"scope": "source.lua"
	},
	"drawWeaponshopCorona": {
		"body": "drawWeaponshopCorona(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:int type},${6:int flare},${7:int r},${8:int g},${9:int b})",
		"description": "GTA_SA\ndrawWeaponshopCorona(float X, float Y, float Z, float radius, int type, int flare, int r, int g, int b)\n",
		"prefix": "drawWeaponshopCorona"

		"scope": "source.lua"
	},
	"setEnableRcDetonateOnContact": {
		"body": "setEnableRcDetonateOnContact(${1:bool enable})",
		"description": "GTA_SA\nsetEnableRcDetonateOnContact(bool enable)\n",
		"prefix": "setEnableRcDetonateOnContact"

		"scope": "source.lua"
	},
	"freezeCharPosition": {
		"body": "freezeCharPosition(${1:int set},${2:bool locked})",
		"description": "GTA_SA\nfreezeCharPosition(int set, bool locked)\n",
		"prefix": "freezeCharPosition"

		"scope": "source.lua"
	},
	"setCharDrownsInWater": {
		"body": "setCharDrownsInWater(${1:Ped ped},${2:bool drowns})",
		"description": "GTA_SA\nsetCharDrownsInWater(Ped ped, bool drowns)\n",
		"prefix": "setCharDrownsInWater"

		"scope": "source.lua"
	},
	"setObjectRecordsCollisions": {
		"body": "setObjectRecordsCollisions(${1:Object object},${2:bool set})",
		"description": "GTA_SA\nsetObjectRecordsCollisions(Object object, bool set)\n",
		"prefix": "setObjectRecordsCollisions"

		"scope": "source.lua"
	},
	"hasObjectCollidedWithAnything": {
		"body": "hasObjectCollidedWithAnything(${1:Object object})",
		"description": "GTA_SA\nbool result = hasObjectCollidedWithAnything(Object object)\n",
		"prefix": "hasObjectCollidedWithAnything"

		"scope": "source.lua"
	},
	"removeRcBuggy": {
		"body": "removeRcBuggy()",
		"description": "GTA_SA\nremoveRcBuggy()\n",
		"prefix": "removeRcBuggy"

		"scope": "source.lua"
	},
	"getCharArmour": {
		"body": "getCharArmour(${1:Ped ped})",
		"description": "GTA_SA\nint armour = getCharArmour(Ped ped)\n",
		"prefix": "getCharArmour"

		"scope": "source.lua"
	},
	"setHeliStabiliser": {
		"body": "setHeliStabiliser(${1:Vehicle heli},${2:bool limiter})",
		"description": "GTA_SA\nsetHeliStabiliser(Vehicle heli, bool limiter)\n",
		"prefix": "setHeliStabiliser"

		"scope": "source.lua"
	},
	"setCarStraightLineDistance": {
		"body": "setCarStraightLineDistance(${1:Vehicle car},${2:int radius})",
		"description": "GTA_SA\nsetCarStraightLineDistance(Vehicle car, int radius)\n",
		"prefix": "setCarStraightLineDistance"

		"scope": "source.lua"
	},
	"popCarBoot": {
		"body": "popCarBoot(${1:Vehicle car})",
		"description": "GTA_SA\npopCarBoot(Vehicle car)\n",
		"prefix": "popCarBoot"

		"scope": "source.lua"
	},
	"shutPlayerUp": {
		"body": "shutPlayerUp(${1:Player player},${2:bool shut})",
		"description": "GTA_SA\nshutPlayerUp(Player player, bool shut)\n",
		"prefix": "shutPlayerUp"

		"scope": "source.lua"
	},
	"setPlayerMood": {
		"body": "setPlayerMood(${1:Player player},${2:int flag},${3:int time})",
		"description": "GTA_SA\nsetPlayerMood(Player player, int flag, int time)\n",
		"prefix": "setPlayerMood"

		"scope": "source.lua"
	},
	"requestCollision": {
		"body": "requestCollision(${1:float X},${2:float Y})",
		"description": "GTA_SA\nrequestCollision(float X, float Y)\n",
		"prefix": "requestCollision"

		"scope": "source.lua"
	},
	"locateObject2d": {
		"body": "locateObject2d(${1:Object object},${2:float X},${3:float Y},${4:float radiusX},${5:float radiusY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = locateObject2d(Object object, float X, float Y, float radiusX, float radiusY, bool sphere)\n",
		"prefix": "locateObject2d"

		"scope": "source.lua"
	},
	"locateObject3d": {
		"body": "locateObject3d(${1:Object object},${2:float X},${3:float Y},${4:float Z},${5:float radiusX},${6:float radiusY},${7:float radiusZ},${8:bool flag})",
		"description": "GTA_SA\nbool result = locateObject3d(Object object, float X, float Y, float Z, float radiusX, float radiusY, float radiusZ, bool flag)\n",
		"prefix": "locateObject3d"

		"scope": "source.lua"
	},
	"isObjectInWater": {
		"body": "isObjectInWater(${1:Object object})",
		"description": "GTA_SA\nbool result = isObjectInWater(Object object)\n",
		"prefix": "isObjectInWater"

		"scope": "source.lua"
	},
	"isObjectInArea2d": {
		"body": "isObjectInArea2d(${1:Object object},${2:float cornerAX},${3:float cornerAY},${4:float cornerBX},${5:float cornerBY},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isObjectInArea2d(Object object, float cornerAX, float cornerAY, float cornerBX, float cornerBY, bool sphere)\n",
		"prefix": "isObjectInArea2d"

		"scope": "source.lua"
	},
	"isObjectInArea3d": {
		"body": "isObjectInArea3d(${1:Object object},${2:float cornerAX},${3:float cornerAY},${4:float cornerAZ},${5:float cornerBX},${6:float cornerBY},${7:float cornerBZ},${8:bool flag})",
		"description": "GTA_SA\nbool result = isObjectInArea3d(Object object, float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ, bool flag)\n",
		"prefix": "isObjectInArea3d"

		"scope": "source.lua"
	},
	"taskToggleDuck": {
		"body": "taskToggleDuck(${1:Ped ped},${2:bool crouch})",
		"description": "GTA_SA\ntaskToggleDuck(Ped ped, bool crouch)\n",
		"prefix": "taskToggleDuck"

		"scope": "source.lua"
	},
	"requestAnimation": {
		"body": "requestAnimation(${1:string animation})",
		"description": "GTA_SA\nrequestAnimation(string animation)\n",
		"prefix": "requestAnimation"

		"scope": "source.lua"
	},
	"hasAnimationLoaded": {
		"body": "hasAnimationLoaded(${1:string animation})",
		"description": "GTA_SA\nbool result = hasAnimationLoaded(string animation)\n",
		"prefix": "hasAnimationLoaded"

		"scope": "source.lua"
	},
	"removeAnimation": {
		"body": "removeAnimation(${1:string animation})",
		"description": "GTA_SA\nremoveAnimation(string animation)\n",
		"prefix": "removeAnimation"

		"scope": "source.lua"
	},
	"isCharWaitingForWorldCollision": {
		"body": "isCharWaitingForWorldCollision(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharWaitingForWorldCollision(Ped ped)\n",
		"prefix": "isCharWaitingForWorldCollision"

		"scope": "source.lua"
	},
	"isCarWaitingForWorldCollision": {
		"body": "isCarWaitingForWorldCollision(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarWaitingForWorldCollision(Vehicle car)\n",
		"prefix": "isCarWaitingForWorldCollision"

		"scope": "source.lua"
	},
	"attachCharToObject": {
		"body": "attachCharToObject(${1:Ped ped},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int orientation},${7:float angle},${8:int lockWeapon})",
		"description": "GTA_SA\nattachCharToObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int orientation, float angle, int lockWeapon)\n",
		"prefix": "attachCharToObject"

		"scope": "source.lua"
	},
	"displayNthOnscreenCounterWithString": {
		"body": "displayNthOnscreenCounterWithString(${1:VarId text},${2:int type},${3:int line},${4:GxtString gxtString})",
		"description": "GTA_SA\ndisplayNthOnscreenCounterWithString(VarId text, int type, int line, GxtString gxtString)\n",
		"prefix": "displayNthOnscreenCounterWithString"

		"scope": "source.lua"
	},
	"addSetPiece": {
		"body": "addSetPiece(${1:int type},${2:float rectX1},${3:float rectY1},${4:float rectX2},${5:float rectY2},${6:float spawnAX},${7:float spawnAY},${8:float headedTowards1X},${9:float headedTowards1Y},${10:float spawnBX},${11:float spawnBY},${12:float headedTowards2X},${13:float headedTowards2Y})",
		"description": "GTA_SA\naddSetPiece(int type, float rectX1, float rectY1, float rectX2, float rectY2, float spawnAX, float spawnAY, float headedTowards1X, float headedTowards1Y, float spawnBX, float spawnBY, float headedTowards2X, float headedTowards2Y)\n",
		"prefix": "addSetPiece"

		"scope": "source.lua"
	},
	"setExtraColours": {
		"body": "setExtraColours(${1:int color},${2:bool fade})",
		"description": "GTA_SA\nsetExtraColours(int color, bool fade)\n",
		"prefix": "setExtraColours"

		"scope": "source.lua"
	},
	"clearExtraColours": {
		"body": "clearExtraColours(${1:bool fade})",
		"description": "GTA_SA\nclearExtraColours(bool fade)\n",
		"prefix": "clearExtraColours"

		"scope": "source.lua"
	},
	"getWheelieStats": {
		"body": "getWheelieStats(${1:Player player})",
		"description": "GTA_SA\nint twowheelstime, float twowheelsdistance, int wheelietime, float wheelieDistance, int stoppieTime, float stoppieDistance = getWheelieStats(Player player)\n",
		"prefix": "getWheelieStats"

		"scope": "source.lua"
	},
	"burstCarTire": {
		"body": "burstCarTire(${1:Vehicle car},${2:int tire})",
		"description": "GTA_SA\nburstCarTire(Vehicle car, int tire)\n",
		"prefix": "burstCarTire"

		"scope": "source.lua"
	},
	"isPlayerWearing": {
		"body": "isPlayerWearing(${1:Player player},${2:string bodypart},${3:int skin})",
		"description": "GTA_SA\nbool result = isPlayerWearing(Player player, string bodypart, int skin)\n",
		"prefix": "isPlayerWearing"

		"scope": "source.lua"
	},
	"setPlayerCanDoDriveBy": {
		"body": "setPlayerCanDoDriveBy(${1:Player player},${2:bool mode})",
		"description": "GTA_SA\nsetPlayerCanDoDriveBy(Player player, bool mode)\n",
		"prefix": "setPlayerCanDoDriveBy"

		"scope": "source.lua"
	},
	"createSwatRope": {
		"body": "createSwatRope(${1:int pedtype},${2:Model modelId},${3:float X},${4:float Y},${5:float Z})",
		"description": "GTA_SA\nint handleAs = createSwatRope(int pedtype, Model modelId, float X, float Y, float Z)\n",
		"prefix": "createSwatRope"

		"scope": "source.lua"
	},
	"setCarModelComponents": {
		"body": "setCarModelComponents(${1:Model car},${2:int variation1},${3:int variation2})",
		"description": "GTA_SA\nsetCarModelComponents(Model car, int variation1, int variation2)\n",
		"prefix": "setCarModelComponents"

		"scope": "source.lua"
	},
	"closeAllCarDoors": {
		"body": "closeAllCarDoors(${1:Vehicle car})",
		"description": "GTA_SA\ncloseAllCarDoors(Vehicle car)\n",
		"prefix": "closeAllCarDoors"

		"scope": "source.lua"
	},
	"getDistanceBetweenCoords2d": {
		"body": "getDistanceBetweenCoords2d(${1:float x1},${2:float y1},${3:float x2},${4:float y2})",
		"description": "GTA_SA\nfloat distance = getDistanceBetweenCoords2d(float x1, float y1, float x2, float y2)\n",
		"prefix": "getDistanceBetweenCoords2d"

		"scope": "source.lua"
	},
	"getDistanceBetweenCoords3d": {
		"body": "getDistanceBetweenCoords3d(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2})",
		"description": "GTA_SA\nfloat distance = getDistanceBetweenCoords3d(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getDistanceBetweenCoords3d"

		"scope": "source.lua"
	},
	"sortOutObjectCollisionWithCar": {
		"body": "sortOutObjectCollisionWithCar(${1:Object object},${2:Vehicle car})",
		"description": "GTA_SA\nsortOutObjectCollisionWithCar(Object object, Vehicle car)\n",
		"prefix": "sortOutObjectCollisionWithCar"

		"scope": "source.lua"
	},
	"getMaxWantedLevel": {
		"body": "getMaxWantedLevel()",
		"description": "GTA_SA\nint level = getMaxWantedLevel()\n",
		"prefix": "getMaxWantedLevel"

		"scope": "source.lua"
	},
	"printHelpForever": {
		"body": "printHelpForever(${1:GxtString text})",
		"description": "GTA_SA\nprintHelpForever(GxtString text)\n",
		"prefix": "printHelpForever"

		"scope": "source.lua"
	},
	"printHelpForeverWithNumber": {
		"body": "printHelpForeverWithNumber(${1:GxtString text},${2:int number})",
		"description": "GTA_SA\nprintHelpForeverWithNumber(GxtString text, int number)\n",
		"prefix": "printHelpForeverWithNumber"

		"scope": "source.lua"
	},
	"createLockedPropertyPickup": {
		"body": "createLockedPropertyPickup(${1:float pX},${2:float pY},${3:float pZ},${4:GxtString gxtString})",
		"description": "GTA_SA\nPickup pickup = createLockedPropertyPickup(float pX, float pY, float pZ, GxtString gxtString)\n",
		"prefix": "createLockedPropertyPickup"

		"scope": "source.lua"
	},
	"createForsalePropertyPickup": {
		"body": "createForsalePropertyPickup(${1:float pX},${2:float pY},${3:float pZ},${4:int price},${5:GxtString gxtString})",
		"description": "GTA_SA\nPickup pickup = createForsalePropertyPickup(float pX, float pY, float pZ, int price, GxtString gxtString)\n",
		"prefix": "createForsalePropertyPickup"

		"scope": "source.lua"
	},
	"freezeCarPosition": {
		"body": "freezeCarPosition(${1:Vehicle car},${2:bool locked})",
		"description": "GTA_SA\nfreezeCarPosition(Vehicle car, bool locked)\n",
		"prefix": "freezeCarPosition"

		"scope": "source.lua"
	},
	"hasCharBeenDamagedByChar": {
		"body": "hasCharBeenDamagedByChar(${1:Ped ped},${2:Ped byActor})",
		"description": "GTA_SA\nbool result = hasCharBeenDamagedByChar(Ped ped, Ped byActor)\n",
		"prefix": "hasCharBeenDamagedByChar"

		"scope": "source.lua"
	},
	"hasCharBeenDamagedByCar": {
		"body": "hasCharBeenDamagedByCar(${1:Ped ped},${2:Vehicle byCar})",
		"description": "GTA_SA\nbool result = hasCharBeenDamagedByCar(Ped ped, Vehicle byCar)\n",
		"prefix": "hasCharBeenDamagedByCar"

		"scope": "source.lua"
	},
	"hasCarBeenDamagedByChar": {
		"body": "hasCarBeenDamagedByChar(${1:Vehicle car},${2:Ped byActor})",
		"description": "GTA_SA\nbool result = hasCarBeenDamagedByChar(Vehicle car, Ped byActor)\n",
		"prefix": "hasCarBeenDamagedByChar"

		"scope": "source.lua"
	},
	"hasCarBeenDamagedByCar": {
		"body": "hasCarBeenDamagedByCar(${1:Vehicle car},${2:Vehicle byCar})",
		"description": "GTA_SA\nbool result = hasCarBeenDamagedByCar(Vehicle car, Vehicle byCar)\n",
		"prefix": "hasCarBeenDamagedByCar"

		"scope": "source.lua"
	},
	"getRadioChannel": {
		"body": "getRadioChannel()",
		"description": "GTA_SA\nint radio = getRadioChannel()\n",
		"prefix": "getRadioChannel"

		"scope": "source.lua"
	},
	"setCharStayInCarWhenJacked": {
		"body": "setCharStayInCarWhenJacked(${1:Ped ped},${2:bool stay})",
		"description": "GTA_SA\nsetCharStayInCarWhenJacked(Ped ped, bool stay)\n",
		"prefix": "setCharStayInCarWhenJacked"

		"scope": "source.lua"
	},
	"setPlayerDrunkenness": {
		"body": "setPlayerDrunkenness(${1:Player player},${2:int drunk})",
		"description": "GTA_SA\nsetPlayerDrunkenness(Player player, int drunk)\n",
		"prefix": "setPlayerDrunkenness"

		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAreaNoSave": {
		"body": "getRandomCarOfTypeInAreaNoSave(${1:float x1},${2:float y1},${3:float x2},${4:float y2},${5:Model modelId})",
		"description": "GTA_SA\nVehicle car = getRandomCarOfTypeInAreaNoSave(float x1, float y1, float x2, float y2, Model modelId)\n",
		"prefix": "getRandomCarOfTypeInAreaNoSave"

		"scope": "source.lua"
	},
	"setCanBurstCarTires": {
		"body": "setCanBurstCarTires(${1:Vehicle car},${2:bool vulnerability})",
		"description": "GTA_SA\nsetCanBurstCarTires(Vehicle car, bool vulnerability)\n",
		"prefix": "setCanBurstCarTires"

		"scope": "source.lua"
	},
	"fireHunterGun": {
		"body": "fireHunterGun(${1:Vehicle car})",
		"description": "GTA_SA\nfireHunterGun(Vehicle car)\n",
		"prefix": "fireHunterGun"

		"scope": "source.lua"
	},
	"isCharTouchingVehicle": {
		"body": "isCharTouchingVehicle(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\nbool result = isCharTouchingVehicle(Ped ped, Vehicle car)\n",
		"prefix": "isCharTouchingVehicle"

		"scope": "source.lua"
	},
	"setCharCanBeShotInVehicle": {
		"body": "setCharCanBeShotInVehicle(${1:Ped ped},${2:bool can})",
		"description": "GTA_SA\nsetCharCanBeShotInVehicle(Ped ped, bool can)\n",
		"prefix": "setCharCanBeShotInVehicle"

		"scope": "source.lua"
	},
	"loadMissionText": {
		"body": "loadMissionText(${1:GxtString table})",
		"description": "GTA_SA\nloadMissionText(GxtString table)\n",
		"prefix": "loadMissionText"

		"scope": "source.lua"
	},
	"clearCharLastDamageEntity": {
		"body": "clearCharLastDamageEntity(${1:Ped ped})",
		"description": "GTA_SA\nclearCharLastDamageEntity(Ped ped)\n",
		"prefix": "clearCharLastDamageEntity"

		"scope": "source.lua"
	},
	"clearCarLastDamageEntity": {
		"body": "clearCarLastDamageEntity(${1:Vehicle car})",
		"description": "GTA_SA\nclearCarLastDamageEntity(Vehicle car)\n",
		"prefix": "clearCarLastDamageEntity"

		"scope": "source.lua"
	},
	"freezeObjectPosition": {
		"body": "freezeObjectPosition(${1:Object object},${2:bool freeze})",
		"description": "GTA_SA\nfreezeObjectPosition(Object object, bool freeze)\n",
		"prefix": "freezeObjectPosition"

		"scope": "source.lua"
	},
	"removeWeaponFromChar": {
		"body": "removeWeaponFromChar(${1:Ped ped},${2:int weapon})",
		"description": "GTA_SA\nremoveWeaponFromChar(Ped ped, int weapon)\n",
		"prefix": "removeWeaponFromChar"

		"scope": "source.lua"
	},
	"makePlayerFireProof": {
		"body": "makePlayerFireProof(${1:Player player},${2:bool fireproof})",
		"description": "GTA_SA\nmakePlayerFireProof(Player player, bool fireproof)\n",
		"prefix": "makePlayerFireProof"

		"scope": "source.lua"
	},
	"increasePlayerMaxHealth": {
		"body": "increasePlayerMaxHealth(${1:Player player},${2:int increase})",
		"description": "GTA_SA\nincreasePlayerMaxHealth(Player player, int increase)\n",
		"prefix": "increasePlayerMaxHealth"

		"scope": "source.lua"
	},
	"increasePlayerMaxArmour": {
		"body": "increasePlayerMaxArmour(${1:Player player},${2:int increase})",
		"description": "GTA_SA\nincreasePlayerMaxArmour(Player player, int increase)\n",
		"prefix": "increasePlayerMaxArmour"

		"scope": "source.lua"
	},
	"createRandomCharAsDriver": {
		"body": "createRandomCharAsDriver(${1:Vehicle car})",
		"description": "GTA_SA\nPed ped = createRandomCharAsDriver(Vehicle car)\n",
		"prefix": "createRandomCharAsDriver"

		"scope": "source.lua"
	},
	"createRandomCharAsPassenger": {
		"body": "createRandomCharAsPassenger(${1:Vehicle car},${2:int seat})",
		"description": "GTA_SA\nPed ped = createRandomCharAsPassenger(Vehicle car, int seat)\n",
		"prefix": "createRandomCharAsPassenger"

		"scope": "source.lua"
	},
	"ensurePlayerHasDriveByWeapon": {
		"body": "ensurePlayerHasDriveByWeapon(${1:Player player},${2:int ammo})",
		"description": "GTA_SA\nensurePlayerHasDriveByWeapon(Player player, int ammo)\n",
		"prefix": "ensurePlayerHasDriveByWeapon"

		"scope": "source.lua"
	},
	"makeHeliComeCrashingDown": {
		"body": "makeHeliComeCrashingDown(${1:Vehicle heli})",
		"description": "GTA_SA\nmakeHeliComeCrashingDown(Vehicle heli)\n",
		"prefix": "makeHeliComeCrashingDown"

		"scope": "source.lua"
	},
	"addExplosionNoSound": {
		"body": "addExplosionNoSound(${1:float pX},${2:float pY},${3:float pZ},${4:int type})",
		"description": "GTA_SA\naddExplosionNoSound(float pX, float pY, float pZ, int type)\n",
		"prefix": "addExplosionNoSound"

		"scope": "source.lua"
	},
	"linkObjectToInterior": {
		"body": "linkObjectToInterior(${1:Object object},${2:int interior})",
		"description": "GTA_SA\nlinkObjectToInterior(Object object, int interior)\n",
		"prefix": "linkObjectToInterior"

		"scope": "source.lua"
	},
	"setCharNeverTargetted": {
		"body": "setCharNeverTargetted(${1:Ped ped},${2:bool untargetable})",
		"description": "GTA_SA\nsetCharNeverTargetted(Ped ped, bool untargetable)\n",
		"prefix": "setCharNeverTargetted"

		"scope": "source.lua"
	},
	"wasCutsceneSkipped": {
		"body": "wasCutsceneSkipped()",
		"description": "GTA_SA\nbool result = wasCutsceneSkipped()\n",
		"prefix": "wasCutsceneSkipped"

		"scope": "source.lua"
	},
	"isCharInAnyPoliceVehicle": {
		"body": "isCharInAnyPoliceVehicle(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyPoliceVehicle(Ped ped)\n",
		"prefix": "isCharInAnyPoliceVehicle"

		"scope": "source.lua"
	},
	"doesCharExist": {
		"body": "doesCharExist(${1:Ped ped})",
		"description": "GTA_SA\nbool result = doesCharExist(Ped ped)\n",
		"prefix": "doesCharExist"

		"scope": "source.lua"
	},
	"doesVehicleExist": {
		"body": "doesVehicleExist(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = doesVehicleExist(Vehicle car)\n",
		"prefix": "doesVehicleExist"

		"scope": "source.lua"
	},
	"addShortRangeSpriteBlipForContactPoint": {
		"body": "addShortRangeSpriteBlipForContactPoint(${1:float pX},${2:float pY},${3:float pZ},${4:int icon})",
		"description": "GTA_SA\nMarker blip = addShortRangeSpriteBlipForContactPoint(float pX, float pY, float pZ, int icon)\n",
		"prefix": "addShortRangeSpriteBlipForContactPoint"

		"scope": "source.lua"
	},
	"setAllTaxisHaveNitro": {
		"body": "setAllTaxisHaveNitro(${1:bool toggle})",
		"description": "GTA_SA\nsetAllTaxisHaveNitro(bool toggle)\n",
		"prefix": "setAllTaxisHaveNitro"

		"scope": "source.lua"
	},
	"freezeCarPositionAndDontLoadCollision": {
		"body": "freezeCarPositionAndDontLoadCollision(${1:Vehicle car},${2:bool keep})",
		"description": "GTA_SA\nfreezeCarPositionAndDontLoadCollision(Vehicle car, bool keep)\n",
		"prefix": "freezeCarPositionAndDontLoadCollision"

		"scope": "source.lua"
	},
	"freezeCharPositionAndDontLoadCollision": {
		"body": "freezeCharPositionAndDontLoadCollision(${1:Ped ped},${2:bool keep})",
		"description": "GTA_SA\nfreezeCharPositionAndDontLoadCollision(Ped ped, bool keep)\n",
		"prefix": "freezeCharPositionAndDontLoadCollision"

		"scope": "source.lua"
	},
	"setPlayerIsInStadium": {
		"body": "setPlayerIsInStadium(${1:bool set})",
		"description": "GTA_SA\nsetPlayerIsInStadium(bool set)\n",
		"prefix": "setPlayerIsInStadium"

		"scope": "source.lua"
	},
	"displayRadar": {
		"body": "displayRadar(${1:bool enable})",
		"description": "GTA_SA\ndisplayRadar(bool enable)\n",
		"prefix": "displayRadar"

		"scope": "source.lua"
	},
	"registerBestPosition": {
		"body": "registerBestPosition(${1:int stat},${2:float float})",
		"description": "GTA_SA\nregisterBestPosition(int stat, float float)\n",
		"prefix": "registerBestPosition"

		"scope": "source.lua"
	},
	"isPlayerInInfoZone": {
		"body": "isPlayerInInfoZone(${1:Player player},${2:GxtString zone})",
		"description": "GTA_SA\nbool result = isPlayerInInfoZone(Player player, GxtString zone)\n",
		"prefix": "isPlayerInInfoZone"

		"scope": "source.lua"
	},
	"setLoadCollisionForCarFlag": {
		"body": "setLoadCollisionForCarFlag(${1:Vehicle car},${2:bool enable})",
		"description": "GTA_SA\nsetLoadCollisionForCarFlag(Vehicle car, bool enable)\n",
		"prefix": "setLoadCollisionForCarFlag"

		"scope": "source.lua"
	},
	"setLoadCollisionForCharFlag": {
		"body": "setLoadCollisionForCharFlag(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nsetLoadCollisionForCharFlag(Ped ped, bool enable)\n",
		"prefix": "setLoadCollisionForCharFlag"

		"scope": "source.lua"
	},
	"addBigGunFlash": {
		"body": "addBigGunFlash(${1:float fromX},${2:float fromY},${3:float fromZ},${4:float toX},${5:float toY},${6:float toZ})",
		"description": "GTA_SA\naddBigGunFlash(float fromX, float fromY, float fromZ, float toX, float toY, float toZ)\n",
		"prefix": "addBigGunFlash"

		"scope": "source.lua"
	},
	"getProgressPercentage": {
		"body": "getProgressPercentage()",
		"description": "GTA_SA\nfloat progress = getProgressPercentage()\n",
		"prefix": "getProgressPercentage"

		"scope": "source.lua"
	},
	"setVehicleToFadeIn": {
		"body": "setVehicleToFadeIn(${1:Vehicle car},${2:int flag})",
		"description": "GTA_SA\nsetVehicleToFadeIn(Vehicle car, int flag)\n",
		"prefix": "setVehicleToFadeIn"

		"scope": "source.lua"
	},
	"registerOddjobMissionPassed": {
		"body": "registerOddjobMissionPassed()",
		"description": "GTA_SA\nregisterOddjobMissionPassed()\n",
		"prefix": "registerOddjobMissionPassed"

		"scope": "source.lua"
	},
	"isPlayerInShortcutTaxi": {
		"body": "isPlayerInShortcutTaxi(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerInShortcutTaxi(Player player)\n",
		"prefix": "isPlayerInShortcutTaxi"

		"scope": "source.lua"
	},
	"isCharDucking": {
		"body": "isCharDucking(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharDucking(Ped ped)\n",
		"prefix": "isCharDucking"

		"scope": "source.lua"
	},
	"setOnscreenCounterFlashWhenFirstDisplayed": {
		"body": "setOnscreenCounterFlashWhenFirstDisplayed(${1:VarId text},${2:bool flashing})",
		"description": "GTA_SA\nsetOnscreenCounterFlashWhenFirstDisplayed(VarId text, bool flashing)\n",
		"prefix": "setOnscreenCounterFlashWhenFirstDisplayed"

		"scope": "source.lua"
	},
	"shuffleCardDecks": {
		"body": "shuffleCardDecks(${1:bool shuffle})",
		"description": "GTA_SA\nshuffleCardDecks(bool shuffle)\n",
		"prefix": "shuffleCardDecks"

		"scope": "source.lua"
	},
	"fetchNextCard": {
		"body": "fetchNextCard()",
		"description": "GTA_SA\nint card = fetchNextCard()\n",
		"prefix": "fetchNextCard"

		"scope": "source.lua"
	},
	"getObjectVelocity": {
		"body": "getObjectVelocity(${1:Object object})",
		"description": "GTA_SA\nfloat vecX, float vecY, float vecZ = getObjectVelocity(Object object)\n",
		"prefix": "getObjectVelocity"

		"scope": "source.lua"
	},
	"isDebugCameraOn": {
		"body": "isDebugCameraOn()",
		"description": "GTA_SA\nbool result = isDebugCameraOn()\n",
		"prefix": "isDebugCameraOn"

		"scope": "source.lua"
	},
	"addToObjectRotationVelocity": {
		"body": "addToObjectRotationVelocity(${1:Object object},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\naddToObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "addToObjectRotationVelocity"

		"scope": "source.lua"
	},
	"setObjectRotationVelocity": {
		"body": "setObjectRotationVelocity(${1:Object object},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\nsetObjectRotationVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "setObjectRotationVelocity"

		"scope": "source.lua"
	},
	"isObjectStatic": {
		"body": "isObjectStatic(${1:Object object})",
		"description": "GTA_SA\nbool result = isObjectStatic(Object object)\n",
		"prefix": "isObjectStatic"

		"scope": "source.lua"
	},
	"getAngleBetween2dVectors": {
		"body": "getAngleBetween2dVectors(${1:float vecX},${2:float vecY},${3:float vecX},${4:float vecY})",
		"description": "GTA_SA\nfloat angle = getAngleBetween2dVectors(float vecX, float vecY, float vecX, float vecY)\n",
		"prefix": "getAngleBetween2dVectors"

		"scope": "source.lua"
	},
	"do2dRectanglesCollide": {
		"body": "do2dRectanglesCollide(${1:float areaX},${2:float areaY},${3:float scaleX},${4:float scaleY},${5:float overlapareaX},${6:float overlapareaY},${7:float overlapscaleX},${8:float overlapscaleY})",
		"description": "GTA_SA\nbool result = do2dRectanglesCollide(float areaX, float areaY, float scaleX, float scaleY, float overlapareaX, float overlapareaY, float overlapscaleX, float overlapscaleY)\n",
		"prefix": "do2dRectanglesCollide"

		"scope": "source.lua"
	},
	"getObjectRotationVelocity": {
		"body": "getObjectRotationVelocity(${1:Object object})",
		"description": "GTA_SA\nfloat axisX, float axisY, float axisZ = getObjectRotationVelocity(Object object)\n",
		"prefix": "getObjectRotationVelocity"

		"scope": "source.lua"
	},
	"addVelocityRelativeToObjectVelocity": {
		"body": "addVelocityRelativeToObjectVelocity(${1:Object object},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\naddVelocityRelativeToObjectVelocity(Object object, float vecX, float vecY, float vecZ)\n",
		"prefix": "addVelocityRelativeToObjectVelocity"

		"scope": "source.lua"
	},
	"getObjectSpeed": {
		"body": "getObjectSpeed(${1:Object object})",
		"description": "GTA_SA\nfloat speed = getObjectSpeed(Object object)\n",
		"prefix": "getObjectSpeed"

		"scope": "source.lua"
	},
	"get2dLinesIntersectPoint": {
		"body": "get2dLinesIntersectPoint(${1:float l1x1},${2:float l1y1},${3:float l1x2},${4:float l1y2},${5:float l2x1},${6:float l2y1},${7:float l2x2},${8:float l2y2})",
		"description": "GTA_SA\nbool result, float X, float Y = get2dLinesIntersectPoint(float l1x1, float l1y1, float l1x2, float l1y2, float l2x1, float l2y1, float l2x2, float l2y2)\n",
		"prefix": "get2dLinesIntersectPoint"

		"scope": "source.lua"
	},
	"taskPause": {
		"body": "taskPause(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskPause(Ped ped, int timeMS)\n",
		"prefix": "taskPause"

		"scope": "source.lua"
	},
	"taskStandStill": {
		"body": "taskStandStill(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskStandStill(Ped ped, int timeMS)\n",
		"prefix": "taskStandStill"

		"scope": "source.lua"
	},
	"taskFallAndGetUp": {
		"body": "taskFallAndGetUp(${1:Ped ped},${2:bool int2},${3:int time})",
		"description": "GTA_SA\ntaskFallAndGetUp(Ped ped, bool int2, int time)\n",
		"prefix": "taskFallAndGetUp"

		"scope": "source.lua"
	},
	"taskJump": {
		"body": "taskJump(${1:Ped ped},${2:bool jump})",
		"description": "GTA_SA\ntaskJump(Ped ped, bool jump)\n",
		"prefix": "taskJump"

		"scope": "source.lua"
	},
	"taskTired": {
		"body": "taskTired(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskTired(Ped ped, int timeMS)\n",
		"prefix": "taskTired"

		"scope": "source.lua"
	},
	"taskDie": {
		"body": "taskDie(${1:Ped ped})",
		"description": "GTA_SA\ntaskDie(Ped ped)\n",
		"prefix": "taskDie"

		"scope": "source.lua"
	},
	"taskLookAtChar": {
		"body": "taskLookAtChar(${1:Ped ped},${2:int lookAt},${3:int timeMS})",
		"description": "GTA_SA\ntaskLookAtChar(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtChar"

		"scope": "source.lua"
	},
	"taskLookAtVehicle": {
		"body": "taskLookAtVehicle(${1:Ped ped},${2:int lookAt},${3:int timeMS})",
		"description": "GTA_SA\ntaskLookAtVehicle(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtVehicle"

		"scope": "source.lua"
	},
	"taskSay": {
		"body": "taskSay(${1:Ped ped},${2:int audio})",
		"description": "GTA_SA\ntaskSay(Ped ped, int audio)\n",
		"prefix": "taskSay"

		"scope": "source.lua"
	},
	"taskShakeFist": {
		"body": "taskShakeFist(${1:Ped ped})",
		"description": "GTA_SA\ntaskShakeFist(Ped ped)\n",
		"prefix": "taskShakeFist"

		"scope": "source.lua"
	},
	"taskCower": {
		"body": "taskCower(${1:Ped ped})",
		"description": "GTA_SA\ntaskCower(Ped ped)\n",
		"prefix": "taskCower"

		"scope": "source.lua"
	},
	"taskHandsUp": {
		"body": "taskHandsUp(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskHandsUp(Ped ped, int timeMS)\n",
		"prefix": "taskHandsUp"

		"scope": "source.lua"
	},
	"taskDuck": {
		"body": "taskDuck(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskDuck(Ped ped, int timeMS)\n",
		"prefix": "taskDuck"

		"scope": "source.lua"
	},
	"taskUseAtm": {
		"body": "taskUseAtm(${1:Ped ped})",
		"description": "GTA_SA\ntaskUseAtm(Ped ped)\n",
		"prefix": "taskUseAtm"

		"scope": "source.lua"
	},
	"taskScratchHead": {
		"body": "taskScratchHead(${1:Ped ped})",
		"description": "GTA_SA\ntaskScratchHead(Ped ped)\n",
		"prefix": "taskScratchHead"

		"scope": "source.lua"
	},
	"taskLookAbout": {
		"body": "taskLookAbout(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskLookAbout(Ped ped, int timeMS)\n",
		"prefix": "taskLookAbout"

		"scope": "source.lua"
	},
	"taskEnterCarAsPassenger": {
		"body": "taskEnterCarAsPassenger(${1:Ped ped},${2:Vehicle car},${3:int time},${4:int passengerSeat})",
		"description": "GTA_SA\ntaskEnterCarAsPassenger(Ped ped, Vehicle car, int time, int passengerSeat)\n",
		"prefix": "taskEnterCarAsPassenger"

		"scope": "source.lua"
	},
	"taskEnterCarAsDriver": {
		"body": "taskEnterCarAsDriver(${1:Ped ped},${2:Vehicle car},${3:int timeMS})",
		"description": "GTA_SA\ntaskEnterCarAsDriver(Ped ped, Vehicle car, int timeMS)\n",
		"prefix": "taskEnterCarAsDriver"

		"scope": "source.lua"
	},
	"taskLeaveCar": {
		"body": "taskLeaveCar(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\ntaskLeaveCar(Ped ped, Vehicle car)\n",
		"prefix": "taskLeaveCar"

		"scope": "source.lua"
	},
	"taskLeaveCarAndFlee": {
		"body": "taskLeaveCarAndFlee(${1:Ped ped},${2:Vehicle car},${3:float X},${4:float Y},${5:float Z})",
		"description": "GTA_SA\ntaskLeaveCarAndFlee(Ped ped, Vehicle car, float X, float Y, float Z)\n",
		"prefix": "taskLeaveCarAndFlee"

		"scope": "source.lua"
	},
	"taskCarDriveToCoord": {
		"body": "taskCarDriveToCoord(${1:Ped ped},${2:Vehicle car},${3:float toX},${4:float toY},${5:float toZ},${6:float speed},${7:int int7},${8:int model},${9:int int9})",
		"description": "GTA_SA\ntaskCarDriveToCoord(Ped ped, Vehicle car, float toX, float toY, float toZ, float speed, int int7, int model, int int9)\n",
		"prefix": "taskCarDriveToCoord"

		"scope": "source.lua"
	},
	"taskCarDriveWander": {
		"body": "taskCarDriveWander(${1:Ped ped},${2:Vehicle hijackCar},${3:float searchRadius},${4:int trafficBehavior})",
		"description": "GTA_SA\ntaskCarDriveWander(Ped ped, Vehicle hijackCar, float searchRadius, int trafficBehavior)\n",
		"prefix": "taskCarDriveWander"

		"scope": "source.lua"
	},
	"taskGoStraightToCoord": {
		"body": "taskGoStraightToCoord(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int mode},${6:int time})",
		"description": "GTA_SA\ntaskGoStraightToCoord(Ped ped, float toX, float toY, float toZ, int mode, int time)\n",
		"prefix": "taskGoStraightToCoord"

		"scope": "source.lua"
	},
	"taskAchieveHeading": {
		"body": "taskAchieveHeading(${1:Ped ped},${2:float angle})",
		"description": "GTA_SA\ntaskAchieveHeading(Ped ped, float angle)\n",
		"prefix": "taskAchieveHeading"

		"scope": "source.lua"
	},
	"flushRoute": {
		"body": "flushRoute()",
		"description": "GTA_SA\nflushRoute()\n",
		"prefix": "flushRoute"

		"scope": "source.lua"
	},
	"extendRoute": {
		"body": "extendRoute(${1:float pointX},${2:float pointY},${3:float pointZ})",
		"description": "GTA_SA\nextendRoute(float pointX, float pointY, float pointZ)\n",
		"prefix": "extendRoute"

		"scope": "source.lua"
	},
	"taskFollowPointRoute": {
		"body": "taskFollowPointRoute(${1:Ped ped},${2:int flags1},${3:int flags2})",
		"description": "GTA_SA\ntaskFollowPointRoute(Ped ped, int flags1, int flags2)\n",
		"prefix": "taskFollowPointRoute"

		"scope": "source.lua"
	},
	"taskGotoChar": {
		"body": "taskGotoChar(${1:Ped ped},${2:Ped toActor},${3:int timelimit},${4:float stopWithinRadius})",
		"description": "GTA_SA\ntaskGotoChar(Ped ped, Ped toActor, int timelimit, float stopWithinRadius)\n",
		"prefix": "taskGotoChar"

		"scope": "source.lua"
	},
	"taskFleePoint": {
		"body": "taskFleePoint(${1:Ped ped},${2:float fromX},${3:float fromY},${4:float fromZ},${5:float awayRadius},${6:int timelimit})",
		"description": "GTA_SA\ntaskFleePoint(Ped ped, float fromX, float fromY, float fromZ, float awayRadius, int timelimit)\n",
		"prefix": "taskFleePoint"

		"scope": "source.lua"
	},
	"taskFleeChar": {
		"body": "taskFleeChar(${1:Ped ped},${2:Ped fromActor},${3:float radius},${4:int timelimit})",
		"description": "GTA_SA\ntaskFleeChar(Ped ped, Ped fromActor, float radius, int timelimit)\n",
		"prefix": "taskFleeChar"

		"scope": "source.lua"
	},
	"taskSmartFleePoint": {
		"body": "taskSmartFleePoint(${1:Ped ped},${2:float fromX},${3:float fromY},${4:float fromZ},${5:float stopAtRadius},${6:int timelimit})",
		"description": "GTA_SA\ntaskSmartFleePoint(Ped ped, float fromX, float fromY, float fromZ, float stopAtRadius, int timelimit)\n",
		"prefix": "taskSmartFleePoint"

		"scope": "source.lua"
	},
	"taskSmartFleeChar": {
		"body": "taskSmartFleeChar(${1:Ped ped},${2:Ped fromActor},${3:float originRadius},${4:int timelimit})",
		"description": "GTA_SA\ntaskSmartFleeChar(Ped ped, Ped fromActor, float originRadius, int timelimit)\n",
		"prefix": "taskSmartFleeChar"

		"scope": "source.lua"
	},
	"taskWanderStandard": {
		"body": "taskWanderStandard(${1:Ped ped})",
		"description": "GTA_SA\ntaskWanderStandard(Ped ped)\n",
		"prefix": "taskWanderStandard"

		"scope": "source.lua"
	},
	"taskKillCharOnFoot": {
		"body": "taskKillCharOnFoot(${1:Ped ped},${2:Ped killActor})",
		"description": "GTA_SA\ntaskKillCharOnFoot(Ped ped, Ped killActor)\n",
		"prefix": "taskKillCharOnFoot"

		"scope": "source.lua"
	},
	"startPlaybackRecordedCar": {
		"body": "startPlaybackRecordedCar(${1:Vehicle car},${2:int path})",
		"description": "GTA_SA\nstartPlaybackRecordedCar(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCar"

		"scope": "source.lua"
	},
	"stopPlaybackRecordedCar": {
		"body": "stopPlaybackRecordedCar(${1:Vehicle car})",
		"description": "GTA_SA\nstopPlaybackRecordedCar(Vehicle car)\n",
		"prefix": "stopPlaybackRecordedCar"

		"scope": "source.lua"
	},
	"pausePlaybackRecordedCar": {
		"body": "pausePlaybackRecordedCar(${1:Vehicle car})",
		"description": "GTA_SA\npausePlaybackRecordedCar(Vehicle car)\n",
		"prefix": "pausePlaybackRecordedCar"

		"scope": "source.lua"
	},
	"unpausePlaybackRecordedCar": {
		"body": "unpausePlaybackRecordedCar(${1:Vehicle car})",
		"description": "GTA_SA\nunpausePlaybackRecordedCar(Vehicle car)\n",
		"prefix": "unpausePlaybackRecordedCar"

		"scope": "source.lua"
	},
	"setCarEscortCarLeft": {
		"body": "setCarEscortCarLeft(${1:Vehicle car},${2:Vehicle followCar})",
		"description": "GTA_SA\nsetCarEscortCarLeft(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarLeft"

		"scope": "source.lua"
	},
	"setCarEscortCarRight": {
		"body": "setCarEscortCarRight(${1:Vehicle car},${2:Vehicle followCar})",
		"description": "GTA_SA\nsetCarEscortCarRight(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarRight"

		"scope": "source.lua"
	},
	"setCarEscortCarRear": {
		"body": "setCarEscortCarRear(${1:Vehicle car},${2:Vehicle followCar})",
		"description": "GTA_SA\nsetCarEscortCarRear(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarRear"

		"scope": "source.lua"
	},
	"setCarEscortCarFront": {
		"body": "setCarEscortCarFront(${1:Vehicle car},${2:Vehicle followCar})",
		"description": "GTA_SA\nsetCarEscortCarFront(Vehicle car, Vehicle followCar)\n",
		"prefix": "setCarEscortCarFront"

		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoord": {
		"body": "taskFollowPathNodesToCoord(${1:Ped ped},${2:float pathX},${3:float pathY},${4:float pathZ},${5:int mode},${6:int time})",
		"description": "GTA_SA\ntaskFollowPathNodesToCoord(Ped ped, float pathX, float pathY, float pathZ, int mode, int time)\n",
		"prefix": "taskFollowPathNodesToCoord"

		"scope": "source.lua"
	},
	"isCharInAngledArea2d": {
		"body": "isCharInAngledArea2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float angle},${7:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledArea2d"

		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot2d": {
		"body": "isCharInAngledAreaOnFoot2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float angle},${7:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaOnFoot2d"

		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar2d": {
		"body": "isCharInAngledAreaInCar2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float angle},${7:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaInCar2d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea2d": {
		"body": "isCharStoppedInAngledArea2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float height},${7:bool flag})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)\n",
		"prefix": "isCharStoppedInAngledArea2d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot2d": {
		"body": "isCharStoppedInAngledAreaOnFoot2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float angle},${7:bool sphere})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isCharStoppedInAngledAreaOnFoot2d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar2d": {
		"body": "isCharStoppedInAngledAreaInCar2d(${1:Ped ped},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float height},${7:bool flag})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledAreaInCar2d(Ped ped, float x1, float y1, float x2, float y2, float height, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaInCar2d"

		"scope": "source.lua"
	},
	"isCharInAngledArea3d": {
		"body": "isCharInAngledArea3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float angle},${9:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledArea3d"

		"scope": "source.lua"
	},
	"isCharInAngledAreaOnFoot3d": {
		"body": "isCharInAngledAreaOnFoot3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float angle},${9:bool sphere})",
		"description": "GTA_SA\nbool result = isCharInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isCharInAngledAreaOnFoot3d"

		"scope": "source.lua"
	},
	"isCharInAngledAreaInCar3d": {
		"body": "isCharInAngledAreaInCar3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float depth},${9:bool flag})",
		"description": "GTA_SA\nbool result = isCharInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharInAngledAreaInCar3d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledArea3d": {
		"body": "isCharStoppedInAngledArea3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float depth},${9:bool flag})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledArea3d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaOnFoot3d": {
		"body": "isCharStoppedInAngledAreaOnFoot3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float depth},${9:bool flag})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledAreaOnFoot3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaOnFoot3d"

		"scope": "source.lua"
	},
	"isCharStoppedInAngledAreaInCar3d": {
		"body": "isCharStoppedInAngledAreaInCar3d(${1:Ped ped},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float depth},${9:bool flag})",
		"description": "GTA_SA\nbool result = isCharStoppedInAngledAreaInCar3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isCharStoppedInAngledAreaInCar3d"

		"scope": "source.lua"
	},
	"isCharInTaxi": {
		"body": "isCharInTaxi(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInTaxi(Ped ped)\n",
		"prefix": "isCharInTaxi"

		"scope": "source.lua"
	},
	"taskGoToCoordAnyMeans": {
		"body": "taskGoToCoordAnyMeans(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int mode},${6:Vehicle useCar})",
		"description": "GTA_SA\ntaskGoToCoordAnyMeans(Ped ped, float toX, float toY, float toZ, int mode, Vehicle useCar)\n",
		"prefix": "taskGoToCoordAnyMeans"

		"scope": "source.lua"
	},
	"getHeadingFromVector2d": {
		"body": "getHeadingFromVector2d(${1:float pX},${2:float pY})",
		"description": "GTA_SA\nfloat zAngle = getHeadingFromVector2d(float pX, float pY)\n",
		"prefix": "getHeadingFromVector2d"

		"scope": "source.lua"
	},
	"taskPlayAnim": {
		"body": "taskPlayAnim(${1:Ped ped},${2:string animation},${3:string IFP},${4:float framedelta},${5:bool loop},${6:bool lockX},${7:bool lockY},${8:bool lockF},${9:int time})",
		"description": "GTA_SA\ntaskPlayAnim(Ped ped, string animation, string IFP, float framedelta, bool loop, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnim"

		"scope": "source.lua"
	},
	"loadPathNodesInArea": {
		"body": "loadPathNodesInArea(${1:float x1},${2:float y1},${3:float x2},${4:float y2})",
		"description": "GTA_SA\nloadPathNodesInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "loadPathNodesInArea"

		"scope": "source.lua"
	},
	"releasePathNodes": {
		"body": "releasePathNodes()",
		"description": "GTA_SA\nreleasePathNodes()\n",
		"prefix": "releasePathNodes"

		"scope": "source.lua"
	},
	"loadCharDecisionMaker": {
		"body": "loadCharDecisionMaker(${1:int type})",
		"description": "GTA_SA\nint maker = loadCharDecisionMaker(int type)\n",
		"prefix": "loadCharDecisionMaker"

		"scope": "source.lua"
	},
	"setCharDecisionMaker": {
		"body": "setCharDecisionMaker(${1:Ped ped},${2:int maker})",
		"description": "GTA_SA\nsetCharDecisionMaker(Ped ped, int maker)\n",
		"prefix": "setCharDecisionMaker"

		"scope": "source.lua"
	},
	"setTextDropshadow": {
		"body": "setTextDropshadow(${1:int shadow},${2:int r},${3:int g},${4:int b},${5:int a})",
		"description": "GTA_SA\nsetTextDropshadow(int shadow, int r, int g, int b, int a)\n",
		"prefix": "setTextDropshadow"

		"scope": "source.lua"
	},
	"isPlaybackGoingOnForCar": {
		"body": "isPlaybackGoingOnForCar(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isPlaybackGoingOnForCar(Vehicle car)\n",
		"prefix": "isPlaybackGoingOnForCar"

		"scope": "source.lua"
	},
	"setSenseRange": {
		"body": "setSenseRange(${1:Ped ped},${2:float accuracy})",
		"description": "GTA_SA\nsetSenseRange(Ped ped, float accuracy)\n",
		"prefix": "setSenseRange"

		"scope": "source.lua"
	},
	"isCharPlayingAnim": {
		"body": "isCharPlayingAnim(${1:Ped ped},${2:string animation})",
		"description": "GTA_SA\nbool result = isCharPlayingAnim(Ped ped, string animation)\n",
		"prefix": "isCharPlayingAnim"

		"scope": "source.lua"
	},
	"setCharAnimPlayingFlag": {
		"body": "setCharAnimPlayingFlag(${1:Ped ped},${2:string animation},${3:bool flag})",
		"description": "GTA_SA\nsetCharAnimPlayingFlag(Ped ped, string animation, bool flag)\n",
		"prefix": "setCharAnimPlayingFlag"

		"scope": "source.lua"
	},
	"getCharAnimCurrentTime": {
		"body": "getCharAnimCurrentTime(${1:Ped ped},${2:string animation})",
		"description": "GTA_SA\nfloat time = getCharAnimCurrentTime(Ped ped, string animation)\n",
		"prefix": "getCharAnimCurrentTime"

		"scope": "source.lua"
	},
	"setCharAnimCurrentTime": {
		"body": "setCharAnimCurrentTime(${1:Ped ped},${2:string animation},${3:float time})",
		"description": "GTA_SA\nsetCharAnimCurrentTime(Ped ped, string animation, float time)\n",
		"prefix": "setCharAnimCurrentTime"

		"scope": "source.lua"
	},
	"openSequenceTask": {
		"body": "openSequenceTask()",
		"description": "GTA_SA\nint task = openSequenceTask()\n",
		"prefix": "openSequenceTask"

		"scope": "source.lua"
	},
	"closeSequenceTask": {
		"body": "closeSequenceTask(${1:int task})",
		"description": "GTA_SA\ncloseSequenceTask(int task)\n",
		"prefix": "closeSequenceTask"

		"scope": "source.lua"
	},
	"performSequenceTask": {
		"body": "performSequenceTask(${1:Ped ped},${2:int task})",
		"description": "GTA_SA\nperformSequenceTask(Ped ped, int task)\n",
		"prefix": "performSequenceTask"

		"scope": "source.lua"
	},
	"setCharCollision": {
		"body": "setCharCollision(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nsetCharCollision(Ped ped, bool enable)\n",
		"prefix": "setCharCollision"

		"scope": "source.lua"
	},
	"getCharAnimTotalTime": {
		"body": "getCharAnimTotalTime(${1:Ped ped},${2:string animation})",
		"description": "GTA_SA\nfloat totalTime = getCharAnimTotalTime(Ped ped, string animation)\n",
		"prefix": "getCharAnimTotalTime"

		"scope": "source.lua"
	},
	"clearSequenceTask": {
		"body": "clearSequenceTask(${1:int task})",
		"description": "GTA_SA\nclearSequenceTask(int task)\n",
		"prefix": "clearSequenceTask"

		"scope": "source.lua"
	},
	"addAttractor": {
		"body": "addAttractor(${1:float originX},${2:float originY},${3:float originZ},${4:float zAngle},${5:float unknownAngle},${6:int taskSequence})",
		"description": "GTA_SA\nint handle = addAttractor(float originX, float originY, float originZ, float zAngle, float unknownAngle, int taskSequence)\n",
		"prefix": "addAttractor"

		"scope": "source.lua"
	},
	"clearAttractor": {
		"body": "clearAttractor(${1:int handle})",
		"description": "GTA_SA\nclearAttractor(int handle)\n",
		"prefix": "clearAttractor"

		"scope": "source.lua"
	},
	"createCharAtAttractor": {
		"body": "createCharAtAttractor(${1:int pedtype},${2:Model modelId},${3:int ASOrigin},${4:int task})",
		"description": "GTA_SA\nPed ped = createCharAtAttractor(int pedtype, Model modelId, int ASOrigin, int task)\n",
		"prefix": "createCharAtAttractor"

		"scope": "source.lua"
	},
	"taskLeaveCarImmediately": {
		"body": "taskLeaveCarImmediately(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\ntaskLeaveCarImmediately(Ped ped, Vehicle car)\n",
		"prefix": "taskLeaveCarImmediately"

		"scope": "source.lua"
	},
	"incrementIntStat": {
		"body": "incrementIntStat(${1:int stat},${2:int add})",
		"description": "GTA_SA\nincrementIntStat(int stat, int add)\n",
		"prefix": "incrementIntStat"

		"scope": "source.lua"
	},
	"incrementFloatStat": {
		"body": "incrementFloatStat(${1:int stat},${2:float add})",
		"description": "GTA_SA\nincrementFloatStat(int stat, float add)\n",
		"prefix": "incrementFloatStat"

		"scope": "source.lua"
	},
	"decrementIntStat": {
		"body": "decrementIntStat(${1:int stat},${2:int int})",
		"description": "GTA_SA\ndecrementIntStat(int stat, int int)\n",
		"prefix": "decrementIntStat"

		"scope": "source.lua"
	},
	"decrementFloatStat": {
		"body": "decrementFloatStat(${1:int stat},${2:float float})",
		"description": "GTA_SA\ndecrementFloatStat(int stat, float float)\n",
		"prefix": "decrementFloatStat"

		"scope": "source.lua"
	},
	"registerIntStat": {
		"body": "registerIntStat(${1:int stat},${2:int int})",
		"description": "GTA_SA\nregisterIntStat(int stat, int int)\n",
		"prefix": "registerIntStat"

		"scope": "source.lua"
	},
	"registerFloatStat": {
		"body": "registerFloatStat(${1:int stat},${2:float value})",
		"description": "GTA_SA\nregisterFloatStat(int stat, float value)\n",
		"prefix": "registerFloatStat"

		"scope": "source.lua"
	},
	"setIntStat": {
		"body": "setIntStat(${1:int stat},${2:int int})",
		"description": "GTA_SA\nsetIntStat(int stat, int int)\n",
		"prefix": "setIntStat"

		"scope": "source.lua"
	},
	"setFloatStat": {
		"body": "setFloatStat(${1:int stat},${2:float float})",
		"description": "GTA_SA\nsetFloatStat(int stat, float float)\n",
		"prefix": "setFloatStat"

		"scope": "source.lua"
	},
	"getScriptTaskStatus": {
		"body": "getScriptTaskStatus(${1:Ped ped},${2:int task})",
		"description": "GTA_SA\nint status = getScriptTaskStatus(Ped ped, int task)\n",
		"prefix": "getScriptTaskStatus"

		"scope": "source.lua"
	},
	"createGroup": {
		"body": "createGroup(${1:int type})",
		"description": "GTA_SA\nint group = createGroup(int type)\n",
		"prefix": "createGroup"

		"scope": "source.lua"
	},
	"setGroupLeader": {
		"body": "setGroupLeader(${1:int group},${2:Ped ped})",
		"description": "GTA_SA\nsetGroupLeader(int group, Ped ped)\n",
		"prefix": "setGroupLeader"

		"scope": "source.lua"
	},
	"setGroupMember": {
		"body": "setGroupMember(${1:int group},${2:Ped ped})",
		"description": "GTA_SA\nsetGroupMember(int group, Ped ped)\n",
		"prefix": "setGroupMember"

		"scope": "source.lua"
	},
	"removeGroup": {
		"body": "removeGroup(${1:int group})",
		"description": "GTA_SA\nremoveGroup(int group)\n",
		"prefix": "removeGroup"

		"scope": "source.lua"
	},
	"taskLeaveAnyCar": {
		"body": "taskLeaveAnyCar(${1:Ped ped})",
		"description": "GTA_SA\ntaskLeaveAnyCar(Ped ped)\n",
		"prefix": "taskLeaveAnyCar"

		"scope": "source.lua"
	},
	"taskKillCharOnFootWhileDucking": {
		"body": "taskKillCharOnFootWhileDucking(${1:Ped ped},${2:int weapon},${3:int flags},${4:int time},${5:int chance})",
		"description": "GTA_SA\ntaskKillCharOnFootWhileDucking(Ped ped, int weapon, int flags, int time, int chance)\n",
		"prefix": "taskKillCharOnFootWhileDucking"

		"scope": "source.lua"
	},
	"taskAimGunAtChar": {
		"body": "taskAimGunAtChar(${1:Ped ped},${2:int aimAt},${3:int timeMS})",
		"description": "GTA_SA\ntaskAimGunAtChar(Ped ped, int aimAt, int timeMS)\n",
		"prefix": "taskAimGunAtChar"

		"scope": "source.lua"
	},
	"taskGoToCoordWhileShooting": {
		"body": "taskGoToCoordWhileShooting(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int mode},${6:float turnRadius},${7:float stopRadius},${8:int lookAtActor})",
		"description": "GTA_SA\ntaskGoToCoordWhileShooting(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, int lookAtActor)\n",
		"prefix": "taskGoToCoordWhileShooting"

		"scope": "source.lua"
	},
	"taskStayInSamePlace": {
		"body": "taskStayInSamePlace(${1:Ped ped},${2:bool stay})",
		"description": "GTA_SA\ntaskStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "taskStayInSamePlace"

		"scope": "source.lua"
	},
	"taskTurnCharToFaceChar": {
		"body": "taskTurnCharToFaceChar(${1:Ped ped},${2:int rotateTo})",
		"description": "GTA_SA\ntaskTurnCharToFaceChar(Ped ped, int rotateTo)\n",
		"prefix": "taskTurnCharToFaceChar"

		"scope": "source.lua"
	},
	"isCharAtScriptedAttractor": {
		"body": "isCharAtScriptedAttractor(${1:Ped ped},${2:int origin})",
		"description": "GTA_SA\nbool result = isCharAtScriptedAttractor(Ped ped, int origin)\n",
		"prefix": "isCharAtScriptedAttractor"

		"scope": "source.lua"
	},
	"setSequenceToRepeat": {
		"body": "setSequenceToRepeat(${1:int pack},${2:bool loop})",
		"description": "GTA_SA\nsetSequenceToRepeat(int pack, bool loop)\n",
		"prefix": "setSequenceToRepeat"

		"scope": "source.lua"
	},
	"getSequenceProgress": {
		"body": "getSequenceProgress(${1:Ped ped})",
		"description": "GTA_SA\nint progess = getSequenceProgress(Ped ped)\n",
		"prefix": "getSequenceProgress"

		"scope": "source.lua"
	},
	"clearLookAt": {
		"body": "clearLookAt(${1:Ped ped})",
		"description": "GTA_SA\nclearLookAt(Ped ped)\n",
		"prefix": "clearLookAt"

		"scope": "source.lua"
	},
	"setFollowNodeThresholdDistance": {
		"body": "setFollowNodeThresholdDistance(${1:Ped ped},${2:float dist})",
		"description": "GTA_SA\nsetFollowNodeThresholdDistance(Ped ped, float dist)\n",
		"prefix": "setFollowNodeThresholdDistance"

		"scope": "source.lua"
	},
	"createFxSystem": {
		"body": "createFxSystem(${1:string particle},${2:float pX},${3:float pY},${4:float pZ},${5:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystem(string particle, float pX, float pY, float pZ, int type)\n",
		"prefix": "createFxSystem"

		"scope": "source.lua"
	},
	"playFxSystem": {
		"body": "playFxSystem(${1:Particle particle})",
		"description": "GTA_SA\nplayFxSystem(Particle particle)\n",
		"prefix": "playFxSystem"

		"scope": "source.lua"
	},
	"stopFxSystem": {
		"body": "stopFxSystem(${1:Particle particle})",
		"description": "GTA_SA\nstopFxSystem(Particle particle)\n",
		"prefix": "stopFxSystem"

		"scope": "source.lua"
	},
	"playAndKillFxSystem": {
		"body": "playAndKillFxSystem(${1:Particle particle})",
		"description": "GTA_SA\nplayAndKillFxSystem(Particle particle)\n",
		"prefix": "playAndKillFxSystem"

		"scope": "source.lua"
	},
	"killFxSystem": {
		"body": "killFxSystem(${1:Particle particle})",
		"description": "GTA_SA\nkillFxSystem(Particle particle)\n",
		"prefix": "killFxSystem"

		"scope": "source.lua"
	},
	"getIntStat": {
		"body": "getIntStat(${1:int stat})",
		"description": "GTA_SA\nint stat = getIntStat(int stat)\n",
		"prefix": "getIntStat"

		"scope": "source.lua"
	},
	"getFloatStat": {
		"body": "getFloatStat(${1:int stat})",
		"description": "GTA_SA\nfloat stat = getFloatStat(int stat)\n",
		"prefix": "getFloatStat"

		"scope": "source.lua"
	},
	"setObjectRenderScorched": {
		"body": "setObjectRenderScorched(${1:Object object},${2:bool fireproof})",
		"description": "GTA_SA\nsetObjectRenderScorched(Object object, bool fireproof)\n",
		"prefix": "setObjectRenderScorched"

		"scope": "source.lua"
	},
	"taskLookAtObject": {
		"body": "taskLookAtObject(${1:Ped ped},${2:int lookAt},${3:int timeMS})",
		"description": "GTA_SA\ntaskLookAtObject(Ped ped, int lookAt, int timeMS)\n",
		"prefix": "taskLookAtObject"

		"scope": "source.lua"
	},
	"limitAngle": {
		"body": "limitAngle(${1:float angle})",
		"description": "GTA_SA\nfloat float = limitAngle(float angle)\n",
		"prefix": "limitAngle"

		"scope": "source.lua"
	},
	"openCarDoor": {
		"body": "openCarDoor(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\nopenCarDoor(Vehicle car, int door)\n",
		"prefix": "openCarDoor"

		"scope": "source.lua"
	},
	"getPickupCoordinates": {
		"body": "getPickupCoordinates(${1:Pickup pickup})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getPickupCoordinates(Pickup pickup)\n",
		"prefix": "getPickupCoordinates"

		"scope": "source.lua"
	},
	"removeDecisionMaker": {
		"body": "removeDecisionMaker(${1:int maker})",
		"description": "GTA_SA\nremoveDecisionMaker(int maker)\n",
		"prefix": "removeDecisionMaker"

		"scope": "source.lua"
	},
	"getCharModel": {
		"body": "getCharModel(${1:Ped ped})",
		"description": "GTA_SA\nModel modelId = getCharModel(Ped ped)\n",
		"prefix": "getCharModel"

		"scope": "source.lua"
	},
	"taskAimGunAtCoord": {
		"body": "taskAimGunAtCoord(${1:Ped ped},${2:float atX},${3:float atY},${4:float atZ},${5:int timeMS})",
		"description": "GTA_SA\ntaskAimGunAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)\n",
		"prefix": "taskAimGunAtCoord"

		"scope": "source.lua"
	},
	"taskShootAtCoord": {
		"body": "taskShootAtCoord(${1:Ped ped},${2:float atX},${3:float atY},${4:float atZ},${5:int timeMS})",
		"description": "GTA_SA\ntaskShootAtCoord(Ped ped, float atX, float atY, float atZ, int timeMS)\n",
		"prefix": "taskShootAtCoord"

		"scope": "source.lua"
	},
	"createFxSystemOnChar": {
		"body": "createFxSystemOnChar(${1:string particle},${2:Ped ped},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnChar(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnChar"

		"scope": "source.lua"
	},
	"createFxSystemOnCharWithDirection": {
		"body": "createFxSystemOnCharWithDirection(${1:string particle},${2:Ped ped},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ},${9:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnCharWithDirection(string particle, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)\n",
		"prefix": "createFxSystemOnCharWithDirection"

		"scope": "source.lua"
	},
	"createFxSystemOnCar": {
		"body": "createFxSystemOnCar(${1:string particle},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnCar(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnCar"

		"scope": "source.lua"
	},
	"createFxSystemOnCarWithDirection": {
		"body": "createFxSystemOnCarWithDirection(${1:string particle},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ},${9:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnCarWithDirection(string particle, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int type)\n",
		"prefix": "createFxSystemOnCarWithDirection"

		"scope": "source.lua"
	},
	"createFxSystemOnObject": {
		"body": "createFxSystemOnObject(${1:string particle},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int type})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnObject(string particle, Object object, float offsetX, float offsetY, float offsetZ, int type)\n",
		"prefix": "createFxSystemOnObject"

		"scope": "source.lua"
	},
	"createFxSystemOnObjectWithDirection": {
		"body": "createFxSystemOnObjectWithDirection(${1:string particle},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ},${9:int flag})",
		"description": "GTA_SA\nParticle particle = createFxSystemOnObjectWithDirection(string particle, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, int flag)\n",
		"prefix": "createFxSystemOnObjectWithDirection"

		"scope": "source.lua"
	},
	"taskDestroyCar": {
		"body": "taskDestroyCar(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\ntaskDestroyCar(Ped ped, Vehicle car)\n",
		"prefix": "taskDestroyCar"

		"scope": "source.lua"
	},
	"taskDiveAndGetUp": {
		"body": "taskDiveAndGetUp(${1:Ped ped},${2:float toOffsetX},${3:float toOffsetY},${4:int time})",
		"description": "GTA_SA\ntaskDiveAndGetUp(Ped ped, float toOffsetX, float toOffsetY, int time)\n",
		"prefix": "taskDiveAndGetUp"

		"scope": "source.lua"
	},
	"customPlateForNextCar": {
		"body": "customPlateForNextCar(${1:Model modelId},${2:string numberplate})",
		"description": "GTA_SA\ncustomPlateForNextCar(Model modelId, string numberplate)\n",
		"prefix": "customPlateForNextCar"

		"scope": "source.lua"
	},
	"taskShuffleToNextCarSeat": {
		"body": "taskShuffleToNextCarSeat(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\ntaskShuffleToNextCarSeat(Ped ped, Vehicle car)\n",
		"prefix": "taskShuffleToNextCarSeat"

		"scope": "source.lua"
	},
	"taskChatWithChar": {
		"body": "taskChatWithChar(${1:Ped ped},${2:int withActor},${3:bool flag},${4:int unknownFlag})",
		"description": "GTA_SA\ntaskChatWithChar(Ped ped, int withActor, bool flag, int unknownFlag)\n",
		"prefix": "taskChatWithChar"

		"scope": "source.lua"
	},
	"attachCameraToVehicle": {
		"body": "attachCameraToVehicle(${1:Vehicle car},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:float rotationX},${6:float rotationY},${7:float rotationZ},${8:float tilt},${9:int switchstyle})",
		"description": "GTA_SA\nattachCameraToVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicle"

		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtVehicle": {
		"body": "attachCameraToVehicleLookAtVehicle(${1:Vehicle car},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:int toCar},${6:float tilt},${7:int switchstyle})",
		"description": "GTA_SA\nattachCameraToVehicleLookAtVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, int toCar, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicleLookAtVehicle"

		"scope": "source.lua"
	},
	"attachCameraToVehicleLookAtChar": {
		"body": "attachCameraToVehicleLookAtChar(${1:Vehicle car},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:Ped ped},${6:float tilt},${7:int switchstyle})",
		"description": "GTA_SA\nattachCameraToVehicleLookAtChar(Vehicle car, float offsetX, float offsetY, float offsetZ, Ped ped, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToVehicleLookAtChar"

		"scope": "source.lua"
	},
	"attachCameraToChar": {
		"body": "attachCameraToChar(${1:Ped ped},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:float rotationX},${6:float rotationY},${7:float rotationZ},${8:float tilt},${9:int switchstyle})",
		"description": "GTA_SA\nattachCameraToChar(Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToChar"

		"scope": "source.lua"
	},
	"attachCameraToCharLookAtChar": {
		"body": "attachCameraToCharLookAtChar(${1:Ped ped},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:int targetActor},${6:float tilt},${7:int switchstyle})",
		"description": "GTA_SA\nattachCameraToCharLookAtChar(Ped ped, float offsetX, float offsetY, float offsetZ, int targetActor, float tilt, int switchstyle)\n",
		"prefix": "attachCameraToCharLookAtChar"

		"scope": "source.lua"
	},
	"forceCarLights": {
		"body": "forceCarLights(${1:Vehicle car},${2:int lights})",
		"description": "GTA_SA\nforceCarLights(Vehicle car, int lights)\n",
		"prefix": "forceCarLights"

		"scope": "source.lua"
	},
	"addPedtypeAsAttractorUser": {
		"body": "addPedtypeAsAttractorUser(${1:int ASOrigin},${2:int pedtype})",
		"description": "GTA_SA\naddPedtypeAsAttractorUser(int ASOrigin, int pedtype)\n",
		"prefix": "addPedtypeAsAttractorUser"

		"scope": "source.lua"
	},
	"attachObjectToCar": {
		"body": "attachObjectToCar(${1:Object object},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ})",
		"description": "GTA_SA\nattachObjectToCar(Object object, Vehicle car, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToCar"

		"scope": "source.lua"
	},
	"detachObject": {
		"body": "detachObject(${1:Object object},${2:float X},${3:float Y},${4:float Z},${5:bool collisionDetection})",
		"description": "GTA_SA\ndetachObject(Object object, float X, float Y, float Z, bool collisionDetection)\n",
		"prefix": "detachObject"

		"scope": "source.lua"
	},
	"attachCarToCar": {
		"body": "attachCarToCar(${1:Vehicle car},${2:int toCar},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ})",
		"description": "GTA_SA\nattachCarToCar(Vehicle car, int toCar, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachCarToCar"

		"scope": "source.lua"
	},
	"detachCar": {
		"body": "detachCar(${1:Vehicle car},${2:float X},${3:float Y},${4:float Z},${5:bool collisionDetection})",
		"description": "GTA_SA\ndetachCar(Vehicle car, float X, float Y, float Z, bool collisionDetection)\n",
		"prefix": "detachCar"

		"scope": "source.lua"
	},
	"isObjectAttached": {
		"body": "isObjectAttached(${1:Object object})",
		"description": "GTA_SA\nbool result = isObjectAttached(Object object)\n",
		"prefix": "isObjectAttached"

		"scope": "source.lua"
	},
	"isVehicleAttached": {
		"body": "isVehicleAttached(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isVehicleAttached(Vehicle car)\n",
		"prefix": "isVehicleAttached"

		"scope": "source.lua"
	},
	"clearCharTasks": {
		"body": "clearCharTasks(${1:Ped ped})",
		"description": "GTA_SA\nclearCharTasks(Ped ped)\n",
		"prefix": "clearCharTasks"

		"scope": "source.lua"
	},
	"taskTogglePedThreatScanner": {
		"body": "taskTogglePedThreatScanner(${1:Ped ped},${2:bool unknownFlag1},${3:bool unknownFlag2},${4:bool unknownFlag3})",
		"description": "GTA_SA\ntaskTogglePedThreatScanner(Ped ped, bool unknownFlag1, bool unknownFlag2, bool unknownFlag3)\n",
		"prefix": "taskTogglePedThreatScanner"

		"scope": "source.lua"
	},
	"popCarDoor": {
		"body": "popCarDoor(${1:Vehicle car},${2:int door},${3:bool visible})",
		"description": "GTA_SA\npopCarDoor(Vehicle car, int door, bool visible)\n",
		"prefix": "popCarDoor"

		"scope": "source.lua"
	},
	"fixCarDoor": {
		"body": "fixCarDoor(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\nfixCarDoor(Vehicle car, int door)\n",
		"prefix": "fixCarDoor"

		"scope": "source.lua"
	},
	"taskEveryoneLeaveCar": {
		"body": "taskEveryoneLeaveCar(${1:Vehicle car})",
		"description": "GTA_SA\ntaskEveryoneLeaveCar(Vehicle car)\n",
		"prefix": "taskEveryoneLeaveCar"

		"scope": "source.lua"
	},
	"isPlayerTargettingAnything": {
		"body": "isPlayerTargettingAnything(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerTargettingAnything(Player player)\n",
		"prefix": "isPlayerTargettingAnything"

		"scope": "source.lua"
	},
	"getActiveCameraCoordinates": {
		"body": "getActiveCameraCoordinates()",
		"description": "GTA_SA\nfloat X, float Y, float Z = getActiveCameraCoordinates()\n",
		"prefix": "getActiveCameraCoordinates"

		"scope": "source.lua"
	},
	"getActiveCameraPointAt": {
		"body": "getActiveCameraPointAt()",
		"description": "GTA_SA\nfloat X, float Y, float Z = getActiveCameraPointAt()\n",
		"prefix": "getActiveCameraPointAt"

		"scope": "source.lua"
	},
	"popCarPanel": {
		"body": "popCarPanel(${1:Vehicle car},${2:int component},${3:bool effectFlag})",
		"description": "GTA_SA\npopCarPanel(Vehicle car, int component, bool effectFlag)\n",
		"prefix": "popCarPanel"

		"scope": "source.lua"
	},
	"fixCarPanel": {
		"body": "fixCarPanel(${1:Vehicle car},${2:int componentB})",
		"description": "GTA_SA\nfixCarPanel(Vehicle car, int componentB)\n",
		"prefix": "fixCarPanel"

		"scope": "source.lua"
	},
	"fixCarTire": {
		"body": "fixCarTire(${1:Vehicle car},${2:int tire})",
		"description": "GTA_SA\nfixCarTire(Vehicle car, int tire)\n",
		"prefix": "fixCarTire"

		"scope": "source.lua"
	},
	"attachObjectToObject": {
		"body": "attachObjectToObject(${1:Object object},${2:int toObject},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ})",
		"description": "GTA_SA\nattachObjectToObject(Object object, int toObject, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToObject"

		"scope": "source.lua"
	},
	"attachObjectToChar": {
		"body": "attachObjectToChar(${1:Object object},${2:Ped ped},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ})",
		"description": "GTA_SA\nattachObjectToChar(Object object, Ped ped, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachObjectToChar"

		"scope": "source.lua"
	},
	"getCarSpeedVector": {
		"body": "getCarSpeedVector(${1:Vehicle car})",
		"description": "GTA_SA\nfloat vecX, float vecY, float vecZ = getCarSpeedVector(Vehicle car)\n",
		"prefix": "getCarSpeedVector"

		"scope": "source.lua"
	},
	"getCarMass": {
		"body": "getCarMass(${1:Vehicle car})",
		"description": "GTA_SA\nfloat mass = getCarMass(Vehicle car)\n",
		"prefix": "getCarMass"

		"scope": "source.lua"
	},
	"taskDiveFromAttachmentAndGetUp": {
		"body": "taskDiveFromAttachmentAndGetUp(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskDiveFromAttachmentAndGetUp(Ped ped, int timeMS)\n",
		"prefix": "taskDiveFromAttachmentAndGetUp"

		"scope": "source.lua"
	},
	"attachCharToBike": {
		"body": "attachCharToBike(${1:Ped ped},${2:Vehicle car},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int position},${7:float shootingAngle1},${8:float shootingAngle2},${9:int weapon})",
		"description": "GTA_SA\nattachCharToBike(Ped ped, Vehicle car, float offsetX, float offsetY, float offsetZ, int position, float shootingAngle1, float shootingAngle2, int weapon)\n",
		"prefix": "attachCharToBike"

		"scope": "source.lua"
	},
	"taskGotoCharOffset": {
		"body": "taskGotoCharOffset(${1:Ped ped},${2:int toActor},${3:int timelimit},${4:float approachDistance},${5:float approachAngle})",
		"description": "GTA_SA\ntaskGotoCharOffset(Ped ped, int toActor, int timelimit, float approachDistance, float approachAngle)\n",
		"prefix": "taskGotoCharOffset"

		"scope": "source.lua"
	},
	"taskLookAtCoord": {
		"body": "taskLookAtCoord(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int timeMS})",
		"description": "GTA_SA\ntaskLookAtCoord(Ped ped, float toX, float toY, float toZ, int timeMS)\n",
		"prefix": "taskLookAtCoord"

		"scope": "source.lua"
	},
	"hideCharWeaponForScriptedCutscene": {
		"body": "hideCharWeaponForScriptedCutscene(${1:Ped ped},${2:bool hide})",
		"description": "GTA_SA\nhideCharWeaponForScriptedCutscene(Ped ped, bool hide)\n",
		"prefix": "hideCharWeaponForScriptedCutscene"

		"scope": "source.lua"
	},
	"getCharSpeed": {
		"body": "getCharSpeed(${1:Ped ped})",
		"description": "GTA_SA\nfloat speed = getCharSpeed(Ped ped)\n",
		"prefix": "getCharSpeed"

		"scope": "source.lua"
	},
	"setGroupDecisionMaker": {
		"body": "setGroupDecisionMaker(${1:int group},${2:int maker})",
		"description": "GTA_SA\nsetGroupDecisionMaker(int group, int maker)\n",
		"prefix": "setGroupDecisionMaker"

		"scope": "source.lua"
	},
	"loadGroupDecisionMaker": {
		"body": "loadGroupDecisionMaker(${1:int type})",
		"description": "GTA_SA\nint maker = loadGroupDecisionMaker(int type)\n",
		"prefix": "loadGroupDecisionMaker"

		"scope": "source.lua"
	},
	"disablePlayerSprint": {
		"body": "disablePlayerSprint(${1:Player player},${2:bool mode})",
		"description": "GTA_SA\ndisablePlayerSprint(Player player, bool mode)\n",
		"prefix": "disablePlayerSprint"

		"scope": "source.lua"
	},
	"taskSitDown": {
		"body": "taskSitDown(${1:Ped ped},${2:int timeMS})",
		"description": "GTA_SA\ntaskSitDown(Ped ped, int timeMS)\n",
		"prefix": "taskSitDown"

		"scope": "source.lua"
	},
	"createSearchlight": {
		"body": "createSearchlight(${1:float atX},${2:float atY},${3:float atZ},${4:float targetX},${5:float targetY},${6:float targetZ},${7:float radius1},${8:float radius2})",
		"description": "GTA_SA\nSearchlight searchlight = createSearchlight(float atX, float atY, float atZ, float targetX, float targetY, float targetZ, float radius1, float radius2)\n",
		"prefix": "createSearchlight"

		"scope": "source.lua"
	},
	"deleteSearchlight": {
		"body": "deleteSearchlight(${1:Searchlight searchlight})",
		"description": "GTA_SA\ndeleteSearchlight(Searchlight searchlight)\n",
		"prefix": "deleteSearchlight"

		"scope": "source.lua"
	},
	"doesSearchlightExist": {
		"body": "doesSearchlightExist(${1:Searchlight searchlight})",
		"description": "GTA_SA\nbool result = doesSearchlightExist(Searchlight searchlight)\n",
		"prefix": "doesSearchlightExist"

		"scope": "source.lua"
	},
	"moveSearchlightBetweenCoords": {
		"body": "moveSearchlightBetweenCoords(${1:Searchlight searchlight},${2:float fromX},${3:float fromY},${4:float fromZ},${5:float toX},${6:float toY},${7:float toZ},${8:float speed})",
		"description": "GTA_SA\nmoveSearchlightBetweenCoords(Searchlight searchlight, float fromX, float fromY, float fromZ, float toX, float toY, float toZ, float speed)\n",
		"prefix": "moveSearchlightBetweenCoords"

		"scope": "source.lua"
	},
	"pointSearchlightAtCoord": {
		"body": "pointSearchlightAtCoord(${1:Searchlight searchlight},${2:float toX},${3:float toY},${4:float toZ},${5:float speed})",
		"description": "GTA_SA\npointSearchlightAtCoord(Searchlight searchlight, float toX, float toY, float toZ, float speed)\n",
		"prefix": "pointSearchlightAtCoord"

		"scope": "source.lua"
	},
	"pointSearchlightAtChar": {
		"body": "pointSearchlightAtChar(${1:Searchlight searchlight},${2:Ped ped},${3:float speed})",
		"description": "GTA_SA\npointSearchlightAtChar(Searchlight searchlight, Ped ped, float speed)\n",
		"prefix": "pointSearchlightAtChar"

		"scope": "source.lua"
	},
	"isCharInSearchlight": {
		"body": "isCharInSearchlight(${1:Searchlight searchlight},${2:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInSearchlight(Searchlight searchlight, Ped ped)\n",
		"prefix": "isCharInSearchlight"

		"scope": "source.lua"
	},
	"hasCutsceneLoaded": {
		"body": "hasCutsceneLoaded()",
		"description": "GTA_SA\nbool result = hasCutsceneLoaded()\n",
		"prefix": "hasCutsceneLoaded"

		"scope": "source.lua"
	},
	"taskTurnCharToFaceCoord": {
		"body": "taskTurnCharToFaceCoord(${1:Ped ped},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\ntaskTurnCharToFaceCoord(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "taskTurnCharToFaceCoord"

		"scope": "source.lua"
	},
	"taskDrivePointRoute": {
		"body": "taskDrivePointRoute(${1:Ped ped},${2:Vehicle car},${3:float speed})",
		"description": "GTA_SA\ntaskDrivePointRoute(Ped ped, Vehicle car, float speed)\n",
		"prefix": "taskDrivePointRoute"

		"scope": "source.lua"
	},
	"fireSingleBullet": {
		"body": "fireSingleBullet(${1:float fromX},${2:float fromY},${3:float fromZ},${4:float targetX},${5:float targetY},${6:float targetZ},${7:int energy})",
		"description": "GTA_SA\nfireSingleBullet(float fromX, float fromY, float fromZ, float targetX, float targetY, float targetZ, int energy)\n",
		"prefix": "fireSingleBullet"

		"scope": "source.lua"
	},
	"isLineOfSightClear": {
		"body": "isLineOfSightClear(${1:float fromX},${2:float fromY},${3:float fromZ},${4:float toX},${5:float toY},${6:float toZ},${7:bool checkBuildings},${8:bool checkVehicles},${9:bool checkActors},${10:bool checkObjects},${11:bool checkParticles})",
		"description": "GTA_SA\nbool result = isLineOfSightClear(float fromX, float fromY, float fromZ, float toX, float toY, float toZ, bool checkBuildings, bool checkVehicles, bool checkActors, bool checkObjects, bool checkParticles)\n",
		"prefix": "isLineOfSightClear"

		"scope": "source.lua"
	},
	"getCarRoll": {
		"body": "getCarRoll(${1:Vehicle car})",
		"description": "GTA_SA\nfloat roll = getCarRoll(Vehicle car)\n",
		"prefix": "getCarRoll"

		"scope": "source.lua"
	},
	"pointSearchlightAtVehicle": {
		"body": "pointSearchlightAtVehicle(${1:Searchlight searchlight},${2:Vehicle car},${3:float speed})",
		"description": "GTA_SA\npointSearchlightAtVehicle(Searchlight searchlight, Vehicle car, float speed)\n",
		"prefix": "pointSearchlightAtVehicle"

		"scope": "source.lua"
	},
	"isVehicleInSearchlight": {
		"body": "isVehicleInSearchlight(${1:int int},${2:Vehicle car})",
		"description": "GTA_SA\nbool result = isVehicleInSearchlight(int int, Vehicle car)\n",
		"prefix": "isVehicleInSearchlight"

		"scope": "source.lua"
	},
	"createSearchlightOnVehicle": {
		"body": "createSearchlightOnVehicle(${1:Vehicle car},${2:float offsetX},${3:float offsetY},${4:float offsetZ},${5:float targetX},${6:float targetY},${7:float targetZ},${8:float radius},${9:float radius})",
		"description": "GTA_SA\nSearchlight searchlight = createSearchlightOnVehicle(Vehicle car, float offsetX, float offsetY, float offsetZ, float targetX, float targetY, float targetZ, float radius, float radius)\n",
		"prefix": "createSearchlightOnVehicle"

		"scope": "source.lua"
	},
	"taskGoToCoordWhileAiming": {
		"body": "taskGoToCoordWhileAiming(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int mode},${6:float turnRadius},${7:float stopRadius},${8:Ped ped},${9:float offsetX},${10:float offsetY},${11:float offsetZ})",
		"description": "GTA_SA\ntaskGoToCoordWhileAiming(Ped ped, float toX, float toY, float toZ, int mode, float turnRadius, float stopRadius, Ped ped, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "taskGoToCoordWhileAiming"

		"scope": "source.lua"
	},
	"getNumberOfFiresInRange": {
		"body": "getNumberOfFiresInRange(${1:float atX},${2:float atY},${3:float atZ},${4:float radius})",
		"description": "GTA_SA\nint num = getNumberOfFiresInRange(float atX, float atY, float atZ, float radius)\n",
		"prefix": "getNumberOfFiresInRange"

		"scope": "source.lua"
	},
	"addBlipForSearchlight": {
		"body": "addBlipForSearchlight(${1:Searchlight searchlight})",
		"description": "GTA_SA\nMarker marker = addBlipForSearchlight(Searchlight searchlight)\n",
		"prefix": "addBlipForSearchlight"

		"scope": "source.lua"
	},
	"skipToEndAndStopPlaybackRecordedCar": {
		"body": "skipToEndAndStopPlaybackRecordedCar(${1:Vehicle car})",
		"description": "GTA_SA\nskipToEndAndStopPlaybackRecordedCar(Vehicle car)\n",
		"prefix": "skipToEndAndStopPlaybackRecordedCar"

		"scope": "source.lua"
	},
	"taskCarTempAction": {
		"body": "taskCarTempAction(${1:Ped ped},${2:Vehicle car},${3:int performAction},${4:int timelimit})",
		"description": "GTA_SA\ntaskCarTempAction(Ped ped, Vehicle car, int performAction, int timelimit)\n",
		"prefix": "taskCarTempAction"

		"scope": "source.lua"
	},
	"setLaRiots": {
		"body": "setLaRiots(${1:bool enable})",
		"description": "GTA_SA\nsetLaRiots(bool enable)\n",
		"prefix": "setLaRiots"

		"scope": "source.lua"
	},
	"removeCharFromGroup": {
		"body": "removeCharFromGroup(${1:Ped ped})",
		"description": "GTA_SA\nremoveCharFromGroup(Ped ped)\n",
		"prefix": "removeCharFromGroup"

		"scope": "source.lua"
	},
	"attachSearchlightToSearchlightObject": {
		"body": "attachSearchlightToSearchlightObject(${1:Searchlight searchlight},${2:int tower},${3:int housing},${4:int bulb},${5:float offsetX},${6:float offsetY},${7:float offsetZ})",
		"description": "GTA_SA\nattachSearchlightToSearchlightObject(Searchlight searchlight, int tower, int housing, int bulb, float offsetX, float offsetY, float offsetZ)\n",
		"prefix": "attachSearchlightToSearchlightObject"

		"scope": "source.lua"
	},
	"switchEmergencyServices": {
		"body": "switchEmergencyServices(${1:bool enable})",
		"description": "GTA_SA\nswitchEmergencyServices(bool enable)\n",
		"prefix": "switchEmergencyServices"

		"scope": "source.lua"
	},
	"createCheckpoint": {
		"body": "createCheckpoint(${1:int type},${2:float atX},${3:float atY},${4:float atZ},${5:float pointX},${6:float pointY},${7:float pointZ},${8:float radius})",
		"description": "GTA_SA\nCheckpoint checkpoint = createCheckpoint(int type, float atX, float atY, float atZ, float pointX, float pointY, float pointZ, float radius)\n",
		"prefix": "createCheckpoint"

		"scope": "source.lua"
	},
	"deleteCheckpoint": {
		"body": "deleteCheckpoint(${1:Checkpoint checkpoint})",
		"description": "GTA_SA\ndeleteCheckpoint(Checkpoint checkpoint)\n",
		"prefix": "deleteCheckpoint"

		"scope": "source.lua"
	},
	"switchRandomTrains": {
		"body": "switchRandomTrains(${1:bool enable})",
		"description": "GTA_SA\nswitchRandomTrains(bool enable)\n",
		"prefix": "switchRandomTrains"

		"scope": "source.lua"
	},
	"createMissionTrain": {
		"body": "createMissionTrain(${1:int type},${2:float atX},${3:float atY},${4:float atZ},${5:bool direction})",
		"description": "GTA_SA\nVehicle train = createMissionTrain(int type, float atX, float atY, float atZ, bool direction)\n",
		"prefix": "createMissionTrain"

		"scope": "source.lua"
	},
	"deleteMissionTrains": {
		"body": "deleteMissionTrains()",
		"description": "GTA_SA\ndeleteMissionTrains()\n",
		"prefix": "deleteMissionTrains"

		"scope": "source.lua"
	},
	"markMissionTrainsAsNoLongerNeeded": {
		"body": "markMissionTrainsAsNoLongerNeeded()",
		"description": "GTA_SA\nmarkMissionTrainsAsNoLongerNeeded()\n",
		"prefix": "markMissionTrainsAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"deleteAllTrains": {
		"body": "deleteAllTrains()",
		"description": "GTA_SA\ndeleteAllTrains()\n",
		"prefix": "deleteAllTrains"

		"scope": "source.lua"
	},
	"setTrainSpeed": {
		"body": "setTrainSpeed(${1:Vehicle train},${2:float speed})",
		"description": "GTA_SA\nsetTrainSpeed(Vehicle train, float speed)\n",
		"prefix": "setTrainSpeed"

		"scope": "source.lua"
	},
	"setTrainCruiseSpeed": {
		"body": "setTrainCruiseSpeed(${1:Vehicle train},${2:float speed})",
		"description": "GTA_SA\nsetTrainCruiseSpeed(Vehicle train, float speed)\n",
		"prefix": "setTrainCruiseSpeed"

		"scope": "source.lua"
	},
	"getTrainCaboose": {
		"body": "getTrainCaboose(${1:Vehicle train})",
		"description": "GTA_SA\nint caboose = getTrainCaboose(Vehicle train)\n",
		"prefix": "getTrainCaboose"

		"scope": "source.lua"
	},
	"deletePlayer": {
		"body": "deletePlayer(${1:Player player})",
		"description": "GTA_SA\ndeletePlayer(Player player)\n",
		"prefix": "deletePlayer"

		"scope": "source.lua"
	},
	"setTwoPlayerCameraMode": {
		"body": "setTwoPlayerCameraMode(${1:bool mode})",
		"description": "GTA_SA\nsetTwoPlayerCameraMode(bool mode)\n",
		"prefix": "setTwoPlayerCameraMode"

		"scope": "source.lua"
	},
	"taskCarMission": {
		"body": "taskCarMission(${1:Ped ped},${2:Vehicle car},${3:int targetCar},${4:int order},${5:float maxSpeed},${6:int trafficFlag})",
		"description": "GTA_SA\ntaskCarMission(Ped ped, Vehicle car, int targetCar, int order, float maxSpeed, int trafficFlag)\n",
		"prefix": "taskCarMission"

		"scope": "source.lua"
	},
	"taskGoToObject": {
		"body": "taskGoToObject(${1:Ped ped},${2:int toObject},${3:int timelimit},${4:float stopWithinRadius})",
		"description": "GTA_SA\ntaskGoToObject(Ped ped, int toObject, int timelimit, float stopWithinRadius)\n",
		"prefix": "taskGoToObject"

		"scope": "source.lua"
	},
	"taskWeaponRoll": {
		"body": "taskWeaponRoll(${1:Ped ped},${2:bool roll})",
		"description": "GTA_SA\ntaskWeaponRoll(Ped ped, bool roll)\n",
		"prefix": "taskWeaponRoll"

		"scope": "source.lua"
	},
	"taskCharArrestChar": {
		"body": "taskCharArrestChar(${1:Ped ped},${2:int bustActor})",
		"description": "GTA_SA\ntaskCharArrestChar(Ped ped, int bustActor)\n",
		"prefix": "taskCharArrestChar"

		"scope": "source.lua"
	},
	"getAvailableVehicleMod": {
		"body": "getAvailableVehicleMod(${1:Vehicle car},${2:int poolIndex})",
		"description": "GTA_SA\nModel itemID = getAvailableVehicleMod(Vehicle car, int poolIndex)\n",
		"prefix": "getAvailableVehicleMod"

		"scope": "source.lua"
	},
	"getVehicleModType": {
		"body": "getVehicleModType(${1:Model component})",
		"description": "GTA_SA\nint type = getVehicleModType(Model component)\n",
		"prefix": "getVehicleModType"

		"scope": "source.lua"
	},
	"addVehicleMod": {
		"body": "addVehicleMod(${1:Vehicle car},${2:Model component})",
		"description": "GTA_SA\nint componentId = addVehicleMod(Vehicle car, Model component)\n",
		"prefix": "addVehicleMod"

		"scope": "source.lua"
	},
	"removeVehicleMod": {
		"body": "removeVehicleMod(${1:Vehicle car},${2:int componentId})",
		"description": "GTA_SA\nremoveVehicleMod(Vehicle car, int componentId)\n",
		"prefix": "removeVehicleMod"

		"scope": "source.lua"
	},
	"requestVehicleMod": {
		"body": "requestVehicleMod(${1:Model component})",
		"description": "GTA_SA\nrequestVehicleMod(Model component)\n",
		"prefix": "requestVehicleMod"

		"scope": "source.lua"
	},
	"hasVehicleModLoaded": {
		"body": "hasVehicleModLoaded(${1:Model component})",
		"description": "GTA_SA\nbool result = hasVehicleModLoaded(Model component)\n",
		"prefix": "hasVehicleModLoaded"

		"scope": "source.lua"
	},
	"markVehicleModAsNoLongerNeeded": {
		"body": "markVehicleModAsNoLongerNeeded(${1:Model component})",
		"description": "GTA_SA\nmarkVehicleModAsNoLongerNeeded(Model component)\n",
		"prefix": "markVehicleModAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"getNumAvailablePaintjobs": {
		"body": "getNumAvailablePaintjobs(${1:Vehicle car})",
		"description": "GTA_SA\nint num = getNumAvailablePaintjobs(Vehicle car)\n",
		"prefix": "getNumAvailablePaintjobs"

		"scope": "source.lua"
	},
	"giveVehiclePaintjob": {
		"body": "giveVehiclePaintjob(${1:int set},${2:int paintjob})",
		"description": "GTA_SA\ngiveVehiclePaintjob(int set, int paintjob)\n",
		"prefix": "giveVehiclePaintjob"

		"scope": "source.lua"
	},
	"isGroupMember": {
		"body": "isGroupMember(${1:Ped ped},${2:int group})",
		"description": "GTA_SA\nbool result = isGroupMember(Ped ped, int group)\n",
		"prefix": "isGroupMember"

		"scope": "source.lua"
	},
	"isGroupLeader": {
		"body": "isGroupLeader(${1:Ped ped},${2:int group})",
		"description": "GTA_SA\nbool result = isGroupLeader(Ped ped, int group)\n",
		"prefix": "isGroupLeader"

		"scope": "source.lua"
	},
	"setGroupSeparationRange": {
		"body": "setGroupSeparationRange(${1:int group},${2:float range})",
		"description": "GTA_SA\nsetGroupSeparationRange(int group, float range)\n",
		"prefix": "setGroupSeparationRange"

		"scope": "source.lua"
	},
	"limitTwoPlayerDistance": {
		"body": "limitTwoPlayerDistance(${1:float distance})",
		"description": "GTA_SA\nlimitTwoPlayerDistance(float distance)\n",
		"prefix": "limitTwoPlayerDistance"

		"scope": "source.lua"
	},
	"releaseTwoPlayerDistance": {
		"body": "releaseTwoPlayerDistance()",
		"description": "GTA_SA\nreleaseTwoPlayerDistance()\n",
		"prefix": "releaseTwoPlayerDistance"

		"scope": "source.lua"
	},
	"setPlayerPlayerTargetting": {
		"body": "setPlayerPlayerTargetting(${1:bool can})",
		"description": "GTA_SA\nsetPlayerPlayerTargetting(bool can)\n",
		"prefix": "setPlayerPlayerTargetting"

		"scope": "source.lua"
	},
	"getScriptFireCoords": {
		"body": "getScriptFireCoords(${1:int fire})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getScriptFireCoords(int fire)\n",
		"prefix": "getScriptFireCoords"

		"scope": "source.lua"
	},
	"getNthClosestCarNodeWithHeading": {
		"body": "getNthClosestCarNodeWithHeading(${1:float forX},${2:float forY},${3:float forZ},${4:int direction})",
		"description": "GTA_SA\nfloat X, float Y, float Z, float ZAngle = getNthClosestCarNodeWithHeading(float forX, float forY, float forZ, int direction)\n",
		"prefix": "getNthClosestCarNodeWithHeading"

		"scope": "source.lua"
	},
	"setPlayersCanBeInSeparateCars": {
		"body": "setPlayersCanBeInSeparateCars(${1:bool allow})",
		"description": "GTA_SA\nsetPlayersCanBeInSeparateCars(bool allow)\n",
		"prefix": "setPlayersCanBeInSeparateCars"

		"scope": "source.lua"
	},
	"doesCarHaveStuckCarCheck": {
		"body": "doesCarHaveStuckCarCheck(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = doesCarHaveStuckCarCheck(Vehicle car)\n",
		"prefix": "doesCarHaveStuckCarCheck"

		"scope": "source.lua"
	},
	"setPlaybackSpeed": {
		"body": "setPlaybackSpeed(${1:Vehicle car},${2:float speed})",
		"description": "GTA_SA\nsetPlaybackSpeed(Vehicle car, float speed)\n",
		"prefix": "setPlaybackSpeed"

		"scope": "source.lua"
	},
	"areAnyCharsNearChar": {
		"body": "areAnyCharsNearChar(${1:Ped ped},${2:float range})",
		"description": "GTA_SA\nbool result = areAnyCharsNearChar(Ped ped, float range)\n",
		"prefix": "areAnyCharsNearChar"

		"scope": "source.lua"
	},
	"skipCutsceneEnd": {
		"body": "skipCutsceneEnd()",
		"description": "GTA_SA\nskipCutsceneEnd()\n",
		"prefix": "skipCutsceneEnd"

		"scope": "source.lua"
	},
	"getPercentageTaggedInArea": {
		"body": "getPercentageTaggedInArea(${1:float x1},${2:float y1},${3:float x2},${4:float y2})",
		"description": "GTA_SA\nint percentage = getPercentageTaggedInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "getPercentageTaggedInArea"

		"scope": "source.lua"
	},
	"setTagStatusInArea": {
		"body": "setTagStatusInArea(${1:float x1},${2:float y1},${3:float x2},${4:float y2},${5:bool value})",
		"description": "GTA_SA\nsetTagStatusInArea(float x1, float y1, float x2, float y2, bool value)\n",
		"prefix": "setTagStatusInArea"

		"scope": "source.lua"
	},
	"carGotoCoordinatesRacing": {
		"body": "carGotoCoordinatesRacing(${1:Vehicle car},${2:float toX},${3:float toY},${4:float toZ})",
		"description": "GTA_SA\ncarGotoCoordinatesRacing(Vehicle car, float toX, float toY, float toZ)\n",
		"prefix": "carGotoCoordinatesRacing"

		"scope": "source.lua"
	},
	"startPlaybackRecordedCarUsingAi": {
		"body": "startPlaybackRecordedCarUsingAi(${1:Vehicle car},${2:int path})",
		"description": "GTA_SA\nstartPlaybackRecordedCarUsingAi(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCarUsingAi"

		"scope": "source.lua"
	},
	"skipInPlaybackRecordedCar": {
		"body": "skipInPlaybackRecordedCar(${1:Vehicle car},${2:float path})",
		"description": "GTA_SA\nskipInPlaybackRecordedCar(Vehicle car, float path)\n",
		"prefix": "skipInPlaybackRecordedCar"

		"scope": "source.lua"
	},
	"clearCharDecisionMakerEventResponse": {
		"body": "clearCharDecisionMakerEventResponse(${1:int maker},${2:int event})",
		"description": "GTA_SA\nclearCharDecisionMakerEventResponse(int maker, int event)\n",
		"prefix": "clearCharDecisionMakerEventResponse"

		"scope": "source.lua"
	},
	"addCharDecisionMakerEventResponse": {
		"body": "addCharDecisionMakerEventResponse(${1:int maker},${2:int event},${3:int taskID},${4:float respect},${5:float hate},${6:float like},${7:float dislike},${8:bool inCar},${9:bool onFoot})",
		"description": "GTA_SA\naddCharDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)\n",
		"prefix": "addCharDecisionMakerEventResponse"

		"scope": "source.lua"
	},
	"taskPickUpObject": {
		"body": "taskPickUpObject(${1:Ped ped},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int boneId1},${7:int boneId2},${8:string performAnimation},${9:int IFPFile},${10:int time})",
		"description": "GTA_SA\ntaskPickUpObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int boneId1, int boneId2, string performAnimation, int IFPFile, int time)\n",
		"prefix": "taskPickUpObject"

		"scope": "source.lua"
	},
	"dropObject": {
		"body": "dropObject(${1:Ped ped},${2:bool object})",
		"description": "GTA_SA\ndropObject(Ped ped, bool object)\n",
		"prefix": "dropObject"

		"scope": "source.lua"
	},
	"explodeCarInCutscene": {
		"body": "explodeCarInCutscene(${1:Vehicle car})",
		"description": "GTA_SA\nexplodeCarInCutscene(Vehicle car)\n",
		"prefix": "explodeCarInCutscene"

		"scope": "source.lua"
	},
	"buildPlayerModel": {
		"body": "buildPlayerModel(${1:Player player})",
		"description": "GTA_SA\nbuildPlayerModel(Player player)\n",
		"prefix": "buildPlayerModel"

		"scope": "source.lua"
	},
	"planeAttackPlayer": {
		"body": "planeAttackPlayer(${1:int hydra},${2:Vehicle car},${3:float radius})",
		"description": "GTA_SA\nplaneAttackPlayer(int hydra, Vehicle car, float radius)\n",
		"prefix": "planeAttackPlayer"

		"scope": "source.lua"
	},
	"planeFlyInDirection": {
		"body": "planeFlyInDirection(${1:int plane},${2:float direction},${3:float altitudemin},${4:float altitudemax})",
		"description": "GTA_SA\nplaneFlyInDirection(int plane, float direction, float altitudemin, float altitudemax)\n",
		"prefix": "planeFlyInDirection"

		"scope": "source.lua"
	},
	"planeFollowEntity": {
		"body": "planeFollowEntity(${1:int plane},${2:Ped ped},${3:Vehicle car},${4:float radius})",
		"description": "GTA_SA\nplaneFollowEntity(int plane, Ped ped, Vehicle car, float radius)\n",
		"prefix": "planeFollowEntity"

		"scope": "source.lua"
	},
	"taskDriveBy": {
		"body": "taskDriveBy(${1:Ped ped},${2:int drivebyActor},${3:Vehicle car},${4:float pX},${5:float pY},${6:float pZ},${7:float radiusX},${8:int radiusY},${9:bool radiusZ},${10:int firingRate})",
		"description": "GTA_SA\ntaskDriveBy(Ped ped, int drivebyActor, Vehicle car, float pX, float pY, float pZ, float radiusX, int radiusY, bool radiusZ, int firingRate)\n",
		"prefix": "taskDriveBy"

		"scope": "source.lua"
	},
	"setCarStayInSlowLane": {
		"body": "setCarStayInSlowLane(${1:Vehicle car},${2:bool stay})",
		"description": "GTA_SA\nsetCarStayInSlowLane(Vehicle car, bool stay)\n",
		"prefix": "setCarStayInSlowLane"

		"scope": "source.lua"
	},
	"takeRemoteControlOfCar": {
		"body": "takeRemoteControlOfCar(${1:Player player},${2:Vehicle car})",
		"description": "GTA_SA\ntakeRemoteControlOfCar(Player player, Vehicle car)\n",
		"prefix": "takeRemoteControlOfCar"

		"scope": "source.lua"
	},
	"isClosestObjectOfTypeSmashedOrDamaged": {
		"body": "isClosestObjectOfTypeSmashedOrDamaged(${1:Model object},${2:float atX},${3:float atY},${4:float atZ},${5:float radius},${6:bool smashed},${7:bool damaged})",
		"description": "GTA_SA\nbool result = isClosestObjectOfTypeSmashedOrDamaged(Model object, float atX, float atY, float atZ, float radius, bool smashed, bool damaged)\n",
		"prefix": "isClosestObjectOfTypeSmashedOrDamaged"

		"scope": "source.lua"
	},
	"startSettingUpConversation": {
		"body": "startSettingUpConversation(${1:Ped ped})",
		"description": "GTA_SA\nstartSettingUpConversation(Ped ped)\n",
		"prefix": "startSettingUpConversation"

		"scope": "source.lua"
	},
	"finishSettingUpConversation": {
		"body": "finishSettingUpConversation()",
		"description": "GTA_SA\nfinishSettingUpConversation()\n",
		"prefix": "finishSettingUpConversation"

		"scope": "source.lua"
	},
	"isConversationAtNode": {
		"body": "isConversationAtNode(${1:Ped ped},${2:GxtString gxtString})",
		"description": "GTA_SA\nbool result = isConversationAtNode(Ped ped, GxtString gxtString)\n",
		"prefix": "isConversationAtNode"

		"scope": "source.lua"
	},
	"getObjectHealth": {
		"body": "getObjectHealth(${1:Object object})",
		"description": "GTA_SA\nint health = getObjectHealth(Object object)\n",
		"prefix": "getObjectHealth"

		"scope": "source.lua"
	},
	"setObjectHealth": {
		"body": "setObjectHealth(${1:Object object},${2:int health})",
		"description": "GTA_SA\nsetObjectHealth(Object object, int health)\n",
		"prefix": "setObjectHealth"

		"scope": "source.lua"
	},
	"breakObject": {
		"body": "breakObject(${1:Object object},${2:int intensity})",
		"description": "GTA_SA\nbreakObject(Object object, int intensity)\n",
		"prefix": "breakObject"

		"scope": "source.lua"
	},
	"heliAttackPlayer": {
		"body": "heliAttackPlayer(${1:Vehicle heli},${2:Player player},${3:float radius})",
		"description": "GTA_SA\nheliAttackPlayer(Vehicle heli, Player player, float radius)\n",
		"prefix": "heliAttackPlayer"

		"scope": "source.lua"
	},
	"heliFollowEntity": {
		"body": "heliFollowEntity(${1:Vehicle heli},${2:Ped ped},${3:Vehicle car},${4:float radius})",
		"description": "GTA_SA\nheliFollowEntity(Vehicle heli, Ped ped, Vehicle car, float radius)\n",
		"prefix": "heliFollowEntity"

		"scope": "source.lua"
	},
	"policeHeliChaseEntity": {
		"body": "policeHeliChaseEntity(${1:Vehicle heli},${2:Ped ped},${3:Vehicle car},${4:float radius})",
		"description": "GTA_SA\npoliceHeliChaseEntity(Vehicle heli, Ped ped, Vehicle car, float radius)\n",
		"prefix": "policeHeliChaseEntity"

		"scope": "source.lua"
	},
	"taskUseMobilePhone": {
		"body": "taskUseMobilePhone(${1:Ped ped},${2:bool hold})",
		"description": "GTA_SA\ntaskUseMobilePhone(Ped ped, bool hold)\n",
		"prefix": "taskUseMobilePhone"

		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsDriver": {
		"body": "taskWarpCharIntoCarAsDriver(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\ntaskWarpCharIntoCarAsDriver(Ped ped, Vehicle car)\n",
		"prefix": "taskWarpCharIntoCarAsDriver"

		"scope": "source.lua"
	},
	"taskWarpCharIntoCarAsPassenger": {
		"body": "taskWarpCharIntoCarAsPassenger(${1:Ped ped},${2:Vehicle car},${3:int passengerseat})",
		"description": "GTA_SA\ntaskWarpCharIntoCarAsPassenger(Ped ped, Vehicle car, int passengerseat)\n",
		"prefix": "taskWarpCharIntoCarAsPassenger"

		"scope": "source.lua"
	},
	"switchCopsOnBikes": {
		"body": "switchCopsOnBikes(${1:bool generate})",
		"description": "GTA_SA\nswitchCopsOnBikes(bool generate)\n",
		"prefix": "switchCopsOnBikes"

		"scope": "source.lua"
	},
	"isFlameInAngledArea2d": {
		"body": "isFlameInAngledArea2d(${1:float x1},${2:float y1},${3:float x2},${4:float y2},${5:float angle},${6:bool sphere})",
		"description": "GTA_SA\nbool result = isFlameInAngledArea2d(float x1, float y1, float x2, float y2, float angle, bool sphere)\n",
		"prefix": "isFlameInAngledArea2d"

		"scope": "source.lua"
	},
	"isFlameInAngledArea3d": {
		"body": "isFlameInAngledArea3d(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2},${7:float angle},${8:bool sphere})",
		"description": "GTA_SA\nbool result = isFlameInAngledArea3d(float x1, float y1, float z1, float x2, float y2, float z2, float angle, bool sphere)\n",
		"prefix": "isFlameInAngledArea3d"

		"scope": "source.lua"
	},
	"addStuckCarCheckWithWarp": {
		"body": "addStuckCarCheckWithWarp(${1:Vehicle car},${2:float checkDistance},${3:int time},${4:bool stuck},${5:bool flipped},${6:bool warp},${7:int path})",
		"description": "GTA_SA\naddStuckCarCheckWithWarp(Vehicle car, float checkDistance, int time, bool stuck, bool flipped, bool warp, int path)\n",
		"prefix": "addStuckCarCheckWithWarp"

		"scope": "source.lua"
	},
	"damageCarPanel": {
		"body": "damageCarPanel(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\ndamageCarPanel(Vehicle car, int door)\n",
		"prefix": "damageCarPanel"

		"scope": "source.lua"
	},
	"setCarRoll": {
		"body": "setCarRoll(${1:Vehicle car},${2:float roll})",
		"description": "GTA_SA\nsetCarRoll(Vehicle car, float roll)\n",
		"prefix": "setCarRoll"

		"scope": "source.lua"
	},
	"suppressCarModel": {
		"body": "suppressCarModel(${1:Model modelId})",
		"description": "GTA_SA\nbool result = suppressCarModel(Model modelId)\n",
		"prefix": "suppressCarModel"

		"scope": "source.lua"
	},
	"dontSuppressCarModel": {
		"body": "dontSuppressCarModel(${1:Model modelId})",
		"description": "GTA_SA\ndontSuppressCarModel(Model modelId)\n",
		"prefix": "dontSuppressCarModel"

		"scope": "source.lua"
	},
	"dontSuppressAnyCarModels": {
		"body": "dontSuppressAnyCarModels()",
		"description": "GTA_SA\ndontSuppressAnyCarModels()\n",
		"prefix": "dontSuppressAnyCarModels"

		"scope": "source.lua"
	},
	"isPs2KeyboardKeyPressed": {
		"body": "isPs2KeyboardKeyPressed(${1:int key})",
		"description": "GTA_SA\nbool result = isPs2KeyboardKeyPressed(int key)\n",
		"prefix": "isPs2KeyboardKeyPressed"

		"scope": "source.lua"
	},
	"isPs2KeyboardKeyJustPressed": {
		"body": "isPs2KeyboardKeyJustPressed(${1:int key})",
		"description": "GTA_SA\nbool result = isPs2KeyboardKeyJustPressed(int key)\n",
		"prefix": "isPs2KeyboardKeyJustPressed"

		"scope": "source.lua"
	},
	"isCharHoldingObject": {
		"body": "isCharHoldingObject(${1:Ped ped},${2:int liftingObject})",
		"description": "GTA_SA\nbool result = isCharHoldingObject(Ped ped, int liftingObject)\n",
		"prefix": "isCharHoldingObject"

		"scope": "source.lua"
	},
	"setCarCanGoAgainstTraffic": {
		"body": "setCarCanGoAgainstTraffic(${1:Vehicle car},${2:bool can})",
		"description": "GTA_SA\nsetCarCanGoAgainstTraffic(Vehicle car, bool can)\n",
		"prefix": "setCarCanGoAgainstTraffic"

		"scope": "source.lua"
	},
	"damageCarDoor": {
		"body": "damageCarDoor(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\ndamageCarDoor(Vehicle car, int door)\n",
		"prefix": "damageCarDoor"

		"scope": "source.lua"
	},
	"getRandomCarInSphereNoSave": {
		"body": "getRandomCarInSphereNoSave(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:int model})",
		"description": "GTA_SA\nVehicle car = getRandomCarInSphereNoSave(float X, float Y, float Z, float radius, int model)\n",
		"prefix": "getRandomCarInSphereNoSave"

		"scope": "source.lua"
	},
	"getRandomCharInSphere": {
		"body": "getRandomCharInSphere(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:bool pedtypeCivilian},${6:bool gang},${7:bool prostitute})",
		"description": "GTA_SA\nPed ped = getRandomCharInSphere(float X, float Y, float Z, float radius, bool pedtypeCivilian, bool gang, bool prostitute)\n",
		"prefix": "getRandomCharInSphere"

		"scope": "source.lua"
	},
	"hasCharBeenArrested": {
		"body": "hasCharBeenArrested(${1:Ped ped})",
		"description": "GTA_SA\nbool result = hasCharBeenArrested(Ped ped)\n",
		"prefix": "hasCharBeenArrested"

		"scope": "source.lua"
	},
	"setPlaneThrottle": {
		"body": "setPlaneThrottle(${1:int plane},${2:float throttle})",
		"description": "GTA_SA\nsetPlaneThrottle(int plane, float throttle)\n",
		"prefix": "setPlaneThrottle"

		"scope": "source.lua"
	},
	"heliLandAtCoords": {
		"body": "heliLandAtCoords(${1:Vehicle heli},${2:float X},${3:float Y},${4:float Z},${5:float minaltitude},${6:float maxaltitude})",
		"description": "GTA_SA\nheliLandAtCoords(Vehicle heli, float X, float Y, float Z, float minaltitude, float maxaltitude)\n",
		"prefix": "heliLandAtCoords"

		"scope": "source.lua"
	},
	"planeStartsInAir": {
		"body": "planeStartsInAir(${1:int hydra})",
		"description": "GTA_SA\nplaneStartsInAir(int hydra)\n",
		"prefix": "planeStartsInAir"

		"scope": "source.lua"
	},
	"setRelationship": {
		"body": "setRelationship(${1:int acquaintance},${2:int pedtype},${3:int toPedtype})",
		"description": "GTA_SA\nsetRelationship(int acquaintance, int pedtype, int toPedtype)\n",
		"prefix": "setRelationship"

		"scope": "source.lua"
	},
	"clearRelationship": {
		"body": "clearRelationship(${1:int acquaintance},${2:int pedtype},${3:int toPedtype})",
		"description": "GTA_SA\nclearRelationship(int acquaintance, int pedtype, int toPedtype)\n",
		"prefix": "clearRelationship"

		"scope": "source.lua"
	},
	"clearGroupDecisionMakerEventResponse": {
		"body": "clearGroupDecisionMakerEventResponse(${1:int maker},${2:int event})",
		"description": "GTA_SA\nclearGroupDecisionMakerEventResponse(int maker, int event)\n",
		"prefix": "clearGroupDecisionMakerEventResponse"

		"scope": "source.lua"
	},
	"addGroupDecisionMakerEventResponse": {
		"body": "addGroupDecisionMakerEventResponse(${1:int maker},${2:int event},${3:int taskID},${4:float respect},${5:float hate},${6:float like},${7:float dislike},${8:bool inCar},${9:bool onFoot})",
		"description": "GTA_SA\naddGroupDecisionMakerEventResponse(int maker, int event, int taskID, float respect, float hate, float like, float dislike, bool inCar, bool onFoot)\n",
		"prefix": "addGroupDecisionMakerEventResponse"

		"scope": "source.lua"
	},
	"drawSpriteWithRotation": {
		"body": "drawSpriteWithRotation(${1:int texture},${2:float x},${3:float y},${4:float scaleX},${5:float scaleY},${6:float angle},${7:int r},${8:int g},${9:int b},${10:int a})",
		"description": "GTA_SA\ndrawSpriteWithRotation(int texture, float x, float y, float scaleX, float scaleY, float angle, int r, int g, int b, int a)\n",
		"prefix": "drawSpriteWithRotation"

		"scope": "source.lua"
	},
	"taskUseAttractor": {
		"body": "taskUseAttractor(${1:Ped ped},${2:int attractor})",
		"description": "GTA_SA\ntaskUseAttractor(Ped ped, int attractor)\n",
		"prefix": "taskUseAttractor"

		"scope": "source.lua"
	},
	"taskShootAtChar": {
		"body": "taskShootAtChar(${1:Ped ped},${2:int atActor},${3:int timelimit})",
		"description": "GTA_SA\ntaskShootAtChar(Ped ped, int atActor, int timelimit)\n",
		"prefix": "taskShootAtChar"

		"scope": "source.lua"
	},
	"setInformRespectedFriends": {
		"body": "setInformRespectedFriends(${1:int flags},${2:float radius},${3:int pedsToScan})",
		"description": "GTA_SA\nsetInformRespectedFriends(int flags, float radius, int pedsToScan)\n",
		"prefix": "setInformRespectedFriends"

		"scope": "source.lua"
	},
	"isCharRespondingToEvent": {
		"body": "isCharRespondingToEvent(${1:Ped ped},${2:int event})",
		"description": "GTA_SA\nbool result = isCharRespondingToEvent(Ped ped, int event)\n",
		"prefix": "isCharRespondingToEvent"

		"scope": "source.lua"
	},
	"setObjectVisible": {
		"body": "setObjectVisible(${1:Object object},${2:bool visibility})",
		"description": "GTA_SA\nsetObjectVisible(Object object, bool visibility)\n",
		"prefix": "setObjectVisible"

		"scope": "source.lua"
	},
	"taskFleeCharAnyMeans": {
		"body": "taskFleeCharAnyMeans(${1:Ped ped},${2:int fleeFrom},${3:float runDistance},${4:int time},${5:bool changeCourse},${6:int unkTime1},${7:int unkTime2},${8:float awayRadius})",
		"description": "GTA_SA\ntaskFleeCharAnyMeans(Ped ped, int fleeFrom, float runDistance, int time, bool changeCourse, int unkTime1, int unkTime2, float awayRadius)\n",
		"prefix": "taskFleeCharAnyMeans"

		"scope": "source.lua"
	},
	"flushPatrolRoute": {
		"body": "flushPatrolRoute()",
		"description": "GTA_SA\nflushPatrolRoute()\n",
		"prefix": "flushPatrolRoute"

		"scope": "source.lua"
	},
	"extendPatrolRoute": {
		"body": "extendPatrolRoute(${1:float X},${2:float Y},${3:float Z},${4:string animation},${5:string IFPFile})",
		"description": "GTA_SA\nextendPatrolRoute(float X, float Y, float Z, string animation, string IFPFile)\n",
		"prefix": "extendPatrolRoute"

		"scope": "source.lua"
	},
	"playObjectAnim": {
		"body": "playObjectAnim(${1:Object object},${2:string animation},${3:string IFPFile},${4:float framedelta},${5:bool lockF},${6:bool loop})",
		"description": "GTA_SA\nbool result = playObjectAnim(Object object, string animation, string IFPFile, float framedelta, bool lockF, bool loop)\n",
		"prefix": "playObjectAnim"

		"scope": "source.lua"
	},
	"setRadarZoom": {
		"body": "setRadarZoom(${1:int zoom})",
		"description": "GTA_SA\nsetRadarZoom(int zoom)\n",
		"prefix": "setRadarZoom"

		"scope": "source.lua"
	},
	"doesBlipExist": {
		"body": "doesBlipExist(${1:Marker marker})",
		"description": "GTA_SA\nbool result = doesBlipExist(Marker marker)\n",
		"prefix": "doesBlipExist"

		"scope": "source.lua"
	},
	"loadPrices": {
		"body": "loadPrices(${1:GxtString shopping})",
		"description": "GTA_SA\nloadPrices(GxtString shopping)\n",
		"prefix": "loadPrices"

		"scope": "source.lua"
	},
	"loadShop": {
		"body": "loadShop(${1:GxtString shopping})",
		"description": "GTA_SA\nloadShop(GxtString shopping)\n",
		"prefix": "loadShop"

		"scope": "source.lua"
	},
	"getNumberOfItemsInShop": {
		"body": "getNumberOfItemsInShop()",
		"description": "GTA_SA\nint num = getNumberOfItemsInShop()\n",
		"prefix": "getNumberOfItemsInShop"

		"scope": "source.lua"
	},
	"getItemInShop": {
		"body": "getItemInShop(${1:int index})",
		"description": "GTA_SA\nint item = getItemInShop(int index)\n",
		"prefix": "getItemInShop"

		"scope": "source.lua"
	},
	"getPriceOfItem": {
		"body": "getPriceOfItem(${1:int item})",
		"description": "GTA_SA\nint price = getPriceOfItem(int item)\n",
		"prefix": "getPriceOfItem"

		"scope": "source.lua"
	},
	"taskDead": {
		"body": "taskDead(${1:Ped ped})",
		"description": "GTA_SA\ntaskDead(Ped ped)\n",
		"prefix": "taskDead"

		"scope": "source.lua"
	},
	"setCarAsMissionCar": {
		"body": "setCarAsMissionCar(${1:Vehicle car})",
		"description": "GTA_SA\nsetCarAsMissionCar(Vehicle car)\n",
		"prefix": "setCarAsMissionCar"

		"scope": "source.lua"
	},
	"setZonePopulationType": {
		"body": "setZonePopulationType(${1:GxtString zone},${2:int popcycle})",
		"description": "GTA_SA\nsetZonePopulationType(GxtString zone, int popcycle)\n",
		"prefix": "setZonePopulationType"

		"scope": "source.lua"
	},
	"setZoneDealerStrength": {
		"body": "setZoneDealerStrength(${1:GxtString zone},${2:int density})",
		"description": "GTA_SA\nsetZoneDealerStrength(GxtString zone, int density)\n",
		"prefix": "setZoneDealerStrength"

		"scope": "source.lua"
	},
	"getZoneDealerStrength": {
		"body": "getZoneDealerStrength(${1:GxtString zone})",
		"description": "GTA_SA\nint strength = getZoneDealerStrength(GxtString zone)\n",
		"prefix": "getZoneDealerStrength"

		"scope": "source.lua"
	},
	"setZoneGangStrength": {
		"body": "setZoneGangStrength(${1:GxtString zone},${2:int gang},${3:int density})",
		"description": "GTA_SA\nsetZoneGangStrength(GxtString zone, int gang, int density)\n",
		"prefix": "setZoneGangStrength"

		"scope": "source.lua"
	},
	"getZoneGangStrength": {
		"body": "getZoneGangStrength(${1:GxtString zone},${2:int gang})",
		"description": "GTA_SA\nint density = getZoneGangStrength(GxtString zone, int gang)\n",
		"prefix": "getZoneGangStrength"

		"scope": "source.lua"
	},
	"isMessageBeingDisplayed": {
		"body": "isMessageBeingDisplayed()",
		"description": "GTA_SA\nbool result = isMessageBeingDisplayed()\n",
		"prefix": "isMessageBeingDisplayed"

		"scope": "source.lua"
	},
	"setCharIsTargetPriority": {
		"body": "setCharIsTargetPriority(${1:Ped ped},${2:bool targetPriority})",
		"description": "GTA_SA\nsetCharIsTargetPriority(Ped ped, bool targetPriority)\n",
		"prefix": "setCharIsTargetPriority"

		"scope": "source.lua"
	},
	"customPlateDesignForNextCar": {
		"body": "customPlateDesignForNextCar(${1:Model modelNumplate},${2:int townTexture})",
		"description": "GTA_SA\ncustomPlateDesignForNextCar(Model modelNumplate, int townTexture)\n",
		"prefix": "customPlateDesignForNextCar"

		"scope": "source.lua"
	},
	"taskGotoCar": {
		"body": "taskGotoCar(${1:Ped ped},${2:Vehicle car},${3:int timeMS},${4:float stopAtDistance})",
		"description": "GTA_SA\ntaskGotoCar(Ped ped, Vehicle car, int timeMS, float stopAtDistance)\n",
		"prefix": "taskGotoCar"

		"scope": "source.lua"
	},
	"requestIpl": {
		"body": "requestIpl(${1:string group})",
		"description": "GTA_SA\nrequestIpl(string group)\n",
		"prefix": "requestIpl"

		"scope": "source.lua"
	},
	"removeIpl": {
		"body": "removeIpl(${1:string group})",
		"description": "GTA_SA\nremoveIpl(string group)\n",
		"prefix": "removeIpl"

		"scope": "source.lua"
	},
	"removeIplDiscreetly": {
		"body": "removeIplDiscreetly(${1:string group})",
		"description": "GTA_SA\nremoveIplDiscreetly(string group)\n",
		"prefix": "removeIplDiscreetly"

		"scope": "source.lua"
	},
	"setCharRelationship": {
		"body": "setCharRelationship(${1:Ped ped},${2:int acquaintance},${3:int pedtype})",
		"description": "GTA_SA\nsetCharRelationship(Ped ped, int acquaintance, int pedtype)\n",
		"prefix": "setCharRelationship"

		"scope": "source.lua"
	},
	"clearCharRelationship": {
		"body": "clearCharRelationship(${1:Ped ped},${2:int acquaintance},${3:int pedtype})",
		"description": "GTA_SA\nclearCharRelationship(Ped ped, int acquaintance, int pedtype)\n",
		"prefix": "clearCharRelationship"

		"scope": "source.lua"
	},
	"clearAllCharRelationships": {
		"body": "clearAllCharRelationships(${1:Ped ped},${2:int acquaintance})",
		"description": "GTA_SA\nclearAllCharRelationships(Ped ped, int acquaintance)\n",
		"prefix": "clearAllCharRelationships"

		"scope": "source.lua"
	},
	"getCarPitch": {
		"body": "getCarPitch(${1:Vehicle car})",
		"description": "GTA_SA\nfloat pitch = getCarPitch(Vehicle car)\n",
		"prefix": "getCarPitch"

		"scope": "source.lua"
	},
	"getActiveInterior": {
		"body": "getActiveInterior()",
		"description": "GTA_SA\nint interior = getActiveInterior()\n",
		"prefix": "getActiveInterior"

		"scope": "source.lua"
	},
	"heliKeepEntityInView": {
		"body": "heliKeepEntityInView(${1:Vehicle heli},${2:Ped ped},${3:Vehicle car},${4:float minaltitude},${5:float maxaltitude})",
		"description": "GTA_SA\nheliKeepEntityInView(Vehicle heli, Ped ped, Vehicle car, float minaltitude, float maxaltitude)\n",
		"prefix": "heliKeepEntityInView"

		"scope": "source.lua"
	},
	"getWeapontypeModel": {
		"body": "getWeapontypeModel(${1:int id})",
		"description": "GTA_SA\nint model = getWeapontypeModel(int id)\n",
		"prefix": "getWeapontypeModel"

		"scope": "source.lua"
	},
	"getWeapontypeSlot": {
		"body": "getWeapontypeSlot(${1:int id})",
		"description": "GTA_SA\nint slot = getWeapontypeSlot(int id)\n",
		"prefix": "getWeapontypeSlot"

		"scope": "source.lua"
	},
	"getShoppingExtraInfo": {
		"body": "getShoppingExtraInfo(${1:int item},${2:int flag})",
		"description": "GTA_SA\nint info = getShoppingExtraInfo(int item, int flag)\n",
		"prefix": "getShoppingExtraInfo"

		"scope": "source.lua"
	},
	"givePlayerClothes": {
		"body": "givePlayerClothes(${1:Player player},${2:int texture},${3:int model},${4:int bodypart})",
		"description": "GTA_SA\ngivePlayerClothes(Player player, int texture, int model, int bodypart)\n",
		"prefix": "givePlayerClothes"

		"scope": "source.lua"
	},
	"getNumberOfFiresInArea": {
		"body": "getNumberOfFiresInArea(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2})",
		"description": "GTA_SA\nint num = getNumberOfFiresInArea(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getNumberOfFiresInArea"

		"scope": "source.lua"
	},
	"attachWinchToHeli": {
		"body": "attachWinchToHeli(${1:Vehicle heli},${2:bool magnet})",
		"description": "GTA_SA\nattachWinchToHeli(Vehicle heli, bool magnet)\n",
		"prefix": "attachWinchToHeli"

		"scope": "source.lua"
	},
	"releaseEntityFromWinch": {
		"body": "releaseEntityFromWinch(${1:Vehicle heli})",
		"description": "GTA_SA\nreleaseEntityFromWinch(Vehicle heli)\n",
		"prefix": "releaseEntityFromWinch"

		"scope": "source.lua"
	},
	"getTrainCarriage": {
		"body": "getTrainCarriage(${1:Vehicle train},${2:int handle})",
		"description": "GTA_SA\nint carriage = getTrainCarriage(Vehicle train, int handle)\n",
		"prefix": "getTrainCarriage"

		"scope": "source.lua"
	},
	"grabEntityOnWinch": {
		"body": "grabEntityOnWinch(${1:Vehicle heli})",
		"description": "GTA_SA\nVehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnWinch(Vehicle heli)\n",
		"prefix": "grabEntityOnWinch"

		"scope": "source.lua"
	},
	"getNameOfItem": {
		"body": "getNameOfItem(${1:int item})",
		"description": "GTA_SA\nGxtString name = getNameOfItem(int item)\n",
		"prefix": "getNameOfItem"

		"scope": "source.lua"
	},
	"taskClimb": {
		"body": "taskClimb(${1:Ped ped},${2:bool climb})",
		"description": "GTA_SA\ntaskClimb(Ped ped, bool climb)\n",
		"prefix": "taskClimb"

		"scope": "source.lua"
	},
	"buyItem": {
		"body": "buyItem(${1:int item})",
		"description": "GTA_SA\nbuyItem(int item)\n",
		"prefix": "buyItem"

		"scope": "source.lua"
	},
	"clearCharTasksImmediately": {
		"body": "clearCharTasksImmediately(${1:Ped ped})",
		"description": "GTA_SA\nclearCharTasksImmediately(Ped ped)\n",
		"prefix": "clearCharTasksImmediately"

		"scope": "source.lua"
	},
	"storeClothesState": {
		"body": "storeClothesState()",
		"description": "GTA_SA\nstoreClothesState()\n",
		"prefix": "storeClothesState"

		"scope": "source.lua"
	},
	"restoreClothesState": {
		"body": "restoreClothesState()",
		"description": "GTA_SA\nrestoreClothesState()\n",
		"prefix": "restoreClothesState"

		"scope": "source.lua"
	},
	"getRopeHeightForObject": {
		"body": "getRopeHeightForObject(${1:int magnet})",
		"description": "GTA_SA\nfloat length = getRopeHeightForObject(int magnet)\n",
		"prefix": "getRopeHeightForObject"

		"scope": "source.lua"
	},
	"setRopeHeightForObject": {
		"body": "setRopeHeightForObject(${1:int magnet},${2:float length})",
		"description": "GTA_SA\nsetRopeHeightForObject(int magnet, float length)\n",
		"prefix": "setRopeHeightForObject"

		"scope": "source.lua"
	},
	"grabEntityOnRopeForObject": {
		"body": "grabEntityOnRopeForObject(${1:int magnet})",
		"description": "GTA_SA\nVehicle carHandle, Ped pedHandle, Object objectHandle = grabEntityOnRopeForObject(int magnet)\n",
		"prefix": "grabEntityOnRopeForObject"

		"scope": "source.lua"
	},
	"releaseEntityFromRopeForObject": {
		"body": "releaseEntityFromRopeForObject(${1:int magnet})",
		"description": "GTA_SA\nreleaseEntityFromRopeForObject(int magnet)\n",
		"prefix": "releaseEntityFromRopeForObject"

		"scope": "source.lua"
	},
	"playerEnteredDockCrane": {
		"body": "playerEnteredDockCrane()",
		"description": "GTA_SA\nplayerEnteredDockCrane()\n",
		"prefix": "playerEnteredDockCrane"

		"scope": "source.lua"
	},
	"playerEnteredBuildingsiteCrane": {
		"body": "playerEnteredBuildingsiteCrane()",
		"description": "GTA_SA\nplayerEnteredBuildingsiteCrane()\n",
		"prefix": "playerEnteredBuildingsiteCrane"

		"scope": "source.lua"
	},
	"playerLeftCrane": {
		"body": "playerLeftCrane()",
		"description": "GTA_SA\nplayerLeftCrane()\n",
		"prefix": "playerLeftCrane"

		"scope": "source.lua"
	},
	"performSequenceTaskFromProgress": {
		"body": "performSequenceTaskFromProgress(${1:Ped ped},${2:int sequence},${3:int unkProgress1},${4:int unkProgress2})",
		"description": "GTA_SA\nperformSequenceTaskFromProgress(Ped ped, int sequence, int unkProgress1, int unkProgress2)\n",
		"prefix": "performSequenceTaskFromProgress"

		"scope": "source.lua"
	},
	"setNextDesiredMoveState": {
		"body": "setNextDesiredMoveState(${1:int speed})",
		"description": "GTA_SA\nsetNextDesiredMoveState(int speed)\n",
		"prefix": "setNextDesiredMoveState"

		"scope": "source.lua"
	},
	"taskGotoCharAiming": {
		"body": "taskGotoCharAiming(${1:Ped ped},${2:int followActor},${3:float minradius},${4:float maxradius})",
		"description": "GTA_SA\ntaskGotoCharAiming(Ped ped, int followActor, float minradius, float maxradius)\n",
		"prefix": "taskGotoCharAiming"

		"scope": "source.lua"
	},
	"getSequenceProgressRecursive": {
		"body": "getSequenceProgressRecursive(${1:Ped ped})",
		"description": "GTA_SA\nint unkProgress1, int unkProgress2 = getSequenceProgressRecursive(Ped ped)\n",
		"prefix": "getSequenceProgressRecursive"

		"scope": "source.lua"
	},
	"taskKillCharOnFootTimed": {
		"body": "taskKillCharOnFootTimed(${1:Ped ped},${2:int attackActor},${3:int time})",
		"description": "GTA_SA\ntaskKillCharOnFootTimed(Ped ped, int attackActor, int time)\n",
		"prefix": "taskKillCharOnFootTimed"

		"scope": "source.lua"
	},
	"getNearestTagPosition": {
		"body": "getNearestTagPosition(${1:float X},${2:float Y},${3:float Z})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getNearestTagPosition(float X, float Y, float Z)\n",
		"prefix": "getNearestTagPosition"

		"scope": "source.lua"
	},
	"taskJetpack": {
		"body": "taskJetpack(${1:Ped ped})",
		"description": "GTA_SA\ntaskJetpack(Ped ped)\n",
		"prefix": "taskJetpack"

		"scope": "source.lua"
	},
	"setArea51SamSite": {
		"body": "setArea51SamSite(${1:bool enable})",
		"description": "GTA_SA\nsetArea51SamSite(bool enable)\n",
		"prefix": "setArea51SamSite"

		"scope": "source.lua"
	},
	"isCharInAnySearchlight": {
		"body": "isCharInAnySearchlight(${1:Ped ped})",
		"description": "GTA_SA\nbool result, Searchlight searchlight = isCharInAnySearchlight(Ped ped)\n",
		"prefix": "isCharInAnySearchlight"

		"scope": "source.lua"
	},
	"isTrailerAttachedToCab": {
		"body": "isTrailerAttachedToCab(${1:Vehicle car},${2:int trailer})",
		"description": "GTA_SA\nbool result = isTrailerAttachedToCab(Vehicle car, int trailer)\n",
		"prefix": "isTrailerAttachedToCab"

		"scope": "source.lua"
	},
	"detachTrailerFromCab": {
		"body": "detachTrailerFromCab(${1:int trailer},${2:int cab})",
		"description": "GTA_SA\ndetachTrailerFromCab(int trailer, int cab)\n",
		"prefix": "detachTrailerFromCab"

		"scope": "source.lua"
	},
	"getPlayerGroup": {
		"body": "getPlayerGroup(${1:Player player})",
		"description": "GTA_SA\nint group = getPlayerGroup(Player player)\n",
		"prefix": "getPlayerGroup"

		"scope": "source.lua"
	},
	"getLoadedShop": {
		"body": "getLoadedShop()",
		"description": "GTA_SA\nGxtString shop = getLoadedShop()\n",
		"prefix": "getLoadedShop"

		"scope": "source.lua"
	},
	"getBeatProximity": {
		"body": "getBeatProximity(${1:int track})",
		"description": "GTA_SA\nint int2, int int3, int int4 = getBeatProximity(int track)\n",
		"prefix": "getBeatProximity"

		"scope": "source.lua"
	},
	"setGroupDefaultTaskAllocator": {
		"body": "setGroupDefaultTaskAllocator(${1:int group},${2:int command})",
		"description": "GTA_SA\nsetGroupDefaultTaskAllocator(int group, int command)\n",
		"prefix": "setGroupDefaultTaskAllocator"

		"scope": "source.lua"
	},
	"setPlayerGroupRecruitment": {
		"body": "setPlayerGroupRecruitment(${1:Player player},${2:bool enabled})",
		"description": "GTA_SA\nsetPlayerGroupRecruitment(Player player, bool enabled)\n",
		"prefix": "setPlayerGroupRecruitment"

		"scope": "source.lua"
	},
	"activateHeliSpeedCheat": {
		"body": "activateHeliSpeedCheat(${1:Vehicle heli},${2:int power})",
		"description": "GTA_SA\nactivateHeliSpeedCheat(Vehicle heli, int power)\n",
		"prefix": "activateHeliSpeedCheat"

		"scope": "source.lua"
	},
	"taskSetCharDecisionMaker": {
		"body": "taskSetCharDecisionMaker(${1:Ped ped},${2:int maker})",
		"description": "GTA_SA\ntaskSetCharDecisionMaker(Ped ped, int maker)\n",
		"prefix": "taskSetCharDecisionMaker"

		"scope": "source.lua"
	},
	"deleteMissionTrain": {
		"body": "deleteMissionTrain(${1:Vehicle train})",
		"description": "GTA_SA\ndeleteMissionTrain(Vehicle train)\n",
		"prefix": "deleteMissionTrain"

		"scope": "source.lua"
	},
	"markMissionTrainAsNoLongerNeeded": {
		"body": "markMissionTrainAsNoLongerNeeded(${1:Vehicle train})",
		"description": "GTA_SA\nmarkMissionTrainAsNoLongerNeeded(Vehicle train)\n",
		"prefix": "markMissionTrainAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"setBlipAlwaysDisplayOnZoomedRadar": {
		"body": "setBlipAlwaysDisplayOnZoomedRadar(${1:Marker marker},${2:bool displayAlways})",
		"description": "GTA_SA\nsetBlipAlwaysDisplayOnZoomedRadar(Marker marker, bool displayAlways)\n",
		"prefix": "setBlipAlwaysDisplayOnZoomedRadar"

		"scope": "source.lua"
	},
	"requestCarRecording": {
		"body": "requestCarRecording(${1:int path})",
		"description": "GTA_SA\nrequestCarRecording(int path)\n",
		"prefix": "requestCarRecording"

		"scope": "source.lua"
	},
	"hasCarRecordingBeenLoaded": {
		"body": "hasCarRecordingBeenLoaded(${1:int path})",
		"description": "GTA_SA\nbool result = hasCarRecordingBeenLoaded(int path)\n",
		"prefix": "hasCarRecordingBeenLoaded"

		"scope": "source.lua"
	},
	"getObjectQuaternion": {
		"body": "getObjectQuaternion(${1:Object object})",
		"description": "GTA_SA\nfloat x, float y, float z, float w = getObjectQuaternion(Object object)\n",
		"prefix": "getObjectQuaternion"

		"scope": "source.lua"
	},
	"setObjectQuaternion": {
		"body": "setObjectQuaternion(${1:Object object},${2:float x},${3:float y},${4:float z},${5:float w})",
		"description": "GTA_SA\nsetObjectQuaternion(Object object, float x, float y, float z, float w)\n",
		"prefix": "setObjectQuaternion"

		"scope": "source.lua"
	},
	"getVehicleQuaternion": {
		"body": "getVehicleQuaternion(${1:Vehicle car})",
		"description": "GTA_SA\nfloat x, float y, float z, float w = getVehicleQuaternion(Vehicle car)\n",
		"prefix": "getVehicleQuaternion"

		"scope": "source.lua"
	},
	"setVehicleQuaternion": {
		"body": "setVehicleQuaternion(${1:Vehicle car},${2:float x},${3:float y},${4:float z},${5:float w})",
		"description": "GTA_SA\nsetVehicleQuaternion(Vehicle car, float x, float y, float z, float w)\n",
		"prefix": "setVehicleQuaternion"

		"scope": "source.lua"
	},
	"setMissionTrainCoordinates": {
		"body": "setMissionTrainCoordinates(${1:Vehicle train},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nsetMissionTrainCoordinates(Vehicle train, float X, float Y, float Z)\n",
		"prefix": "setMissionTrainCoordinates"

		"scope": "source.lua"
	},
	"taskComplexPickupObject": {
		"body": "taskComplexPickupObject(${1:Ped ped},${2:Object object})",
		"description": "GTA_SA\ntaskComplexPickupObject(Ped ped, Object object)\n",
		"prefix": "taskComplexPickupObject"

		"scope": "source.lua"
	},
	"listenToPlayerGroupCommands": {
		"body": "listenToPlayerGroupCommands(${1:Ped ped},${2:bool listen})",
		"description": "GTA_SA\nlistenToPlayerGroupCommands(Ped ped, bool listen)\n",
		"prefix": "listenToPlayerGroupCommands"

		"scope": "source.lua"
	},
	"setPlayerEnterCarButton": {
		"body": "setPlayerEnterCarButton(${1:Player player},${2:bool can})",
		"description": "GTA_SA\nsetPlayerEnterCarButton(Player player, bool can)\n",
		"prefix": "setPlayerEnterCarButton"

		"scope": "source.lua"
	},
	"taskCharSlideToCoord": {
		"body": "taskCharSlideToCoord(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:float angle},${6:float withinRadius})",
		"description": "GTA_SA\ntaskCharSlideToCoord(Ped ped, float toX, float toY, float toZ, float angle, float withinRadius)\n",
		"prefix": "taskCharSlideToCoord"

		"scope": "source.lua"
	},
	"getCurrentDayOfWeek": {
		"body": "getCurrentDayOfWeek()",
		"description": "GTA_SA\nint weekday = getCurrentDayOfWeek()\n",
		"prefix": "getCurrentDayOfWeek"

		"scope": "source.lua"
	},
	"registerScriptBrainForCodeUse": {
		"body": "registerScriptBrainForCodeUse(${1:int id},${2:GxtString gxtString})",
		"description": "GTA_SA\nregisterScriptBrainForCodeUse(int id, GxtString gxtString)\n",
		"prefix": "registerScriptBrainForCodeUse"

		"scope": "source.lua"
	},
	"applyForceToCar": {
		"body": "applyForceToCar(${1:Vehicle car},${2:float vecX},${3:float vecY},${4:float vecZ},${5:float rotationX},${6:float rotationY},${7:float rotationZ})",
		"description": "GTA_SA\napplyForceToCar(Vehicle car, float vecX, float vecY, float vecZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "applyForceToCar"

		"scope": "source.lua"
	},
	"addToCarRotationVelocity": {
		"body": "addToCarRotationVelocity(${1:Vehicle car},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\naddToCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)\n",
		"prefix": "addToCarRotationVelocity"

		"scope": "source.lua"
	},
	"setCarRotationVelocity": {
		"body": "setCarRotationVelocity(${1:Vehicle car},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\nsetCarRotationVelocity(Vehicle car, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCarRotationVelocity"

		"scope": "source.lua"
	},
	"setCharShootRate": {
		"body": "setCharShootRate(${1:Ped ped},${2:int rate})",
		"description": "GTA_SA\nsetCharShootRate(Ped ped, int rate)\n",
		"prefix": "setCharShootRate"

		"scope": "source.lua"
	},
	"isModelInCdimage": {
		"body": "isModelInCdimage(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isModelInCdimage(Model modelId)\n",
		"prefix": "isModelInCdimage"

		"scope": "source.lua"
	},
	"removeOilPuddlesInArea": {
		"body": "removeOilPuddlesInArea(${1:float x1},${2:float y1},${3:float x2},${4:float y2})",
		"description": "GTA_SA\nremoveOilPuddlesInArea(float x1, float y1, float x2, float y2)\n",
		"prefix": "removeOilPuddlesInArea"

		"scope": "source.lua"
	},
	"setBlipAsFriendly": {
		"body": "setBlipAsFriendly(${1:Marker marker},${2:bool type})",
		"description": "GTA_SA\nsetBlipAsFriendly(Marker marker, bool type)\n",
		"prefix": "setBlipAsFriendly"

		"scope": "source.lua"
	},
	"taskSwimToCoord": {
		"body": "taskSwimToCoord(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ})",
		"description": "GTA_SA\ntaskSwimToCoord(Ped ped, float toX, float toY, float toZ)\n",
		"prefix": "taskSwimToCoord"

		"scope": "source.lua"
	},
	"getModelDimensions": {
		"body": "getModelDimensions(${1:Model modelId})",
		"description": "GTA_SA\nfloat x1, float y1, float z1, float x2, float y2, float z2 = getModelDimensions(Model modelId)\n",
		"prefix": "getModelDimensions"

		"scope": "source.lua"
	},
	"copyCharDecisionMaker": {
		"body": "copyCharDecisionMaker(${1:Ped ped})",
		"description": "GTA_SA\nint maker = copyCharDecisionMaker(Ped ped)\n",
		"prefix": "copyCharDecisionMaker"

		"scope": "source.lua"
	},
	"copyGroupDecisionMaker": {
		"body": "copyGroupDecisionMaker(${1:int group})",
		"description": "GTA_SA\nint maker = copyGroupDecisionMaker(int group)\n",
		"prefix": "copyGroupDecisionMaker"

		"scope": "source.lua"
	},
	"taskDrivePointRouteAdvanced": {
		"body": "taskDrivePointRouteAdvanced(${1:Ped ped},${2:Vehicle car},${3:float speed},${4:int flag1},${5:int flag2},${6:int flag3})",
		"description": "GTA_SA\ntaskDrivePointRouteAdvanced(Ped ped, Vehicle car, float speed, int flag1, int flag2, int flag3)\n",
		"prefix": "taskDrivePointRouteAdvanced"

		"scope": "source.lua"
	},
	"isRelationshipSet": {
		"body": "isRelationshipSet(${1:int acquaintance},${2:int ofActors},${3:int toActors})",
		"description": "GTA_SA\nbool result = isRelationshipSet(int acquaintance, int ofActors, int toActors)\n",
		"prefix": "isRelationshipSet"

		"scope": "source.lua"
	},
	"setCarAlwaysCreateSkids": {
		"body": "setCarAlwaysCreateSkids(${1:Vehicle car},${2:bool enable})",
		"description": "GTA_SA\nsetCarAlwaysCreateSkids(Vehicle car, bool enable)\n",
		"prefix": "setCarAlwaysCreateSkids"

		"scope": "source.lua"
	},
	"getCityFromCoords": {
		"body": "getCityFromCoords(${1:float X},${2:float Y},${3:float Z})",
		"description": "GTA_SA\nint city = getCityFromCoords(float X, float Y, float Z)\n",
		"prefix": "getCityFromCoords"

		"scope": "source.lua"
	},
	"hasObjectOfTypeBeenSmashed": {
		"body": "hasObjectOfTypeBeenSmashed(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:Model modelId})",
		"description": "GTA_SA\nbool result = hasObjectOfTypeBeenSmashed(float X, float Y, float Z, float radius, Model modelId)\n",
		"prefix": "hasObjectOfTypeBeenSmashed"

		"scope": "source.lua"
	},
	"isPlayerPerformingWheelie": {
		"body": "isPlayerPerformingWheelie(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerPerformingWheelie(Player player)\n",
		"prefix": "isPlayerPerformingWheelie"

		"scope": "source.lua"
	},
	"isPlayerPerformingStoppie": {
		"body": "isPlayerPerformingStoppie(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerPerformingStoppie(Player player)\n",
		"prefix": "isPlayerPerformingStoppie"

		"scope": "source.lua"
	},
	"setCheckpointCoords": {
		"body": "setCheckpointCoords(${1:Checkpoint checkpoint},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nsetCheckpointCoords(Checkpoint checkpoint, float X, float Y, float Z)\n",
		"prefix": "setCheckpointCoords"

		"scope": "source.lua"
	},
	"controlCarHydraulics": {
		"body": "controlCarHydraulics(${1:Vehicle car},${2:float f1},${3:float f2},${4:float f3},${5:float f4})",
		"description": "GTA_SA\ncontrolCarHydraulics(Vehicle car, float f1, float f2, float f3, float f4)\n",
		"prefix": "controlCarHydraulics"

		"scope": "source.lua"
	},
	"getGroupSize": {
		"body": "getGroupSize(${1:int group})",
		"description": "GTA_SA\nint numberOfLeaders, int numberOfMembers = getGroupSize(int group)\n",
		"prefix": "getGroupSize"

		"scope": "source.lua"
	},
	"setObjectCollisionDamageEffect": {
		"body": "setObjectCollisionDamageEffect(${1:Object object},${2:bool destructible})",
		"description": "GTA_SA\nsetObjectCollisionDamageEffect(Object object, bool destructible)\n",
		"prefix": "setObjectCollisionDamageEffect"

		"scope": "source.lua"
	},
	"setCarFollowCar": {
		"body": "setCarFollowCar(${1:Vehicle car},${2:int followCar},${3:float radius})",
		"description": "GTA_SA\nsetCarFollowCar(Vehicle car, int followCar, float radius)\n",
		"prefix": "setCarFollowCar"

		"scope": "source.lua"
	},
	"playerEnteredQuarryCrane": {
		"body": "playerEnteredQuarryCrane()",
		"description": "GTA_SA\nplayerEnteredQuarryCrane()\n",
		"prefix": "playerEnteredQuarryCrane"

		"scope": "source.lua"
	},
	"playerEnteredLasVegasCrane": {
		"body": "playerEnteredLasVegasCrane()",
		"description": "GTA_SA\nplayerEnteredLasVegasCrane()\n",
		"prefix": "playerEnteredLasVegasCrane"

		"scope": "source.lua"
	},
	"switchEntryExit": {
		"body": "switchEntryExit(${1:GxtString interior},${2:bool access})",
		"description": "GTA_SA\nswitchEntryExit(GxtString interior, bool access)\n",
		"prefix": "switchEntryExit"

		"scope": "source.lua"
	},
	"displayTextWithFloat": {
		"body": "displayTextWithFloat(${1:float X},${2:float Y},${3:GxtString GXT},${4:float value},${5:int flag})",
		"description": "GTA_SA\ndisplayTextWithFloat(float X, float Y, GxtString GXT, float value, int flag)\n",
		"prefix": "displayTextWithFloat"

		"scope": "source.lua"
	},
	"doesGroupExist": {
		"body": "doesGroupExist(${1:int group})",
		"description": "GTA_SA\nbool result = doesGroupExist(int group)\n",
		"prefix": "doesGroupExist"

		"scope": "source.lua"
	},
	"giveMeleeAttackToChar": {
		"body": "giveMeleeAttackToChar(${1:Ped ped},${2:int fightingStyle},${3:int moves})",
		"description": "GTA_SA\ngiveMeleeAttackToChar(Ped ped, int fightingStyle, int moves)\n",
		"prefix": "giveMeleeAttackToChar"

		"scope": "source.lua"
	},
	"setCarHydraulics": {
		"body": "setCarHydraulics(${1:Vehicle car},${2:bool hydraulics})",
		"description": "GTA_SA\nsetCarHydraulics(Vehicle car, bool hydraulics)\n",
		"prefix": "setCarHydraulics"

		"scope": "source.lua"
	},
	"is2playerGameGoingOn": {
		"body": "is2playerGameGoingOn()",
		"description": "GTA_SA\nbool result = is2playerGameGoingOn()\n",
		"prefix": "is2playerGameGoingOn"

		"scope": "source.lua"
	},
	"getCameraFov": {
		"body": "getCameraFov()",
		"description": "GTA_SA\nfloat fov = getCameraFov()\n",
		"prefix": "getCameraFov"

		"scope": "source.lua"
	},
	"doesCarHaveHydraulics": {
		"body": "doesCarHaveHydraulics(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = doesCarHaveHydraulics(Vehicle car)\n",
		"prefix": "doesCarHaveHydraulics"

		"scope": "source.lua"
	},
	"taskCharSlideToCoordAndPlayAnim": {
		"body": "taskCharSlideToCoordAndPlayAnim(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:float angle},${6:float radius},${7:string animation},${8:int ifp1},${9:float ifp2},${10:bool LA},${11:bool LX},${12:bool LY},${13:bool LF},${14:int LT})",
		"description": "GTA_SA\ntaskCharSlideToCoordAndPlayAnim(Ped ped, float toX, float toY, float toZ, float angle, float radius, string animation, int ifp1, float ifp2, bool LA, bool LX, bool LY, bool LF, int LT)\n",
		"prefix": "taskCharSlideToCoordAndPlayAnim"

		"scope": "source.lua"
	},
	"getTotalNumberOfPedsKilledByPlayer": {
		"body": "getTotalNumberOfPedsKilledByPlayer(${1:Player player})",
		"description": "GTA_SA\nint number = getTotalNumberOfPedsKilledByPlayer(Player player)\n",
		"prefix": "getTotalNumberOfPedsKilledByPlayer"

		"scope": "source.lua"
	},
	"getLevelDesignCoordsForObject": {
		"body": "getLevelDesignCoordsForObject(${1:Object object},${2:int spoot})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getLevelDesignCoordsForObject(Object object, int spoot)\n",
		"prefix": "getLevelDesignCoordsForObject"

		"scope": "source.lua"
	},
	"getCharHighestPriorityEvent": {
		"body": "getCharHighestPriorityEvent(${1:Ped ped})",
		"description": "GTA_SA\nint event = getCharHighestPriorityEvent(Ped ped)\n",
		"prefix": "getCharHighestPriorityEvent"

		"scope": "source.lua"
	},
	"getParkingNodeInArea": {
		"body": "getParkingNodeInArea(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getParkingNodeInArea(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "getParkingNodeInArea"

		"scope": "source.lua"
	},
	"getCarCharIsUsing": {
		"body": "getCarCharIsUsing(${1:Ped ped})",
		"description": "GTA_SA\nVehicle car = getCarCharIsUsing(Ped ped)\n",
		"prefix": "getCarCharIsUsing"

		"scope": "source.lua"
	},
	"taskPlayAnimNonInterruptable": {
		"body": "taskPlayAnimNonInterruptable(${1:Ped ped},${2:string animation},${3:string IFP},${4:float framedelta},${5:bool loopA},${6:bool lockX},${7:bool lockY},${8:bool lockF},${9:int time})",
		"description": "GTA_SA\ntaskPlayAnimNonInterruptable(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnimNonInterruptable"

		"scope": "source.lua"
	},
	"addStuntJump": {
		"body": "addStuntJump(${1:float startX},${2:float startY},${3:float startZ},${4:float radiusX},${5:float radiusY},${6:float radiusZ},${7:float goalX},${8:float goalY},${9:float goalZ},${10:float radius2X},${11:float radius2Y},${12:float radius2Z},${13:float cameraX},${14:float cameraY},${15:float cameraZ},${16:int reward})",
		"description": "GTA_SA\naddStuntJump(float startX, float startY, float startZ, float radiusX, float radiusY, float radiusZ, float goalX, float goalY, float goalZ, float radius2X, float radius2Y, float radius2Z, float cameraX, float cameraY, float cameraZ, int reward)\n",
		"prefix": "addStuntJump"

		"scope": "source.lua"
	},
	"setObjectCoordinatesAndVelocity": {
		"body": "setObjectCoordinatesAndVelocity(${1:Object object},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nsetObjectCoordinatesAndVelocity(Object object, float X, float Y, float Z)\n",
		"prefix": "setObjectCoordinatesAndVelocity"

		"scope": "source.lua"
	},
	"setCharKindaStayInSamePlace": {
		"body": "setCharKindaStayInSamePlace(${1:Ped ped},${2:bool stay})",
		"description": "GTA_SA\nsetCharKindaStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "setCharKindaStayInSamePlace"

		"scope": "source.lua"
	},
	"taskFollowPatrolRoute": {
		"body": "taskFollowPatrolRoute(${1:Ped ped},${2:int walkMode},${3:int routeMode})",
		"description": "GTA_SA\ntaskFollowPatrolRoute(Ped ped, int walkMode, int routeMode)\n",
		"prefix": "taskFollowPatrolRoute"

		"scope": "source.lua"
	},
	"isCharInAir": {
		"body": "isCharInAir(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAir(Ped ped)\n",
		"prefix": "isCharInAir"

		"scope": "source.lua"
	},
	"getCharHeightAboveGround": {
		"body": "getCharHeightAboveGround(${1:Ped ped})",
		"description": "GTA_SA\nfloat height = getCharHeightAboveGround(Ped ped)\n",
		"prefix": "getCharHeightAboveGround"

		"scope": "source.lua"
	},
	"setCharWeaponSkill": {
		"body": "setCharWeaponSkill(${1:Ped ped},${2:int skill})",
		"description": "GTA_SA\nsetCharWeaponSkill(Ped ped, int skill)\n",
		"prefix": "setCharWeaponSkill"

		"scope": "source.lua"
	},
	"setTextEdge": {
		"body": "setTextEdge(${1:int size},${2:int r},${3:int g},${4:int b},${5:int a})",
		"description": "GTA_SA\nsetTextEdge(int size, int r, int g, int b, int a)\n",
		"prefix": "setTextEdge"

		"scope": "source.lua"
	},
	"setCarEngineBroken": {
		"body": "setCarEngineBroken(${1:Vehicle car},${2:bool broken})",
		"description": "GTA_SA\nsetCarEngineBroken(Vehicle car, bool broken)\n",
		"prefix": "setCarEngineBroken"

		"scope": "source.lua"
	},
	"isThisModelABoat": {
		"body": "isThisModelABoat(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isThisModelABoat(Model modelId)\n",
		"prefix": "isThisModelABoat"

		"scope": "source.lua"
	},
	"isThisModelAPlane": {
		"body": "isThisModelAPlane(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isThisModelAPlane(Model modelId)\n",
		"prefix": "isThisModelAPlane"

		"scope": "source.lua"
	},
	"isThisModelAHeli": {
		"body": "isThisModelAHeli(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isThisModelAHeli(Model modelId)\n",
		"prefix": "isThisModelAHeli"

		"scope": "source.lua"
	},
	"setFirstPersonInCarCameraMode": {
		"body": "setFirstPersonInCarCameraMode(${1:bool enable})",
		"description": "GTA_SA\nsetFirstPersonInCarCameraMode(bool enable)\n",
		"prefix": "setFirstPersonInCarCameraMode"

		"scope": "source.lua"
	},
	"taskGreetPartner": {
		"body": "taskGreetPartner(${1:Ped ped},${2:Ped ped2},${3:float unk1},${4:int unk2})",
		"description": "GTA_SA\ntaskGreetPartner(Ped ped, Ped ped2, float unk1, int unk2)\n",
		"prefix": "taskGreetPartner"

		"scope": "source.lua"
	},
	"setHeliBladesFullSpeed": {
		"body": "setHeliBladesFullSpeed(${1:Vehicle heli})",
		"description": "GTA_SA\nsetHeliBladesFullSpeed(Vehicle heli)\n",
		"prefix": "setHeliBladesFullSpeed"

		"scope": "source.lua"
	},
	"displayHud": {
		"body": "displayHud(${1:bool enable})",
		"description": "GTA_SA\ndisplayHud(bool enable)\n",
		"prefix": "displayHud"

		"scope": "source.lua"
	},
	"connectLods": {
		"body": "connectLods(${1:Object object},${2:int lod})",
		"description": "GTA_SA\nconnectLods(Object object, int lod)\n",
		"prefix": "connectLods"

		"scope": "source.lua"
	},
	"setMaxFireGenerations": {
		"body": "setMaxFireGenerations(${1:int max})",
		"description": "GTA_SA\nsetMaxFireGenerations(int max)\n",
		"prefix": "setMaxFireGenerations"

		"scope": "source.lua"
	},
	"taskDieNamedAnim": {
		"body": "taskDieNamedAnim(${1:Ped ped},${2:string animation},${3:string ifp1},${4:float ifp2},${5:int time})",
		"description": "GTA_SA\ntaskDieNamedAnim(Ped ped, string animation, string ifp1, float ifp2, int time)\n",
		"prefix": "taskDieNamedAnim"

		"scope": "source.lua"
	},
	"setPlayerDuckButton": {
		"body": "setPlayerDuckButton(${1:Player player},${2:bool able})",
		"description": "GTA_SA\nsetPlayerDuckButton(Player player, bool able)\n",
		"prefix": "setPlayerDuckButton"

		"scope": "source.lua"
	},
	"setPoolTableCoords": {
		"body": "setPoolTableCoords(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2})",
		"description": "GTA_SA\nsetPoolTableCoords(float x1, float y1, float z1, float x2, float y2, float z2)\n",
		"prefix": "setPoolTableCoords"

		"scope": "source.lua"
	},
	"hasObjectBeenPhotographed": {
		"body": "hasObjectBeenPhotographed(${1:Object object})",
		"description": "GTA_SA\nbool result = hasObjectBeenPhotographed(Object object)\n",
		"prefix": "hasObjectBeenPhotographed"

		"scope": "source.lua"
	},
	"doCameraBump": {
		"body": "doCameraBump(${1:float rotationZ},${2:float rotationY})",
		"description": "GTA_SA\ndoCameraBump(float rotationZ, float rotationY)\n",
		"prefix": "doCameraBump"

		"scope": "source.lua"
	},
	"getCurrentDate": {
		"body": "getCurrentDate()",
		"description": "GTA_SA\nint day, int month = getCurrentDate()\n",
		"prefix": "getCurrentDate"

		"scope": "source.lua"
	},
	"setObjectAnimSpeed": {
		"body": "setObjectAnimSpeed(${1:Object object},${2:string animation},${3:float speed})",
		"description": "GTA_SA\nsetObjectAnimSpeed(Object object, string animation, float speed)\n",
		"prefix": "setObjectAnimSpeed"

		"scope": "source.lua"
	},
	"isObjectPlayingAnim": {
		"body": "isObjectPlayingAnim(${1:Object object},${2:string anim})",
		"description": "GTA_SA\nbool result = isObjectPlayingAnim(Object object, string anim)\n",
		"prefix": "isObjectPlayingAnim"

		"scope": "source.lua"
	},
	"getObjectAnimCurrentTime": {
		"body": "getObjectAnimCurrentTime(${1:Object object},${2:string animation})",
		"description": "GTA_SA\nfloat progress = getObjectAnimCurrentTime(Object object, string animation)\n",
		"prefix": "getObjectAnimCurrentTime"

		"scope": "source.lua"
	},
	"setObjectAnimCurrentTime": {
		"body": "setObjectAnimCurrentTime(${1:Object object},${2:string animation},${3:float progress})",
		"description": "GTA_SA\nsetObjectAnimCurrentTime(Object object, string animation, float progress)\n",
		"prefix": "setObjectAnimCurrentTime"

		"scope": "source.lua"
	},
	"setCharVelocity": {
		"body": "setCharVelocity(${1:Ped ped},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\nsetCharVelocity(Ped ped, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCharVelocity"

		"scope": "source.lua"
	},
	"getCharVelocity": {
		"body": "getCharVelocity(${1:Ped ped})",
		"description": "GTA_SA\nfloat vecX, float vecY, float vecZ = getCharVelocity(Ped ped)\n",
		"prefix": "getCharVelocity"

		"scope": "source.lua"
	},
	"setCharRotation": {
		"body": "setCharRotation(${1:Ped ped},${2:float vecX},${3:float vecY},${4:float vecZ})",
		"description": "GTA_SA\nsetCharRotation(Ped ped, float vecX, float vecY, float vecZ)\n",
		"prefix": "setCharRotation"

		"scope": "source.lua"
	},
	"getCarUprightValue": {
		"body": "getCarUprightValue(${1:Vehicle car})",
		"description": "GTA_SA\nfloat value = getCarUprightValue(Vehicle car)\n",
		"prefix": "getCarUprightValue"

		"scope": "source.lua"
	},
	"setVehicleInterior": {
		"body": "setVehicleInterior(${1:Vehicle car},${2:int interior})",
		"description": "GTA_SA\nsetVehicleInterior(Vehicle car, int interior)\n",
		"prefix": "setVehicleInterior"

		"scope": "source.lua"
	},
	"selectWeaponsForVehicle": {
		"body": "selectWeaponsForVehicle(${1:Vehicle car},${2:bool gun})",
		"description": "GTA_SA\nselectWeaponsForVehicle(Vehicle car, bool gun)\n",
		"prefix": "selectWeaponsForVehicle"

		"scope": "source.lua"
	},
	"getCityPlayerIsIn": {
		"body": "getCityPlayerIsIn(${1:Player player})",
		"description": "GTA_SA\nint city = getCityPlayerIsIn(Player player)\n",
		"prefix": "getCityPlayerIsIn"

		"scope": "source.lua"
	},
	"getNameOfZone": {
		"body": "getNameOfZone(${1:float X},${2:float Y},${3:float Z})",
		"description": "GTA_SA\nGxtString name = getNameOfZone(float X, float Y, float Z)\n",
		"prefix": "getNameOfZone"

		"scope": "source.lua"
	},
	"activateInteriorPeds": {
		"body": "activateInteriorPeds(${1:bool activate})",
		"description": "GTA_SA\nactivateInteriorPeds(bool activate)\n",
		"prefix": "activateInteriorPeds"

		"scope": "source.lua"
	},
	"setVehicleCanBeTargetted": {
		"body": "setVehicleCanBeTargetted(${1:Vehicle car},${2:bool unk})",
		"description": "GTA_SA\nsetVehicleCanBeTargetted(Vehicle car, bool unk)\n",
		"prefix": "setVehicleCanBeTargetted"

		"scope": "source.lua"
	},
	"taskFollowFootsteps": {
		"body": "taskFollowFootsteps(${1:Ped ped},${2:int followActor})",
		"description": "GTA_SA\ntaskFollowFootsteps(Ped ped, int followActor)\n",
		"prefix": "taskFollowFootsteps"

		"scope": "source.lua"
	},
	"damageChar": {
		"body": "damageChar(${1:Ped ped},${2:int health},${3:bool affectArmour})",
		"description": "GTA_SA\ndamageChar(Ped ped, int health, bool affectArmour)\n",
		"prefix": "damageChar"

		"scope": "source.lua"
	},
	"setCarCanBeVisiblyDamaged": {
		"body": "setCarCanBeVisiblyDamaged(${1:Vehicle car},${2:bool can})",
		"description": "GTA_SA\nsetCarCanBeVisiblyDamaged(Vehicle car, bool can)\n",
		"prefix": "setCarCanBeVisiblyDamaged"

		"scope": "source.lua"
	},
	"setHeliReachedTargetDistance": {
		"body": "setHeliReachedTargetDistance(${1:Vehicle heli},${2:int dist})",
		"description": "GTA_SA\nsetHeliReachedTargetDistance(Vehicle heli, int dist)\n",
		"prefix": "setHeliReachedTargetDistance"

		"scope": "source.lua"
	},
	"getSoundLevelAtCoords": {
		"body": "getSoundLevelAtCoords(${1:Ped ped},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nfloat level = getSoundLevelAtCoords(Ped ped, float X, float Y, float Z)\n",
		"prefix": "getSoundLevelAtCoords"

		"scope": "source.lua"
	},
	"setCharAllowedToDuck": {
		"body": "setCharAllowedToDuck(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nsetCharAllowedToDuck(Ped ped, bool enable)\n",
		"prefix": "setCharAllowedToDuck"

		"scope": "source.lua"
	},
	"setHeadingForAttachedPlayer": {
		"body": "setHeadingForAttachedPlayer(${1:Player player},${2:float toAngle},${3:float rotationSpeed})",
		"description": "GTA_SA\nsetHeadingForAttachedPlayer(Player player, float toAngle, float rotationSpeed)\n",
		"prefix": "setHeadingForAttachedPlayer"

		"scope": "source.lua"
	},
	"taskWalkAlongsideChar": {
		"body": "taskWalkAlongsideChar(${1:Ped ped},${2:int alongisdeActor})",
		"description": "GTA_SA\ntaskWalkAlongsideChar(Ped ped, int alongisdeActor)\n",
		"prefix": "taskWalkAlongsideChar"

		"scope": "source.lua"
	},
	"createEmergencyServicesCar": {
		"body": "createEmergencyServicesCar(${1:Model car},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\ncreateEmergencyServicesCar(Model car, float X, float Y, float Z)\n",
		"prefix": "createEmergencyServicesCar"

		"scope": "source.lua"
	},
	"taskKindaStayInSamePlace": {
		"body": "taskKindaStayInSamePlace(${1:Ped ped},${2:bool stay})",
		"description": "GTA_SA\ntaskKindaStayInSamePlace(Ped ped, bool stay)\n",
		"prefix": "taskKindaStayInSamePlace"

		"scope": "source.lua"
	},
	"startPlaybackRecordedCarLooped": {
		"body": "startPlaybackRecordedCarLooped(${1:Vehicle car},${2:int path})",
		"description": "GTA_SA\nstartPlaybackRecordedCarLooped(Vehicle car, int path)\n",
		"prefix": "startPlaybackRecordedCarLooped"

		"scope": "source.lua"
	},
	"setCharInterior": {
		"body": "setCharInterior(${1:Ped ped},${2:int interior})",
		"description": "GTA_SA\nsetCharInterior(Ped ped, int interior)\n",
		"prefix": "setCharInterior"

		"scope": "source.lua"
	},
	"isAttachedPlayerHeadingAchieved": {
		"body": "isAttachedPlayerHeadingAchieved(${1:Player player})",
		"description": "GTA_SA\nbool result = isAttachedPlayerHeadingAchieved(Player player)\n",
		"prefix": "isAttachedPlayerHeadingAchieved"

		"scope": "source.lua"
	},
	"enableEntryExitPlayerGroupWarping": {
		"body": "enableEntryExitPlayerGroupWarping(${1:float X},${2:float Y},${3:float radius},${4:bool access})",
		"description": "GTA_SA\nenableEntryExitPlayerGroupWarping(float X, float Y, float radius, bool access)\n",
		"prefix": "enableEntryExitPlayerGroupWarping"

		"scope": "source.lua"
	},
	"getClosestStealableObject": {
		"body": "getClosestStealableObject(${1:float X},${2:float Y},${3:float Z},${4:float radius})",
		"description": "GTA_SA\nObject object = getClosestStealableObject(float X, float Y, float Z, float radius)\n",
		"prefix": "getClosestStealableObject"

		"scope": "source.lua"
	},
	"isProceduralInteriorActive": {
		"body": "isProceduralInteriorActive(${1:int interior})",
		"description": "GTA_SA\nbool result = isProceduralInteriorActive(int interior)\n",
		"prefix": "isProceduralInteriorActive"

		"scope": "source.lua"
	},
	"removeCarRecording": {
		"body": "removeCarRecording(${1:int path})",
		"description": "GTA_SA\nremoveCarRecording(int path)\n",
		"prefix": "removeCarRecording"

		"scope": "source.lua"
	},
	"setZonePopulationRace": {
		"body": "setZonePopulationRace(${1:GxtString zone},${2:int popcycle})",
		"description": "GTA_SA\nsetZonePopulationRace(GxtString zone, int popcycle)\n",
		"prefix": "setZonePopulationRace"

		"scope": "source.lua"
	},
	"setObjectOnlyDamagedByPlayer": {
		"body": "setObjectOnlyDamagedByPlayer(${1:Object object},${2:bool player})",
		"description": "GTA_SA\nsetObjectOnlyDamagedByPlayer(Object object, bool player)\n",
		"prefix": "setObjectOnlyDamagedByPlayer"

		"scope": "source.lua"
	},
	"createBirds": {
		"body": "createBirds(${1:float x1},${2:float y1},${3:float z1},${4:float x2},${5:float y2},${6:float z2},${7:int flag1},${8:int flag2})",
		"description": "GTA_SA\ncreateBirds(float x1, float y1, float z1, float x2, float y2, float z2, int flag1, int flag2)\n",
		"prefix": "createBirds"

		"scope": "source.lua"
	},
	"setVehicleDirtLevel": {
		"body": "setVehicleDirtLevel(${1:Vehicle car},${2:float level})",
		"description": "GTA_SA\nsetVehicleDirtLevel(Vehicle car, float level)\n",
		"prefix": "setVehicleDirtLevel"

		"scope": "source.lua"
	},
	"setGangWarsActive": {
		"body": "setGangWarsActive(${1:bool enable})",
		"description": "GTA_SA\nsetGangWarsActive(bool enable)\n",
		"prefix": "setGangWarsActive"

		"scope": "source.lua"
	},
	"isGangWarGoingOn": {
		"body": "isGangWarGoingOn()",
		"description": "GTA_SA\nbool result = isGangWarGoingOn()\n",
		"prefix": "isGangWarGoingOn"

		"scope": "source.lua"
	},
	"givePlayerClothesOutsideShop": {
		"body": "givePlayerClothesOutsideShop(${1:Player player},${2:string clothes},${3:string model},${4:int bodyPart})",
		"description": "GTA_SA\ngivePlayerClothesOutsideShop(Player player, string clothes, string model, int bodyPart)\n",
		"prefix": "givePlayerClothesOutsideShop"

		"scope": "source.lua"
	},
	"clearLoadedShop": {
		"body": "clearLoadedShop()",
		"description": "GTA_SA\nclearLoadedShop()\n",
		"prefix": "clearLoadedShop"

		"scope": "source.lua"
	},
	"setGroupSequence": {
		"body": "setGroupSequence(${1:int group},${2:int Aspack})",
		"description": "GTA_SA\nsetGroupSequence(int group, int Aspack)\n",
		"prefix": "setGroupSequence"

		"scope": "source.lua"
	},
	"setCharDropsWeaponsWhenDead": {
		"body": "setCharDropsWeaponsWhenDead(${1:Ped ped},${2:bool droppable})",
		"description": "GTA_SA\nsetCharDropsWeaponsWhenDead(Ped ped, bool droppable)\n",
		"prefix": "setCharDropsWeaponsWhenDead"

		"scope": "source.lua"
	},
	"setCharNeverLeavesGroup": {
		"body": "setCharNeverLeavesGroup(${1:Ped ped},${2:bool set})",
		"description": "GTA_SA\nsetCharNeverLeavesGroup(Ped ped, bool set)\n",
		"prefix": "setCharNeverLeavesGroup"

		"scope": "source.lua"
	},
	"setPlayerFireButton": {
		"body": "setPlayerFireButton(${1:Player player},${2:bool able})",
		"description": "GTA_SA\nsetPlayerFireButton(Player player, bool able)\n",
		"prefix": "setPlayerFireButton"

		"scope": "source.lua"
	},
	"attachFxSystemToCharBone": {
		"body": "attachFxSystemToCharBone(${1:Particle particle},${2:Ped ped},${3:int mode})",
		"description": "GTA_SA\nattachFxSystemToCharBone(Particle particle, Ped ped, int mode)\n",
		"prefix": "attachFxSystemToCharBone"

		"scope": "source.lua"
	},
	"registerAttractorScriptBrainForCodeUse": {
		"body": "registerAttractorScriptBrainForCodeUse(${1:int handle},${2:GxtString script})",
		"description": "GTA_SA\nregisterAttractorScriptBrainForCodeUse(int handle, GxtString script)\n",
		"prefix": "registerAttractorScriptBrainForCodeUse"

		"scope": "source.lua"
	},
	"setHeadingLimitForAttachedChar": {
		"body": "setHeadingLimitForAttachedChar(${1:Ped ped},${2:int orientation},${3:float limit})",
		"description": "GTA_SA\nsetHeadingLimitForAttachedChar(Ped ped, int orientation, float limit)\n",
		"prefix": "setHeadingLimitForAttachedChar"

		"scope": "source.lua"
	},
	"addBlipForDeadChar": {
		"body": "addBlipForDeadChar(${1:Ped ped})",
		"description": "GTA_SA\nMarker blip = addBlipForDeadChar(Ped ped)\n",
		"prefix": "addBlipForDeadChar"

		"scope": "source.lua"
	},
	"getDeadCharCoordinates": {
		"body": "getDeadCharCoordinates(${1:Ped ped})",
		"description": "GTA_SA\nfloat X, float Y, float Z = getDeadCharCoordinates(Ped ped)\n",
		"prefix": "getDeadCharCoordinates"

		"scope": "source.lua"
	},
	"taskPlayAnimWithFlags": {
		"body": "taskPlayAnimWithFlags(${1:Ped ped},${2:string animation},${3:string ifp},${4:float framedelta},${5:bool loopA},${6:bool lockX},${7:bool lockY},${8:bool lockF},${9:int time},${10:bool force},${11:bool lockZ})",
		"description": "GTA_SA\ntaskPlayAnimWithFlags(Ped ped, string animation, string ifp, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time, bool force, bool lockZ)\n",
		"prefix": "taskPlayAnimWithFlags"

		"scope": "source.lua"
	},
	"setVehicleAirResistanceMultiplier": {
		"body": "setVehicleAirResistanceMultiplier(${1:Vehicle car},${2:float multiplier})",
		"description": "GTA_SA\nsetVehicleAirResistanceMultiplier(Vehicle car, float multiplier)\n",
		"prefix": "setVehicleAirResistanceMultiplier"

		"scope": "source.lua"
	},
	"setCarCoordinatesNoOffset": {
		"body": "setCarCoordinatesNoOffset(${1:Vehicle car},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nsetCarCoordinatesNoOffset(Vehicle car, float X, float Y, float Z)\n",
		"prefix": "setCarCoordinatesNoOffset"

		"scope": "source.lua"
	},
	"setUsesCollisionOfClosestObjectOfType": {
		"body": "setUsesCollisionOfClosestObjectOfType(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:Model modelId},${6:bool collisionDetection})",
		"description": "GTA_SA\nsetUsesCollisionOfClosestObjectOfType(float X, float Y, float Z, float radius, Model modelId, bool collisionDetection)\n",
		"prefix": "setUsesCollisionOfClosestObjectOfType"

		"scope": "source.lua"
	},
	"setTimeOneDayForward": {
		"body": "setTimeOneDayForward()",
		"description": "GTA_SA\nsetTimeOneDayForward()\n",
		"prefix": "setTimeOneDayForward"

		"scope": "source.lua"
	},
	"setTimerBeepCountdownTime": {
		"body": "setTimerBeepCountdownTime(${1:VarId timer},${2:int reach})",
		"description": "GTA_SA\nsetTimerBeepCountdownTime(VarId timer, int reach)\n",
		"prefix": "setTimerBeepCountdownTime"

		"scope": "source.lua"
	},
	"attachTrailerToCab": {
		"body": "attachTrailerToCab(${1:int trailer},${2:int cab})",
		"description": "GTA_SA\nattachTrailerToCab(int trailer, int cab)\n",
		"prefix": "attachTrailerToCab"

		"scope": "source.lua"
	},
	"isVehicleTouchingObject": {
		"body": "isVehicleTouchingObject(${1:Vehicle car},${2:Object object})",
		"description": "GTA_SA\nbool result = isVehicleTouchingObject(Vehicle car, Object object)\n",
		"prefix": "isVehicleTouchingObject"

		"scope": "source.lua"
	},
	"enableCraneControls": {
		"body": "enableCraneControls(${1:bool UP},${2:bool DOWN},${3:bool RELEASE})",
		"description": "GTA_SA\nenableCraneControls(bool UP, bool DOWN, bool RELEASE)\n",
		"prefix": "enableCraneControls"

		"scope": "source.lua"
	},
	"isPlayerInPositionForConversation": {
		"body": "isPlayerInPositionForConversation(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isPlayerInPositionForConversation(Ped ped)\n",
		"prefix": "isPlayerInPositionForConversation"

		"scope": "source.lua"
	},
	"enableConversation": {
		"body": "enableConversation(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nenableConversation(Ped ped, bool enable)\n",
		"prefix": "enableConversation"

		"scope": "source.lua"
	},
	"getRandomCharInSphereOnlyDrugsBuyers": {
		"body": "getRandomCharInSphereOnlyDrugsBuyers(${1:float X},${2:float Y},${3:float Z},${4:float radius})",
		"description": "GTA_SA\nPed ped = getRandomCharInSphereOnlyDrugsBuyers(float X, float Y, float Z, float radius)\n",
		"prefix": "getRandomCharInSphereOnlyDrugsBuyers"

		"scope": "source.lua"
	},
	"getPedType": {
		"body": "getPedType(${1:Ped ped})",
		"description": "GTA_SA\nint pedtype = getPedType(Ped ped)\n",
		"prefix": "getPedType"

		"scope": "source.lua"
	},
	"taskUseClosestMapAttractor": {
		"body": "taskUseClosestMapAttractor(${1:Ped ped},${2:float radius},${3:Model nearModel},${4:float offsetX},${5:float offsetY},${6:float offsetZ},${7:string scriptNamed})",
		"description": "GTA_SA\nbool result = taskUseClosestMapAttractor(Ped ped, float radius, Model nearModel, float offsetX, float offsetY, float offsetZ, string scriptNamed)\n",
		"prefix": "taskUseClosestMapAttractor"

		"scope": "source.lua"
	},
	"planeAttackPlayerUsingDogFight": {
		"body": "planeAttackPlayerUsingDogFight(${1:int hydra},${2:Player player},${3:float radius})",
		"description": "GTA_SA\nplaneAttackPlayerUsingDogFight(int hydra, Player player, float radius)\n",
		"prefix": "planeAttackPlayerUsingDogFight"

		"scope": "source.lua"
	},
	"canTriggerGangWarWhenOnAMission": {
		"body": "canTriggerGangWarWhenOnAMission(${1:bool can})",
		"description": "GTA_SA\ncanTriggerGangWarWhenOnAMission(bool can)\n",
		"prefix": "canTriggerGangWarWhenOnAMission"

		"scope": "source.lua"
	},
	"controlMovableVehiclePart": {
		"body": "controlMovableVehiclePart(${1:Vehicle car},${2:float angle})",
		"description": "GTA_SA\ncontrolMovableVehiclePart(Vehicle car, float angle)\n",
		"prefix": "controlMovableVehiclePart"

		"scope": "source.lua"
	},
	"winchCanPickVehicleUp": {
		"body": "winchCanPickVehicleUp(${1:Vehicle car},${2:bool attractive})",
		"description": "GTA_SA\nwinchCanPickVehicleUp(Vehicle car, bool attractive)\n",
		"prefix": "winchCanPickVehicleUp"

		"scope": "source.lua"
	},
	"openCarDoorABit": {
		"body": "openCarDoorABit(${1:Vehicle car},${2:int door},${3:float rotation})",
		"description": "GTA_SA\nopenCarDoorABit(Vehicle car, int door, float rotation)\n",
		"prefix": "openCarDoorABit"

		"scope": "source.lua"
	},
	"isCarDoorFullyOpen": {
		"body": "isCarDoorFullyOpen(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\nbool result = isCarDoorFullyOpen(Vehicle car, int door)\n",
		"prefix": "isCarDoorFullyOpen"

		"scope": "source.lua"
	},
	"setAlwaysDraw3dMarkers": {
		"body": "setAlwaysDraw3dMarkers(${1:bool set})",
		"description": "GTA_SA\nsetAlwaysDraw3dMarkers(bool set)\n",
		"prefix": "setAlwaysDraw3dMarkers"

		"scope": "source.lua"
	},
	"streamScript": {
		"body": "streamScript(${1:int script})",
		"description": "GTA_SA\nstreamScript(int script)\n",
		"prefix": "streamScript"

		"scope": "source.lua"
	},
	"hasStreamedScriptLoaded": {
		"body": "hasStreamedScriptLoaded(${1:int script})",
		"description": "GTA_SA\nbool result = hasStreamedScriptLoaded(int script)\n",
		"prefix": "hasStreamedScriptLoaded"

		"scope": "source.lua"
	},
	"setGangWarsTrainingMission": {
		"body": "setGangWarsTrainingMission(${1:bool set})",
		"description": "GTA_SA\nsetGangWarsTrainingMission(bool set)\n",
		"prefix": "setGangWarsTrainingMission"

		"scope": "source.lua"
	},
	"setCharHasUsedEntryExit": {
		"body": "setCharHasUsedEntryExit(${1:Ped ped},${2:float X},${3:float Y},${4:float radius})",
		"description": "GTA_SA\nsetCharHasUsedEntryExit(Ped ped, float X, float Y, float radius)\n",
		"prefix": "setCharHasUsedEntryExit"

		"scope": "source.lua"
	},
	"setCharMaxHealth": {
		"body": "setCharMaxHealth(${1:Ped ped},${2:int health})",
		"description": "GTA_SA\nsetCharMaxHealth(Ped ped, int health)\n",
		"prefix": "setCharMaxHealth"

		"scope": "source.lua"
	},
	"setNightVision": {
		"body": "setNightVision(${1:bool enable})",
		"description": "GTA_SA\nsetNightVision(bool enable)\n",
		"prefix": "setNightVision"

		"scope": "source.lua"
	},
	"setInfraredVision": {
		"body": "setInfraredVision(${1:bool enable})",
		"description": "GTA_SA\nsetInfraredVision(bool enable)\n",
		"prefix": "setInfraredVision"

		"scope": "source.lua"
	},
	"setZoneForGangWarsTraining": {
		"body": "setZoneForGangWarsTraining(${1:GxtString zone})",
		"description": "GTA_SA\nsetZoneForGangWarsTraining(GxtString zone)\n",
		"prefix": "setZoneForGangWarsTraining"

		"scope": "source.lua"
	},
	"setCharCanBeKnockedOffBike": {
		"body": "setCharCanBeKnockedOffBike(${1:Ped ped},${2:bool can})",
		"description": "GTA_SA\nsetCharCanBeKnockedOffBike(Ped ped, bool can)\n",
		"prefix": "setCharCanBeKnockedOffBike"

		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGang": {
		"body": "setCharCoordinatesDontWarpGang(${1:Ped ped},${2:float X},${3:float Y},${4:float Z})",
		"description": "GTA_SA\nsetCharCoordinatesDontWarpGang(Ped ped, float X, float Y, float Z)\n",
		"prefix": "setCharCoordinatesDontWarpGang"

		"scope": "source.lua"
	},
	"addPriceModifier": {
		"body": "addPriceModifier(${1:int item},${2:int price})",
		"description": "GTA_SA\naddPriceModifier(int item, int price)\n",
		"prefix": "addPriceModifier"

		"scope": "source.lua"
	},
	"removePriceModifier": {
		"body": "removePriceModifier(${1:int item})",
		"description": "GTA_SA\nremovePriceModifier(int item)\n",
		"prefix": "removePriceModifier"

		"scope": "source.lua"
	},
	"initZonePopulationSettings": {
		"body": "initZonePopulationSettings()",
		"description": "GTA_SA\ninitZonePopulationSettings()\n",
		"prefix": "initZonePopulationSettings"

		"scope": "source.lua"
	},
	"explodeCarInCutsceneShakeAndBits": {
		"body": "explodeCarInCutsceneShakeAndBits(${1:Vehicle car},${2:bool shake},${3:bool effect},${4:bool sound})",
		"description": "GTA_SA\nexplodeCarInCutsceneShakeAndBits(Vehicle car, bool shake, bool effect, bool sound)\n",
		"prefix": "explodeCarInCutsceneShakeAndBits"

		"scope": "source.lua"
	},
	"isSkipCutsceneButtonPressed": {
		"body": "isSkipCutsceneButtonPressed()",
		"description": "GTA_SA\nbool result = isSkipCutsceneButtonPressed()\n",
		"prefix": "isSkipCutsceneButtonPressed"

		"scope": "source.lua"
	},
	"getCutsceneOffset": {
		"body": "getCutsceneOffset()",
		"description": "GTA_SA\nbool result, float X, float Y, float Z = getCutsceneOffset()\n",
		"prefix": "getCutsceneOffset"

		"scope": "source.lua"
	},
	"setObjectScale": {
		"body": "setObjectScale(${1:Object object},${2:float scale})",
		"description": "GTA_SA\nsetObjectScale(Object object, float scale)\n",
		"prefix": "setObjectScale"

		"scope": "source.lua"
	},
	"getCurrentPopulationZoneType": {
		"body": "getCurrentPopulationZoneType()",
		"description": "GTA_SA\nint popcycle = getCurrentPopulationZoneType()\n",
		"prefix": "getCurrentPopulationZoneType"

		"scope": "source.lua"
	},
	"createMenu": {
		"body": "createMenu(${1:GxtString title},${2:float posX},${3:float posY},${4:float width},${5:int columns},${6:bool interactive},${7:bool background},${8:int alignment})",
		"description": "GTA_SA\nint menu = createMenu(GxtString title, float posX, float posY, float width, int columns, bool interactive, bool background, int alignment)\n",
		"prefix": "createMenu"

		"scope": "source.lua"
	},
	"setMenuColumnOrientation": {
		"body": "setMenuColumnOrientation(${1:int menu},${2:int column},${3:int alignment})",
		"description": "GTA_SA\nsetMenuColumnOrientation(int menu, int column, int alignment)\n",
		"prefix": "setMenuColumnOrientation"

		"scope": "source.lua"
	},
	"getMenuItemSelected": {
		"body": "getMenuItemSelected(${1:int menu})",
		"description": "GTA_SA\nint item = getMenuItemSelected(int menu)\n",
		"prefix": "getMenuItemSelected"

		"scope": "source.lua"
	},
	"getMenuItemAccepted": {
		"body": "getMenuItemAccepted(${1:int menu})",
		"description": "GTA_SA\nint item = getMenuItemAccepted(int menu)\n",
		"prefix": "getMenuItemAccepted"

		"scope": "source.lua"
	},
	"activateMenuItem": {
		"body": "activateMenuItem(${1:int menu},${2:int row},${3:bool enable})",
		"description": "GTA_SA\nactivateMenuItem(int menu, int row, bool enable)\n",
		"prefix": "activateMenuItem"

		"scope": "source.lua"
	},
	"deleteMenu": {
		"body": "deleteMenu(${1:int menu})",
		"description": "GTA_SA\ndeleteMenu(int menu)\n",
		"prefix": "deleteMenu"

		"scope": "source.lua"
	},
	"setMenuColumn": {
		"body": "setMenuColumn(${1:int menu},${2:int column},${3:GxtString header},${4:GxtString data1},${5:GxtString data2},${6:GxtString data3},${7:GxtString data4},${8:GxtString data5},${9:GxtString data6},${10:GxtString data7},${11:GxtString data8},${12:GxtString data9},${13:GxtString data10},${14:GxtString data11},${15:GxtString data12})",
		"description": "GTA_SA\nsetMenuColumn(int menu, int column, GxtString header, GxtString data1, GxtString data2, GxtString data3, GxtString data4, GxtString data5, GxtString data6, GxtString data7, GxtString data8, GxtString data9, GxtString data10, GxtString data11, GxtString data12)\n",
		"prefix": "setMenuColumn"

		"scope": "source.lua"
	},
	"setBlipEntryExit": {
		"body": "setBlipEntryExit(${1:Marker marker},${2:float X},${3:float Y},${4:float radius})",
		"description": "GTA_SA\nsetBlipEntryExit(Marker marker, float X, float Y, float radius)\n",
		"prefix": "setBlipEntryExit"

		"scope": "source.lua"
	},
	"switchDeathPenalties": {
		"body": "switchDeathPenalties(${1:bool lose})",
		"description": "GTA_SA\nswitchDeathPenalties(bool lose)\n",
		"prefix": "switchDeathPenalties"

		"scope": "source.lua"
	},
	"switchArrestPenalties": {
		"body": "switchArrestPenalties(${1:bool lose})",
		"description": "GTA_SA\nswitchArrestPenalties(bool lose)\n",
		"prefix": "switchArrestPenalties"

		"scope": "source.lua"
	},
	"setExtraHospitalRestartPoint": {
		"body": "setExtraHospitalRestartPoint(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:float angle})",
		"description": "GTA_SA\nsetExtraHospitalRestartPoint(float X, float Y, float Z, float radius, float angle)\n",
		"prefix": "setExtraHospitalRestartPoint"

		"scope": "source.lua"
	},
	"setExtraPoliceStationRestartPoint": {
		"body": "setExtraPoliceStationRestartPoint(${1:float X},${2:float Y},${3:float Z},${4:float radius},${5:float angle})",
		"description": "GTA_SA\nsetExtraPoliceStationRestartPoint(float X, float Y, float Z, float radius, float angle)\n",
		"prefix": "setExtraPoliceStationRestartPoint"

		"scope": "source.lua"
	},
	"findNumberTagsTagged": {
		"body": "findNumberTagsTagged()",
		"description": "GTA_SA\nint num = findNumberTagsTagged()\n",
		"prefix": "findNumberTagsTagged"

		"scope": "source.lua"
	},
	"getTerritoryUnderControlPercentage": {
		"body": "getTerritoryUnderControlPercentage()",
		"description": "GTA_SA\nint percentage = getTerritoryUnderControlPercentage()\n",
		"prefix": "getTerritoryUnderControlPercentage"

		"scope": "source.lua"
	},
	"isObjectInAngledArea2d": {
		"body": "isObjectInAngledArea2d(${1:Object object},${2:float x1},${3:float y1},${4:float x2},${5:float y2},${6:float radius},${7:bool sphere})",
		"description": "GTA_SA\nbool result = isObjectInAngledArea2d(Object object, float x1, float y1, float x2, float y2, float radius, bool sphere)\n",
		"prefix": "isObjectInAngledArea2d"

		"scope": "source.lua"
	},
	"isObjectInAngledArea3d": {
		"body": "isObjectInAngledArea3d(${1:Object object},${2:float x1},${3:float y1},${4:float z1},${5:float x2},${6:float y2},${7:float z2},${8:float depth},${9:bool flag})",
		"description": "GTA_SA\nbool result = isObjectInAngledArea3d(Object object, float x1, float y1, float z1, float x2, float y2, float z2, float depth, bool flag)\n",
		"prefix": "isObjectInAngledArea3d"

		"scope": "source.lua"
	},
	"getRandomCharInSphereNoBrain": {
		"body": "getRandomCharInSphereNoBrain(${1:float X},${2:float Y},${3:float Z},${4:float radius})",
		"description": "GTA_SA\nPed ped = getRandomCharInSphereNoBrain(float X, float Y, float Z, float radius)\n",
		"prefix": "getRandomCharInSphereNoBrain"

		"scope": "source.lua"
	},
	"setPlaneUndercarriageUp": {
		"body": "setPlaneUndercarriageUp(${1:int plane},${2:bool set})",
		"description": "GTA_SA\nsetPlaneUndercarriageUp(int plane, bool set)\n",
		"prefix": "setPlaneUndercarriageUp"

		"scope": "source.lua"
	},
	"disableAllEntryExits": {
		"body": "disableAllEntryExits(${1:bool disable})",
		"description": "GTA_SA\ndisableAllEntryExits(bool disable)\n",
		"prefix": "disableAllEntryExits"

		"scope": "source.lua"
	},
	"attachAnimsToModel": {
		"body": "attachAnimsToModel(${1:Model modelId},${2:GxtString externalScript})",
		"description": "GTA_SA\nattachAnimsToModel(Model modelId, GxtString externalScript)\n",
		"prefix": "attachAnimsToModel"

		"scope": "source.lua"
	},
	"setObjectAsStealable": {
		"body": "setObjectAsStealable(${1:Object object},${2:bool liftable})",
		"description": "GTA_SA\nsetObjectAsStealable(Object object, bool liftable)\n",
		"prefix": "setObjectAsStealable"

		"scope": "source.lua"
	},
	"setCreateRandomGangMembers": {
		"body": "setCreateRandomGangMembers(${1:bool enable})",
		"description": "GTA_SA\nsetCreateRandomGangMembers(bool enable)\n",
		"prefix": "setCreateRandomGangMembers"

		"scope": "source.lua"
	},
	"addSparks": {
		"body": "addSparks(${1:float posX},${2:float posY},${3:float posZ},${4:float vecX},${5:float vecY},${6:float vecZ},${7:int density})",
		"description": "GTA_SA\naddSparks(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, int density)\n",
		"prefix": "addSparks"

		"scope": "source.lua"
	},
	"getVehicleClass": {
		"body": "getVehicleClass(${1:Vehicle car})",
		"description": "GTA_SA\nint class = getVehicleClass(Vehicle car)\n",
		"prefix": "getVehicleClass"

		"scope": "source.lua"
	},
	"clearConversationForChar": {
		"body": "clearConversationForChar(${1:Ped ped})",
		"description": "GTA_SA\nclearConversationForChar(Ped ped)\n",
		"prefix": "clearConversationForChar"

		"scope": "source.lua"
	},
	"setMenuItemWithNumber": {
		"body": "setMenuItemWithNumber(${1:int panel},${2:int column},${3:int row},${4:GxtString gxtString},${5:int number})",
		"description": "GTA_SA\nsetMenuItemWithNumber(int panel, int column, int row, GxtString gxtString, int number)\n",
		"prefix": "setMenuItemWithNumber"

		"scope": "source.lua"
	},
	"setMenuItemWith2Numbers": {
		"body": "setMenuItemWith2Numbers(${1:int panel},${2:int column},${3:int row},${4:GxtString gxtString},${5:int numbers1},${6:int numbers2})",
		"description": "GTA_SA\nsetMenuItemWith2Numbers(int panel, int column, int row, GxtString gxtString, int numbers1, int numbers2)\n",
		"prefix": "setMenuItemWith2Numbers"

		"scope": "source.lua"
	},
	"setCutsceneModelTexture": {
		"body": "setCutsceneModelTexture(${1:GxtString cutsceneModel},${2:GxtString textureName})",
		"description": "GTA_SA\nsetCutsceneModelTexture(GxtString cutsceneModel, GxtString textureName)\n",
		"prefix": "setCutsceneModelTexture"

		"scope": "source.lua"
	},
	"getNameOfInfoZone": {
		"body": "getNameOfInfoZone(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nGxtString nameB = getNameOfInfoZone(float atX, float atY, float atZ)\n",
		"prefix": "getNameOfInfoZone"

		"scope": "source.lua"
	},
	"vehicleCanBeTargettedByHsMissile": {
		"body": "vehicleCanBeTargettedByHsMissile(${1:Vehicle car},${2:bool targetable})",
		"description": "GTA_SA\nvehicleCanBeTargettedByHsMissile(Vehicle car, bool targetable)\n",
		"prefix": "vehicleCanBeTargettedByHsMissile"

		"scope": "source.lua"
	},
	"setFreebiesInVehicle": {
		"body": "setFreebiesInVehicle(${1:Vehicle car},${2:bool containsGoodies})",
		"description": "GTA_SA\nsetFreebiesInVehicle(Vehicle car, bool containsGoodies)\n",
		"prefix": "setFreebiesInVehicle"

		"scope": "source.lua"
	},
	"setScriptLimitToGangSize": {
		"body": "setScriptLimitToGangSize(${1:bool max})",
		"description": "GTA_SA\nsetScriptLimitToGangSize(bool max)\n",
		"prefix": "setScriptLimitToGangSize"

		"scope": "source.lua"
	},
	"makePlayerGangDisappear": {
		"body": "makePlayerGangDisappear()",
		"description": "GTA_SA\nmakePlayerGangDisappear()\n",
		"prefix": "makePlayerGangDisappear"

		"scope": "source.lua"
	},
	"makePlayerGangReappear": {
		"body": "makePlayerGangReappear()",
		"description": "GTA_SA\nmakePlayerGangReappear()\n",
		"prefix": "makePlayerGangReappear"

		"scope": "source.lua"
	},
	"getClothesItem": {
		"body": "getClothesItem(${1:Player player},${2:int bodypart})",
		"description": "GTA_SA\nint textureCRC, int modelCRC = getClothesItem(Player player, int bodypart)\n",
		"prefix": "getClothesItem"

		"scope": "source.lua"
	},
	"showUpdateStats": {
		"body": "showUpdateStats(${1:bool display})",
		"description": "GTA_SA\nshowUpdateStats(bool display)\n",
		"prefix": "showUpdateStats"

		"scope": "source.lua"
	},
	"setCoordBlipAppearance": {
		"body": "setCoordBlipAppearance(${1:Checkpoint checkpoint},${2:int type})",
		"description": "GTA_SA\nsetCoordBlipAppearance(Checkpoint checkpoint, int type)\n",
		"prefix": "setCoordBlipAppearance"

		"scope": "source.lua"
	},
	"setHeathazeEffect": {
		"body": "setHeathazeEffect(${1:bool enable})",
		"description": "GTA_SA\nsetHeathazeEffect(bool enable)\n",
		"prefix": "setHeathazeEffect"

		"scope": "source.lua"
	},
	"isHelpMessageBeingDisplayed": {
		"body": "isHelpMessageBeingDisplayed()",
		"description": "GTA_SA\nbool result = isHelpMessageBeingDisplayed()\n",
		"prefix": "isHelpMessageBeingDisplayed"

		"scope": "source.lua"
	},
	"hasObjectBeenDamagedByWeapon": {
		"body": "hasObjectBeenDamagedByWeapon(${1:Object object},${2:int type})",
		"description": "GTA_SA\nbool result = hasObjectBeenDamagedByWeapon(Object object, int type)\n",
		"prefix": "hasObjectBeenDamagedByWeapon"

		"scope": "source.lua"
	},
	"clearObjectLastWeaponDamage": {
		"body": "clearObjectLastWeaponDamage(${1:Object object})",
		"description": "GTA_SA\nclearObjectLastWeaponDamage(Object object)\n",
		"prefix": "clearObjectLastWeaponDamage"

		"scope": "source.lua"
	},
	"setPlayerJumpButton": {
		"body": "setPlayerJumpButton(${1:Player player},${2:bool enable})",
		"description": "GTA_SA\nsetPlayerJumpButton(Player player, bool enable)\n",
		"prefix": "setPlayerJumpButton"

		"scope": "source.lua"
	},
	"getHudColour": {
		"body": "getHudColour(${1:int interface})",
		"description": "GTA_SA\nint r, int g, int b, int a = getHudColour(int interface)\n",
		"prefix": "getHudColour"

		"scope": "source.lua"
	},
	"lockDoor": {
		"body": "lockDoor(${1:int door},${2:bool lock})",
		"description": "GTA_SA\nlockDoor(int door, bool lock)\n",
		"prefix": "lockDoor"

		"scope": "source.lua"
	},
	"setObjectMass": {
		"body": "setObjectMass(${1:Object object},${2:float mass})",
		"description": "GTA_SA\nsetObjectMass(Object object, float mass)\n",
		"prefix": "setObjectMass"

		"scope": "source.lua"
	},
	"getObjectMass": {
		"body": "getObjectMass(${1:int int})",
		"description": "GTA_SA\nfloat mass = getObjectMass(int int)\n",
		"prefix": "getObjectMass"

		"scope": "source.lua"
	},
	"setObjectTurnMass": {
		"body": "setObjectTurnMass(${1:Object object},${2:float turnMass})",
		"description": "GTA_SA\nsetObjectTurnMass(Object object, float turnMass)\n",
		"prefix": "setObjectTurnMass"

		"scope": "source.lua"
	},
	"getObjectTurnMass": {
		"body": "getObjectTurnMass(${1:Object object})",
		"description": "GTA_SA\nfloat turnMass = getObjectTurnMass(Object object)\n",
		"prefix": "getObjectTurnMass"

		"scope": "source.lua"
	},
	"setSpecificZoneToTriggerGangWar": {
		"body": "setSpecificZoneToTriggerGangWar(${1:GxtString zone})",
		"description": "GTA_SA\nsetSpecificZoneToTriggerGangWar(GxtString zone)\n",
		"prefix": "setSpecificZoneToTriggerGangWar"

		"scope": "source.lua"
	},
	"clearSpecificZonesToTriggerGangWar": {
		"body": "clearSpecificZonesToTriggerGangWar()",
		"description": "GTA_SA\nclearSpecificZonesToTriggerGangWar()\n",
		"prefix": "clearSpecificZonesToTriggerGangWar"

		"scope": "source.lua"
	},
	"setActiveMenuItem": {
		"body": "setActiveMenuItem(${1:int panel},${2:int activeRow})",
		"description": "GTA_SA\nsetActiveMenuItem(int panel, int activeRow)\n",
		"prefix": "setActiveMenuItem"

		"scope": "source.lua"
	},
	"markStreamedScriptAsNoLongerNeeded": {
		"body": "markStreamedScriptAsNoLongerNeeded(${1:int externalScript})",
		"description": "GTA_SA\nmarkStreamedScriptAsNoLongerNeeded(int externalScript)\n",
		"prefix": "markStreamedScriptAsNoLongerNeeded"

		"scope": "source.lua"
	},
	"removeStreamedScript": {
		"body": "removeStreamedScript(${1:int externalScript})",
		"description": "GTA_SA\nremoveStreamedScript(int externalScript)\n",
		"prefix": "removeStreamedScript"

		"scope": "source.lua"
	},
	"setMessageFormatting": {
		"body": "setMessageFormatting(${1:bool priority},${2:int leftmargin},${3:int maxwidth})",
		"description": "GTA_SA\nsetMessageFormatting(bool priority, int leftmargin, int maxwidth)\n",
		"prefix": "setMessageFormatting"

		"scope": "source.lua"
	},
	"startNewStreamedScript": {
		"body": "startNewStreamedScript(${1:int externalScript},${2:table args})",
		"description": "GTA_SA\nstartNewStreamedScript(int externalScript, table args)\n",
		"prefix": "startNewStreamedScript"

		"scope": "source.lua"
	},
	"setWeatherToAppropriateTypeNow": {
		"body": "setWeatherToAppropriateTypeNow()",
		"description": "GTA_SA\nsetWeatherToAppropriateTypeNow()\n",
		"prefix": "setWeatherToAppropriateTypeNow"

		"scope": "source.lua"
	},
	"winchCanPickObjectUp": {
		"body": "winchCanPickObjectUp(${1:Object object},${2:bool enable})",
		"description": "GTA_SA\nwinchCanPickObjectUp(Object object, bool enable)\n",
		"prefix": "winchCanPickObjectUp"

		"scope": "source.lua"
	},
	"switchAudioZone": {
		"body": "switchAudioZone(${1:GxtString zone},${2:bool enableSound})",
		"description": "GTA_SA\nswitchAudioZone(GxtString zone, bool enableSound)\n",
		"prefix": "switchAudioZone"

		"scope": "source.lua"
	},
	"setCarEngineOn": {
		"body": "setCarEngineOn(${1:Vehicle car},${2:bool on})",
		"description": "GTA_SA\nsetCarEngineOn(Vehicle car, bool on)\n",
		"prefix": "setCarEngineOn"

		"scope": "source.lua"
	},
	"setCarLightsOn": {
		"body": "setCarLightsOn(${1:Vehicle car},${2:bool lights})",
		"description": "GTA_SA\nsetCarLightsOn(Vehicle car, bool lights)\n",
		"prefix": "setCarLightsOn"

		"scope": "source.lua"
	},
	"getUserOfClosestMapAttractor": {
		"body": "getUserOfClosestMapAttractor(${1:float sphereX},${2:float sphereY},${3:float sphereZ},${4:float radius},${5:Model modelId},${6:string externalScriptNamed})",
		"description": "GTA_SA\nPed ped = getUserOfClosestMapAttractor(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, string externalScriptNamed)\n",
		"prefix": "getUserOfClosestMapAttractor"

		"scope": "source.lua"
	},
	"switchRoadsBackToOriginal": {
		"body": "switchRoadsBackToOriginal(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nswitchRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchRoadsBackToOriginal"

		"scope": "source.lua"
	},
	"switchPedRoadsBackToOriginal": {
		"body": "switchPedRoadsBackToOriginal(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nswitchPedRoadsBackToOriginal(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "switchPedRoadsBackToOriginal"

		"scope": "source.lua"
	},
	"getPlaneUndercarriagePosition": {
		"body": "getPlaneUndercarriagePosition(${1:int plane})",
		"description": "GTA_SA\nint landingGearStatus = getPlaneUndercarriagePosition(int plane)\n",
		"prefix": "getPlaneUndercarriagePosition"

		"scope": "source.lua"
	},
	"cameraSetVectorTrack": {
		"body": "cameraSetVectorTrack(${1:float pointX},${2:float pointY},${3:float pointZ},${4:float transverseX},${5:float transverseY},${6:float transverseZ},${7:int time},${8:bool smooth})",
		"description": "GTA_SA\ncameraSetVectorTrack(float pointX, float pointY, float pointZ, float transverseX, float transverseY, float transverseZ, int time, bool smooth)\n",
		"prefix": "cameraSetVectorTrack"

		"scope": "source.lua"
	},
	"cameraSetLerpFov": {
		"body": "cameraSetLerpFov(${1:float from},${2:float to},${3:int timelimit},${4:bool smoothTransition})",
		"description": "GTA_SA\ncameraSetLerpFov(float from, float to, int timelimit, bool smoothTransition)\n",
		"prefix": "cameraSetLerpFov"

		"scope": "source.lua"
	},
	"switchAmbientPlanes": {
		"body": "switchAmbientPlanes(${1:bool enable})",
		"description": "GTA_SA\nswitchAmbientPlanes(bool enable)\n",
		"prefix": "switchAmbientPlanes"

		"scope": "source.lua"
	},
	"setDarknessEffect": {
		"body": "setDarknessEffect(${1:bool enable},${2:int value})",
		"description": "GTA_SA\nsetDarknessEffect(bool enable, int value)\n",
		"prefix": "setDarknessEffect"

		"scope": "source.lua"
	},
	"cameraResetNewScriptables": {
		"body": "cameraResetNewScriptables()",
		"description": "GTA_SA\ncameraResetNewScriptables()\n",
		"prefix": "cameraResetNewScriptables"

		"scope": "source.lua"
	},
	"getNumberOfInstancesOfStreamedScript": {
		"body": "getNumberOfInstancesOfStreamedScript(${1:int externalScript})",
		"description": "GTA_SA\nint value = getNumberOfInstancesOfStreamedScript(int externalScript)\n",
		"prefix": "getNumberOfInstancesOfStreamedScript"

		"scope": "source.lua"
	},
	"allocateStreamedScriptToRandomPed": {
		"body": "allocateStreamedScriptToRandomPed(${1:int externalScript},${2:Model actorModel},${3:int priority})",
		"description": "GTA_SA\nallocateStreamedScriptToRandomPed(int externalScript, Model actorModel, int priority)\n",
		"prefix": "allocateStreamedScriptToRandomPed"

		"scope": "source.lua"
	},
	"allocateStreamedScriptToObject": {
		"body": "allocateStreamedScriptToObject(${1:int externalScript},${2:Model objectModel},${3:int priority},${4:float radius},${5:int type})",
		"description": "GTA_SA\nallocateStreamedScriptToObject(int externalScript, Model objectModel, int priority, float radius, int type)\n",
		"prefix": "allocateStreamedScriptToObject"

		"scope": "source.lua"
	},
	"getGroupMember": {
		"body": "getGroupMember(${1:int group},${2:int member})",
		"description": "GTA_SA\nint handle = getGroupMember(int group, int member)\n",
		"prefix": "getGroupMember"

		"scope": "source.lua"
	},
	"getWaterHeightAtCoords": {
		"body": "getWaterHeightAtCoords(${1:float atX},${2:float atY},${3:bool ignoreWaves})",
		"description": "GTA_SA\nfloat height = getWaterHeightAtCoords(float atX, float atY, bool ignoreWaves)\n",
		"prefix": "getWaterHeightAtCoords"

		"scope": "source.lua"
	},
	"cameraPersistTrack": {
		"body": "cameraPersistTrack(${1:bool lock})",
		"description": "GTA_SA\ncameraPersistTrack(bool lock)\n",
		"prefix": "cameraPersistTrack"

		"scope": "source.lua"
	},
	"cameraPersistPos": {
		"body": "cameraPersistPos(${1:bool lock})",
		"description": "GTA_SA\ncameraPersistPos(bool lock)\n",
		"prefix": "cameraPersistPos"

		"scope": "source.lua"
	},
	"cameraPersistFov": {
		"body": "cameraPersistFov(${1:bool lock})",
		"description": "GTA_SA\ncameraPersistFov(bool lock)\n",
		"prefix": "cameraPersistFov"

		"scope": "source.lua"
	},
	"cameraIsVectorMoveRunning": {
		"body": "cameraIsVectorMoveRunning()",
		"description": "GTA_SA\nbool result = cameraIsVectorMoveRunning()\n",
		"prefix": "cameraIsVectorMoveRunning"

		"scope": "source.lua"
	},
	"cameraIsVectorTrackRunning": {
		"body": "cameraIsVectorTrackRunning()",
		"description": "GTA_SA\nbool result = cameraIsVectorTrackRunning()\n",
		"prefix": "cameraIsVectorTrackRunning"

		"scope": "source.lua"
	},
	"cameraSetVectorMove": {
		"body": "cameraSetVectorMove(${1:float cameraX},${2:float cameraY},${3:float cameraZ},${4:float positionX},${5:float positionY},${6:float positionZ},${7:int time},${8:bool smoothTransition})",
		"description": "GTA_SA\ncameraSetVectorMove(float cameraX, float cameraY, float cameraZ, float positionX, float positionY, float positionZ, int time, bool smoothTransition)\n",
		"prefix": "cameraSetVectorMove"

		"scope": "source.lua"
	},
	"drawWindow": {
		"body": "drawWindow(${1:float cornerAX},${2:float cornerAY},${3:float cornerBX},${4:float cornerBY},${5:GxtString gxtString},${6:int style})",
		"description": "GTA_SA\ndrawWindow(float cornerAX, float cornerAY, float cornerBX, float cornerBY, GxtString gxtString, int style)\n",
		"prefix": "drawWindow"

		"scope": "source.lua"
	},
	"attachCarToObject": {
		"body": "attachCarToObject(${1:Vehicle car},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:float rotationX},${7:float rotationY},${8:float rotationZ})",
		"description": "GTA_SA\nattachCarToObject(Vehicle car, Object object, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ)\n",
		"prefix": "attachCarToObject"

		"scope": "source.lua"
	},
	"setGarageResprayFree": {
		"body": "setGarageResprayFree(${1:GxtString garage},${2:bool free})",
		"description": "GTA_SA\nsetGarageResprayFree(GxtString garage, bool free)\n",
		"prefix": "setGarageResprayFree"

		"scope": "source.lua"
	},
	"setCharBulletproofVest": {
		"body": "setCharBulletproofVest(${1:Ped ped},${2:bool enable})",
		"description": "GTA_SA\nsetCharBulletproofVest(Ped ped, bool enable)\n",
		"prefix": "setCharBulletproofVest"

		"scope": "source.lua"
	},
	"setCinemaCamera": {
		"body": "setCinemaCamera(${1:bool lock})",
		"description": "GTA_SA\nsetCinemaCamera(bool lock)\n",
		"prefix": "setCinemaCamera"

		"scope": "source.lua"
	},
	"setCharFireDamageMultiplier": {
		"body": "setCharFireDamageMultiplier(${1:Ped ped},${2:float multiplier})",
		"description": "GTA_SA\nsetCharFireDamageMultiplier(Ped ped, float multiplier)\n",
		"prefix": "setCharFireDamageMultiplier"

		"scope": "source.lua"
	},
	"setGroupFollowStatus": {
		"body": "setGroupFollowStatus(${1:int group},${2:bool status})",
		"description": "GTA_SA\nsetGroupFollowStatus(int group, bool status)\n",
		"prefix": "setGroupFollowStatus"

		"scope": "source.lua"
	},
	"setSearchlightClipIfColliding": {
		"body": "setSearchlightClipIfColliding(${1:Searchlight searchlight},${2:bool flag})",
		"description": "GTA_SA\nsetSearchlightClipIfColliding(Searchlight searchlight, bool flag)\n",
		"prefix": "setSearchlightClipIfColliding"

		"scope": "source.lua"
	},
	"hasPlayerBoughtItem": {
		"body": "hasPlayerBoughtItem(${1:int item})",
		"description": "GTA_SA\nbool result = hasPlayerBoughtItem(int item)\n",
		"prefix": "hasPlayerBoughtItem"

		"scope": "source.lua"
	},
	"setCameraInFrontOfChar": {
		"body": "setCameraInFrontOfChar(${1:Ped ped})",
		"description": "GTA_SA\nsetCameraInFrontOfChar(Ped ped)\n",
		"prefix": "setCameraInFrontOfChar"

		"scope": "source.lua"
	},
	"getPlayerMaxArmour": {
		"body": "getPlayerMaxArmour(${1:Player player})",
		"description": "GTA_SA\nint maxArmour = getPlayerMaxArmour(Player player)\n",
		"prefix": "getPlayerMaxArmour"

		"scope": "source.lua"
	},
	"setCharUsesUpperbodyDamageAnimsOnly": {
		"body": "setCharUsesUpperbodyDamageAnimsOnly(${1:Ped ped},${2:bool uninterupted})",
		"description": "GTA_SA\nsetCharUsesUpperbodyDamageAnimsOnly(Ped ped, bool uninterupted)\n",
		"prefix": "setCharUsesUpperbodyDamageAnimsOnly"

		"scope": "source.lua"
	},
	"setCharSayContext": {
		"body": "setCharSayContext(${1:Ped ped},${2:int speech})",
		"description": "GTA_SA\nint spokenPhrase = setCharSayContext(Ped ped, int speech)\n",
		"prefix": "setCharSayContext"

		"scope": "source.lua"
	},
	"addExplosionVariableShake": {
		"body": "addExplosionVariableShake(${1:float atX},${2:float atY},${3:float atZ},${4:int type},${5:float cameraShake})",
		"description": "GTA_SA\naddExplosionVariableShake(float atX, float atY, float atZ, int type, float cameraShake)\n",
		"prefix": "addExplosionVariableShake"

		"scope": "source.lua"
	},
	"attachMissionAudioToChar": {
		"body": "attachMissionAudioToChar(${1:int id},${2:Ped ped})",
		"description": "GTA_SA\nattachMissionAudioToChar(int id, Ped ped)\n",
		"prefix": "attachMissionAudioToChar"

		"scope": "source.lua"
	},
	"updatePickupMoneyPerDay": {
		"body": "updatePickupMoneyPerDay(${1:Pickup pickup},${2:int cash})",
		"description": "GTA_SA\nupdatePickupMoneyPerDay(Pickup pickup, int cash)\n",
		"prefix": "updatePickupMoneyPerDay"

		"scope": "source.lua"
	},
	"getNameOfEntryExitCharUsed": {
		"body": "getNameOfEntryExitCharUsed(${1:Ped ped})",
		"description": "GTA_SA\nGxtString interiorName = getNameOfEntryExitCharUsed(Ped ped)\n",
		"prefix": "getNameOfEntryExitCharUsed"

		"scope": "source.lua"
	},
	"getPositionOfEntryExitCharUsed": {
		"body": "getPositionOfEntryExitCharUsed(${1:Ped ped})",
		"description": "GTA_SA\nfloat coordX, float coordY, float coordZ, int number = getPositionOfEntryExitCharUsed(Ped ped)\n",
		"prefix": "getPositionOfEntryExitCharUsed"

		"scope": "source.lua"
	},
	"isCharTalking": {
		"body": "isCharTalking(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharTalking(Ped ped)\n",
		"prefix": "isCharTalking"

		"scope": "source.lua"
	},
	"disableCharSpeech": {
		"body": "disableCharSpeech(${1:Ped ped},${2:bool disable})",
		"description": "GTA_SA\ndisableCharSpeech(Ped ped, bool disable)\n",
		"prefix": "disableCharSpeech"

		"scope": "source.lua"
	},
	"enableCharSpeech": {
		"body": "enableCharSpeech(${1:Ped ped})",
		"description": "GTA_SA\nenableCharSpeech(Ped ped)\n",
		"prefix": "enableCharSpeech"

		"scope": "source.lua"
	},
	"setUpSkip": {
		"body": "setUpSkip(${1:float posX},${2:float posY},${3:float posZ},${4:float angle})",
		"description": "GTA_SA\nsetUpSkip(float posX, float posY, float posZ, float angle)\n",
		"prefix": "setUpSkip"

		"scope": "source.lua"
	},
	"clearSkip": {
		"body": "clearSkip()",
		"description": "GTA_SA\nclearSkip()\n",
		"prefix": "clearSkip"

		"scope": "source.lua"
	},
	"preloadBeatTrack": {
		"body": "preloadBeatTrack(${1:int soundtrack})",
		"description": "GTA_SA\npreloadBeatTrack(int soundtrack)\n",
		"prefix": "preloadBeatTrack"

		"scope": "source.lua"
	},
	"getBeatTrackStatus": {
		"body": "getBeatTrackStatus()",
		"description": "GTA_SA\nint status = getBeatTrackStatus()\n",
		"prefix": "getBeatTrackStatus"

		"scope": "source.lua"
	},
	"playBeatTrack": {
		"body": "playBeatTrack()",
		"description": "GTA_SA\nplayBeatTrack()\n",
		"prefix": "playBeatTrack"

		"scope": "source.lua"
	},
	"stopBeatTrack": {
		"body": "stopBeatTrack()",
		"description": "GTA_SA\nstopBeatTrack()\n",
		"prefix": "stopBeatTrack"

		"scope": "source.lua"
	},
	"findMaxNumberOfGroupMembers": {
		"body": "findMaxNumberOfGroupMembers()",
		"description": "GTA_SA\nint max = findMaxNumberOfGroupMembers()\n",
		"prefix": "findMaxNumberOfGroupMembers"

		"scope": "source.lua"
	},
	"vehicleDoesProvideCover": {
		"body": "vehicleDoesProvideCover(${1:Vehicle car},${2:bool providesCover})",
		"description": "GTA_SA\nvehicleDoesProvideCover(Vehicle car, bool providesCover)\n",
		"prefix": "vehicleDoesProvideCover"

		"scope": "source.lua"
	},
	"createSnapshotPickup": {
		"body": "createSnapshotPickup(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nPickup pickup = createSnapshotPickup(float atX, float atY, float atZ)\n",
		"prefix": "createSnapshotPickup"

		"scope": "source.lua"
	},
	"createHorseshoePickup": {
		"body": "createHorseshoePickup(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nPickup pickup = createHorseshoePickup(float atX, float atY, float atZ)\n",
		"prefix": "createHorseshoePickup"

		"scope": "source.lua"
	},
	"createOysterPickup": {
		"body": "createOysterPickup(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nPickup pickup = createOysterPickup(float atX, float atY, float atZ)\n",
		"prefix": "createOysterPickup"

		"scope": "source.lua"
	},
	"hasObjectBeenUprooted": {
		"body": "hasObjectBeenUprooted(${1:Object object})",
		"description": "GTA_SA\nbool result = hasObjectBeenUprooted(Object object)\n",
		"prefix": "hasObjectBeenUprooted"

		"scope": "source.lua"
	},
	"addSmokeParticle": {
		"body": "addSmokeParticle(${1:float atX},${2:float atY},${3:float atZ},${4:float velocityX},${5:float velocityY},${6:float velocityZ},${7:int r},${8:int g},${9:int b},${10:int a},${11:float size},${12:float factor})",
		"description": "GTA_SA\naddSmokeParticle(float atX, float atY, float atZ, float velocityX, float velocityY, float velocityZ, int r, int g, int b, int a, float size, float factor)\n",
		"prefix": "addSmokeParticle"

		"scope": "source.lua"
	},
	"isCharStuckUnderCar": {
		"body": "isCharStuckUnderCar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharStuckUnderCar(Ped ped)\n",
		"prefix": "isCharStuckUnderCar"

		"scope": "source.lua"
	},
	"controlCarDoor": {
		"body": "controlCarDoor(${1:Vehicle car},${2:int door},${3:int unlatch},${4:float angle})",
		"description": "GTA_SA\ncontrolCarDoor(Vehicle car, int door, int unlatch, float angle)\n",
		"prefix": "controlCarDoor"

		"scope": "source.lua"
	},
	"getDoorAngleRatio": {
		"body": "getDoorAngleRatio(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\nfloat angle = getDoorAngleRatio(Vehicle car, int door)\n",
		"prefix": "getDoorAngleRatio"

		"scope": "source.lua"
	},
	"setPlayerDisplayVitalStatsButton": {
		"body": "setPlayerDisplayVitalStatsButton(${1:Player player},${2:bool display})",
		"description": "GTA_SA\nsetPlayerDisplayVitalStatsButton(Player player, bool display)\n",
		"prefix": "setPlayerDisplayVitalStatsButton"

		"scope": "source.lua"
	},
	"setCharKeepTask": {
		"body": "setCharKeepTask(${1:Ped ped},${2:bool keepTasks})",
		"description": "GTA_SA\nsetCharKeepTask(Ped ped, bool keepTasks)\n",
		"prefix": "setCharKeepTask"

		"scope": "source.lua"
	},
	"createMenuGrid": {
		"body": "createMenuGrid(${1:GxtString gxtString},${2:int positionX},${3:int positionY},${4:float width},${5:int columns},${6:bool interactive},${7:bool background},${8:int alignment})",
		"description": "GTA_SA\nint id = createMenuGrid(GxtString gxtString, int positionX, int positionY, float width, int columns, bool interactive, bool background, int alignment)\n",
		"prefix": "createMenuGrid"

		"scope": "source.lua"
	},
	"isCharSwimming": {
		"body": "isCharSwimming(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharSwimming(Ped ped)\n",
		"prefix": "isCharSwimming"

		"scope": "source.lua"
	},
	"getCharSwimState": {
		"body": "getCharSwimState(${1:Ped ped})",
		"description": "GTA_SA\nint status = getCharSwimState(Ped ped)\n",
		"prefix": "getCharSwimState"

		"scope": "source.lua"
	},
	"startCharFacialTalk": {
		"body": "startCharFacialTalk(${1:Ped ped},${2:int time})",
		"description": "GTA_SA\nstartCharFacialTalk(Ped ped, int time)\n",
		"prefix": "startCharFacialTalk"

		"scope": "source.lua"
	},
	"stopCharFacialTalk": {
		"body": "stopCharFacialTalk(${1:Ped ped})",
		"description": "GTA_SA\nstopCharFacialTalk(Ped ped)\n",
		"prefix": "stopCharFacialTalk"

		"scope": "source.lua"
	},
	"isBigVehicle": {
		"body": "isBigVehicle(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isBigVehicle(Vehicle car)\n",
		"prefix": "isBigVehicle"

		"scope": "source.lua"
	},
	"switchPoliceHelis": {
		"body": "switchPoliceHelis(${1:bool enable})",
		"description": "GTA_SA\nswitchPoliceHelis(bool enable)\n",
		"prefix": "switchPoliceHelis"

		"scope": "source.lua"
	},
	"storeCarModState": {
		"body": "storeCarModState()",
		"description": "GTA_SA\nstoreCarModState()\n",
		"prefix": "storeCarModState"

		"scope": "source.lua"
	},
	"restoreCarModState": {
		"body": "restoreCarModState()",
		"description": "GTA_SA\nrestoreCarModState()\n",
		"prefix": "restoreCarModState"

		"scope": "source.lua"
	},
	"getCurrentCarMod": {
		"body": "getCurrentCarMod(${1:Vehicle car},${2:int slot})",
		"description": "GTA_SA\nModel modelId = getCurrentCarMod(Vehicle car, int slot)\n",
		"prefix": "getCurrentCarMod"

		"scope": "source.lua"
	},
	"isCarLowRider": {
		"body": "isCarLowRider(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarLowRider(Vehicle car)\n",
		"prefix": "isCarLowRider"

		"scope": "source.lua"
	},
	"isCarStreetRacer": {
		"body": "isCarStreetRacer(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isCarStreetRacer(Vehicle car)\n",
		"prefix": "isCarStreetRacer"

		"scope": "source.lua"
	},
	"forceDeathRestart": {
		"body": "forceDeathRestart()",
		"description": "GTA_SA\nforceDeathRestart()\n",
		"prefix": "forceDeathRestart"

		"scope": "source.lua"
	},
	"syncWater": {
		"body": "syncWater()",
		"description": "GTA_SA\nsyncWater()\n",
		"prefix": "syncWater"

		"scope": "source.lua"
	},
	"setCharCoordinatesNoOffset": {
		"body": "setCharCoordinatesNoOffset(${1:Ped ped},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nsetCharCoordinatesNoOffset(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "setCharCoordinatesNoOffset"

		"scope": "source.lua"
	},
	"doesScriptFireExist": {
		"body": "doesScriptFireExist(${1:int fire})",
		"description": "GTA_SA\nbool result = doesScriptFireExist(int fire)\n",
		"prefix": "doesScriptFireExist"

		"scope": "source.lua"
	},
	"resetStuffUponResurrection": {
		"body": "resetStuffUponResurrection()",
		"description": "GTA_SA\nresetStuffUponResurrection()\n",
		"prefix": "resetStuffUponResurrection"

		"scope": "source.lua"
	},
	"isEmergencyServicesVehicle": {
		"body": "isEmergencyServicesVehicle(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isEmergencyServicesVehicle(Vehicle car)\n",
		"prefix": "isEmergencyServicesVehicle"

		"scope": "source.lua"
	},
	"killFxSystemNow": {
		"body": "killFxSystemNow(${1:Particle particle})",
		"description": "GTA_SA\nkillFxSystemNow(Particle particle)\n",
		"prefix": "killFxSystemNow"

		"scope": "source.lua"
	},
	"isObjectWithinBrainActivationRange": {
		"body": "isObjectWithinBrainActivationRange(${1:Player player})",
		"description": "GTA_SA\nbool result = isObjectWithinBrainActivationRange(Player player)\n",
		"prefix": "isObjectWithinBrainActivationRange"

		"scope": "source.lua"
	},
	"copySharedCharDecisionMaker": {
		"body": "copySharedCharDecisionMaker(${1:int from})",
		"description": "GTA_SA\nint to = copySharedCharDecisionMaker(int from)\n",
		"prefix": "copySharedCharDecisionMaker"

		"scope": "source.lua"
	},
	"reportMissionAudioEventAtPosition": {
		"body": "reportMissionAudioEventAtPosition(${1:float atX},${2:float atY},${3:float atZ},${4:int event})",
		"description": "GTA_SA\nreportMissionAudioEventAtPosition(float atX, float atY, float atZ, int event)\n",
		"prefix": "reportMissionAudioEventAtPosition"

		"scope": "source.lua"
	},
	"reportMissionAudioEventAtObject": {
		"body": "reportMissionAudioEventAtObject(${1:int at},${2:int event})",
		"description": "GTA_SA\nreportMissionAudioEventAtObject(int at, int event)\n",
		"prefix": "reportMissionAudioEventAtObject"

		"scope": "source.lua"
	},
	"attachMissionAudioToObject": {
		"body": "attachMissionAudioToObject(${1:int id},${2:Object object})",
		"description": "GTA_SA\nattachMissionAudioToObject(int id, Object object)\n",
		"prefix": "attachMissionAudioToObject"

		"scope": "source.lua"
	},
	"getNumCarColours": {
		"body": "getNumCarColours(${1:Vehicle car})",
		"description": "GTA_SA\nint colours = getNumCarColours(Vehicle car)\n",
		"prefix": "getNumCarColours"

		"scope": "source.lua"
	},
	"extinguishFireAtPoint": {
		"body": "extinguishFireAtPoint(${1:float atX},${2:float atY},${3:float atZ},${4:float radius})",
		"description": "GTA_SA\nextinguishFireAtPoint(float atX, float atY, float atZ, float radius)\n",
		"prefix": "extinguishFireAtPoint"

		"scope": "source.lua"
	},
	"hasTrainDerailed": {
		"body": "hasTrainDerailed(${1:Vehicle train})",
		"description": "GTA_SA\nbool result = hasTrainDerailed(Vehicle train)\n",
		"prefix": "hasTrainDerailed"

		"scope": "source.lua"
	},
	"setCharForceDieInCar": {
		"body": "setCharForceDieInCar(${1:Ped ped},${2:bool stayInCarWhenDead})",
		"description": "GTA_SA\nsetCharForceDieInCar(Ped ped, bool stayInCarWhenDead)\n",
		"prefix": "setCharForceDieInCar"

		"scope": "source.lua"
	},
	"setOnlyCreateGangMembers": {
		"body": "setOnlyCreateGangMembers(${1:bool enable})",
		"description": "GTA_SA\nsetOnlyCreateGangMembers(bool enable)\n",
		"prefix": "setOnlyCreateGangMembers"

		"scope": "source.lua"
	},
	"getObjectModel": {
		"body": "getObjectModel(${1:Object object})",
		"description": "GTA_SA\nModel modelId = getObjectModel(Object object)\n",
		"prefix": "getObjectModel"

		"scope": "source.lua"
	},
	"setCharUsesCollisionClosestObjectOfType": {
		"body": "setCharUsesCollisionClosestObjectOfType(${1:float sphereX},${2:float sphereY},${3:float sphereZ},${4:float radius},${5:Model modelId},${6:bool solid},${7:int forActor})",
		"description": "GTA_SA\nsetCharUsesCollisionClosestObjectOfType(float sphereX, float sphereY, float sphereZ, float radius, Model modelId, bool solid, int forActor)\n",
		"prefix": "setCharUsesCollisionClosestObjectOfType"

		"scope": "source.lua"
	},
	"clearAllScriptFireFlags": {
		"body": "clearAllScriptFireFlags()",
		"description": "GTA_SA\nclearAllScriptFireFlags()\n",
		"prefix": "clearAllScriptFireFlags"

		"scope": "source.lua"
	},
	"getCarBlockingCar": {
		"body": "getCarBlockingCar(${1:Vehicle car})",
		"description": "GTA_SA\nint blockingCar = getCarBlockingCar(Vehicle car)\n",
		"prefix": "getCarBlockingCar"

		"scope": "source.lua"
	},
	"getCurrentVehiclePaintjob": {
		"body": "getCurrentVehiclePaintjob(${1:Vehicle car})",
		"description": "GTA_SA\nint paintjob = getCurrentVehiclePaintjob(Vehicle car)\n",
		"prefix": "getCurrentVehiclePaintjob"

		"scope": "source.lua"
	},
	"setHelpMessageBoxSize": {
		"body": "setHelpMessageBoxSize(${1:int width})",
		"description": "GTA_SA\nsetHelpMessageBoxSize(int width)\n",
		"prefix": "setHelpMessageBoxSize"

		"scope": "source.lua"
	},
	"setGunshotSenseRangeForRiot2": {
		"body": "setGunshotSenseRangeForRiot2(${1:float range})",
		"description": "GTA_SA\nsetGunshotSenseRangeForRiot2(float range)\n",
		"prefix": "setGunshotSenseRangeForRiot2"

		"scope": "source.lua"
	},
	"getCarMovingComponentOffset": {
		"body": "getCarMovingComponentOffset(${1:Vehicle car})",
		"description": "GTA_SA\nfloat angle = getCarMovingComponentOffset(Vehicle car)\n",
		"prefix": "getCarMovingComponentOffset"

		"scope": "source.lua"
	},
	"setNamedEntryExitFlag": {
		"body": "setNamedEntryExitFlag(${1:GxtString interior},${2:int bitmask},${3:bool flag})",
		"description": "GTA_SA\nsetNamedEntryExitFlag(GxtString interior, int bitmask, bool flag)\n",
		"prefix": "setNamedEntryExitFlag"

		"scope": "source.lua"
	},
	"pauseCurrentBeatTrack": {
		"body": "pauseCurrentBeatTrack(${1:bool paused})",
		"description": "GTA_SA\npauseCurrentBeatTrack(bool paused)\n",
		"prefix": "pauseCurrentBeatTrack"

		"scope": "source.lua"
	},
	"setPlayerWeaponsScrollable": {
		"body": "setPlayerWeaponsScrollable(${1:Player player},${2:bool scrollable})",
		"description": "GTA_SA\nsetPlayerWeaponsScrollable(Player player, bool scrollable)\n",
		"prefix": "setPlayerWeaponsScrollable"

		"scope": "source.lua"
	},
	"markRoadNodeAsDontWander": {
		"body": "markRoadNodeAsDontWander(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nmarkRoadNodeAsDontWander(float atX, float atY, float atZ)\n",
		"prefix": "markRoadNodeAsDontWander"

		"scope": "source.lua"
	},
	"unmarkAllRoadNodesAsDontWander": {
		"body": "unmarkAllRoadNodesAsDontWander()",
		"description": "GTA_SA\nunmarkAllRoadNodesAsDontWander()\n",
		"prefix": "unmarkAllRoadNodesAsDontWander"

		"scope": "source.lua"
	},
	"setCheckpointHeading": {
		"body": "setCheckpointHeading(${1:Checkpoint checkpoint},${2:float angle})",
		"description": "GTA_SA\nsetCheckpointHeading(Checkpoint checkpoint, float angle)\n",
		"prefix": "setCheckpointHeading"

		"scope": "source.lua"
	},
	"setMissionRespectTotal": {
		"body": "setMissionRespectTotal(${1:int respect})",
		"description": "GTA_SA\nsetMissionRespectTotal(int respect)\n",
		"prefix": "setMissionRespectTotal"

		"scope": "source.lua"
	},
	"awardPlayerMissionRespect": {
		"body": "awardPlayerMissionRespect(${1:int respect})",
		"description": "GTA_SA\nawardPlayerMissionRespect(int respect)\n",
		"prefix": "awardPlayerMissionRespect"

		"scope": "source.lua"
	},
	"setCarCollision": {
		"body": "setCarCollision(${1:Vehicle car},${2:bool collision})",
		"description": "GTA_SA\nsetCarCollision(Vehicle car, bool collision)\n",
		"prefix": "setCarCollision"

		"scope": "source.lua"
	},
	"changePlaybackToUseAi": {
		"body": "changePlaybackToUseAi(${1:Vehicle car})",
		"description": "GTA_SA\nchangePlaybackToUseAi(Vehicle car)\n",
		"prefix": "changePlaybackToUseAi"

		"scope": "source.lua"
	},
	"cameraSetShakeSimulationSimple": {
		"body": "cameraSetShakeSimulationSimple(${1:int type},${2:float timelimit},${3:float intensity})",
		"description": "GTA_SA\ncameraSetShakeSimulationSimple(int type, float timelimit, float intensity)\n",
		"prefix": "cameraSetShakeSimulationSimple"

		"scope": "source.lua"
	},
	"isNightVisionActive": {
		"body": "isNightVisionActive()",
		"description": "GTA_SA\nbool result = isNightVisionActive()\n",
		"prefix": "isNightVisionActive"

		"scope": "source.lua"
	},
	"setCreateRandomCops": {
		"body": "setCreateRandomCops(${1:bool enable})",
		"description": "GTA_SA\nsetCreateRandomCops(bool enable)\n",
		"prefix": "setCreateRandomCops"

		"scope": "source.lua"
	},
	"taskSetIgnoreWeaponRangeFlag": {
		"body": "taskSetIgnoreWeaponRangeFlag(${1:Ped ped},${2:bool ignore})",
		"description": "GTA_SA\ntaskSetIgnoreWeaponRangeFlag(Ped ped, bool ignore)\n",
		"prefix": "taskSetIgnoreWeaponRangeFlag"

		"scope": "source.lua"
	},
	"taskPickUpSecondObject": {
		"body": "taskPickUpSecondObject(${1:Ped ped},${2:Object object},${3:float offsetX},${4:float offsetY},${5:float offsetZ},${6:int bone},${7:int int7},${8:string animation},${9:string file},${10:int time})",
		"description": "GTA_SA\ntaskPickUpSecondObject(Ped ped, Object object, float offsetX, float offsetY, float offsetZ, int bone, int int7, string animation, string file, int time)\n",
		"prefix": "taskPickUpSecondObject"

		"scope": "source.lua"
	},
	"dropSecondObject": {
		"body": "dropSecondObject(${1:Ped ped},${2:bool to})",
		"description": "GTA_SA\ndropSecondObject(Ped ped, bool to)\n",
		"prefix": "dropSecondObject"

		"scope": "source.lua"
	},
	"removeObjectElegantly": {
		"body": "removeObjectElegantly(${1:Object object})",
		"description": "GTA_SA\nremoveObjectElegantly(Object object)\n",
		"prefix": "removeObjectElegantly"

		"scope": "source.lua"
	},
	"drawCrosshair": {
		"body": "drawCrosshair(${1:bool draw})",
		"description": "GTA_SA\ndrawCrosshair(bool draw)\n",
		"prefix": "drawCrosshair"

		"scope": "source.lua"
	},
	"setUpConversationNodeWithSpeech": {
		"body": "setUpConversationNodeWithSpeech(${1:GxtString question},${2:GxtString answerY},${3:GxtString answerN},${4:int questionWav},${5:int answerYWav},${6:int answerNWav})",
		"description": "GTA_SA\nsetUpConversationNodeWithSpeech(GxtString question, GxtString answerY, GxtString answerN, int questionWav, int answerYWav, int answerNWav)\n",
		"prefix": "setUpConversationNodeWithSpeech"

		"scope": "source.lua"
	},
	"showBlipsOnAllLevels": {
		"body": "showBlipsOnAllLevels(${1:bool enable})",
		"description": "GTA_SA\nshowBlipsOnAllLevels(bool enable)\n",
		"prefix": "showBlipsOnAllLevels"

		"scope": "source.lua"
	},
	"setCharDruggedUp": {
		"body": "setCharDruggedUp(${1:Ped ped},${2:bool druggedUp})",
		"description": "GTA_SA\nsetCharDruggedUp(Ped ped, bool druggedUp)\n",
		"prefix": "setCharDruggedUp"

		"scope": "source.lua"
	},
	"isCharHeadMissing": {
		"body": "isCharHeadMissing(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharHeadMissing(Ped ped)\n",
		"prefix": "isCharHeadMissing"

		"scope": "source.lua"
	},
	"getHashKey": {
		"body": "getHashKey(${1:string string})",
		"description": "GTA_SA\nint CRC32 = getHashKey(string string)\n",
		"prefix": "getHashKey"

		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithSpeech": {
		"body": "setUpConversationEndNodeWithSpeech(${1:GxtString gxtString},${2:int speech})",
		"description": "GTA_SA\nsetUpConversationEndNodeWithSpeech(GxtString gxtString, int speech)\n",
		"prefix": "setUpConversationEndNodeWithSpeech"

		"scope": "source.lua"
	},
	"randomPassengerSay": {
		"body": "randomPassengerSay(${1:int passengers},${2:int audioTable})",
		"description": "GTA_SA\nrandomPassengerSay(int passengers, int audioTable)\n",
		"prefix": "randomPassengerSay"

		"scope": "source.lua"
	},
	"hideAllFrontendBlips": {
		"body": "hideAllFrontendBlips(${1:bool hide})",
		"description": "GTA_SA\nhideAllFrontendBlips(bool hide)\n",
		"prefix": "hideAllFrontendBlips"

		"scope": "source.lua"
	},
	"setPlayerInCarCameraMode": {
		"body": "setPlayerInCarCameraMode(${1:int mode})",
		"description": "GTA_SA\nsetPlayerInCarCameraMode(int mode)\n",
		"prefix": "setPlayerInCarCameraMode"

		"scope": "source.lua"
	},
	"isCharInAnyTrain": {
		"body": "isCharInAnyTrain(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharInAnyTrain(Ped ped)\n",
		"prefix": "isCharInAnyTrain"

		"scope": "source.lua"
	},
	"setUpSkipAfterMission": {
		"body": "setUpSkipAfterMission(${1:float posX},${2:float posY},${3:float posZ},${4:float angle})",
		"description": "GTA_SA\nsetUpSkipAfterMission(float posX, float posY, float posZ, float angle)\n",
		"prefix": "setUpSkipAfterMission"

		"scope": "source.lua"
	},
	"setVehicleIsConsideredByPlayer": {
		"body": "setVehicleIsConsideredByPlayer(${1:Vehicle car},${2:bool accessible})",
		"description": "GTA_SA\nsetVehicleIsConsideredByPlayer(Vehicle car, bool accessible)\n",
		"prefix": "setVehicleIsConsideredByPlayer"

		"scope": "source.lua"
	},
	"getRandomCarModelInMemory": {
		"body": "getRandomCarModelInMemory(${1:bool unk})",
		"description": "GTA_SA\nModel modelId, int class = getRandomCarModelInMemory(bool unk)\n",
		"prefix": "getRandomCarModelInMemory"

		"scope": "source.lua"
	},
	"getCarDoorLockStatus": {
		"body": "getCarDoorLockStatus(${1:Vehicle car})",
		"description": "GTA_SA\nint doorStatus = getCarDoorLockStatus(Vehicle car)\n",
		"prefix": "getCarDoorLockStatus"

		"scope": "source.lua"
	},
	"setClosestEntryExitFlag": {
		"body": "setClosestEntryExitFlag(${1:float atX},${2:float atY},${3:float radius},${4:int bitmask},${5:bool flag})",
		"description": "GTA_SA\nsetClosestEntryExitFlag(float atX, float atY, float radius, int bitmask, bool flag)\n",
		"prefix": "setClosestEntryExitFlag"

		"scope": "source.lua"
	},
	"setCharSignalAfterKill": {
		"body": "setCharSignalAfterKill(${1:Ped ped},${2:bool signal})",
		"description": "GTA_SA\nsetCharSignalAfterKill(Ped ped, bool signal)\n",
		"prefix": "setCharSignalAfterKill"

		"scope": "source.lua"
	},
	"setCharWantedByPolice": {
		"body": "setCharWantedByPolice(${1:Ped ped},${2:bool wanted})",
		"description": "GTA_SA\nsetCharWantedByPolice(Ped ped, bool wanted)\n",
		"prefix": "setCharWantedByPolice"

		"scope": "source.lua"
	},
	"setZoneNoCops": {
		"body": "setZoneNoCops(${1:GxtString zone},${2:bool disableCops})",
		"description": "GTA_SA\nsetZoneNoCops(GxtString zone, bool disableCops)\n",
		"prefix": "setZoneNoCops"

		"scope": "source.lua"
	},
	"addBlood": {
		"body": "addBlood(${1:float atX},${2:float atY},${3:float atZ},${4:float offsetX},${5:float offsetY},${6:float offsetZ},${7:int density},${8:int onActor})",
		"description": "GTA_SA\naddBlood(float atX, float atY, float atZ, float offsetX, float offsetY, float offsetZ, int density, int onActor)\n",
		"prefix": "addBlood"

		"scope": "source.lua"
	},
	"displayCarNames": {
		"body": "displayCarNames(${1:bool show})",
		"description": "GTA_SA\ndisplayCarNames(bool show)\n",
		"prefix": "displayCarNames"

		"scope": "source.lua"
	},
	"displayZoneNames": {
		"body": "displayZoneNames(${1:bool show})",
		"description": "GTA_SA\ndisplayZoneNames(bool show)\n",
		"prefix": "displayZoneNames"

		"scope": "source.lua"
	},
	"isCarDoorDamaged": {
		"body": "isCarDoorDamaged(${1:Vehicle car},${2:int door})",
		"description": "GTA_SA\nbool result = isCarDoorDamaged(Vehicle car, int door)\n",
		"prefix": "isCarDoorDamaged"

		"scope": "source.lua"
	},
	"setCharCoordinatesDontWarpGangNoOffset": {
		"body": "setCharCoordinatesDontWarpGangNoOffset(${1:Ped ped},${2:float atX},${3:float atY},${4:float atZ})",
		"description": "GTA_SA\nsetCharCoordinatesDontWarpGangNoOffset(Ped ped, float atX, float atY, float atZ)\n",
		"prefix": "setCharCoordinatesDontWarpGangNoOffset"

		"scope": "source.lua"
	},
	"setMinigameInProgress": {
		"body": "setMinigameInProgress(${1:bool enable})",
		"description": "GTA_SA\nsetMinigameInProgress(bool enable)\n",
		"prefix": "setMinigameInProgress"

		"scope": "source.lua"
	},
	"isMinigameInProgress": {
		"body": "isMinigameInProgress()",
		"description": "GTA_SA\nbool result = isMinigameInProgress()\n",
		"prefix": "isMinigameInProgress"

		"scope": "source.lua"
	},
	"setForceRandomCarModel": {
		"body": "setForceRandomCarModel(${1:Model modelId})",
		"description": "GTA_SA\nsetForceRandomCarModel(Model modelId)\n",
		"prefix": "setForceRandomCarModel"

		"scope": "source.lua"
	},
	"getRandomCarOfTypeInAngledAreaNoSave": {
		"body": "getRandomCarOfTypeInAngledAreaNoSave(${1:float x1},${2:float y1},${3:float x2},${4:float y2},${5:float angle},${6:int int6})",
		"description": "GTA_SA\nVehicle car = getRandomCarOfTypeInAngledAreaNoSave(float x1, float y1, float x2, float y2, float angle, int int6)\n",
		"prefix": "getRandomCarOfTypeInAngledAreaNoSave"

		"scope": "source.lua"
	},
	"addNextMessageToPreviousBriefs": {
		"body": "addNextMessageToPreviousBriefs(${1:bool int1})",
		"description": "GTA_SA\naddNextMessageToPreviousBriefs(bool int1)\n",
		"prefix": "addNextMessageToPreviousBriefs"

		"scope": "source.lua"
	},
	"failKillFrenzy": {
		"body": "failKillFrenzy()",
		"description": "GTA_SA\nfailKillFrenzy()\n",
		"prefix": "failKillFrenzy"

		"scope": "source.lua"
	},
	"isCopVehicleInArea3dNoSave": {
		"body": "isCopVehicleInArea3dNoSave(${1:float cornerAX},${2:float cornerAY},${3:float cornerAZ},${4:float cornerBX},${5:float cornerBY},${6:float cornerBZ})",
		"description": "GTA_SA\nbool result = isCopVehicleInArea3dNoSave(float cornerAX, float cornerAY, float cornerAZ, float cornerBX, float cornerBY, float cornerBZ)\n",
		"prefix": "isCopVehicleInArea3dNoSave"

		"scope": "source.lua"
	},
	"setPetrolTankWeakpoint": {
		"body": "setPetrolTankWeakpoint(${1:Vehicle car},${2:bool enabled})",
		"description": "GTA_SA\nsetPetrolTankWeakpoint(Vehicle car, bool enabled)\n",
		"prefix": "setPetrolTankWeakpoint"

		"scope": "source.lua"
	},
	"isCharUsingMapAttractor": {
		"body": "isCharUsingMapAttractor(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharUsingMapAttractor(Ped ped)\n",
		"prefix": "isCharUsingMapAttractor"

		"scope": "source.lua"
	},
	"setPlayerModel": {
		"body": "setPlayerModel(${1:Player player},${2:Model modelId})",
		"description": "GTA_SA\nsetPlayerModel(Player player, Model modelId)\n",
		"prefix": "setPlayerModel"

		"scope": "source.lua"
	},
	"areSubtitlesSwitchedOn": {
		"body": "areSubtitlesSwitchedOn()",
		"description": "GTA_SA\nbool result = areSubtitlesSwitchedOn()\n",
		"prefix": "areSubtitlesSwitchedOn"

		"scope": "source.lua"
	},
	"removeCharFromCarMaintainPosition": {
		"body": "removeCharFromCarMaintainPosition(${1:Ped ped},${2:Vehicle car})",
		"description": "GTA_SA\nremoveCharFromCarMaintainPosition(Ped ped, Vehicle car)\n",
		"prefix": "removeCharFromCarMaintainPosition"

		"scope": "source.lua"
	},
	"setObjectProofs": {
		"body": "setObjectProofs(${1:Object object},${2:bool BP},${3:bool FP},${4:bool EP},${5:bool CP},${6:bool MP})",
		"description": "GTA_SA\nsetObjectProofs(Object object, bool BP, bool FP, bool EP, bool CP, bool MP)\n",
		"prefix": "setObjectProofs"

		"scope": "source.lua"
	},
	"isCarTouchingCar": {
		"body": "isCarTouchingCar(${1:Vehicle car1},${2:Vehicle car2})",
		"description": "GTA_SA\nbool result = isCarTouchingCar(Vehicle car1, Vehicle car2)\n",
		"prefix": "isCarTouchingCar"

		"scope": "source.lua"
	},
	"doesObjectHaveThisModel": {
		"body": "doesObjectHaveThisModel(${1:Object object},${2:Model modelId})",
		"description": "GTA_SA\nbool result = doesObjectHaveThisModel(Object object, Model modelId)\n",
		"prefix": "doesObjectHaveThisModel"

		"scope": "source.lua"
	},
	"setTrainForcedToSlowDown": {
		"body": "setTrainForcedToSlowDown(${1:Vehicle train},${2:bool forced})",
		"description": "GTA_SA\nsetTrainForcedToSlowDown(Vehicle train, bool forced)\n",
		"prefix": "setTrainForcedToSlowDown"

		"scope": "source.lua"
	},
	"isVehicleOnAllWheels": {
		"body": "isVehicleOnAllWheels(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = isVehicleOnAllWheels(Vehicle car)\n",
		"prefix": "isVehicleOnAllWheels"

		"scope": "source.lua"
	},
	"doesPickupExist": {
		"body": "doesPickupExist(${1:Pickup pickup})",
		"description": "GTA_SA\nbool result = doesPickupExist(Pickup pickup)\n",
		"prefix": "doesPickupExist"

		"scope": "source.lua"
	},
	"enableAmbientCrime": {
		"body": "enableAmbientCrime(${1:bool enable})",
		"description": "GTA_SA\nenableAmbientCrime(bool enable)\n",
		"prefix": "enableAmbientCrime"

		"scope": "source.lua"
	},
	"clearWantedLevelInGarage": {
		"body": "clearWantedLevelInGarage()",
		"description": "GTA_SA\nclearWantedLevelInGarage()\n",
		"prefix": "clearWantedLevelInGarage"

		"scope": "source.lua"
	},
	"setCharSayContextImportant": {
		"body": "setCharSayContextImportant(${1:Ped ped},${2:int soundslot},${3:bool flags1},${4:bool flags2},${5:bool flags3})",
		"description": "GTA_SA\nint unk = setCharSayContextImportant(Ped ped, int soundslot, bool flags1, bool flags2, bool flags3)\n",
		"prefix": "setCharSayContextImportant"

		"scope": "source.lua"
	},
	"setCharSayScript": {
		"body": "setCharSayScript(${1:Ped ped},${2:int sound},${3:bool flags1},${4:bool flags2},${5:bool flags3})",
		"description": "GTA_SA\nsetCharSayScript(Ped ped, int sound, bool flags1, bool flags2, bool flags3)\n",
		"prefix": "setCharSayScript"

		"scope": "source.lua"
	},
	"forceInteriorLightingForPlayer": {
		"body": "forceInteriorLightingForPlayer(${1:Player player},${2:bool force})",
		"description": "GTA_SA\nforceInteriorLightingForPlayer(Player player, bool force)\n",
		"prefix": "forceInteriorLightingForPlayer"

		"scope": "source.lua"
	},
	"useDetonator": {
		"body": "useDetonator()",
		"description": "GTA_SA\nuseDetonator()\n",
		"prefix": "useDetonator"

		"scope": "source.lua"
	},
	"isMoneyPickupAtCoords": {
		"body": "isMoneyPickupAtCoords(${1:float atX},${2:float atY},${3:float atZ})",
		"description": "GTA_SA\nbool result = isMoneyPickupAtCoords(float atX, float atY, float atZ)\n",
		"prefix": "isMoneyPickupAtCoords"

		"scope": "source.lua"
	},
	"setMenuColumnWidth": {
		"body": "setMenuColumnWidth(${1:int panel},${2:int column},${3:int width})",
		"description": "GTA_SA\nsetMenuColumnWidth(int panel, int column, int width)\n",
		"prefix": "setMenuColumnWidth"

		"scope": "source.lua"
	},
	"makeRoomInPlayerGangForMissionPeds": {
		"body": "makeRoomInPlayerGangForMissionPeds(${1:int group})",
		"description": "GTA_SA\nmakeRoomInPlayerGangForMissionPeds(int group)\n",
		"prefix": "makeRoomInPlayerGangForMissionPeds"

		"scope": "source.lua"
	},
	"isCharGettingInToACar": {
		"body": "isCharGettingInToACar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharGettingInToACar(Ped ped)\n",
		"prefix": "isCharGettingInToACar"

		"scope": "source.lua"
	},
	"setUpSkipForSpecificVehicle": {
		"body": "setUpSkipForSpecificVehicle(${1:float posX},${2:float posY},${3:float posZ},${4:float angle},${5:Vehicle car})",
		"description": "GTA_SA\nsetUpSkipForSpecificVehicle(float posX, float posY, float posZ, float angle, Vehicle car)\n",
		"prefix": "setUpSkipForSpecificVehicle"

		"scope": "source.lua"
	},
	"getCarModelValue": {
		"body": "getCarModelValue(${1:Model modelId})",
		"description": "GTA_SA\nint price = getCarModelValue(Model modelId)\n",
		"prefix": "getCarModelValue"

		"scope": "source.lua"
	},
	"createCarGeneratorWithPlate": {
		"body": "createCarGeneratorWithPlate(${1:float atX},${2:float atY},${3:float atZ},${4:float angle},${5:Model modelId},${6:int color1},${7:int color2},${8:bool forceSpawn},${9:int alarm},${10:int doorLock},${11:int minDelay},${12:int maxDelay},${13:string plate})",
		"description": "GTA_SA\nint generator = createCarGeneratorWithPlate(float atX, float atY, float atZ, float angle, Model modelId, int color1, int color2, bool forceSpawn, int alarm, int doorLock, int minDelay, int maxDelay, string plate)\n",
		"prefix": "createCarGeneratorWithPlate"

		"scope": "source.lua"
	},
	"findTrainDirection": {
		"body": "findTrainDirection(${1:Vehicle train})",
		"description": "GTA_SA\nbool result = findTrainDirection(Vehicle train)\n",
		"prefix": "findTrainDirection"

		"scope": "source.lua"
	},
	"setAircraftCarrierSamSite": {
		"body": "setAircraftCarrierSamSite(${1:bool enable})",
		"description": "GTA_SA\nsetAircraftCarrierSamSite(bool enable)\n",
		"prefix": "setAircraftCarrierSamSite"

		"scope": "source.lua"
	},
	"drawLightWithRange": {
		"body": "drawLightWithRange(${1:float atX},${2:float atY},${3:float atZ},${4:int r},${5:int g},${6:int b},${7:float radius})",
		"description": "GTA_SA\ndrawLightWithRange(float atX, float atY, float atZ, int r, int g, int b, float radius)\n",
		"prefix": "drawLightWithRange"

		"scope": "source.lua"
	},
	"enableBurglaryHouses": {
		"body": "enableBurglaryHouses(${1:bool enable})",
		"description": "GTA_SA\nenableBurglaryHouses(bool enable)\n",
		"prefix": "enableBurglaryHouses"

		"scope": "source.lua"
	},
	"isPlayerControlOn": {
		"body": "isPlayerControlOn(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerControlOn(Player player)\n",
		"prefix": "isPlayerControlOn"

		"scope": "source.lua"
	},
	"getCharActiveInterior": {
		"body": "getCharActiveInterior(${1:Ped ped})",
		"description": "GTA_SA\nint interior = getCharActiveInterior(Ped ped)\n",
		"prefix": "getCharActiveInterior"

		"scope": "source.lua"
	},
	"giveNonPlayerCarNitro": {
		"body": "giveNonPlayerCarNitro(${1:Vehicle car})",
		"description": "GTA_SA\ngiveNonPlayerCarNitro(Vehicle car)\n",
		"prefix": "giveNonPlayerCarNitro"

		"scope": "source.lua"
	},
	"playerTakeOffGoggles": {
		"body": "playerTakeOffGoggles(${1:Player player},${2:bool useAnim})",
		"description": "GTA_SA\nplayerTakeOffGoggles(Player player, bool useAnim)\n",
		"prefix": "playerTakeOffGoggles"

		"scope": "source.lua"
	},
	"allowFixedCameraCollision": {
		"body": "allowFixedCameraCollision(${1:bool allow})",
		"description": "GTA_SA\nallowFixedCameraCollision(bool allow)\n",
		"prefix": "allowFixedCameraCollision"

		"scope": "source.lua"
	},
	"hasCharSpottedCharInFront": {
		"body": "hasCharSpottedCharInFront(${1:Ped ped},${2:Ped ped2})",
		"description": "GTA_SA\nbool result = hasCharSpottedCharInFront(Ped ped, Ped ped2)\n",
		"prefix": "hasCharSpottedCharInFront"

		"scope": "source.lua"
	},
	"forceBigMessageAndCounter": {
		"body": "forceBigMessageAndCounter(${1:bool stayOnScreen})",
		"description": "GTA_SA\nforceBigMessageAndCounter(bool stayOnScreen)\n",
		"prefix": "forceBigMessageAndCounter"

		"scope": "source.lua"
	},
	"setVehicleCameraTweak": {
		"body": "setVehicleCameraTweak(${1:Model carModel},${2:float distance},${3:float altitudeMultiplier},${4:float angleX})",
		"description": "GTA_SA\nsetVehicleCameraTweak(Model carModel, float distance, float altitudeMultiplier, float angleX)\n",
		"prefix": "setVehicleCameraTweak"

		"scope": "source.lua"
	},
	"resetVehicleCameraTweak": {
		"body": "resetVehicleCameraTweak()",
		"description": "GTA_SA\nresetVehicleCameraTweak()\n",
		"prefix": "resetVehicleCameraTweak"

		"scope": "source.lua"
	},
	"reportMissionAudioEventAtChar": {
		"body": "reportMissionAudioEventAtChar(${1:Ped ped},${2:int event})",
		"description": "GTA_SA\nreportMissionAudioEventAtChar(Ped ped, int event)\n",
		"prefix": "reportMissionAudioEventAtChar"

		"scope": "source.lua"
	},
	"doesDecisionMakerExist": {
		"body": "doesDecisionMakerExist(${1:int maker})",
		"description": "GTA_SA\nbool result = doesDecisionMakerExist(int maker)\n",
		"prefix": "doesDecisionMakerExist"

		"scope": "source.lua"
	},
	"ignoreHeightDifferenceFollowingNodes": {
		"body": "ignoreHeightDifferenceFollowingNodes(${1:Ped ped},${2:bool ignore})",
		"description": "GTA_SA\nignoreHeightDifferenceFollowingNodes(Ped ped, bool ignore)\n",
		"prefix": "ignoreHeightDifferenceFollowingNodes"

		"scope": "source.lua"
	},
	"shutAllCharsUp": {
		"body": "shutAllCharsUp(${1:bool enable})",
		"description": "GTA_SA\nshutAllCharsUp(bool enable)\n",
		"prefix": "shutAllCharsUp"

		"scope": "source.lua"
	},
	"setCharGetOutUpsideDownCar": {
		"body": "setCharGetOutUpsideDownCar(${1:Ped ped},${2:bool canGetOut})",
		"description": "GTA_SA\nsetCharGetOutUpsideDownCar(Ped ped, bool canGetOut)\n",
		"prefix": "setCharGetOutUpsideDownCar"

		"scope": "source.lua"
	},
	"reportMissionAudioEventAtCar": {
		"body": "reportMissionAudioEventAtCar(${1:Vehicle car},${2:int event})",
		"description": "GTA_SA\nreportMissionAudioEventAtCar(Vehicle car, int event)\n",
		"prefix": "reportMissionAudioEventAtCar"

		"scope": "source.lua"
	},
	"doWeaponStuffAtStartOf2pGame": {
		"body": "doWeaponStuffAtStartOf2pGame()",
		"description": "GTA_SA\ndoWeaponStuffAtStartOf2pGame()\n",
		"prefix": "doWeaponStuffAtStartOf2pGame"

		"scope": "source.lua"
	},
	"hasGameJustReturnedFromFrontend": {
		"body": "hasGameJustReturnedFromFrontend()",
		"description": "GTA_SA\nbool result = hasGameJustReturnedFromFrontend()\n",
		"prefix": "hasGameJustReturnedFromFrontend"

		"scope": "source.lua"
	},
	"getCurrentLanguage": {
		"body": "getCurrentLanguage()",
		"description": "GTA_SA\nint language = getCurrentLanguage()\n",
		"prefix": "getCurrentLanguage"

		"scope": "source.lua"
	},
	"isObjectIntersectingWorld": {
		"body": "isObjectIntersectingWorld(${1:Object object})",
		"description": "GTA_SA\nbool result = isObjectIntersectingWorld(Object object)\n",
		"prefix": "isObjectIntersectingWorld"

		"scope": "source.lua"
	},
	"getStringWidth": {
		"body": "getStringWidth(${1:GxtString gxtString})",
		"description": "GTA_SA\nint width = getStringWidth(GxtString gxtString)\n",
		"prefix": "getStringWidth"

		"scope": "source.lua"
	},
	"resetVehicleHydraulics": {
		"body": "resetVehicleHydraulics(${1:Vehicle car})",
		"description": "GTA_SA\nresetVehicleHydraulics(Vehicle car)\n",
		"prefix": "resetVehicleHydraulics"

		"scope": "source.lua"
	},
	"setRespawnPointForDurationOfMission": {
		"body": "setRespawnPointForDurationOfMission(${1:float posX},${2:float posY},${3:float posZ})",
		"description": "GTA_SA\nsetRespawnPointForDurationOfMission(float posX, float posY, float posZ)\n",
		"prefix": "setRespawnPointForDurationOfMission"

		"scope": "source.lua"
	},
	"isThisModelACar": {
		"body": "isThisModelACar(${1:Model modelId})",
		"description": "GTA_SA\nbool result = isThisModelACar(Model modelId)\n",
		"prefix": "isThisModelACar"

		"scope": "source.lua"
	},
	"switchOnGroundSearchlight": {
		"body": "switchOnGroundSearchlight(${1:Searchlight searchlight},${2:bool lightsThroughObstacles})",
		"description": "GTA_SA\nswitchOnGroundSearchlight(Searchlight searchlight, bool lightsThroughObstacles)\n",
		"prefix": "switchOnGroundSearchlight"

		"scope": "source.lua"
	},
	"isGangWarFightingGoingOn": {
		"body": "isGangWarFightingGoingOn()",
		"description": "GTA_SA\nbool result = isGangWarFightingGoingOn()\n",
		"prefix": "isGangWarFightingGoingOn"

		"scope": "source.lua"
	},
	"isNextStationAllowed": {
		"body": "isNextStationAllowed(${1:Vehicle train})",
		"description": "GTA_SA\nbool result = isNextStationAllowed(Vehicle train)\n",
		"prefix": "isNextStationAllowed"

		"scope": "source.lua"
	},
	"skipToNextAllowedStation": {
		"body": "skipToNextAllowedStation(${1:Vehicle train})",
		"description": "GTA_SA\nskipToNextAllowedStation(Vehicle train)\n",
		"prefix": "skipToNextAllowedStation"

		"scope": "source.lua"
	},
	"getStringWidthWithNumber": {
		"body": "getStringWidthWithNumber(${1:GxtString gxtString},${2:int number})",
		"description": "GTA_SA\nint width = getStringWidthWithNumber(GxtString gxtString, int number)\n",
		"prefix": "getStringWidthWithNumber"

		"scope": "source.lua"
	},
	"shutCharUpForScriptedSpeech": {
		"body": "shutCharUpForScriptedSpeech(${1:Ped ped},${2:bool muted})",
		"description": "GTA_SA\nshutCharUpForScriptedSpeech(Ped ped, bool muted)\n",
		"prefix": "shutCharUpForScriptedSpeech"

		"scope": "source.lua"
	},
	"enableDisabledAttractorsOnObject": {
		"body": "enableDisabledAttractorsOnObject(${1:Object object},${2:bool enable})",
		"description": "GTA_SA\nenableDisabledAttractorsOnObject(Object object, bool enable)\n",
		"prefix": "enableDisabledAttractorsOnObject"

		"scope": "source.lua"
	},
	"loadSceneInDirection": {
		"body": "loadSceneInDirection(${1:float coordX},${2:float coordY},${3:float coordZ},${4:float angle})",
		"description": "GTA_SA\nloadSceneInDirection(float coordX, float coordY, float coordZ, float angle)\n",
		"prefix": "loadSceneInDirection"

		"scope": "source.lua"
	},
	"isPlayerUsingJetpack": {
		"body": "isPlayerUsingJetpack(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerUsingJetpack(Player player)\n",
		"prefix": "isPlayerUsingJetpack"

		"scope": "source.lua"
	},
	"clearThisPrintBigNow": {
		"body": "clearThisPrintBigNow(${1:int style})",
		"description": "GTA_SA\nclearThisPrintBigNow(int style)\n",
		"prefix": "clearThisPrintBigNow"

		"scope": "source.lua"
	},
	"hasLanguageChanged": {
		"body": "hasLanguageChanged()",
		"description": "GTA_SA\nbool result = hasLanguageChanged()\n",
		"prefix": "hasLanguageChanged"

		"scope": "source.lua"
	},
	"incrementIntStatNoMessage": {
		"body": "incrementIntStatNoMessage(${1:int stat},${2:int value})",
		"description": "GTA_SA\nincrementIntStatNoMessage(int stat, int value)\n",
		"prefix": "incrementIntStatNoMessage"

		"scope": "source.lua"
	},
	"setExtraCarColours": {
		"body": "setExtraCarColours(${1:Vehicle car},${2:int tertiaryColor},${3:int quaternaryColor})",
		"description": "GTA_SA\nsetExtraCarColours(Vehicle car, int tertiaryColor, int quaternaryColor)\n",
		"prefix": "setExtraCarColours"

		"scope": "source.lua"
	},
	"getExtraCarColours": {
		"body": "getExtraCarColours(${1:Vehicle car})",
		"description": "GTA_SA\nint tertiaryColor, int quaternaryColor = getExtraCarColours(Vehicle car)\n",
		"prefix": "getExtraCarColours"

		"scope": "source.lua"
	},
	"manageAllPopulation": {
		"body": "manageAllPopulation()",
		"description": "GTA_SA\nmanageAllPopulation()\n",
		"prefix": "manageAllPopulation"

		"scope": "source.lua"
	},
	"setNoResprays": {
		"body": "setNoResprays(${1:bool enable})",
		"description": "GTA_SA\nsetNoResprays(bool enable)\n",
		"prefix": "setNoResprays"

		"scope": "source.lua"
	},
	"hasCarBeenResprayed": {
		"body": "hasCarBeenResprayed(${1:Vehicle car})",
		"description": "GTA_SA\nbool result = hasCarBeenResprayed(Vehicle car)\n",
		"prefix": "hasCarBeenResprayed"

		"scope": "source.lua"
	},
	"attachMissionAudioToCar": {
		"body": "attachMissionAudioToCar(${1:int audioId},${2:Vehicle car})",
		"description": "GTA_SA\nattachMissionAudioToCar(int audioId, Vehicle car)\n",
		"prefix": "attachMissionAudioToCar"

		"scope": "source.lua"
	},
	"setHasBeenOwnedForCarGenerator": {
		"body": "setHasBeenOwnedForCarGenerator(${1:int generator},${2:bool owned})",
		"description": "GTA_SA\nsetHasBeenOwnedForCarGenerator(int generator, bool owned)\n",
		"prefix": "setHasBeenOwnedForCarGenerator"

		"scope": "source.lua"
	},
	"setUpConversationNodeWithScriptedSpeech": {
		"body": "setUpConversationNodeWithScriptedSpeech(${1:GxtString questionGXT},${2:GxtString answerYesGXT},${3:GxtString answerNoGXT},${4:int questionWAV},${5:int answerYesWAV},${6:int answerNoWAV})",
		"description": "GTA_SA\nsetUpConversationNodeWithScriptedSpeech(GxtString questionGXT, GxtString answerYesGXT, GxtString answerNoGXT, int questionWAV, int answerYesWAV, int answerNoWAV)\n",
		"prefix": "setUpConversationNodeWithScriptedSpeech"

		"scope": "source.lua"
	},
	"setAreaName": {
		"body": "setAreaName(${1:GxtString gxtString})",
		"description": "GTA_SA\nsetAreaName(GxtString gxtString)\n",
		"prefix": "setAreaName"

		"scope": "source.lua"
	},
	"taskPlayAnimSecondary": {
		"body": "taskPlayAnimSecondary(${1:Ped ped},${2:string animation},${3:string IFP},${4:float framedelta},${5:bool loopA},${6:bool lockX},${7:bool lockY},${8:bool lockF},${9:int time})",
		"description": "GTA_SA\ntaskPlayAnimSecondary(Ped ped, string animation, string IFP, float framedelta, bool loopA, bool lockX, bool lockY, bool lockF, int time)\n",
		"prefix": "taskPlayAnimSecondary"

		"scope": "source.lua"
	},
	"isCharTouchingChar": {
		"body": "isCharTouchingChar(${1:Ped ped},${2:Ped ped2})",
		"description": "GTA_SA\nbool result = isCharTouchingChar(Ped ped, Ped ped2)\n",
		"prefix": "isCharTouchingChar"

		"scope": "source.lua"
	},
	"disableHeliAudio": {
		"body": "disableHeliAudio(${1:Vehicle helicopter},${2:bool disable})",
		"description": "GTA_SA\ndisableHeliAudio(Vehicle helicopter, bool disable)\n",
		"prefix": "disableHeliAudio"

		"scope": "source.lua"
	},
	"taskHandGesture": {
		"body": "taskHandGesture(${1:Ped ped},${2:Ped ped2})",
		"description": "GTA_SA\ntaskHandGesture(Ped ped, Ped ped2)\n",
		"prefix": "taskHandGesture"

		"scope": "source.lua"
	},
	"takePhoto": {
		"body": "takePhoto(${1:bool unk})",
		"description": "GTA_SA\ntakePhoto(bool unk)\n",
		"prefix": "takePhoto"

		"scope": "source.lua"
	},
	"incrementFloatStatNoMessage": {
		"body": "incrementFloatStatNoMessage(${1:int stat},${2:float value})",
		"description": "GTA_SA\nincrementFloatStatNoMessage(int stat, float value)\n",
		"prefix": "incrementFloatStatNoMessage"

		"scope": "source.lua"
	},
	"setPlayerGroupToFollowAlways": {
		"body": "setPlayerGroupToFollowAlways(${1:Player player},${2:bool followAlways})",
		"description": "GTA_SA\nsetPlayerGroupToFollowAlways(Player player, bool followAlways)\n",
		"prefix": "setPlayerGroupToFollowAlways"

		"scope": "source.lua"
	},
	"improveCarByCheating": {
		"body": "improveCarByCheating(${1:Vehicle car},${2:bool affectedByCheats})",
		"description": "GTA_SA\nimproveCarByCheating(Vehicle car, bool affectedByCheats)\n",
		"prefix": "improveCarByCheating"

		"scope": "source.lua"
	},
	"changeCarColourFromMenu": {
		"body": "changeCarColourFromMenu(${1:int panelID},${2:Vehicle car},${3:int colorslot},${4:int activeRow})",
		"description": "GTA_SA\nchangeCarColourFromMenu(int panelID, Vehicle car, int colorslot, int activeRow)\n",
		"prefix": "changeCarColourFromMenu"

		"scope": "source.lua"
	},
	"highlightMenuItem": {
		"body": "highlightMenuItem(${1:int panel},${2:int row},${3:bool highlight})",
		"description": "GTA_SA\nhighlightMenuItem(int panel, int row, bool highlight)\n",
		"prefix": "highlightMenuItem"

		"scope": "source.lua"
	},
	"setDisableMilitaryZones": {
		"body": "setDisableMilitaryZones(${1:bool disable})",
		"description": "GTA_SA\nsetDisableMilitaryZones(bool disable)\n",
		"prefix": "setDisableMilitaryZones"

		"scope": "source.lua"
	},
	"setCameraPositionUnfixed": {
		"body": "setCameraPositionUnfixed(${1:float xAngle},${2:float zAngle})",
		"description": "GTA_SA\nsetCameraPositionUnfixed(float xAngle, float zAngle)\n",
		"prefix": "setCameraPositionUnfixed"

		"scope": "source.lua"
	},
	"setRadioToPlayersFavouriteStation": {
		"body": "setRadioToPlayersFavouriteStation()",
		"description": "GTA_SA\nsetRadioToPlayersFavouriteStation()\n",
		"prefix": "setRadioToPlayersFavouriteStation"

		"scope": "source.lua"
	},
	"setDeathWeaponsPersist": {
		"body": "setDeathWeaponsPersist(${1:Ped ped},${2:bool persist})",
		"description": "GTA_SA\nsetDeathWeaponsPersist(Ped ped, bool persist)\n",
		"prefix": "setDeathWeaponsPersist"

		"scope": "source.lua"
	},
	"setCharSwimSpeed": {
		"body": "setCharSwimSpeed(${1:Ped ped},${2:float speed})",
		"description": "GTA_SA\nsetCharSwimSpeed(Ped ped, float speed)\n",
		"prefix": "setCharSwimSpeed"

		"scope": "source.lua"
	},
	"isPlayerClimbing": {
		"body": "isPlayerClimbing(${1:Player player})",
		"description": "GTA_SA\nbool result = isPlayerClimbing(Player player)\n",
		"prefix": "isPlayerClimbing"

		"scope": "source.lua"
	},
	"isThisHelpMessageBeingDisplayed": {
		"body": "isThisHelpMessageBeingDisplayed(${1:GxtString gxtString})",
		"description": "GTA_SA\nbool result = isThisHelpMessageBeingDisplayed(GxtString gxtString)\n",
		"prefix": "isThisHelpMessageBeingDisplayed"

		"scope": "source.lua"
	},
	"isWidescreenOnInOptions": {
		"body": "isWidescreenOnInOptions()",
		"description": "GTA_SA\nbool result = isWidescreenOnInOptions()\n",
		"prefix": "isWidescreenOnInOptions"

		"scope": "source.lua"
	},
	"drawSubtitlesBeforeFade": {
		"body": "drawSubtitlesBeforeFade(${1:bool flag})",
		"description": "GTA_SA\ndrawSubtitlesBeforeFade(bool flag)\n",
		"prefix": "drawSubtitlesBeforeFade"

		"scope": "source.lua"
	},
	"drawOddjobTitleBeforeFade": {
		"body": "drawOddjobTitleBeforeFade(${1:bool flag})",
		"description": "GTA_SA\ndrawOddjobTitleBeforeFade(bool flag)\n",
		"prefix": "drawOddjobTitleBeforeFade"

		"scope": "source.lua"
	},
	"taskFollowPathNodesToCoordWithRadius": {
		"body": "taskFollowPathNodesToCoordWithRadius(${1:Ped ped},${2:float toX},${3:float toY},${4:float toZ},${5:int mode},${6:int time},${7:float stopRadius})",
		"description": "GTA_SA\ntaskFollowPathNodesToCoordWithRadius(Ped ped, float toX, float toY, float toZ, int mode, int time, float stopRadius)\n",
		"prefix": "taskFollowPathNodesToCoordWithRadius"

		"scope": "source.lua"
	},
	"setPhotoCameraEffect": {
		"body": "setPhotoCameraEffect(${1:bool firstPersonView})",
		"description": "GTA_SA\nsetPhotoCameraEffect(bool firstPersonView)\n",
		"prefix": "setPhotoCameraEffect"

		"scope": "source.lua"
	},
	"fixCar": {
		"body": "fixCar(${1:Vehicle car})",
		"description": "GTA_SA\nfixCar(Vehicle car)\n",
		"prefix": "fixCar"

		"scope": "source.lua"
	},
	"setPlayerGroupToFollowNever": {
		"body": "setPlayerGroupToFollowNever(${1:Player player},${2:bool neverFollow})",
		"description": "GTA_SA\nsetPlayerGroupToFollowNever(Player player, bool neverFollow)\n",
		"prefix": "setPlayerGroupToFollowNever"

		"scope": "source.lua"
	},
	"isCharAttachedToAnyCar": {
		"body": "isCharAttachedToAnyCar(${1:Ped ped})",
		"description": "GTA_SA\nbool result = isCharAttachedToAnyCar(Ped ped)\n",
		"prefix": "isCharAttachedToAnyCar"

		"scope": "source.lua"
	},
	"storeCarCharIsAttachedToNoSave": {
		"body": "storeCarCharIsAttachedToNoSave(${1:Vehicle car})",
		"description": "GTA_SA\nPed ped = storeCarCharIsAttachedToNoSave(Vehicle car)\n",
		"prefix": "storeCarCharIsAttachedToNoSave"

		"scope": "source.lua"
	},
	"setUpSkipForVehicleFinishedByScript": {
		"body": "setUpSkipForVehicleFinishedByScript(${1:float posX},${2:float posY},${3:float posZ},${4:float angle},${5:Vehicle car})",
		"description": "GTA_SA\nsetUpSkipForVehicleFinishedByScript(float posX, float posY, float posZ, float angle, Vehicle car)\n",
		"prefix": "setUpSkipForVehicleFinishedByScript"

		"scope": "source.lua"
	},
	"isSkipWaitingForScriptToFadeIn": {
		"body": "isSkipWaitingForScriptToFadeIn()",
		"description": "GTA_SA\nbool result = isSkipWaitingForScriptToFadeIn()\n",
		"prefix": "isSkipWaitingForScriptToFadeIn"

		"scope": "source.lua"
	},
	"forceAllVehicleLightsOff": {
		"body": "forceAllVehicleLightsOff(${1:bool off})",
		"description": "GTA_SA\nforceAllVehicleLightsOff(bool off)\n",
		"prefix": "forceAllVehicleLightsOff"

		"scope": "source.lua"
	},
	"getPlayerInCarCameraMode": {
		"body": "getPlayerInCarCameraMode()",
		"description": "GTA_SA\nint mode = getPlayerInCarCameraMode()\n",
		"prefix": "getPlayerInCarCameraMode"

		"scope": "source.lua"
	},
	"isLastBuildingModelShotByPlayer": {
		"body": "isLastBuildingModelShotByPlayer(${1:Player player},${2:Model modelId})",
		"description": "GTA_SA\nbool result = isLastBuildingModelShotByPlayer(Player player, Model modelId)\n",
		"prefix": "isLastBuildingModelShotByPlayer"

		"scope": "source.lua"
	},
	"clearLastBuildingModelShotByPlayer": {
		"body": "clearLastBuildingModelShotByPlayer(${1:Player player})",
		"description": "GTA_SA\nclearLastBuildingModelShotByPlayer(Player player)\n",
		"prefix": "clearLastBuildingModelShotByPlayer"

		"scope": "source.lua"
	},
	"setUpConversationEndNodeWithScriptedSpeech": {
		"body": "setUpConversationEndNodeWithScriptedSpeech(${1:GxtString dialogueGxt},${2:int wav})",
		"description": "GTA_SA\nsetUpConversationEndNodeWithScriptedSpeech(GxtString dialogueGxt, int wav)\n",
		"prefix": "setUpConversationEndNodeWithScriptedSpeech"

		"scope": "source.lua"
	},
	"activatePimpCheat": {
		"body": "activatePimpCheat(${1:bool enable})",
		"description": "GTA_SA\nactivatePimpCheat(bool enable)\n",
		"prefix": "activatePimpCheat"

		"scope": "source.lua"
	},
	"getRandomCharInAreaOffsetNoSave": {
		"body": "getRandomCharInAreaOffsetNoSave(${1:float sphereX},${2:float sphereY},${3:float sphereZ},${4:float radiusX},${5:float radiusY},${6:float radiusZ})",
		"description": "GTA_SA\nPed ped = getRandomCharInAreaOffsetNoSave(float sphereX, float sphereY, float sphereZ, float radiusX, float radiusY, float radiusZ)\n",
		"prefix": "getRandomCharInAreaOffsetNoSave"

		"scope": "source.lua"
	},
	"setScriptCoopGame": {
		"body": "setScriptCoopGame(${1:bool enable})",
		"description": "GTA_SA\nsetScriptCoopGame(bool enable)\n",
		"prefix": "setScriptCoopGame"

		"scope": "source.lua"
	},
	"createUser3dMarker": {
		"body": "createUser3dMarker(${1:float atX},${2:float atY},${3:float atZ},${4:int color})",
		"description": "GTA_SA\nMarker marker = createUser3dMarker(float atX, float atY, float atZ, int color)\n",
		"prefix": "createUser3dMarker"

		"scope": "source.lua"
	},
	"removeUser3dMarker": {
		"body": "removeUser3dMarker(${1:Marker marker})",
		"description": "GTA_SA\nremoveUser3dMarker(Marker marker)\n",
		"prefix": "removeUser3dMarker"

		"scope": "source.lua"
	},
	"getRidOfPlayerProstitute": {
		"body": "getRidOfPlayerProstitute()",
		"description": "GTA_SA\ngetRidOfPlayerProstitute()\n",
		"prefix": "getRidOfPlayerProstitute"

		"scope": "source.lua"
	},
	"displayNonMinigameHelpMessages": {
		"body": "displayNonMinigameHelpMessages(${1:bool display})",
		"description": "GTA_SA\ndisplayNonMinigameHelpMessages(bool display)\n",
		"prefix": "displayNonMinigameHelpMessages"

		"scope": "source.lua"
	},
	"setRailtrackResistanceMult": {
		"body": "setRailtrackResistanceMult(${1:float tracksFriction})",
		"description": "GTA_SA\nsetRailtrackResistanceMult(float tracksFriction)\n",
		"prefix": "setRailtrackResistanceMult"

		"scope": "source.lua"
	},
	"switchObjectBrains": {
		"body": "switchObjectBrains(${1:int externalScript},${2:bool canBeStreamedIn})",
		"description": "GTA_SA\nswitchObjectBrains(int externalScript, bool canBeStreamedIn)\n",
		"prefix": "switchObjectBrains"

		"scope": "source.lua"
	},
	"finishSettingUpConversationNoSubtitles": {
		"body": "finishSettingUpConversationNoSubtitles()",
		"description": "GTA_SA\nfinishSettingUpConversationNoSubtitles()\n",
		"prefix": "finishSettingUpConversationNoSubtitles"

		"scope": "source.lua"
	},
	"allowPauseInWidescreen": {
		"body": "allowPauseInWidescreen(${1:bool enable})",
		"description": "GTA_SA\nallowPauseInWidescreen(bool enable)\n",
		"prefix": "allowPauseInWidescreen"

		"scope": "source.lua"
	},
	"getPcMouseMovement": {
		"body": "getPcMouseMovement()",
		"description": "GTA_SA\nfloat x, float y = getPcMouseMovement()\n",
		"prefix": "getPcMouseMovement"

		"scope": "source.lua"
	},
	"isPcUsingJoypad": {
		"body": "isPcUsingJoypad()",
		"description": "GTA_SA\nbool result = isPcUsingJoypad()\n",
		"prefix": "isPcUsingJoypad"

		"scope": "source.lua"
	},
	"isMouseUsingVerticalInversion": {
		"body": "isMouseUsingVerticalInversion()",
		"description": "GTA_SA\nbool result = isMouseUsingVerticalInversion()\n",
		"prefix": "isMouseUsingVerticalInversion"

		"scope": "source.lua"
	},
	"startNewCustomScript": {
		"body": "startNewCustomScript(${1:zstring filepath},${2:table args})",
		"description": "GTA_SA\nbool result = startNewCustomScript(zstring filepath, table args)\n",
		"prefix": "startNewCustomScript"

		"scope": "source.lua"
	},
	"launchCustomMission": {
		"body": "launchCustomMission(${1:zstring filepath},${2:table args})",
		"description": "GTA_SA\nlaunchCustomMission(zstring filepath, table args)\n",
		"prefix": "launchCustomMission"

		"scope": "source.lua"
	},
	"getScmThreadStructNamed": {
		"body": "getScmThreadStructNamed(${1:GxtString thread})",
		"description": "GTA_SA\nint handle = getScmThreadStructNamed(GxtString thread)\n",
		"prefix": "getScmThreadStructNamed"

		"scope": "source.lua"
	},
	"loadAudioStream": {
		"body": "loadAudioStream(${1:zstring audio})",
		"description": "GTA_SA\nbool result, int handle = loadAudioStream(zstring audio)\n",
		"prefix": "loadAudioStream"

		"scope": "source.lua"
	},
	"setAudioStreamState": {
		"body": "setAudioStreamState(${1:int handle},${2:int state})",
		"description": "GTA_SA\nsetAudioStreamState(int handle, int state)\n",
		"prefix": "setAudioStreamState"

		"scope": "source.lua"
	},
	"releaseAudioStream": {
		"body": "releaseAudioStream(${1:int handle})",
		"description": "GTA_SA\nreleaseAudioStream(int handle)\n",
		"prefix": "releaseAudioStream"

		"scope": "source.lua"
	},
	"getAudioStreamLength": {
		"body": "getAudioStreamLength(${1:int handle})",
		"description": "GTA_SA\nint length = getAudioStreamLength(int handle)\n",
		"prefix": "getAudioStreamLength"

		"scope": "source.lua"
	},
	"setCleoSharedVar": {
		"body": "setCleoSharedVar(${1:int var},${2:int value})",
		"description": "GTA_SA\nsetCleoSharedVar(int var, int value)\n",
		"prefix": "setCleoSharedVar"

		"scope": "source.lua"
	},
	"getCleoSharedVar": {
		"body": "getCleoSharedVar(${1:int var})",
		"description": "GTA_SA\nint value = getCleoSharedVar(int var)\n",
		"prefix": "getCleoSharedVar"

		"scope": "source.lua"
	},
	"getAudioStreamState": {
		"body": "getAudioStreamState(${1:int handle})",
		"description": "GTA_SA\nint state = getAudioStreamState(int handle)\n",
		"prefix": "getAudioStreamState"

		"scope": "source.lua"
	},
	"getAudioStreamVolume": {
		"body": "getAudioStreamVolume(${1:int audio})",
		"description": "GTA_SA\nfloat volume = getAudioStreamVolume(int audio)\n",
		"prefix": "getAudioStreamVolume"

		"scope": "source.lua"
	},
	"setAudioStreamVolume": {
		"body": "setAudioStreamVolume(${1:int audio},${2:float volume})",
		"description": "GTA_SA\nsetAudioStreamVolume(int audio, float volume)\n",
		"prefix": "setAudioStreamVolume"

		"scope": "source.lua"
	},
	"setAudioStreamLooped": {
		"body": "setAudioStreamLooped(${1:int audio},${2:bool loop})",
		"description": "GTA_SA\nsetAudioStreamLooped(int audio, bool loop)\n",
		"prefix": "setAudioStreamLooped"

		"scope": "source.lua"
	},
	"load3dAudioStream": {
		"body": "load3dAudioStream(${1:zstring audio})",
		"description": "GTA_SA\nint handle = load3dAudioStream(zstring audio)\n",
		"prefix": "load3dAudioStream"

		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCoordinates": {
		"body": "setPlay3dAudioStreamAtCoordinates(${1:int handle},${2:float posX},${3:float posY},${4:float posZ})",
		"description": "GTA_SA\nsetPlay3dAudioStreamAtCoordinates(int handle, float posX, float posY, float posZ)\n",
		"prefix": "setPlay3dAudioStreamAtCoordinates"

		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtObject": {
		"body": "setPlay3dAudioStreamAtObject(${1:int audio},${2:Object object})",
		"description": "GTA_SA\nsetPlay3dAudioStreamAtObject(int audio, Object object)\n",
		"prefix": "setPlay3dAudioStreamAtObject"

		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtChar": {
		"body": "setPlay3dAudioStreamAtChar(${1:int audio},${2:Ped ped})",
		"description": "GTA_SA\nsetPlay3dAudioStreamAtChar(int audio, Ped ped)\n",
		"prefix": "setPlay3dAudioStreamAtChar"

		"scope": "source.lua"
	},
	"setPlay3dAudioStreamAtCar": {
		"body": "setPlay3dAudioStreamAtCar(${1:int audio},${2:Vehicle car})",
		"description": "GTA_SA\nsetPlay3dAudioStreamAtCar(int audio, Vehicle car)\n",
		"prefix": "setPlay3dAudioStreamAtCar"

		"scope": "source.lua"
	},
	"sampSpawnPlayer": {
		"body": "sampSpawnPlayer()",
		"description": "GTA_SA\nsampSpawnPlayer()\n",
		"prefix": "sampSpawnPlayer"

		"scope": "source.lua"
	},
	"sampGetBase": {
		"body": "sampGetBase()",
		"description": "GTA_SA\nint handle = sampGetBase()\n",
		"prefix": "sampGetBase"

		"scope": "source.lua"
	},
	"sampAddChatMessage": {
		"body": "sampAddChatMessage(${1:zstring text},${2:int color})",
		"description": "GTA_SA\nsampAddChatMessage(zstring text, int color)\n",
		"prefix": "sampAddChatMessage"

		"scope": "source.lua"
	},
	"sampSendChat": {
		"body": "sampSendChat(${1:zstring text})",
		"description": "GTA_SA\nsampSendChat(zstring text)\n",
		"prefix": "sampSendChat"

		"scope": "source.lua"
	},
	"isSampAvailable": {
		"body": "isSampAvailable()",
		"description": "GTA_SA\nbool result = isSampAvailable()\n",
		"prefix": "isSampAvailable"

		"scope": "source.lua"
	},
	"sampRequestClass": {
		"body": "sampRequestClass(${1:int class})",
		"description": "GTA_SA\nsampRequestClass(int class)\n",
		"prefix": "sampRequestClass"

		"scope": "source.lua"
	},
	"sampSendScmEvent": {
		"body": "sampSendScmEvent(${1:int event},${2:int id},${3:int param1},${4:int param2})",
		"description": "GTA_SA\nsampSendScmEvent(int event, int id, int param1, int param2)\n",
		"prefix": "sampSendScmEvent"

		"scope": "source.lua"
	},
	"sampSetSpecialAction": {
		"body": "sampSetSpecialAction(${1:int action})",
		"description": "GTA_SA\nsampSetSpecialAction(int action)\n",
		"prefix": "sampSetSpecialAction"

		"scope": "source.lua"
	},
	"sampSendDeathByPlayer": {
		"body": "sampSendDeathByPlayer(${1:int playerId},${2:int reason})",
		"description": "GTA_SA\nsampSendDeathByPlayer(int playerId, int reason)\n",
		"prefix": "sampSendDeathByPlayer"

		"scope": "source.lua"
	},
	"sampGetCarHandleBySampVehicleId": {
		"body": "sampGetCarHandleBySampVehicleId(${1:int id})",
		"description": "GTA_SA\nbool result, Vehicle car = sampGetCarHandleBySampVehicleId(int id)\n",
		"prefix": "sampGetCarHandleBySampVehicleId"

		"scope": "source.lua"
	},
	"sampGetCharHandleBySampPlayerId": {
		"body": "sampGetCharHandleBySampPlayerId(${1:int id})",
		"description": "GTA_SA\nbool result, Ped ped = sampGetCharHandleBySampPlayerId(int id)\n",
		"prefix": "sampGetCharHandleBySampPlayerId"

		"scope": "source.lua"
	},
	"sampIsChatInputActive": {
		"body": "sampIsChatInputActive()",
		"description": "GTA_SA\nbool result = sampIsChatInputActive()\n",
		"prefix": "sampIsChatInputActive"

		"scope": "source.lua"
	},
	"sampSetSendrate": {
		"body": "sampSetSendrate(${1:int type},${2:int rate})",
		"description": "GTA_SA\nsampSetSendrate(int type, int rate)\n",
		"prefix": "sampSetSendrate"

		"scope": "source.lua"
	},
	"sampIsPlayerConnected": {
		"body": "sampIsPlayerConnected(${1:int id})",
		"description": "GTA_SA\nbool result = sampIsPlayerConnected(int id)\n",
		"prefix": "sampIsPlayerConnected"

		"scope": "source.lua"
	},
	"sampGetPlayerStructPtr": {
		"body": "sampGetPlayerStructPtr(${1:int id})",
		"description": "GTA_SA\nint structPtr = sampGetPlayerStructPtr(int id)\n",
		"prefix": "sampGetPlayerStructPtr"

		"scope": "source.lua"
	},
	"sampGetPlayerHealth": {
		"body": "sampGetPlayerHealth(${1:int id})",
		"description": "GTA_SA\nint health = sampGetPlayerHealth(int id)\n",
		"prefix": "sampGetPlayerHealth"

		"scope": "source.lua"
	},
	"sampGetPlayerArmor": {
		"body": "sampGetPlayerArmor(${1:int id})",
		"description": "GTA_SA\nint armor = sampGetPlayerArmor(int id)\n",
		"prefix": "sampGetPlayerArmor"

		"scope": "source.lua"
	},
	"sampSetGamestate": {
		"body": "sampSetGamestate(${1:int gamestate})",
		"description": "GTA_SA\nsampSetGamestate(int gamestate)\n",
		"prefix": "sampSetGamestate"

		"scope": "source.lua"
	},
	"sampDisconnectWithReason": {
		"body": "sampDisconnectWithReason(${1:bool timeout})",
		"description": "GTA_SA\nsampDisconnectWithReason(bool timeout)\n",
		"prefix": "sampDisconnectWithReason"

		"scope": "source.lua"
	},
	"sampSetLocalPlayerName": {
		"body": "sampSetLocalPlayerName(${1:zstring name})",
		"description": "GTA_SA\nsampSetLocalPlayerName(zstring name)\n",
		"prefix": "sampSetLocalPlayerName"

		"scope": "source.lua"
	},
	"sampGetPlayerPing": {
		"body": "sampGetPlayerPing(${1:int id})",
		"description": "GTA_SA\nint ping = sampGetPlayerPing(int id)\n",
		"prefix": "sampGetPlayerPing"

		"scope": "source.lua"
	},
	"sampGetPlayerIdByCharHandle": {
		"body": "sampGetPlayerIdByCharHandle(${1:Ped handle})",
		"description": "GTA_SA\nbool result, int id = sampGetPlayerIdByCharHandle(Ped handle)\n",
		"prefix": "sampGetPlayerIdByCharHandle"

		"scope": "source.lua"
	},
	"sampGetVehicleIdByCarHandle": {
		"body": "sampGetVehicleIdByCarHandle(${1:Vehicle car})",
		"description": "GTA_SA\nbool result, int id = sampGetVehicleIdByCarHandle(Vehicle car)\n",
		"prefix": "sampGetVehicleIdByCarHandle"

		"scope": "source.lua"
	},
	"sampGetStreamedOutPlayerPos": {
		"body": "sampGetStreamedOutPlayerPos(${1:int id})",
		"description": "GTA_SA\nbool result, float posX, float posY, float posZ = sampGetStreamedOutPlayerPos(int id)\n",
		"prefix": "sampGetStreamedOutPlayerPos"

		"scope": "source.lua"
	},
	"sampSendEnterVehicle": {
		"body": "sampSendEnterVehicle(${1:int id},${2:bool passenger})",
		"description": "GTA_SA\nsampSendEnterVehicle(int id, bool passenger)\n",
		"prefix": "sampSendEnterVehicle"

		"scope": "source.lua"
	},
	"sampSendExitVehicle": {
		"body": "sampSendExitVehicle(${1:int id})",
		"description": "GTA_SA\nsampSendExitVehicle(int id)\n",
		"prefix": "sampSendExitVehicle"

		"scope": "source.lua"
	},
	"sampSendSpawn": {
		"body": "sampSendSpawn()",
		"description": "GTA_SA\nsampSendSpawn()\n",
		"prefix": "sampSendSpawn"

		"scope": "source.lua"
	},
	"sampSendDamageVehicle": {
		"body": "sampSendDamageVehicle(${1:Vehicle car},${2:int panel},${3:int doors},${4:int lights},${5:int tires})",
		"description": "GTA_SA\nsampSendDamageVehicle(Vehicle car, int panel, int doors, int lights, int tires)\n",
		"prefix": "sampSendDamageVehicle"

		"scope": "source.lua"
	},
	"sampRegisterChatCommand": {
		"body": "sampRegisterChatCommand(${1:zstring cmd},${2:function func})",
		"description": "GTA_SA\nbool result = sampRegisterChatCommand(zstring cmd, function func)\n",
		"prefix": "sampRegisterChatCommand"

		"scope": "source.lua"
	},
	"sampGetPlayerNickname": {
		"body": "sampGetPlayerNickname(${1:int id})",
		"description": "GTA_SA\nzstring name = sampGetPlayerNickname(int id)\n",
		"prefix": "sampGetPlayerNickname"

		"scope": "source.lua"
	},
	"sampGetPlayerColor": {
		"body": "sampGetPlayerColor(${1:int id})",
		"description": "GTA_SA\nint color = sampGetPlayerColor(int id)\n",
		"prefix": "sampGetPlayerColor"

		"scope": "source.lua"
	},
	"sampConnectToServer": {
		"body": "sampConnectToServer(${1:zstring ip},${2:int port})",
		"description": "GTA_SA\nsampConnectToServer(zstring ip, int port)\n",
		"prefix": "sampConnectToServer"

		"scope": "source.lua"
	},
	"sampGetCurrentServerAddress": {
		"body": "sampGetCurrentServerAddress()",
		"description": "GTA_SA\nzstring ip, int port = sampGetCurrentServerAddress()\n",
		"prefix": "sampGetCurrentServerAddress"

		"scope": "source.lua"
	},
	"sampGetCurrentServerName": {
		"body": "sampGetCurrentServerName()",
		"description": "GTA_SA\nzstring name = sampGetCurrentServerName()\n",
		"prefix": "sampGetCurrentServerName"

		"scope": "source.lua"
	},
	"sampShowDialog": {
		"body": "sampShowDialog(${1:int id},${2:zstring caption},${3:zstring text},${4:zstring button1},${5:zstring button2},${6:int style})",
		"description": "GTA_SA\nsampShowDialog(int id, zstring caption, zstring text, zstring button1, zstring button2, int style)\n",
		"prefix": "sampShowDialog"

		"scope": "source.lua"
	},
	"sampHasDialogRespond": {
		"body": "sampHasDialogRespond(${1:int id})",
		"description": "GTA_SA\nbool result, int button, int list, zstring input = sampHasDialogRespond(int id)\n",
		"prefix": "sampHasDialogRespond"

		"scope": "source.lua"
	},
	"raknetNewBitStream": {
		"body": "raknetNewBitStream()",
		"description": "GTA_SA\nBitstream bs = raknetNewBitStream()\n",
		"prefix": "raknetNewBitStream"

		"scope": "source.lua"
	},
	"raknetDeleteBitStream": {
		"body": "raknetDeleteBitStream(${1:Bitstream bs})",
		"description": "GTA_SA\nraknetDeleteBitStream(Bitstream bs)\n",
		"prefix": "raknetDeleteBitStream"

		"scope": "source.lua"
	},
	"raknetResetBitStream": {
		"body": "raknetResetBitStream(${1:Bitstream bs})",
		"description": "GTA_SA\nraknetResetBitStream(Bitstream bs)\n",
		"prefix": "raknetResetBitStream"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteBool": {
		"body": "raknetBitStreamWriteBool(${1:Bitstream bs},${2:bool value})",
		"description": "GTA_SA\nraknetBitStreamWriteBool(Bitstream bs, bool value)\n",
		"prefix": "raknetBitStreamWriteBool"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt8": {
		"body": "raknetBitStreamWriteInt8(${1:Bitstream bs},${2:int value})",
		"description": "GTA_SA\nraknetBitStreamWriteInt8(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt8"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt16": {
		"body": "raknetBitStreamWriteInt16(${1:Bitstream bs},${2:int value})",
		"description": "GTA_SA\nraknetBitStreamWriteInt16(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt16"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteInt32": {
		"body": "raknetBitStreamWriteInt32(${1:Bitstream bs},${2:int value})",
		"description": "GTA_SA\nraknetBitStreamWriteInt32(Bitstream bs, int value)\n",
		"prefix": "raknetBitStreamWriteInt32"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteFloat": {
		"body": "raknetBitStreamWriteFloat(${1:Bitstream bs},${2:float value})",
		"description": "GTA_SA\nraknetBitStreamWriteFloat(Bitstream bs, float value)\n",
		"prefix": "raknetBitStreamWriteFloat"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteBuffer": {
		"body": "raknetBitStreamWriteBuffer(${1:Bitstream bs},${2:int dest},${3:int size})",
		"description": "GTA_SA\nraknetBitStreamWriteBuffer(Bitstream bs, int dest, int size)\n",
		"prefix": "raknetBitStreamWriteBuffer"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteBitStream": {
		"body": "raknetBitStreamWriteBitStream(${1:Bitstream bs},${2:Bitstream bitStream})",
		"description": "GTA_SA\nraknetBitStreamWriteBitStream(Bitstream bs, Bitstream bitStream)\n",
		"prefix": "raknetBitStreamWriteBitStream"

		"scope": "source.lua"
	},
	"raknetBitStreamWriteString": {
		"body": "raknetBitStreamWriteString(${1:Bitstream bs},${2:string str})",
		"description": "GTA_SA\nraknetBitStreamWriteString(Bitstream bs, string str)\n",
		"prefix": "raknetBitStreamWriteString"

		"scope": "source.lua"
	},
	"raknetSendRpcEx": {
		"body": "raknetSendRpcEx(${1:int rpc},${2:Bitstream bs},${3:int priority},${4:int reliability},${5:int channel},${6:bool timestamp})",
		"description": "GTA_SA\nraknetSendRpcEx(int rpc, Bitstream bs, int priority, int reliability, int channel, bool timestamp)\n",
		"prefix": "raknetSendRpcEx"

		"scope": "source.lua"
	},
	"raknetSendBitStreamEx": {
		"body": "raknetSendBitStreamEx(${1:Bitstream bs},${2:int priority},${3:int reliability},${4:int channel})",
		"description": "GTA_SA\nraknetSendBitStreamEx(Bitstream bs, int priority, int reliability, int channel)\n",
		"prefix": "raknetSendBitStreamEx"

		"scope": "source.lua"
	},
	"sampCreate3dText": {
		"body": "sampCreate3dText(${1:zstring text},${2:int color},${3:float posX},${4:float posY},${5:float posZ},${6:float distance},${7:bool ignoreWalls},${8:int playerId},${9:int vehicleId})",
		"description": "GTA_SA\nint textlabel = sampCreate3dText(zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)\n",
		"prefix": "sampCreate3dText"

		"scope": "source.lua"
	},
	"sampDestroy3dText": {
		"body": "sampDestroy3dText(${1:int textlabel})",
		"description": "GTA_SA\nsampDestroy3dText(int textlabel)\n",
		"prefix": "sampDestroy3dText"

		"scope": "source.lua"
	},
	"sampIs3dTextDefined": {
		"body": "sampIs3dTextDefined(${1:int 3dText})",
		"description": "GTA_SA\nbool result = sampIs3dTextDefined(int 3dText)\n",
		"prefix": "sampIs3dTextDefined"

		"scope": "source.lua"
	},
	"sampCloseCurrentDialogWithButton": {
		"body": "sampCloseCurrentDialogWithButton(${1:int button})",
		"description": "GTA_SA\nsampCloseCurrentDialogWithButton(int button)\n",
		"prefix": "sampCloseCurrentDialogWithButton"

		"scope": "source.lua"
	},
	"sampGetCurrentDialogListItem": {
		"body": "sampGetCurrentDialogListItem()",
		"description": "GTA_SA\nint list = sampGetCurrentDialogListItem()\n",
		"prefix": "sampGetCurrentDialogListItem"

		"scope": "source.lua"
	},
	"sampSetCurrentDialogListItem": {
		"body": "sampSetCurrentDialogListItem(${1:int list})",
		"description": "GTA_SA\nsampSetCurrentDialogListItem(int list)\n",
		"prefix": "sampSetCurrentDialogListItem"

		"scope": "source.lua"
	},
	"sampGetCurrentDialogEditboxText": {
		"body": "sampGetCurrentDialogEditboxText()",
		"description": "GTA_SA\nzstring text = sampGetCurrentDialogEditboxText()\n",
		"prefix": "sampGetCurrentDialogEditboxText"

		"scope": "source.lua"
	},
	"sampSetCurrentDialogEditboxText": {
		"body": "sampSetCurrentDialogEditboxText(${1:zstring text})",
		"description": "GTA_SA\nsampSetCurrentDialogEditboxText(zstring text)\n",
		"prefix": "sampSetCurrentDialogEditboxText"

		"scope": "source.lua"
	},
	"sampIsDialogActive": {
		"body": "sampIsDialogActive()",
		"description": "GTA_SA\nbool result = sampIsDialogActive()\n",
		"prefix": "sampIsDialogActive"

		"scope": "source.lua"
	},
	"sampGetCurrentDialogType": {
		"body": "sampGetCurrentDialogType()",
		"description": "GTA_SA\nint type = sampGetCurrentDialogType()\n",
		"prefix": "sampGetCurrentDialogType"

		"scope": "source.lua"
	},
	"sampGetCurrentDialogId": {
		"body": "sampGetCurrentDialogId()",
		"description": "GTA_SA\nint id = sampGetCurrentDialogId()\n",
		"prefix": "sampGetCurrentDialogId"

		"scope": "source.lua"
	},
	"sampGetGamestate": {
		"body": "sampGetGamestate()",
		"description": "GTA_SA\nint gamestate = sampGetGamestate()\n",
		"prefix": "sampGetGamestate"

		"scope": "source.lua"
	},
	"sampGetObjectHandleBySampId": {
		"body": "sampGetObjectHandleBySampId(${1:int id})",
		"description": "GTA_SA\nObject object = sampGetObjectHandleBySampId(int id)\n",
		"prefix": "sampGetObjectHandleBySampId"

		"scope": "source.lua"
	},
	"sampGetPickupHandleBySampId": {
		"body": "sampGetPickupHandleBySampId(${1:int id})",
		"description": "GTA_SA\nPickup pickup = sampGetPickupHandleBySampId(int id)\n",
		"prefix": "sampGetPickupHandleBySampId"

		"scope": "source.lua"
	},
	"sampGetObjectSampIdByHandle": {
		"body": "sampGetObjectSampIdByHandle(${1:Object object})",
		"description": "GTA_SA\nint objectId = sampGetObjectSampIdByHandle(Object object)\n",
		"prefix": "sampGetObjectSampIdByHandle"

		"scope": "source.lua"
	},
	"sampGetPickupSampIdByHandle": {
		"body": "sampGetPickupSampIdByHandle(${1:Pickup pickup})",
		"description": "GTA_SA\nint pickupId = sampGetPickupSampIdByHandle(Pickup pickup)\n",
		"prefix": "sampGetPickupSampIdByHandle"

		"scope": "source.lua"
	},
	"sampGetListboxItemsCount": {
		"body": "sampGetListboxItemsCount()",
		"description": "GTA_SA\nint count = sampGetListboxItemsCount()\n",
		"prefix": "sampGetListboxItemsCount"

		"scope": "source.lua"
	},
	"sampGetPlayerAnimationId": {
		"body": "sampGetPlayerAnimationId(${1:int playerId})",
		"description": "GTA_SA\nint animid = sampGetPlayerAnimationId(int playerId)\n",
		"prefix": "sampGetPlayerAnimationId"

		"scope": "source.lua"
	},
	"sampGetAnimationNameAndFile": {
		"body": "sampGetAnimationNameAndFile(${1:int animid})",
		"description": "GTA_SA\nzstring name, zstring file = sampGetAnimationNameAndFile(int animid)\n",
		"prefix": "sampGetAnimationNameAndFile"

		"scope": "source.lua"
	},
	"sampFindAnimationIdByNameAndFile": {
		"body": "sampFindAnimationIdByNameAndFile(${1:zstring name},${2:zstring file})",
		"description": "GTA_SA\nint id = sampFindAnimationIdByNameAndFile(zstring name, zstring file)\n",
		"prefix": "sampFindAnimationIdByNameAndFile"

		"scope": "source.lua"
	},
	"getScreenResolution": {
		"body": "getScreenResolution()",
		"description": "GTA_SA\nint resX, int resY = getScreenResolution()\n",
		"prefix": "getScreenResolution"

		"scope": "source.lua"
	},
	"sampGetListboxItemText": {
		"body": "sampGetListboxItemText(${1:int item})",
		"description": "GTA_SA\nzstring text = sampGetListboxItemText(int item)\n",
		"prefix": "sampGetListboxItemText"

		"scope": "source.lua"
	},
	"sampIsPlayerPaused": {
		"body": "sampIsPlayerPaused(${1:int id})",
		"description": "GTA_SA\nbool result = sampIsPlayerPaused(int id)\n",
		"prefix": "sampIsPlayerPaused"

		"scope": "source.lua"
	},
	"sampToggleCursor": {
		"body": "sampToggleCursor(${1:bool show})",
		"description": "GTA_SA\nsampToggleCursor(bool show)\n",
		"prefix": "sampToggleCursor"

		"scope": "source.lua"
	},
	"sampIsLocalPlayerSpawned": {
		"body": "sampIsLocalPlayerSpawned()",
		"description": "GTA_SA\nbool result = sampIsLocalPlayerSpawned()\n",
		"prefix": "sampIsLocalPlayerSpawned"

		"scope": "source.lua"
	},
	"sampGetPlayerSpecialAction": {
		"body": "sampGetPlayerSpecialAction(${1:int id})",
		"description": "GTA_SA\nint action = sampGetPlayerSpecialAction(int id)\n",
		"prefix": "sampGetPlayerSpecialAction"

		"scope": "source.lua"
	},
	"sampUnregisterChatCommand": {
		"body": "sampUnregisterChatCommand(${1:zstring cmd})",
		"description": "GTA_SA\nbool result = sampUnregisterChatCommand(zstring cmd)\n",
		"prefix": "sampUnregisterChatCommand"

		"scope": "source.lua"
	},
	"sampIsPlayerNpc": {
		"body": "sampIsPlayerNpc(${1:int id})",
		"description": "GTA_SA\nbool result = sampIsPlayerNpc(int id)\n",
		"prefix": "sampIsPlayerNpc"

		"scope": "source.lua"
	},
	"sampGetPlayerScore": {
		"body": "sampGetPlayerScore(${1:int id})",
		"description": "GTA_SA\nint score = sampGetPlayerScore(int id)\n",
		"prefix": "sampGetPlayerScore"

		"scope": "source.lua"
	},
	"renderDrawLine": {
		"body": "renderDrawLine(${1:int pos1X},${2:int pos1Y},${3:int pos2X},${4:int pos2Y},${5:int width},${6:int color})",
		"description": "GTA_SA\nrenderDrawLine(int pos1X, int pos1Y, int pos2X, int pos2Y, int width, int color)\n",
		"prefix": "renderDrawLine"

		"scope": "source.lua"
	},
	"renderDrawBox": {
		"body": "renderDrawBox(${1:int posX},${2:int posY},${3:int sizeX},${4:int sizeY},${5:int color})",
		"description": "GTA_SA\nrenderDrawBox(int posX, int posY, int sizeX, int sizeY, int color)\n",
		"prefix": "renderDrawBox"

		"scope": "source.lua"
	},
	"renderDrawBoxWithBorder": {
		"body": "renderDrawBoxWithBorder(${1:int posX},${2:int posY},${3:int sizeX},${4:int sizeY},${5:int color},${6:int bsize},${7:int bcolor})",
		"description": "GTA_SA\nrenderDrawBoxWithBorder(int posX, int posY, int sizeX, int sizeY, int color, int bsize, int bcolor)\n",
		"prefix": "renderDrawBoxWithBorder"

		"scope": "source.lua"
	},
	"renderGetFontDrawTextLength": {
		"body": "renderGetFontDrawTextLength(${1:int font},${2:zstring text})",
		"description": "GTA_SA\nint length = renderGetFontDrawTextLength(int font, zstring text)\n",
		"prefix": "renderGetFontDrawTextLength"

		"scope": "source.lua"
	},
	"renderGetFontDrawHeight": {
		"body": "renderGetFontDrawHeight(${1:int font})",
		"description": "GTA_SA\nint height = renderGetFontDrawHeight(int font)\n",
		"prefix": "renderGetFontDrawHeight"

		"scope": "source.lua"
	},
	"renderCreateFont": {
		"body": "renderCreateFont(${1:zstring font},${2:int height},${3:int flags})",
		"description": "GTA_SA\nint font = renderCreateFont(zstring font, int height, int flags)\n",
		"prefix": "renderCreateFont"

		"scope": "source.lua"
	},
	"renderReleaseFont": {
		"body": "renderReleaseFont(${1:int font})",
		"description": "GTA_SA\nrenderReleaseFont(int font)\n",
		"prefix": "renderReleaseFont"

		"scope": "source.lua"
	},
	"renderFontDrawText": {
		"body": "renderFontDrawText(${1:int font},${2:zstring text},${3:int posX},${4:int posY},${5:int color})",
		"description": "GTA_SA\nrenderFontDrawText(int font, zstring text, int posX, int posY, int color)\n",
		"prefix": "renderFontDrawText"

		"scope": "source.lua"
	},
	"renderDrawPolygon": {
		"body": "renderDrawPolygon(${1:int posX},${2:int posY},${3:int sizeX},${4:int sizeY},${5:int corners},${6:float rotation},${7:int color})",
		"description": "GTA_SA\nrenderDrawPolygon(int posX, int posY, int sizeX, int sizeY, int corners, float rotation, int color)\n",
		"prefix": "renderDrawPolygon"

		"scope": "source.lua"
	},
	"renderLoadTextureFromFile": {
		"body": "renderLoadTextureFromFile(${1:zstring file})",
		"description": "GTA_SA\nint texture = renderLoadTextureFromFile(zstring file)\n",
		"prefix": "renderLoadTextureFromFile"

		"scope": "source.lua"
	},
	"renderReleaseTexture": {
		"body": "renderReleaseTexture(${1:int texture})",
		"description": "GTA_SA\nrenderReleaseTexture(int texture)\n",
		"prefix": "renderReleaseTexture"

		"scope": "source.lua"
	},
	"renderDrawTexture": {
		"body": "renderDrawTexture(${1:int texture},${2:int posX},${3:int posY},${4:int sizeX},${5:int sizeY},${6:float rotation},${7:int color})",
		"description": "GTA_SA\nrenderDrawTexture(int texture, int posX, int posY, int sizeX, int sizeY, float rotation, int color)\n",
		"prefix": "renderDrawTexture"

		"scope": "source.lua"
	},
	"sampSetChatString": {
		"body": "sampSetChatString(${1:int id},${2:zstring text},${3:zstring prefix},${4:int color},${5:int pcolor})",
		"description": "GTA_SA\nsampSetChatString(int id, zstring text, zstring prefix, int color, int pcolor)\n",
		"prefix": "sampSetChatString"

		"scope": "source.lua"
	},
	"sampGetChatString": {
		"body": "sampGetChatString(${1:int id})",
		"description": "GTA_SA\nzstring text, zstring prefix, int color, int pcolor = sampGetChatString(int id)\n",
		"prefix": "sampGetChatString"

		"scope": "source.lua"
	},
	"sampSetChatInputText": {
		"body": "sampSetChatInputText(${1:zstring text})",
		"description": "GTA_SA\nsampSetChatInputText(zstring text)\n",
		"prefix": "sampSetChatInputText"

		"scope": "source.lua"
	},
	"sampGetChatInputText": {
		"body": "sampGetChatInputText()",
		"description": "GTA_SA\nzstring text = sampGetChatInputText()\n",
		"prefix": "sampGetChatInputText"

		"scope": "source.lua"
	},
	"sampfuncsLog": {
		"body": "sampfuncsLog(${1:zstring msg})",
		"description": "GTA_SA\nsampfuncsLog(zstring msg)\n",
		"prefix": "sampfuncsLog"

		"scope": "source.lua"
	},
	"sampSetChatInputEnabled": {
		"body": "sampSetChatInputEnabled(${1:bool enabled})",
		"description": "GTA_SA\nsampSetChatInputEnabled(bool enabled)\n",
		"prefix": "sampSetChatInputEnabled"

		"scope": "source.lua"
	},
	"sampGetRakclientInterface": {
		"body": "sampGetRakclientInterface()",
		"description": "GTA_SA\nint rakInt = sampGetRakclientInterface()\n",
		"prefix": "sampGetRakclientInterface"

		"scope": "source.lua"
	},
	"sampGetRakpeer": {
		"body": "sampGetRakpeer()",
		"description": "GTA_SA\nint rakpeer = sampGetRakpeer()\n",
		"prefix": "sampGetRakpeer"

		"scope": "source.lua"
	},
	"sampGetRakclientFuncAddressByIndex": {
		"body": "sampGetRakclientFuncAddressByIndex(${1:int index})",
		"description": "GTA_SA\nint address = sampGetRakclientFuncAddressByIndex(int index)\n",
		"prefix": "sampGetRakclientFuncAddressByIndex"

		"scope": "source.lua"
	},
	"sampGetRpcCallbackByRpcId": {
		"body": "sampGetRpcCallbackByRpcId(${1:int index})",
		"description": "GTA_SA\nint callback = sampGetRpcCallbackByRpcId(int index)\n",
		"prefix": "sampGetRpcCallbackByRpcId"

		"scope": "source.lua"
	},
	"sampGetRpcNodeByRpcId": {
		"body": "sampGetRpcNodeByRpcId(${1:int index})",
		"description": "GTA_SA\nint node = sampGetRpcNodeByRpcId(int index)\n",
		"prefix": "sampGetRpcNodeByRpcId"

		"scope": "source.lua"
	},
	"sampGetSampInfoPtr": {
		"body": "sampGetSampInfoPtr()",
		"description": "GTA_SA\nint sampPtr = sampGetSampInfoPtr()\n",
		"prefix": "sampGetSampInfoPtr"

		"scope": "source.lua"
	},
	"dxutCreateDialog": {
		"body": "dxutCreateDialog(${1:zstring name})",
		"description": "GTA_SA\nDxutDialog dialog = dxutCreateDialog(zstring name)\n",
		"prefix": "dxutCreateDialog"

		"scope": "source.lua"
	},
	"dxutPopEvent": {
		"body": "dxutPopEvent(${1:DxutDialog dialog})",
		"description": "GTA_SA\nbool result, int event, int id = dxutPopEvent(DxutDialog dialog)\n",
		"prefix": "dxutPopEvent"

		"scope": "source.lua"
	},
	"dxutAddButton": {
		"body": "dxutAddButton(${1:DxutDialog dialog},${2:int id},${3:zstring text},${4:int posX},${5:int posY},${6:int sizeX},${7:int sizeY})",
		"description": "GTA_SA\ndxutAddButton(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddButton"

		"scope": "source.lua"
	},
	"dxutAddCheckbox": {
		"body": "dxutAddCheckbox(${1:DxutDialog dialog},${2:int id},${3:zstring text},${4:int posX},${5:int posY},${6:int sizeX},${7:int sizeY})",
		"description": "GTA_SA\ndxutAddCheckbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddCheckbox"

		"scope": "source.lua"
	},
	"dxutSetDialogPos": {
		"body": "dxutSetDialogPos(${1:DxutDialog dialog},${2:int posX},${3:int posY},${4:int sizeX},${5:int sizeY})",
		"description": "GTA_SA\ndxutSetDialogPos(DxutDialog dialog, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutSetDialogPos"

		"scope": "source.lua"
	},
	"dxutGetDialogPosAndSize": {
		"body": "dxutGetDialogPosAndSize(${1:DxutDialog dialog})",
		"description": "GTA_SA\nint posX, int posY, int sizeX, int sizeY = dxutGetDialogPosAndSize(DxutDialog dialog)\n",
		"prefix": "dxutGetDialogPosAndSize"

		"scope": "source.lua"
	},
	"dxutSetDialogVisible": {
		"body": "dxutSetDialogVisible(${1:DxutDialog dialog},${2:bool visible})",
		"description": "GTA_SA\ndxutSetDialogVisible(DxutDialog dialog, bool visible)\n",
		"prefix": "dxutSetDialogVisible"

		"scope": "source.lua"
	},
	"dxutIsDialogVisible": {
		"body": "dxutIsDialogVisible(${1:DxutDialog dialog})",
		"description": "GTA_SA\nbool result = dxutIsDialogVisible(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogVisible"

		"scope": "source.lua"
	},
	"dxutAddEditbox": {
		"body": "dxutAddEditbox(${1:DxutDialog dialog},${2:int id},${3:zstring text},${4:int posX},${5:int posY},${6:int sizeX},${7:int sizeY})",
		"description": "GTA_SA\ndxutAddEditbox(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddEditbox"

		"scope": "source.lua"
	},
	"dxutGetControlText": {
		"body": "dxutGetControlText(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nzstring text = dxutGetControlText(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlText"

		"scope": "source.lua"
	},
	"raknetSendRpc": {
		"body": "raknetSendRpc(${1:int rpc},${2:Bitstream bs})",
		"description": "GTA_SA\nraknetSendRpc(int rpc, Bitstream bs)\n",
		"prefix": "raknetSendRpc"

		"scope": "source.lua"
	},
	"raknetSendBitStream": {
		"body": "raknetSendBitStream(${1:Bitstream bs})",
		"description": "GTA_SA\nraknetSendBitStream(Bitstream bs)\n",
		"prefix": "raknetSendBitStream"

		"scope": "source.lua"
	},
	"sampIsCursorActive": {
		"body": "sampIsCursorActive()",
		"description": "GTA_SA\nbool result = sampIsCursorActive()\n",
		"prefix": "sampIsCursorActive"

		"scope": "source.lua"
	},
	"sampSetCursorMode": {
		"body": "sampSetCursorMode(${1:int mode})",
		"description": "GTA_SA\nsampSetCursorMode(int mode)\n",
		"prefix": "sampSetCursorMode"

		"scope": "source.lua"
	},
	"sampGetCursorMode": {
		"body": "sampGetCursorMode()",
		"description": "GTA_SA\nint mode = sampGetCursorMode()\n",
		"prefix": "sampGetCursorMode"

		"scope": "source.lua"
	},
	"dxutSetControlVisible": {
		"body": "dxutSetControlVisible(${1:DxutDialog dialog},${2:int id},${3:bool visible})",
		"description": "GTA_SA\ndxutSetControlVisible(DxutDialog dialog, int id, bool visible)\n",
		"prefix": "dxutSetControlVisible"

		"scope": "source.lua"
	},
	"dxutAddStatic": {
		"body": "dxutAddStatic(${1:DxutDialog dialog},${2:int id},${3:zstring text},${4:int posX},${5:int posY},${6:int sizeX},${7:int sizeY})",
		"description": "GTA_SA\ndxutAddStatic(DxutDialog dialog, int id, zstring text, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddStatic"

		"scope": "source.lua"
	},
	"dxutIsCheckboxChecked": {
		"body": "dxutIsCheckboxChecked(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nbool result = dxutIsCheckboxChecked(DxutDialog dialog, int id)\n",
		"prefix": "dxutIsCheckboxChecked"

		"scope": "source.lua"
	},
	"dxutSetDialogBackgroundColor": {
		"body": "dxutSetDialogBackgroundColor(${1:DxutDialog dialog},${2:int color})",
		"description": "GTA_SA\ndxutSetDialogBackgroundColor(DxutDialog dialog, int color)\n",
		"prefix": "dxutSetDialogBackgroundColor"

		"scope": "source.lua"
	},
	"dxutSetControlText": {
		"body": "dxutSetControlText(${1:DxutDialog dialog},${2:int id},${3:zstring text})",
		"description": "GTA_SA\ndxutSetControlText(DxutDialog dialog, int id, zstring text)\n",
		"prefix": "dxutSetControlText"

		"scope": "source.lua"
	},
	"dxutControlIsVisible": {
		"body": "dxutControlIsVisible(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nbool result = dxutControlIsVisible(DxutDialog dialog, int id)\n",
		"prefix": "dxutControlIsVisible"

		"scope": "source.lua"
	},
	"dxutAddSlider": {
		"body": "dxutAddSlider(${1:DxutDialog dialog},${2:int id},${3:int posX},${4:int posY},${5:int sizeX},${6:int sizeY},${7:int max})",
		"description": "GTA_SA\ndxutAddSlider(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY, int max)\n",
		"prefix": "dxutAddSlider"

		"scope": "source.lua"
	},
	"dxutGetSliderValue": {
		"body": "dxutGetSliderValue(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nint value = dxutGetSliderValue(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetSliderValue"

		"scope": "source.lua"
	},
	"dxutSetSliderValue": {
		"body": "dxutSetSliderValue(${1:DxutDialog dialog},${2:int id},${3:int value})",
		"description": "GTA_SA\ndxutSetSliderValue(DxutDialog dialog, int id, int value)\n",
		"prefix": "dxutSetSliderValue"

		"scope": "source.lua"
	},
	"dxutAddListbox": {
		"body": "dxutAddListbox(${1:DxutDialog dialog},${2:int id},${3:int posX},${4:int posY},${5:int sizeX},${6:int sizeY})",
		"description": "GTA_SA\ndxutAddListbox(DxutDialog dialog, int id, int posX, int posY, int sizeX, int sizeY)\n",
		"prefix": "dxutAddListbox"

		"scope": "source.lua"
	},
	"dxutListboxInsertItem": {
		"body": "dxutListboxInsertItem(${1:DxutDialog dialog},${2:int id},${3:zstring element},${4:int data},${5:int after})",
		"description": "GTA_SA\ndxutListboxInsertItem(DxutDialog dialog, int id, zstring element, int data, int after)\n",
		"prefix": "dxutListboxInsertItem"

		"scope": "source.lua"
	},
	"dxutGetListboxSelectedItemAndCount": {
		"body": "dxutGetListboxSelectedItemAndCount(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nint element, int count = dxutGetListboxSelectedItemAndCount(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetListboxSelectedItemAndCount"

		"scope": "source.lua"
	},
	"dxutListboxDeleteItem": {
		"body": "dxutListboxDeleteItem(${1:DxutDialog dialog},${2:int id},${3:int element})",
		"description": "GTA_SA\ndxutListboxDeleteItem(DxutDialog dialog, int id, int element)\n",
		"prefix": "dxutListboxDeleteItem"

		"scope": "source.lua"
	},
	"dxutGetListboxItemTextAndData": {
		"body": "dxutGetListboxItemTextAndData(${1:DxutDialog dialog},${2:int id},${3:int element})",
		"description": "GTA_SA\nzstring text, int data = dxutGetListboxItemTextAndData(DxutDialog dialog, int id, int element)\n",
		"prefix": "dxutGetListboxItemTextAndData"

		"scope": "source.lua"
	},
	"dxutCheckboxSetChecked": {
		"body": "dxutCheckboxSetChecked(${1:DxutDialog dialog},${2:int id},${3:bool checked})",
		"description": "GTA_SA\ndxutCheckboxSetChecked(DxutDialog dialog, int id, bool checked)\n",
		"prefix": "dxutCheckboxSetChecked"

		"scope": "source.lua"
	},
	"dxutEnableDialogCaption": {
		"body": "dxutEnableDialogCaption(${1:DxutDialog dialog},${2:int enable})",
		"description": "GTA_SA\ndxutEnableDialogCaption(DxutDialog dialog, int enable)\n",
		"prefix": "dxutEnableDialogCaption"

		"scope": "source.lua"
	},
	"dxutIsDialogCaptionEnabled": {
		"body": "dxutIsDialogCaptionEnabled(${1:DxutDialog dialog})",
		"description": "GTA_SA\nbool result = dxutIsDialogCaptionEnabled(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogCaptionEnabled"

		"scope": "source.lua"
	},
	"dxutSetDialogMinimized": {
		"body": "dxutSetDialogMinimized(${1:DxutDialog dialog},${2:bool minimized})",
		"description": "GTA_SA\ndxutSetDialogMinimized(DxutDialog dialog, bool minimized)\n",
		"prefix": "dxutSetDialogMinimized"

		"scope": "source.lua"
	},
	"dxutIsDialogMinimized": {
		"body": "dxutIsDialogMinimized(${1:DxutDialog dialog})",
		"description": "GTA_SA\nbool result = dxutIsDialogMinimized(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogMinimized"

		"scope": "source.lua"
	},
	"dxutDeleteControl": {
		"body": "dxutDeleteControl(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\ndxutDeleteControl(DxutDialog dialog, int id)\n",
		"prefix": "dxutDeleteControl"

		"scope": "source.lua"
	},
	"dxutDeleteDialog": {
		"body": "dxutDeleteDialog(${1:DxutDialog dialog})",
		"description": "GTA_SA\ndxutDeleteDialog(DxutDialog dialog)\n",
		"prefix": "dxutDeleteDialog"

		"scope": "source.lua"
	},
	"dxutSetFocusOnControl": {
		"body": "dxutSetFocusOnControl(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\ndxutSetFocusOnControl(DxutDialog dialog, int id)\n",
		"prefix": "dxutSetFocusOnControl"

		"scope": "source.lua"
	},
	"dxutSetControlSize": {
		"body": "dxutSetControlSize(${1:DxutDialog dialog},${2:int id},${3:int sizeX},${4:int sizeY})",
		"description": "GTA_SA\ndxutSetControlSize(DxutDialog dialog, int id, int sizeX, int sizeY)\n",
		"prefix": "dxutSetControlSize"

		"scope": "source.lua"
	},
	"dxutGetControlSize": {
		"body": "dxutGetControlSize(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nint sizeX, int sizeY = dxutGetControlSize(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlSize"

		"scope": "source.lua"
	},
	"dxutSetControlPos": {
		"body": "dxutSetControlPos(${1:DxutDialog dialog},${2:int id},${3:int posX},${4:int posY})",
		"description": "GTA_SA\ndxutSetControlPos(DxutDialog dialog, int id, int posX, int posY)\n",
		"prefix": "dxutSetControlPos"

		"scope": "source.lua"
	},
	"dxutGetControlPos": {
		"body": "dxutGetControlPos(${1:DxutDialog dialog},${2:int id})",
		"description": "GTA_SA\nint posX, int posY = dxutGetControlPos(DxutDialog dialog, int id)\n",
		"prefix": "dxutGetControlPos"

		"scope": "source.lua"
	},
	"dxutSetCheckboxColor": {
		"body": "dxutSetCheckboxColor(${1:DxutDialog dialog},${2:int id},${3:int color})",
		"description": "GTA_SA\ndxutSetCheckboxColor(DxutDialog dialog, int id, int color)\n",
		"prefix": "dxutSetCheckboxColor"

		"scope": "source.lua"
	},
	"dxutIsDialogExists": {
		"body": "dxutIsDialogExists(${1:DxutDialog dialog})",
		"description": "GTA_SA\nbool result = dxutIsDialogExists(DxutDialog dialog)\n",
		"prefix": "dxutIsDialogExists"

		"scope": "source.lua"
	},
	"sampGetServerSettingsPtr": {
		"body": "sampGetServerSettingsPtr()",
		"description": "GTA_SA\nint settings = sampGetServerSettingsPtr()\n",
		"prefix": "sampGetServerSettingsPtr"

		"scope": "source.lua"
	},
	"sampGetSampPoolsPtr": {
		"body": "sampGetSampPoolsPtr()",
		"description": "GTA_SA\nint pools = sampGetSampPoolsPtr()\n",
		"prefix": "sampGetSampPoolsPtr"

		"scope": "source.lua"
	},
	"sampGetChatInfoPtr": {
		"body": "sampGetChatInfoPtr()",
		"description": "GTA_SA\nint chat = sampGetChatInfoPtr()\n",
		"prefix": "sampGetChatInfoPtr"

		"scope": "source.lua"
	},
	"sampGetInputInfoPtr": {
		"body": "sampGetInputInfoPtr()",
		"description": "GTA_SA\nint input = sampGetInputInfoPtr()\n",
		"prefix": "sampGetInputInfoPtr"

		"scope": "source.lua"
	},
	"sampGetDialogInfoPtr": {
		"body": "sampGetDialogInfoPtr()",
		"description": "GTA_SA\nint dialogInfo = sampGetDialogInfoPtr()\n",
		"prefix": "sampGetDialogInfoPtr"

		"scope": "source.lua"
	},
	"sampGetKillInfoPtr": {
		"body": "sampGetKillInfoPtr()",
		"description": "GTA_SA\nint kill = sampGetKillInfoPtr()\n",
		"prefix": "sampGetKillInfoPtr"

		"scope": "source.lua"
	},
	"sampGetMiscInfoPtr": {
		"body": "sampGetMiscInfoPtr()",
		"description": "GTA_SA\nint misc = sampGetMiscInfoPtr()\n",
		"prefix": "sampGetMiscInfoPtr"

		"scope": "source.lua"
	},
	"sampGetTextdrawPoolPtr": {
		"body": "sampGetTextdrawPoolPtr()",
		"description": "GTA_SA\nint tdpool = sampGetTextdrawPoolPtr()\n",
		"prefix": "sampGetTextdrawPoolPtr"

		"scope": "source.lua"
	},
	"sampGetObjectPoolPtr": {
		"body": "sampGetObjectPoolPtr()",
		"description": "GTA_SA\nint objpool = sampGetObjectPoolPtr()\n",
		"prefix": "sampGetObjectPoolPtr"

		"scope": "source.lua"
	},
	"sampGetGangzonePoolPtr": {
		"body": "sampGetGangzonePoolPtr()",
		"description": "GTA_SA\nint gzpool = sampGetGangzonePoolPtr()\n",
		"prefix": "sampGetGangzonePoolPtr"

		"scope": "source.lua"
	},
	"sampGetTextlabelPoolPtr": {
		"body": "sampGetTextlabelPoolPtr()",
		"description": "GTA_SA\nint tlabelpool = sampGetTextlabelPoolPtr()\n",
		"prefix": "sampGetTextlabelPoolPtr"

		"scope": "source.lua"
	},
	"sampGetPlayerPoolPtr": {
		"body": "sampGetPlayerPoolPtr()",
		"description": "GTA_SA\nint plpool = sampGetPlayerPoolPtr()\n",
		"prefix": "sampGetPlayerPoolPtr"

		"scope": "source.lua"
	},
	"sampGetVehiclePoolPtr": {
		"body": "sampGetVehiclePoolPtr()",
		"description": "GTA_SA\nint vehpool = sampGetVehiclePoolPtr()\n",
		"prefix": "sampGetVehiclePoolPtr"

		"scope": "source.lua"
	},
	"sampGetPickupPoolPtr": {
		"body": "sampGetPickupPoolPtr()",
		"description": "GTA_SA\nint pupool = sampGetPickupPoolPtr()\n",
		"prefix": "sampGetPickupPoolPtr"

		"scope": "source.lua"
	},
	"sampStorePlayerOnfootData": {
		"body": "sampStorePlayerOnfootData(${1:int id},${2:int data})",
		"description": "GTA_SA\nsampStorePlayerOnfootData(int id, int data)\n",
		"prefix": "sampStorePlayerOnfootData"

		"scope": "source.lua"
	},
	"sampStorePlayerIncarData": {
		"body": "sampStorePlayerIncarData(${1:int id},${2:int data})",
		"description": "GTA_SA\nsampStorePlayerIncarData(int id, int data)\n",
		"prefix": "sampStorePlayerIncarData"

		"scope": "source.lua"
	},
	"sampStorePlayerPassengerData": {
		"body": "sampStorePlayerPassengerData(${1:int id},${2:int data})",
		"description": "GTA_SA\nsampStorePlayerPassengerData(int id, int data)\n",
		"prefix": "sampStorePlayerPassengerData"

		"scope": "source.lua"
	},
	"sampStorePlayerTrailerData": {
		"body": "sampStorePlayerTrailerData(${1:int id},${2:int data})",
		"description": "GTA_SA\nsampStorePlayerTrailerData(int id, int data)\n",
		"prefix": "sampStorePlayerTrailerData"

		"scope": "source.lua"
	},
	"sampStorePlayerAimData": {
		"body": "sampStorePlayerAimData(${1:int id},${2:int data})",
		"description": "GTA_SA\nsampStorePlayerAimData(int id, int data)\n",
		"prefix": "sampStorePlayerAimData"

		"scope": "source.lua"
	},
	"sampSendRconCommand": {
		"body": "sampSendRconCommand(${1:zstring cmd})",
		"description": "GTA_SA\nsampSendRconCommand(zstring cmd)\n",
		"prefix": "sampSendRconCommand"

		"scope": "source.lua"
	},
	"sampSendOnfootData": {
		"body": "sampSendOnfootData(${1:int data})",
		"description": "GTA_SA\nsampSendOnfootData(int data)\n",
		"prefix": "sampSendOnfootData"

		"scope": "source.lua"
	},
	"sampSendIncarData": {
		"body": "sampSendIncarData(${1:int data})",
		"description": "GTA_SA\nsampSendIncarData(int data)\n",
		"prefix": "sampSendIncarData"

		"scope": "source.lua"
	},
	"sampSendPassengerData": {
		"body": "sampSendPassengerData(${1:int data})",
		"description": "GTA_SA\nsampSendPassengerData(int data)\n",
		"prefix": "sampSendPassengerData"

		"scope": "source.lua"
	},
	"sampSendAimData": {
		"body": "sampSendAimData(${1:int data})",
		"description": "GTA_SA\nsampSendAimData(int data)\n",
		"prefix": "sampSendAimData"

		"scope": "source.lua"
	},
	"sampSendBulletData": {
		"body": "sampSendBulletData(${1:int data})",
		"description": "GTA_SA\nsampSendBulletData(int data)\n",
		"prefix": "sampSendBulletData"

		"scope": "source.lua"
	},
	"sampSendTrailerData": {
		"body": "sampSendTrailerData(${1:int data})",
		"description": "GTA_SA\nsampSendTrailerData(int data)\n",
		"prefix": "sampSendTrailerData"

		"scope": "source.lua"
	},
	"sampSendUnoccupiedData": {
		"body": "sampSendUnoccupiedData(${1:int data})",
		"description": "GTA_SA\nsampSendUnoccupiedData(int data)\n",
		"prefix": "sampSendUnoccupiedData"

		"scope": "source.lua"
	},
	"sampSendSpectatorData": {
		"body": "sampSendSpectatorData(${1:int data})",
		"description": "GTA_SA\nsampSendSpectatorData(int data)\n",
		"prefix": "sampSendSpectatorData"

		"scope": "source.lua"
	},
	"sampSendClickPlayer": {
		"body": "sampSendClickPlayer(${1:int id},${2:int source})",
		"description": "GTA_SA\nsampSendClickPlayer(int id, int source)\n",
		"prefix": "sampSendClickPlayer"

		"scope": "source.lua"
	},
	"sampSendDialogResponse": {
		"body": "sampSendDialogResponse(${1:int id},${2:int button},${3:int listitem},${4:zstring input})",
		"description": "GTA_SA\nsampSendDialogResponse(int id, int button, int listitem, zstring input)\n",
		"prefix": "sampSendDialogResponse"

		"scope": "source.lua"
	},
	"sampSendClickTextdraw": {
		"body": "sampSendClickTextdraw(${1:int id})",
		"description": "GTA_SA\nsampSendClickTextdraw(int id)\n",
		"prefix": "sampSendClickTextdraw"

		"scope": "source.lua"
	},
	"sampSendGiveDamage": {
		"body": "sampSendGiveDamage(${1:int id},${2:float damage},${3:int weapon},${4:int bodypart})",
		"description": "GTA_SA\nsampSendGiveDamage(int id, float damage, int weapon, int bodypart)\n",
		"prefix": "sampSendGiveDamage"

		"scope": "source.lua"
	},
	"sampSendTakeDamage": {
		"body": "sampSendTakeDamage(${1:int id},${2:float damage},${3:int weapon},${4:int bodypart})",
		"description": "GTA_SA\nsampSendTakeDamage(int id, float damage, int weapon, int bodypart)\n",
		"prefix": "sampSendTakeDamage"

		"scope": "source.lua"
	},
	"sampSendEditObject": {
		"body": "sampSendEditObject(${1:int id},${2:Object object},${3:int response},${4:float posX},${5:float posY},${6:float posZ},${7:float rotX},${8:float rotY},${9:float rotZ})",
		"description": "GTA_SA\nsampSendEditObject(int id, Object object, int response, float posX, float posY, float posZ, float rotX, float rotY, float rotZ)\n",
		"prefix": "sampSendEditObject"

		"scope": "source.lua"
	},
	"sampSendEditAttachedObject": {
		"body": "sampSendEditAttachedObject(${1:int response},${2:int index},${3:int model},${4:int bone},${5:float offsetX},${6:float offsetY},${7:float offsetZ},${8:float rotX},${9:float rotY},${10:float rotZ},${11:float scaleX},${12:float scaleY},${13:float scaleZ})",
		"description": "GTA_SA\nsampSendEditAttachedObject(int response, int index, int model, int bone, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ)\n",
		"prefix": "sampSendEditAttachedObject"

		"scope": "source.lua"
	},
	"sampSendInteriorChange": {
		"body": "sampSendInteriorChange(${1:int id})",
		"description": "GTA_SA\nsampSendInteriorChange(int id)\n",
		"prefix": "sampSendInteriorChange"

		"scope": "source.lua"
	},
	"sampSendRequestSpawn": {
		"body": "sampSendRequestSpawn()",
		"description": "GTA_SA\nsampSendRequestSpawn()\n",
		"prefix": "sampSendRequestSpawn"

		"scope": "source.lua"
	},
	"sampSendPickedUpPickup": {
		"body": "sampSendPickedUpPickup(${1:int id})",
		"description": "GTA_SA\nsampSendPickedUpPickup(int id)\n",
		"prefix": "sampSendPickedUpPickup"

		"scope": "source.lua"
	},
	"sampSendMenuSelectRow": {
		"body": "sampSendMenuSelectRow(${1:int id})",
		"description": "GTA_SA\nsampSendMenuSelectRow(int id)\n",
		"prefix": "sampSendMenuSelectRow"

		"scope": "source.lua"
	},
	"sampSendMenuQuit": {
		"body": "sampSendMenuQuit()",
		"description": "GTA_SA\nsampSendMenuQuit()\n",
		"prefix": "sampSendMenuQuit"

		"scope": "source.lua"
	},
	"sampSendVehicleDestroyed": {
		"body": "sampSendVehicleDestroyed(${1:int id})",
		"description": "GTA_SA\nsampSendVehicleDestroyed(int id)\n",
		"prefix": "sampSendVehicleDestroyed"

		"scope": "source.lua"
	},
	"sampIsScoreboardOpen": {
		"body": "sampIsScoreboardOpen()",
		"description": "GTA_SA\nbool result = sampIsScoreboardOpen()\n",
		"prefix": "sampIsScoreboardOpen"

		"scope": "source.lua"
	},
	"sampToggleScoreboard": {
		"body": "sampToggleScoreboard(${1:bool show})",
		"description": "GTA_SA\nsampToggleScoreboard(bool show)\n",
		"prefix": "sampToggleScoreboard"

		"scope": "source.lua"
	},
	"sampGetDialogText": {
		"body": "sampGetDialogText()",
		"description": "GTA_SA\nzstring text = sampGetDialogText()\n",
		"prefix": "sampGetDialogText"

		"scope": "source.lua"
	},
	"sampGetDialogCaption": {
		"body": "sampGetDialogCaption()",
		"description": "GTA_SA\nzstring caption = sampGetDialogCaption()\n",
		"prefix": "sampGetDialogCaption"

		"scope": "source.lua"
	},
	"sampSetDialogClientside": {
		"body": "sampSetDialogClientside(${1:bool clientside})",
		"description": "GTA_SA\nsampSetDialogClientside(bool clientside)\n",
		"prefix": "sampSetDialogClientside"

		"scope": "source.lua"
	},
	"sampIsDialogClientside": {
		"body": "sampIsDialogClientside()",
		"description": "GTA_SA\nbool result = sampIsDialogClientside()\n",
		"prefix": "sampIsDialogClientside"

		"scope": "source.lua"
	},
	"sampIsChatVisible": {
		"body": "sampIsChatVisible()",
		"description": "GTA_SA\nbool result = sampIsChatVisible()\n",
		"prefix": "sampIsChatVisible"

		"scope": "source.lua"
	},
	"sampGetChatDisplayMode": {
		"body": "sampGetChatDisplayMode()",
		"description": "GTA_SA\nint mode = sampGetChatDisplayMode()\n",
		"prefix": "sampGetChatDisplayMode"

		"scope": "source.lua"
	},
	"sampSetChatDisplayMode": {
		"body": "sampSetChatDisplayMode(${1:int mode})",
		"description": "GTA_SA\nsampSetChatDisplayMode(int mode)\n",
		"prefix": "sampSetChatDisplayMode"

		"scope": "source.lua"
	},
	"pauseScmThread": {
		"body": "pauseScmThread(${1:int thread})",
		"description": "GTA_SA\npauseScmThread(int thread)\n",
		"prefix": "pauseScmThread"

		"scope": "source.lua"
	},
	"resumeScmThread": {
		"body": "resumeScmThread(${1:int thread})",
		"description": "GTA_SA\nresumeScmThread(int thread)\n",
		"prefix": "resumeScmThread"

		"scope": "source.lua"
	},
	"raknetBitStreamReadBool": {
		"body": "raknetBitStreamReadBool(${1:Bitstream bs})",
		"description": "GTA_SA\nbool value = raknetBitStreamReadBool(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadBool"

		"scope": "source.lua"
	},
	"raknetBitStreamReadInt8": {
		"body": "raknetBitStreamReadInt8(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamReadInt8(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt8"

		"scope": "source.lua"
	},
	"raknetBitStreamReadInt16": {
		"body": "raknetBitStreamReadInt16(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamReadInt16(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt16"

		"scope": "source.lua"
	},
	"raknetBitStreamReadInt32": {
		"body": "raknetBitStreamReadInt32(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamReadInt32(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadInt32"

		"scope": "source.lua"
	},
	"raknetBitStreamReadFloat": {
		"body": "raknetBitStreamReadFloat(${1:Bitstream bs})",
		"description": "GTA_SA\nfloat value = raknetBitStreamReadFloat(Bitstream bs)\n",
		"prefix": "raknetBitStreamReadFloat"

		"scope": "source.lua"
	},
	"raknetBitStreamReadBuffer": {
		"body": "raknetBitStreamReadBuffer(${1:Bitstream bs},${2:int dest},${3:int size})",
		"description": "GTA_SA\nraknetBitStreamReadBuffer(Bitstream bs, int dest, int size)\n",
		"prefix": "raknetBitStreamReadBuffer"

		"scope": "source.lua"
	},
	"raknetBitStreamReadString": {
		"body": "raknetBitStreamReadString(${1:Bitstream bs},${2:int size})",
		"description": "GTA_SA\nstring value = raknetBitStreamReadString(Bitstream bs, int size)\n",
		"prefix": "raknetBitStreamReadString"

		"scope": "source.lua"
	},
	"raknetBitStreamResetReadPointer": {
		"body": "raknetBitStreamResetReadPointer(${1:Bitstream bs})",
		"description": "GTA_SA\nraknetBitStreamResetReadPointer(Bitstream bs)\n",
		"prefix": "raknetBitStreamResetReadPointer"

		"scope": "source.lua"
	},
	"raknetBitStreamResetWritePointer": {
		"body": "raknetBitStreamResetWritePointer(${1:Bitstream bs})",
		"description": "GTA_SA\nraknetBitStreamResetWritePointer(Bitstream bs)\n",
		"prefix": "raknetBitStreamResetWritePointer"

		"scope": "source.lua"
	},
	"raknetBitStreamIgnoreBits": {
		"body": "raknetBitStreamIgnoreBits(${1:Bitstream bs},${2:int amount})",
		"description": "GTA_SA\nraknetBitStreamIgnoreBits(Bitstream bs, int amount)\n",
		"prefix": "raknetBitStreamIgnoreBits"

		"scope": "source.lua"
	},
	"raknetBitStreamSetWriteOffset": {
		"body": "raknetBitStreamSetWriteOffset(${1:Bitstream bs},${2:int offset})",
		"description": "GTA_SA\nraknetBitStreamSetWriteOffset(Bitstream bs, int offset)\n",
		"prefix": "raknetBitStreamSetWriteOffset"

		"scope": "source.lua"
	},
	"raknetBitStreamSetReadOffset": {
		"body": "raknetBitStreamSetReadOffset(${1:Bitstream bs},${2:int offset})",
		"description": "GTA_SA\nraknetBitStreamSetReadOffset(Bitstream bs, int offset)\n",
		"prefix": "raknetBitStreamSetReadOffset"

		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBitsUsed": {
		"body": "raknetBitStreamGetNumberOfBitsUsed(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetNumberOfBitsUsed(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfBitsUsed"

		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfBytesUsed": {
		"body": "raknetBitStreamGetNumberOfBytesUsed(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetNumberOfBytesUsed(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfBytesUsed"

		"scope": "source.lua"
	},
	"raknetBitStreamGetNumberOfUnreadBits": {
		"body": "raknetBitStreamGetNumberOfUnreadBits(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetNumberOfUnreadBits(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetNumberOfUnreadBits"

		"scope": "source.lua"
	},
	"raknetBitStreamGetWriteOffset": {
		"body": "raknetBitStreamGetWriteOffset(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetWriteOffset(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetWriteOffset"

		"scope": "source.lua"
	},
	"raknetBitStreamGetReadOffset": {
		"body": "raknetBitStreamGetReadOffset(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetReadOffset(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetReadOffset"

		"scope": "source.lua"
	},
	"raknetBitStreamGetDataPtr": {
		"body": "raknetBitStreamGetDataPtr(${1:Bitstream bs})",
		"description": "GTA_SA\nint value = raknetBitStreamGetDataPtr(Bitstream bs)\n",
		"prefix": "raknetBitStreamGetDataPtr"

		"scope": "source.lua"
	},
	"raknetBitStreamDecodeString": {
		"body": "raknetBitStreamDecodeString(${1:Bitstream bs},${2:int size})",
		"description": "GTA_SA\nzstring string = raknetBitStreamDecodeString(Bitstream bs, int size)\n",
		"prefix": "raknetBitStreamDecodeString"

		"scope": "source.lua"
	},
	"raknetBitStreamEncodeString": {
		"body": "raknetBitStreamEncodeString(${1:Bitstream bs},${2:zstring string})",
		"description": "GTA_SA\nraknetBitStreamEncodeString(Bitstream bs, zstring string)\n",
		"prefix": "raknetBitStreamEncodeString"

		"scope": "source.lua"
	},
	"raknetEmulRpcReceiveBitStream": {
		"body": "raknetEmulRpcReceiveBitStream(${1:int rpc},${2:Bitstream bs})",
		"description": "GTA_SA\nraknetEmulRpcReceiveBitStream(int rpc, Bitstream bs)\n",
		"prefix": "raknetEmulRpcReceiveBitStream"

		"scope": "source.lua"
	},
	"raknetEmulPacketReceiveBitStream": {
		"body": "raknetEmulPacketReceiveBitStream(${1:int packet},${2:Bitstream bs})",
		"description": "GTA_SA\nraknetEmulPacketReceiveBitStream(int packet, Bitstream bs)\n",
		"prefix": "raknetEmulPacketReceiveBitStream"

		"scope": "source.lua"
	},
	"raknetGetRpcName": {
		"body": "raknetGetRpcName(${1:int rpc})",
		"description": "GTA_SA\nzstring name = raknetGetRpcName(int rpc)\n",
		"prefix": "raknetGetRpcName"

		"scope": "source.lua"
	},
	"raknetGetPacketName": {
		"body": "raknetGetPacketName(${1:int packet})",
		"description": "GTA_SA\nzstring name = raknetGetPacketName(int packet)\n",
		"prefix": "raknetGetPacketName"

		"scope": "source.lua"
	},
	"setSampfuncsGlobalVar": {
		"body": "setSampfuncsGlobalVar(${1:zstring var},${2:int value})",
		"description": "GTA_SA\nbool result = setSampfuncsGlobalVar(zstring var, int value)\n",
		"prefix": "setSampfuncsGlobalVar"

		"scope": "source.lua"
	},
	"getSampfuncsGlobalVar": {
		"body": "getSampfuncsGlobalVar(${1:zstring var})",
		"description": "GTA_SA\nbool result, int value = getSampfuncsGlobalVar(zstring var)\n",
		"prefix": "getSampfuncsGlobalVar"

		"scope": "source.lua"
	},
	"renderBegin": {
		"body": "renderBegin(${1:int type})",
		"description": "GTA_SA\nrenderBegin(int type)\n",
		"prefix": "renderBegin"

		"scope": "source.lua"
	},
	"renderEnd": {
		"body": "renderEnd()",
		"description": "GTA_SA\nrenderEnd()\n",
		"prefix": "renderEnd"

		"scope": "source.lua"
	},
	"renderColor": {
		"body": "renderColor(${1:int color})",
		"description": "GTA_SA\nrenderColor(int color)\n",
		"prefix": "renderColor"

		"scope": "source.lua"
	},
	"renderVertex": {
		"body": "renderVertex(${1:float vX},${2:float vY})",
		"description": "GTA_SA\nrenderVertex(float vX, float vY)\n",
		"prefix": "renderVertex"

		"scope": "source.lua"
	},
	"renderSetTexCoord": {
		"body": "renderSetTexCoord(${1:float posX},${2:float posY})",
		"description": "GTA_SA\nrenderSetTexCoord(float posX, float posY)\n",
		"prefix": "renderSetTexCoord"

		"scope": "source.lua"
	},
	"renderBindTexture": {
		"body": "renderBindTexture(${1:int texture})",
		"description": "GTA_SA\nrenderBindTexture(int texture)\n",
		"prefix": "renderBindTexture"

		"scope": "source.lua"
	},
	"renderGetTextureStruct": {
		"body": "renderGetTextureStruct(${1:int texture})",
		"description": "GTA_SA\nint struct = renderGetTextureStruct(int texture)\n",
		"prefix": "renderGetTextureStruct"

		"scope": "source.lua"
	},
	"renderGetTextureSprite": {
		"body": "renderGetTextureSprite(${1:int texture})",
		"description": "GTA_SA\nint sprite = renderGetTextureSprite(int texture)\n",
		"prefix": "renderGetTextureSprite"

		"scope": "source.lua"
	},
	"renderGetTextureSize": {
		"body": "renderGetTextureSize(${1:int texture})",
		"description": "GTA_SA\nint sizeX, int sizeY = renderGetTextureSize(int texture)\n",
		"prefix": "renderGetTextureSize"

		"scope": "source.lua"
	},
	"renderSetRenderState": {
		"body": "renderSetRenderState(${1:int type},${2:int state})",
		"description": "GTA_SA\nrenderSetRenderState(int type, int state)\n",
		"prefix": "renderSetRenderState"

		"scope": "source.lua"
	},
	"sampCreate3dTextEx": {
		"body": "sampCreate3dTextEx(${1:int id},${2:zstring text},${3:int color},${4:float posX},${5:float posY},${6:float posZ},${7:float distance},${8:bool ignoreWalls},${9:int playerId},${10:int vehicleId})",
		"description": "GTA_SA\nsampCreate3dTextEx(int id, zstring text, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId)\n",
		"prefix": "sampCreate3dTextEx"

		"scope": "source.lua"
	},
	"sampGet3dTextInfoById": {
		"body": "sampGet3dTextInfoById(${1:int id})",
		"description": "GTA_SA\nzstring string, int color, float posX, float posY, float posZ, float distance, bool ignoreWalls, int playerId, int vehicleId = sampGet3dTextInfoById(int id)\n",
		"prefix": "sampGet3dTextInfoById"

		"scope": "source.lua"
	},
	"sampSet3dTextString": {
		"body": "sampSet3dTextString(${1:int id},${2:zstring text})",
		"description": "GTA_SA\nsampSet3dTextString(int id, zstring text)\n",
		"prefix": "sampSet3dTextString"

		"scope": "source.lua"
	},
	"sampTextdrawCreate": {
		"body": "sampTextdrawCreate(${1:int id},${2:zstring text},${3:float posX},${4:float posY})",
		"description": "GTA_SA\nsampTextdrawCreate(int id, zstring text, float posX, float posY)\n",
		"prefix": "sampTextdrawCreate"

		"scope": "source.lua"
	},
	"sampTextdrawSetBoxColorAndSize": {
		"body": "sampTextdrawSetBoxColorAndSize(${1:int id},${2:int box},${3:int color},${4:float sizeX},${5:float sizeY})",
		"description": "GTA_SA\nsampTextdrawSetBoxColorAndSize(int id, int box, int color, float sizeX, float sizeY)\n",
		"prefix": "sampTextdrawSetBoxColorAndSize"

		"scope": "source.lua"
	},
	"sampTextdrawSetAlign": {
		"body": "sampTextdrawSetAlign(${1:int id},${2:int align})",
		"description": "GTA_SA\nsampTextdrawSetAlign(int id, int align)\n",
		"prefix": "sampTextdrawSetAlign"

		"scope": "source.lua"
	},
	"sampTextdrawSetProportional": {
		"body": "sampTextdrawSetProportional(${1:int id},${2:int proportional})",
		"description": "GTA_SA\nsampTextdrawSetProportional(int id, int proportional)\n",
		"prefix": "sampTextdrawSetProportional"

		"scope": "source.lua"
	},
	"sampTextdrawSetStyle": {
		"body": "sampTextdrawSetStyle(${1:int id},${2:int style})",
		"description": "GTA_SA\nsampTextdrawSetStyle(int id, int style)\n",
		"prefix": "sampTextdrawSetStyle"

		"scope": "source.lua"
	},
	"sampTextdrawSetShadow": {
		"body": "sampTextdrawSetShadow(${1:int id},${2:int shadow},${3:int color})",
		"description": "GTA_SA\nsampTextdrawSetShadow(int id, int shadow, int color)\n",
		"prefix": "sampTextdrawSetShadow"

		"scope": "source.lua"
	},
	"sampTextdrawSetOutlineColor": {
		"body": "sampTextdrawSetOutlineColor(${1:int id},${2:int outline},${3:int color})",
		"description": "GTA_SA\nsampTextdrawSetOutlineColor(int id, int outline, int color)\n",
		"prefix": "sampTextdrawSetOutlineColor"

		"scope": "source.lua"
	},
	"sampTextdrawSetModelRotationZoomVehColor": {
		"body": "sampTextdrawSetModelRotationZoomVehColor(${1:int id},${2:int model},${3:float rotX},${4:float rotY},${5:float rotZ},${6:float zoom},${7:int clr1},${8:int clr2})",
		"description": "GTA_SA\nsampTextdrawSetModelRotationZoomVehColor(int id, int model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2)\n",
		"prefix": "sampTextdrawSetModelRotationZoomVehColor"

		"scope": "source.lua"
	},
	"sampTextdrawSetString": {
		"body": "sampTextdrawSetString(${1:int id},${2:zstring text})",
		"description": "GTA_SA\nsampTextdrawSetString(int id, zstring text)\n",
		"prefix": "sampTextdrawSetString"

		"scope": "source.lua"
	},
	"sampTextdrawSetPos": {
		"body": "sampTextdrawSetPos(${1:int id},${2:float posX},${3:float posY})",
		"description": "GTA_SA\nsampTextdrawSetPos(int id, float posX, float posY)\n",
		"prefix": "sampTextdrawSetPos"

		"scope": "source.lua"
	},
	"sampTextdrawSetLetterSizeAndColor": {
		"body": "sampTextdrawSetLetterSizeAndColor(${1:int id},${2:float letSizeX},${3:float letSizeY},${4:int color})",
		"description": "GTA_SA\nsampTextdrawSetLetterSizeAndColor(int id, float letSizeX, float letSizeY, int color)\n",
		"prefix": "sampTextdrawSetLetterSizeAndColor"

		"scope": "source.lua"
	},
	"sampTextdrawGetBoxEnabledColorAndSize": {
		"body": "sampTextdrawGetBoxEnabledColorAndSize(${1:int id})",
		"description": "GTA_SA\nint box, int color, float sizeX, float sizeY = sampTextdrawGetBoxEnabledColorAndSize(int id)\n",
		"prefix": "sampTextdrawGetBoxEnabledColorAndSize"

		"scope": "source.lua"
	},
	"sampTextdrawGetAlign": {
		"body": "sampTextdrawGetAlign(${1:int id})",
		"description": "GTA_SA\nint align = sampTextdrawGetAlign(int id)\n",
		"prefix": "sampTextdrawGetAlign"

		"scope": "source.lua"
	},
	"sampTextdrawGetProportional": {
		"body": "sampTextdrawGetProportional(${1:int id})",
		"description": "GTA_SA\nint prop = sampTextdrawGetProportional(int id)\n",
		"prefix": "sampTextdrawGetProportional"

		"scope": "source.lua"
	},
	"sampTextdrawGetStyle": {
		"body": "sampTextdrawGetStyle(${1:int id})",
		"description": "GTA_SA\nint style = sampTextdrawGetStyle(int id)\n",
		"prefix": "sampTextdrawGetStyle"

		"scope": "source.lua"
	},
	"sampTextdrawGetShadowColor": {
		"body": "sampTextdrawGetShadowColor(${1:int id})",
		"description": "GTA_SA\nint shadow, int color = sampTextdrawGetShadowColor(int id)\n",
		"prefix": "sampTextdrawGetShadowColor"

		"scope": "source.lua"
	},
	"sampTextdrawGetOutlineColor": {
		"body": "sampTextdrawGetOutlineColor(${1:int id})",
		"description": "GTA_SA\nint outline, int color = sampTextdrawGetOutlineColor(int id)\n",
		"prefix": "sampTextdrawGetOutlineColor"

		"scope": "source.lua"
	},
	"sampTextdrawGetModelRotationZoomVehColor": {
		"body": "sampTextdrawGetModelRotationZoomVehColor(${1:int id})",
		"description": "GTA_SA\nint model, float rotX, float rotY, float rotZ, float zoom, int clr1, int clr2 = sampTextdrawGetModelRotationZoomVehColor(int id)\n",
		"prefix": "sampTextdrawGetModelRotationZoomVehColor"

		"scope": "source.lua"
	},
	"sampTextdrawGetString": {
		"body": "sampTextdrawGetString(${1:int id})",
		"description": "GTA_SA\nzstring text = sampTextdrawGetString(int id)\n",
		"prefix": "sampTextdrawGetString"

		"scope": "source.lua"
	},
	"sampTextdrawGetPos": {
		"body": "sampTextdrawGetPos(${1:int id})",
		"description": "GTA_SA\nfloat posX, float posY = sampTextdrawGetPos(int id)\n",
		"prefix": "sampTextdrawGetPos"

		"scope": "source.lua"
	},
	"sampTextdrawGetLetterSizeAndColor": {
		"body": "sampTextdrawGetLetterSizeAndColor(${1:int id})",
		"description": "GTA_SA\nfloat letSizeX, float letSizeY, int color = sampTextdrawGetLetterSizeAndColor(int id)\n",
		"prefix": "sampTextdrawGetLetterSizeAndColor"

		"scope": "source.lua"
	},
	"sampTextdrawIsExists": {
		"body": "sampTextdrawIsExists(${1:int id})",
		"description": "GTA_SA\nbool result = sampTextdrawIsExists(int id)\n",
		"prefix": "sampTextdrawIsExists"

		"scope": "source.lua"
	},
	"sampTextdrawDelete": {
		"body": "sampTextdrawDelete(${1:int id})",
		"description": "GTA_SA\nsampTextdrawDelete(int id)\n",
		"prefix": "sampTextdrawDelete"

		"scope": "source.lua"
	},
	"isSampfuncsGlobalVarDefined": {
		"body": "isSampfuncsGlobalVarDefined(${1:zstring var})",
		"description": "GTA_SA\nbool result = isSampfuncsGlobalVarDefined(zstring var)\n",
		"prefix": "isSampfuncsGlobalVarDefined"

		"scope": "source.lua"
	},
	"getSampfuncsGlobalVarAccessForThread": {
		"body": "getSampfuncsGlobalVarAccessForThread(${1:zstring var},${2:int thread})",
		"description": "GTA_SA\nint read, int write = getSampfuncsGlobalVarAccessForThread(zstring var, int thread)\n",
		"prefix": "getSampfuncsGlobalVarAccessForThread"

		"scope": "source.lua"
	},
	"runSampfuncsConsoleCommand": {
		"body": "runSampfuncsConsoleCommand(${1:zstring cmd})",
		"description": "GTA_SA\nrunSampfuncsConsoleCommand(zstring cmd)\n",
		"prefix": "runSampfuncsConsoleCommand"

		"scope": "source.lua"
	},
	"sampfuncsRegisterConsoleCommand": {
		"body": "sampfuncsRegisterConsoleCommand(${1:zstring cmd},${2:function func})",
		"description": "GTA_SA\nbool result = sampfuncsRegisterConsoleCommand(zstring cmd, function func)\n",
		"prefix": "sampfuncsRegisterConsoleCommand"

		"scope": "source.lua"
	},
	"sampfuncsUnregisterConsoleCommand": {
		"body": "sampfuncsUnregisterConsoleCommand(${1:zstring cmd})",
		"description": "GTA_SA\nbool result = sampfuncsUnregisterConsoleCommand(zstring cmd)\n",
		"prefix": "sampfuncsUnregisterConsoleCommand"

		"scope": "source.lua"
	},
	"createScmThreadAtPointer": {
		"body": "createScmThreadAtPointer(${1:int pointer},${2:table args})",
		"description": "GTA_SA\nint thread = createScmThreadAtPointer(int pointer, table args)\n",
		"prefix": "createScmThreadAtPointer"

		"scope": "source.lua"
	},
	"setScmThreadLocalVar": {
		"body": "setScmThreadLocalVar(${1:int thread},${2:int var},${3:int value})",
		"description": "GTA_SA\nsetScmThreadLocalVar(int thread, int var, int value)\n",
		"prefix": "setScmThreadLocalVar"

		"scope": "source.lua"
	},
	"getScmThreadLocalVar": {
		"body": "getScmThreadLocalVar(${1:int thread},${2:int var})",
		"description": "GTA_SA\nint value = getScmThreadLocalVar(int thread, int var)\n",
		"prefix": "getScmThreadLocalVar"

		"scope": "source.lua"
	},
	"destroyScmThread": {
		"body": "destroyScmThread(${1:int thread})",
		"description": "GTA_SA\ndestroyScmThread(int thread)\n",
		"prefix": "destroyScmThread"

		"scope": "source.lua"
	},
	"restartScmThread": {
		"body": "restartScmThread(${1:int thread},${2:table args})",
		"description": "GTA_SA\nrestartScmThread(int thread, table args)\n",
		"prefix": "restartScmThread"

		"scope": "source.lua"
	},
	"isSampfuncsConsoleActive": {
		"body": "isSampfuncsConsoleActive()",
		"description": "GTA_SA\nbool result = isSampfuncsConsoleActive()\n",
		"prefix": "isSampfuncsConsoleActive"

		"scope": "source.lua"
	},
	"sampSetClientCommandDescription": {
		"body": "sampSetClientCommandDescription(${1:zstring cmd},${2:zstring text})",
		"description": "GTA_SA\nsampSetClientCommandDescription(zstring cmd, zstring text)\n",
		"prefix": "sampSetClientCommandDescription"

		"scope": "source.lua"
	},
	"setSampfuncsConsoleCommandDescription": {
		"body": "setSampfuncsConsoleCommandDescription(${1:zstring cmd},${2:zstring text})",
		"description": "GTA_SA\nsetSampfuncsConsoleCommandDescription(zstring cmd, zstring text)\n",
		"prefix": "setSampfuncsConsoleCommandDescription"

		"scope": "source.lua"
	},
	"sampForceVehicleSync": {
		"body": "sampForceVehicleSync(${1:int id})",
		"description": "GTA_SA\nsampForceVehicleSync(int id)\n",
		"prefix": "sampForceVehicleSync"

		"scope": "source.lua"
	},
	"sampForceUnoccupiedSyncSeatId": {
		"body": "sampForceUnoccupiedSyncSeatId(${1:int id},${2:int seatId})",
		"description": "GTA_SA\nsampForceUnoccupiedSyncSeatId(int id, int seatId)\n",
		"prefix": "sampForceUnoccupiedSyncSeatId"

		"scope": "source.lua"
	},
	"sampForceOnfootSync": {
		"body": "sampForceOnfootSync()",
		"description": "GTA_SA\nsampForceOnfootSync()\n",
		"prefix": "sampForceOnfootSync"

		"scope": "source.lua"
	},
	"sampForceAimSync": {
		"body": "sampForceAimSync()",
		"description": "GTA_SA\nsampForceAimSync()\n",
		"prefix": "sampForceAimSync"

		"scope": "source.lua"
	},
	"sampForceTrailerSync": {
		"body": "sampForceTrailerSync(${1:int id})",
		"description": "GTA_SA\nsampForceTrailerSync(int id)\n",
		"prefix": "sampForceTrailerSync"

		"scope": "source.lua"
	},
	"sampForcePassengerSyncSeatId": {
		"body": "sampForcePassengerSyncSeatId(${1:int id},${2:int seatId})",
		"description": "GTA_SA\nsampForcePassengerSyncSeatId(int id, int seatId)\n",
		"prefix": "sampForcePassengerSyncSeatId"

		"scope": "source.lua"
	},
	"sampForceStatsSync": {
		"body": "sampForceStatsSync()",
		"description": "GTA_SA\nsampForceStatsSync()\n",
		"prefix": "sampForceStatsSync"

		"scope": "source.lua"
	},
	"sampForceWeaponsSync": {
		"body": "sampForceWeaponsSync()",
		"description": "GTA_SA\nsampForceWeaponsSync()\n",
		"prefix": "sampForceWeaponsSync"

		"scope": "source.lua"
	},
	"sampGetMaxPlayerId": {
		"body": "sampGetMaxPlayerId(${1:bool streamed})",
		"description": "GTA_SA\nint id = sampGetMaxPlayerId(bool streamed)\n",
		"prefix": "sampGetMaxPlayerId"

		"scope": "source.lua"
	},
	"sampGetPlayerCount": {
		"body": "sampGetPlayerCount(${1:bool streamed})",
		"description": "GTA_SA\nint count = sampGetPlayerCount(bool streamed)\n",
		"prefix": "sampGetPlayerCount"

		"scope": "source.lua"
	},
	"renderLoadTextureFromFileInMemory": {
		"body": "renderLoadTextureFromFileInMemory(${1:int pointer},${2:int size})",
		"description": "GTA_SA\nbool result, int texture = renderLoadTextureFromFileInMemory(int pointer, int size)\n",
		"prefix": "renderLoadTextureFromFileInMemory"

		"scope": "source.lua"
	},
	"sampProcessChatInput": {
		"body": "sampProcessChatInput(${1:zstring text})",
		"description": "GTA_SA\nsampProcessChatInput(zstring text)\n",
		"prefix": "sampProcessChatInput"

		"scope": "source.lua"
	},
	"sampIsChatCommandDefined": {
		"body": "sampIsChatCommandDefined(${1:zstring cmd})",
		"description": "GTA_SA\nbool result = sampIsChatCommandDefined(zstring cmd)\n",
		"prefix": "sampIsChatCommandDefined"

		"scope": "source.lua"
	},
	"isSampfuncsConsoleCommandDefined": {
		"body": "isSampfuncsConsoleCommandDefined(${1:zstring cmd})",
		"description": "GTA_SA\nbool result = isSampfuncsConsoleCommandDefined(zstring cmd)\n",
		"prefix": "isSampfuncsConsoleCommandDefined"

		"scope": "source.lua"
	},
	"getCleoLibraryVersion": {
		"body": "getCleoLibraryVersion()",
		"description": "GTA_SA\nint version = getCleoLibraryVersion()\n",
		"prefix": "getCleoLibraryVersion"

		"scope": "source.lua"
	},
	"getAllObjects": {
		"body": "getAllObjects()",
		"description": "GTA_SA\ntable Objects = getAllObjects()\n",
		"prefix": "getAllObjects"

		"scope": "source.lua"
	},
	"getAllChars": {
		"body": "getAllChars()",
		"description": "GTA_SA\ntable Chars = getAllChars()\n",
		"prefix": "getAllChars"

		"scope": "source.lua"
	},
	"getAllVehicles": {
		"body": "getAllVehicles()",
		"description": "GTA_SA\ntable Vehicles = getAllVehicles()\n",
		"prefix": "getAllVehicles"

		"scope": "source.lua"
	},
	"script_version_number": {
		"body": "script_version_number(${1:int version})",
		"description": "GTA_SA\nscript_version_number(int version)\n",
		"prefix": "script_version_number"

		"scope": "source.lua"
	},
	"script_version": {
		"body": "script_version(${1:string version})",
		"description": "GTA_SA\nscript_version(string version)\n",
		"prefix": "script_version"

		"scope": "source.lua"
	},
	"script_name": {
		"body": "script_name(${1:string name})",
		"description": "GTA_SA\nscript_name(string name)\n",
		"prefix": "script_name"

		"scope": "source.lua"
	},
	"script_description": {
		"body": "script_description(${1:string description})",
		"description": "GTA_SA\nscript_description(string description)\n",
		"prefix": "script_description"

		"scope": "source.lua"
	},
	"script_authors": {
		"body": "script_authors(${1:string author},${2:...})",
		"description": "GTA_SA\nscript_authors(string author, ...)\n",
		"prefix": "script_authors"

		"scope": "source.lua"
	},
	"script_author": {
		"body": "script_author(${1:string author})",
		"description": "GTA_SA\nscript_author(string author)\n",
		"prefix": "script_author"

		"scope": "source.lua"
	},
	"script_dependencies": {
		"body": "script_dependencies(${1:string name},${2:...})",
		"description": "GTA_SA\nscript_dependencies(string name, ...)\n",
		"prefix": "script_dependencies"

		"scope": "source.lua"
	},
	"script_moonloader": {
		"body": "script_moonloader(${1:int version})",
		"description": "GTA_SA\nscript_moonloader(int version)\n",
		"prefix": "script_moonloader"

		"scope": "source.lua"
	},
	"thisScript": {
		"body": "thisScript()",
		"description": "GTA_SA\nLuaScript s = thisScript()\n",
		"prefix": "thisScript"

		"scope": "source.lua"
	},
	"wait": {
		"body": "wait(${1:int time})",
		"description": "GTA_SA\nwait(int time)\n",
		"prefix": "wait"

		"scope": "source.lua"
	},
	"print": {
		"body": "print(${1:any value},${2:...})",
		"description": "GTA_SA\nprint(any value, ...)\n",
		"prefix": "print"

		"scope": "source.lua"
	},
	"getGameGlobal": {
		"body": "getGameGlobal(${1:int index})",
		"description": "GTA_SA\nint value = getGameGlobal(int index)\n",
		"prefix": "getGameGlobal"

		"scope": "source.lua"
	},
	"setGameGlobal": {
		"body": "setGameGlobal(${1:int index},${2:int value})",
		"description": "GTA_SA\nsetGameGlobal(int index, int value)\n",
		"prefix": "setGameGlobal"

		"scope": "source.lua"
	},
	"getGameGlobalPtr": {
		"body": "getGameGlobalPtr(${1:int index})",
		"description": "GTA_SA\nint ptr = getGameGlobalPtr(int index)\n",
		"prefix": "getGameGlobalPtr"

		"scope": "source.lua"
	},
	"isSampfuncsLoaded": {
		"body": "isSampfuncsLoaded()",
		"description": "GTA_SA\nbool loaded = isSampfuncsLoaded()\n",
		"prefix": "isSampfuncsLoaded"

		"scope": "source.lua"
	},
	"isCleoLoaded": {
		"body": "isCleoLoaded()",
		"description": "GTA_SA\nbool loaded = isCleoLoaded()\n",
		"prefix": "isCleoLoaded"

		"scope": "source.lua"
	},
	"isSampLoaded": {
		"body": "isSampLoaded()",
		"description": "GTA_SA\nbool loaded = isSampLoaded()\n",
		"prefix": "isSampLoaded"

		"scope": "source.lua"
	},
	"isKeyDown": {
		"body": "isKeyDown(${1:int keyId})",
		"description": "GTA_SA\nbool state = isKeyDown(int keyId)\n",
		"prefix": "isKeyDown"

		"scope": "source.lua"
	},
	"reloadScripts": {
		"body": "reloadScripts()",
		"description": "GTA_SA\nreloadScripts()\n",
		"prefix": "reloadScripts"

		"scope": "source.lua"
	},
	"isOpcodesAvailable": {
		"body": "isOpcodesAvailable()",
		"description": "GTA_SA\nbool status = isOpcodesAvailable()\n",
		"prefix": "isOpcodesAvailable"

		"scope": "source.lua"
	},
	"representFloatAsInt": {
		"body": "representFloatAsInt(${1:float f})",
		"description": "GTA_SA\nint i = representFloatAsInt(float f)\n",
		"prefix": "representFloatAsInt"

		"scope": "source.lua"
	},
	"representIntAsFloat": {
		"body": "representIntAsFloat(${1:int i})",
		"description": "GTA_SA\nfloat i = representIntAsFloat(int i)\n",
		"prefix": "representIntAsFloat"

		"scope": "source.lua"
	},
	"setGxtEntry": {
		"body": "setGxtEntry(${1:string key},${2:string text})",
		"description": "GTA_SA\nsetGxtEntry(string key, string text)\n",
		"prefix": "setGxtEntry"

		"scope": "source.lua"
	},
	"setFreeGxtEntry": {
		"body": "setFreeGxtEntry(${1:string text})",
		"description": "GTA_SA\nstring key = setFreeGxtEntry(string text)\n",
		"prefix": "setFreeGxtEntry"

		"scope": "source.lua"
	},
	"getFreeGxtKey": {
		"body": "getFreeGxtKey()",
		"description": "GTA_SA\nstring key = getFreeGxtKey()\n",
		"prefix": "getFreeGxtKey"

		"scope": "source.lua"
	},
	"getGxtText": {
		"body": "getGxtText(${1:string key})",
		"description": "GTA_SA\nstring text = getGxtText(string key)\n",
		"prefix": "getGxtText"

		"scope": "source.lua"
	},
	"clearGxtEntry": {
		"body": "clearGxtEntry(${1:string key})",
		"description": "GTA_SA\nclearGxtEntry(string key)\n",
		"prefix": "clearGxtEntry"

		"scope": "source.lua"
	},
	"isPauseMenuActive": {
		"body": "isPauseMenuActive()",
		"description": "GTA_SA\nbool active = isPauseMenuActive()\n",
		"prefix": "isPauseMenuActive"

		"scope": "source.lua"
	},
	"isGameWindowForeground": {
		"body": "isGameWindowForeground()",
		"description": "GTA_SA\nbool foreground = isGameWindowForeground()\n",
		"prefix": "isGameWindowForeground"

		"scope": "source.lua"
	},
	"getGameVersion": {
		"body": "getGameVersion()",
		"description": "GTA_SA\nint version = getGameVersion()\n",
		"prefix": "getGameVersion"

		"scope": "source.lua"
	},
	"getMoonloaderVersion": {
		"body": "getMoonloaderVersion()",
		"description": "GTA_SA\nint version = getMoonloaderVersion()\n",
		"prefix": "getMoonloaderVersion"

		"scope": "source.lua"
	},
	"localClock": {
		"body": "localClock()",
		"description": "GTA_SA\ndouble time = localClock()\n",
		"prefix": "localClock"

		"scope": "source.lua"
	},
	"freeTextures": {
		"body": "freeTextures()",
		"description": "GTA_SA\nfreeTextures()\n",
		"prefix": "freeTextures"

		"scope": "source.lua"
	},
	"getWorkingDirectory": {
		"body": "getWorkingDirectory()",
		"description": "GTA_SA\nstring path = getWorkingDirectory()\n",
		"prefix": "getWorkingDirectory"

		"scope": "source.lua"
	},
	"getGameDirectory": {
		"body": "getGameDirectory()",
		"description": "GTA_SA\nstring path = getGameDirectory()\n",
		"prefix": "getGameDirectory"

		"scope": "source.lua"
	},
	"useRenderCommands": {
		"body": "useRenderCommands(${1:bool enable})",
		"description": "GTA_SA\nuseRenderCommands(bool enable)\n",
		"prefix": "useRenderCommands"

		"scope": "source.lua"
	},
	"writeMemory": {
		"body": "writeMemory(${1:int address},${2:int size},${3:int value},${4:bool virtualProtect})",
		"description": "GTA_SA\nwriteMemory(int address, int size, int value, bool virtualProtect)\n",
		"prefix": "writeMemory"

		"scope": "source.lua"
	},
	"readMemory": {
		"body": "readMemory(${1:int address},${2:int size},${3:bool virtualProtect})",
		"description": "GTA_SA\nint value = readMemory(int address, int size, bool virtualProtect)\n",
		"prefix": "readMemory"

		"scope": "source.lua"
	},
	"loadDynamicLibrary": {
		"body": "loadDynamicLibrary(${1:string library})",
		"description": "GTA_SA\nbool result, int handle = loadDynamicLibrary(string library)\n",
		"prefix": "loadDynamicLibrary"

		"scope": "source.lua"
	},
	"freeDynamicLibrary": {
		"body": "freeDynamicLibrary(${1:int handle})",
		"description": "GTA_SA\nfreeDynamicLibrary(int handle)\n",
		"prefix": "freeDynamicLibrary"

		"scope": "source.lua"
	},
	"getDynamicLibraryProcedure": {
		"body": "getDynamicLibraryProcedure(${1:string proc},${2:int handle})",
		"description": "GTA_SA\nbool result, int proc = getDynamicLibraryProcedure(string proc, int handle)\n",
		"prefix": "getDynamicLibraryProcedure"

		"scope": "source.lua"
	},
	"doesFileExist": {
		"body": "doesFileExist(${1:string file})",
		"description": "GTA_SA\nbool result = doesFileExist(string file)\n",
		"prefix": "doesFileExist"

		"scope": "source.lua"
	},
	"doesDirectoryExist": {
		"body": "doesDirectoryExist(${1:string directory})",
		"description": "GTA_SA\nbool result = doesDirectoryExist(string directory)\n",
		"prefix": "doesDirectoryExist"

		"scope": "source.lua"
	},
	"createDirectory": {
		"body": "createDirectory(${1:string directory})",
		"description": "GTA_SA\nbool result = createDirectory(string directory)\n",
		"prefix": "createDirectory"

		"scope": "source.lua"
	},
	"popFloat": {
		"body": "popFloat()",
		"description": "GTA_SA\nfloat val = popFloat()\n",
		"prefix": "popFloat"

		"scope": "source.lua"
	},
	"isGameVersionOriginal": {
		"body": "isGameVersionOriginal()",
		"description": "GTA_SA\nbool result = isGameVersionOriginal()\n",
		"prefix": "isGameVersionOriginal"

		"scope": "source.lua"
	},
	"allocateMemory": {
		"body": "allocateMemory(${1:int size})",
		"description": "GTA_SA\nint memory = allocateMemory(int size)\n",
		"prefix": "allocateMemory"

		"scope": "source.lua"
	},
	"freeMemory": {
		"body": "freeMemory(${1:int memory})",
		"description": "GTA_SA\nfreeMemory(int memory)\n",
		"prefix": "freeMemory"

		"scope": "source.lua"
	},
	"findFirstFile": {
		"body": "findFirstFile(${1:string mask})",
		"description": "GTA_SA\nFilesearch handle, string name = findFirstFile(string mask)\n",
		"prefix": "findFirstFile"

		"scope": "source.lua"
	},
	"findNextFile": {
		"body": "findNextFile(${1:Filesearch handle})",
		"description": "GTA_SA\nstring file = findNextFile(Filesearch handle)\n",
		"prefix": "findNextFile"

		"scope": "source.lua"
	},
	"findClose": {
		"body": "findClose(${1:Filesearch handle})",
		"description": "GTA_SA\nfindClose(Filesearch handle)\n",
		"prefix": "findClose"

		"scope": "source.lua"
	},
	"findAllRandomCharsInSphere": {
		"body": "findAllRandomCharsInSphere(${1:float posX},${2:float posY},${3:float posZ},${4:float radius},${5:bool findNext},${6:bool skipDead})",
		"description": "GTA_SA\nbool result, Ped ped = findAllRandomCharsInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipDead)\n",
		"prefix": "findAllRandomCharsInSphere"

		"scope": "source.lua"
	},
	"findAllRandomVehiclesInSphere": {
		"body": "findAllRandomVehiclesInSphere(${1:float posX},${2:float posY},${3:float posZ},${4:float radius},${5:bool findNext},${6:bool skipWrecked})",
		"description": "GTA_SA\nbool result, Vehicle car = findAllRandomVehiclesInSphere(float posX, float posY, float posZ, float radius, bool findNext, bool skipWrecked)\n",
		"prefix": "findAllRandomVehiclesInSphere"

		"scope": "source.lua"
	},
	"findAllRandomObjectsInSphere": {
		"body": "findAllRandomObjectsInSphere(${1:float posX},${2:float posY},${3:float posZ},${4:float radius},${5:bool findNext})",
		"description": "GTA_SA\nbool result, Object object = findAllRandomObjectsInSphere(float posX, float posY, float posZ, float radius, bool findNext)\n",
		"prefix": "findAllRandomObjectsInSphere"

		"scope": "source.lua"
	},
	"getCharPointer": {
		"body": "getCharPointer(${1:Ped ped})",
		"description": "GTA_SA\nint ptr = getCharPointer(Ped ped)\n",
		"prefix": "getCharPointer"

		"scope": "source.lua"
	},
	"getCarPointer": {
		"body": "getCarPointer(${1:Vehicle car})",
		"description": "GTA_SA\nint ptr = getCarPointer(Vehicle car)\n",
		"prefix": "getCarPointer"

		"scope": "source.lua"
	},
	"getObjectPointer": {
		"body": "getObjectPointer(${1:Object object})",
		"description": "GTA_SA\nint struct = getObjectPointer(Object object)\n",
		"prefix": "getObjectPointer"

		"scope": "source.lua"
	},
	"callFunction": {
		"body": "callFunction(${1:int address},${2:int params},${3:int pop},${4:...})",
		"description": "GTA_SA\nint returnValue = callFunction(int address, int params, int pop, ...)\n",
		"prefix": "callFunction"

		"scope": "source.lua"
	},
	"callMethod": {
		"body": "callMethod(${1:int address},${2:int struct},${3:int params},${4:int pop},${5:...})",
		"description": "GTA_SA\nint returnValue = callMethod(int address, int struct, int params, int pop, ...)\n",
		"prefix": "callMethod"

		"scope": "source.lua"
	},
	"storeClosestEntities": {
		"body": "storeClosestEntities(${1:Ped ped})",
		"description": "GTA_SA\nVehicle car, Ped ped = storeClosestEntities(Ped ped)\n",
		"prefix": "storeClosestEntities"

		"scope": "source.lua"
	},
	"switchCarEngine": {
		"body": "switchCarEngine(${1:Vehicle car},${2:bool state})",
		"description": "GTA_SA\nswitchCarEngine(Vehicle car, bool state)\n",
		"prefix": "switchCarEngine"

		"scope": "source.lua"
	},
	"getTargetBlipCoordinates": {
		"body": "getTargetBlipCoordinates()",
		"description": "GTA_SA\nbool result, float posX, float posY, float posZ = getTargetBlipCoordinates()\n",
		"prefix": "getTargetBlipCoordinates"

		"scope": "source.lua"
	},
	"getCarNumberOfGears": {
		"body": "getCarNumberOfGears(${1:Vehicle car})",
		"description": "GTA_SA\nint gears = getCarNumberOfGears(Vehicle car)\n",
		"prefix": "getCarNumberOfGears"

		"scope": "source.lua"
	},
	"getCarCurrentGear": {
		"body": "getCarCurrentGear(${1:Vehicle car})",
		"description": "GTA_SA\nint gear = getCarCurrentGear(Vehicle car)\n",
		"prefix": "getCarCurrentGear"

		"scope": "source.lua"
	},
	"isCarSirenOn": {
		"body": "isCarSirenOn(${1:Vehicle car})",
		"description": "GTA_SA\nbool state = isCarSirenOn(Vehicle car)\n",
		"prefix": "isCarSirenOn"

		"scope": "source.lua"
	},
	"isCarEngineOn": {
		"body": "isCarEngineOn(${1:Vehicle car})",
		"description": "GTA_SA\nbool state = isCarEngineOn(Vehicle car)\n",
		"prefix": "isCarEngineOn"

		"scope": "source.lua"
	},
	"printHelpString": {
		"body": "printHelpString(${1:string text})",
		"description": "GTA_SA\nprintHelpString(string text)\n",
		"prefix": "printHelpString"

		"scope": "source.lua"
	},
	"printStyledString": {
		"body": "printStyledString(${1:string text},${2:int time},${3:int style})",
		"description": "GTA_SA\nprintStyledString(string text, int time, int style)\n",
		"prefix": "printStyledString"

		"scope": "source.lua"
	},
	"printString": {
		"body": "printString(${1:string text},${2:int time})",
		"description": "GTA_SA\nprintString(string text, int time)\n",
		"prefix": "printString"

		"scope": "source.lua"
	},
	"printStringNow": {
		"body": "printStringNow(${1:string text},${2:int time})",
		"description": "GTA_SA\nprintStringNow(string text, int time)\n",
		"prefix": "printStringNow"

		"scope": "source.lua"
	},
	"getCharPlayerIsTargeting": {
		"body": "getCharPlayerIsTargeting(${1:Player player})",
		"description": "GTA_SA\nbool result, Ped ped = getCharPlayerIsTargeting(Player player)\n",
		"prefix": "getCharPlayerIsTargeting"

		"scope": "source.lua"
	},
	"getNameOfVehicleModel": {
		"body": "getNameOfVehicleModel(${1:Model modelId})",
		"description": "GTA_SA\nGxtString name = getNameOfVehicleModel(Model modelId)\n",
		"prefix": "getNameOfVehicleModel"

		"scope": "source.lua"
	},
	"testCheat": {
		"body": "testCheat(${1:string text})",
		"description": "GTA_SA\nbool result = testCheat(string text)\n",
		"prefix": "testCheat"

		"scope": "source.lua"
	},
	"spawnVehicleByCheating": {
		"body": "spawnVehicleByCheating(${1:Model modelId})",
		"description": "GTA_SA\nbool result = spawnVehicleByCheating(Model modelId)\n",
		"prefix": "spawnVehicleByCheating"

		"scope": "source.lua"
	},
	"getCharPointerHandle": {
		"body": "getCharPointerHandle(${1:int ptr})",
		"description": "GTA_SA\nPed handle = getCharPointerHandle(int ptr)\n",
		"prefix": "getCharPointerHandle"

		"scope": "source.lua"
	},
	"getVehiclePointerHandle": {
		"body": "getVehiclePointerHandle(${1:int ptr})",
		"description": "GTA_SA\nVehicle handle = getVehiclePointerHandle(int ptr)\n",
		"prefix": "getVehiclePointerHandle"

		"scope": "source.lua"
	},
	"getObjectPointerHandle": {
		"body": "getObjectPointerHandle(${1:int ptr})",
		"description": "GTA_SA\nObject handle = getObjectPointerHandle(int ptr)\n",
		"prefix": "getObjectPointerHandle"

		"scope": "source.lua"
	},
	"processLineOfSight": {
		"body": "processLineOfSight(${1:float originX},${2:float originY},${3:float originZ},${4:float targetX},${5:float targetY},${6:float targetZ},${7:[bool checkSolid=true]},${8:[bool car=false]},${9:[bool ped=false]},${10:[bool object=false]},${11:[bool particle=false]},${12:[bool seeThrough=false]},${13:[bool ignoreSomeObjects=false]},${14:[bool shootThrough=false]})",
		"description": "GTA_SA\nbool result, table colPoint = processLineOfSight(float originX, float originY, float originZ, float targetX, float targetY, float targetZ, [bool checkSolid=true], [bool car=false], [bool ped=false], [bool object=false], [bool particle=false], [bool seeThrough=false], [bool ignoreSomeObjects=false], [bool shootThrough=false])\n",
		"prefix": "processLineOfSight"

		"scope": "source.lua"
	},
	"setClipboardText": {
		"body": "setClipboardText(${1:string text})",
		"description": "GTA_SA\nbool result = setClipboardText(string text)\n",
		"prefix": "setClipboardText"

		"scope": "source.lua"
	},
	"getClipboardText": {
		"body": "getClipboardText()",
		"description": "GTA_SA\nstring text = getClipboardText()\n",
		"prefix": "getClipboardText"

		"scope": "source.lua"
	},
	"getStructElement": {
		"body": "getStructElement(${1:int struct},${2:int offset},${3:int size},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = getStructElement(int struct, int offset, int size, [bool unprotect=false])\n",
		"prefix": "getStructElement"

		"scope": "source.lua"
	},
	"setStructElement": {
		"body": "setStructElement(${1:int struct},${2:int offset},${3:int size},${4:int value},${5:[bool unprotect=false]})",
		"description": "GTA_SA\nsetStructElement(int struct, int offset, int size, int value, [bool unprotect=false])\n",
		"prefix": "setStructElement"

		"scope": "source.lua"
	},
	"convertMatrixToQuaternion": {
		"body": "convertMatrixToQuaternion(${1:float rightX},${2:float rightY},${3:float rightZ},${4:float frontX},${5:float frontY},${6:float frontZ},${7:float upX},${8:float upY},${9:float upZ})",
		"description": "GTA_SA\nfloat w, float x, float y, float z = convertMatrixToQuaternion(float rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ)\n",
		"prefix": "convertMatrixToQuaternion"

		"scope": "source.lua"
	},
	"convertQuaternionToMatrix": {
		"body": "convertQuaternionToMatrix(${1:float w},${2:float x},${3:float y},${4:float z})",
		"description": "GTA_SA\nfloat rightX, float rightY, float rightZ, float frontX, float frontY, float frontZ, float upX, float upY, float upZ = convertQuaternionToMatrix(float w, float x, float y, float z)\n",
		"prefix": "convertQuaternionToMatrix"

		"scope": "source.lua"
	},
	"convert3DCoordsToScreen": {
		"body": "convert3DCoordsToScreen(${1:float posX},${2:float posY},${3:float posZ})",
		"description": "GTA_SA\nfloat wposX, float wposY = convert3DCoordsToScreen(float posX, float posY, float posZ)\n",
		"prefix": "convert3DCoordsToScreen"

		"scope": "source.lua"
	},
	"setGameKeyState": {
		"body": "setGameKeyState(${1:int key},${2:int state})",
		"description": "GTA_SA\nsetGameKeyState(int key, int state)\n",
		"prefix": "setGameKeyState"

		"scope": "source.lua"
	},
	"getCursorPos": {
		"body": "getCursorPos()",
		"description": "GTA_SA\nint posX, int posY = getCursorPos()\n",
		"prefix": "getCursorPos"

		"scope": "source.lua"
	},
	"convertWindowScreenCoordsToGameScreenCoords": {
		"body": "convertWindowScreenCoordsToGameScreenCoords(${1:float wposX},${2:float wposY})",
		"description": "GTA_SA\nfloat gposX, float gposY = convertWindowScreenCoordsToGameScreenCoords(float wposX, float wposY)\n",
		"prefix": "convertWindowScreenCoordsToGameScreenCoords"

		"scope": "source.lua"
	},
	"convertGameScreenCoordsToWindowScreenCoords": {
		"body": "convertGameScreenCoordsToWindowScreenCoords(${1:float gposX},${2:float gposY})",
		"description": "GTA_SA\nfloat wposX, float wposY = convertGameScreenCoordsToWindowScreenCoords(float gposX, float gposY)\n",
		"prefix": "convertGameScreenCoordsToWindowScreenCoords"

		"scope": "source.lua"
	},
	"convertScreenCoordsToWorld3D": {
		"body": "convertScreenCoordsToWorld3D(${1:float posX},${2:float posY},${3:float depth})",
		"description": "GTA_SA\nfloat posX, float posY, float posZ = convertScreenCoordsToWorld3D(float posX, float posY, float depth)\n",
		"prefix": "convertScreenCoordsToWorld3D"

		"scope": "source.lua"
	},
	"getModuleHandle": {
		"body": "getModuleHandle(${1:string module})",
		"description": "GTA_SA\nint handle = getModuleHandle(string module)\n",
		"prefix": "getModuleHandle"

		"scope": "source.lua"
	},
	"getModuleProcAddress": {
		"body": "getModuleProcAddress(${1:string module},${2:string proc})",
		"description": "GTA_SA\nint address = getModuleProcAddress(string module, string proc)\n",
		"prefix": "getModuleProcAddress"

		"scope": "source.lua"
	},
	"setVirtualKeyDown": {
		"body": "setVirtualKeyDown(${1:int vkey},${2:bool down})",
		"description": "GTA_SA\nsetVirtualKeyDown(int vkey, bool down)\n",
		"prefix": "setVirtualKeyDown"

		"scope": "source.lua"
	},
	"setCharKeyDown": {
		"body": "setCharKeyDown(${1:int ckey},${2:bool down})",
		"description": "GTA_SA\nsetCharKeyDown(int ckey, bool down)\n",
		"prefix": "setCharKeyDown"

		"scope": "source.lua"
	},
	"downloadUrlToFile": {
		"body": "downloadUrlToFile(${1:string url},${2:string file},${3:function statusCallback})",
		"description": "GTA_SA\nint index = downloadUrlToFile(string url, string file, function statusCallback)\n",
		"prefix": "downloadUrlToFile"

		"scope": "source.lua"
	},
	"isKeyJustPressed": {
		"body": "isKeyJustPressed(${1:int key})",
		"description": "GTA_SA\nbool state = isKeyJustPressed(int key)\n",
		"prefix": "isKeyJustPressed"

		"scope": "source.lua"
	},
	"convert3DCoordsToScreenEx": {
		"body": "convert3DCoordsToScreenEx(${1:float posX},${2:float posY},${3:float posZ},${4:[bool checkMin=false]},${5:[bool checkMax=false]})",
		"description": "GTA_SA\nbool result, float x, float y, float z, float w, float h = convert3DCoordsToScreenEx(float posX, float posY, float posZ, [bool checkMin=false], [bool checkMax=false])\n",
		"prefix": "convert3DCoordsToScreenEx"

		"scope": "source.lua"
	},
	"getStructFloatElement": {
		"body": "getStructFloatElement(${1:int struct},${2:int offset},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nfloat value = getStructFloatElement(int struct, int offset, [bool unprotect=false])\n",
		"prefix": "getStructFloatElement"

		"scope": "source.lua"
	},
	"setStructFloatElement": {
		"body": "setStructFloatElement(${1:int struct},${2:int offset},${3:float value},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nsetStructFloatElement(int struct, int offset, float value, [bool unprotect=false])\n",
		"prefix": "setStructFloatElement"

		"scope": "source.lua"
	},
	"wasKeyPressed": {
		"body": "wasKeyPressed(${1:int key})",
		"description": "GTA_SA\nbool state = wasKeyPressed(int key)\n",
		"prefix": "wasKeyPressed"

		"scope": "source.lua"
	},
	"wasKeyReleased": {
		"body": "wasKeyReleased(${1:int key})",
		"description": "GTA_SA\nbool state = wasKeyReleased(int key)\n",
		"prefix": "wasKeyReleased"

		"scope": "source.lua"
	},
	"getMousewheelDelta": {
		"body": "getMousewheelDelta()",
		"description": "GTA_SA\nint delta = getMousewheelDelta()\n",
		"prefix": "getMousewheelDelta"

		"scope": "source.lua"
	},
	"consumeWindowMessage": {
		"body": "consumeWindowMessage(${1:[bool game=true]},${2:[bool scripts=true]})",
		"description": "GTA_SA\nconsumeWindowMessage([bool game=true], [bool scripts=true])\n",
		"prefix": "consumeWindowMessage"

		"scope": "source.lua"
	},
	"addEventHandler": {
		"body": "addEventHandler(${1:string eventName},${2:function callback})",
		"description": "GTA_SA\naddEventHandler(string eventName, function callback)\n",
		"prefix": "addEventHandler"

		"scope": "source.lua"
	},
	"isGamePaused": {
		"body": "isGamePaused()",
		"description": "GTA_SA\nbool paused = isGamePaused()\n",
		"prefix": "isGamePaused"

		"scope": "source.lua"
	},
	"gameClock": {
		"body": "gameClock()",
		"description": "GTA_SA\ndouble time = gameClock()\n",
		"prefix": "gameClock"

		"scope": "source.lua"
	},
	"script_properties": {
		"body": "script_properties(${1:string property},${2:...})",
		"description": "GTA_SA\nscript_properties(string property, ...)\n",
		"prefix": "script_properties"

		"scope": "source.lua"
	},
	"script_url": {
		"body": "script_url(${1:string url})",
		"description": "GTA_SA\nscript_url(string url)\n",
		"prefix": "script_url"

		"scope": "source.lua"
	},
	"import": {
		"body": "import(${1:string filename})",
		"description": "GTA_SA\nany imports, string error = import(string filename)\n",
		"prefix": "import"

		"scope": "source.lua"
	},
	"encodeJson": {
		"body": "encodeJson(${1:table data})",
		"description": "GTA_SA\nstring json = encodeJson(table data)\n",
		"prefix": "encodeJson"

		"scope": "source.lua"
	},
	"decodeJson": {
		"body": "decodeJson(${1:string json})",
		"description": "GTA_SA\ntable data = decodeJson(string json)\n",
		"prefix": "decodeJson"

		"scope": "source.lua"
	},
	"showCursor": {
		"body": "showCursor(${1:bool show},${2:[bool lockControls]})",
		"description": "GTA_SA\nshowCursor(bool show, [bool lockControls])\n",
		"prefix": "showCursor"

		"scope": "source.lua"
	},
	"lockPlayerControl": {
		"body": "lockPlayerControl(${1:bool lock})",
		"description": "GTA_SA\nlockPlayerControl(bool lock)\n",
		"prefix": "lockPlayerControl"

		"scope": "source.lua"
	},
	"isPlayerControlLocked": {
		"body": "isPlayerControlLocked()",
		"description": "GTA_SA\nbool locked = isPlayerControlLocked()\n",
		"prefix": "isPlayerControlLocked"

		"scope": "source.lua"
	},
	"setBlipCoordinates": {
		"body": "setBlipCoordinates(${1:Marker blip},${2:float x},${3:float y},${4:float z})",
		"description": "GTA_SA\nbool result = setBlipCoordinates(Marker blip, float x, float y, float z)\n",
		"prefix": "setBlipCoordinates"

		"scope": "source.lua"
	},
	"setTargetBlipCoordinates": {
		"body": "setTargetBlipCoordinates(${1:float x},${2:float y},${3:float z})",
		"description": "GTA_SA\nbool result = setTargetBlipCoordinates(float x, float y, float z)\n",
		"prefix": "setTargetBlipCoordinates"

		"scope": "source.lua"
	},
	"placeWaypoint": {
		"body": "placeWaypoint(${1:float x},${2:float y},${3:float z})",
		"description": "GTA_SA\nbool result = placeWaypoint(float x, float y, float z)\n",
		"prefix": "placeWaypoint"

		"scope": "source.lua"
	},
	"removeWaypoint": {
		"body": "removeWaypoint()",
		"description": "GTA_SA\nbool result = removeWaypoint()\n",
		"prefix": "removeWaypoint"

		"scope": "source.lua"
	},
	"getFolderPath": {
		"body": "getFolderPath(${1:int csidl})",
		"description": "GTA_SA\nstring path = getFolderPath(int csidl)\n",
		"prefix": "getFolderPath"

		"scope": "source.lua"
	},
	"getTimeStepValue": {
		"body": "getTimeStepValue()",
		"description": "GTA_SA\nfloat value = getTimeStepValue()\n",
		"prefix": "getTimeStepValue"

		"scope": "source.lua"
	},
	"getD3DDevicePtr": {
		"body": "getD3DDevicePtr()",
		"description": "GTA_SA\nuint devicePtr = getD3DDevicePtr()\n",
		"prefix": "getD3DDevicePtr"

		"scope": "source.lua"
	},
	"script.load": {
		"body": "script.load(${1:string file})",
		"description": "GTA_SA\nLuaScript s = script.load(string file)\n",
		"prefix": "script.load"

		"scope": "source.lua"
	},
	"script.find": {
		"body": "script.find(${1:string name})",
		"description": "GTA_SA\nLuaScript s = script.find(string name)\n",
		"prefix": "script.find"

		"scope": "source.lua"
	},
	"script.list": {
		"body": "script.list()",
		"description": "GTA_SA\ntable list = script.list()\n",
		"prefix": "script.list"

		"scope": "source.lua"
	},
	"script.get": {
		"body": "script.get(${1:int scriptId})",
		"description": "GTA_SA\nLuaScript script = script.get(int scriptId)\n",
		"prefix": "script.get"

		"scope": "source.lua"
	},
	"script.this": {
		"body": "script.this()",
		"description": "GTA_SA\nscript.this()\n",
		"prefix": "script.this"

		"scope": "source.lua"
	},
	"inicfg.load": {
		"body": "inicfg.load(${1:[table default]},${2:[string file]})",
		"description": "GTA_SA\ntable data = inicfg.load([table default], [string file])\n",
		"prefix": "inicfg.load"

		"scope": "source.lua"
	},
	"inicfg.save": {
		"body": "inicfg.save(${1:table data},${2:[string file]})",
		"description": "GTA_SA\nbool result = inicfg.save(table data, [string file])\n",
		"prefix": "inicfg.save"

		"scope": "source.lua"
	},
	"memory.read": {
		"body": "memory.read(${1:uint address},${2:uint size},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.read(uint address, uint size, [bool unprotect=false])\n",
		"prefix": "memory.read"

		"scope": "source.lua"
	},
	"memory.write": {
		"body": "memory.write(${1:uint address},${2:int value},${3:uint size},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nmemory.write(uint address, int value, uint size, [bool unprotect=false])\n",
		"prefix": "memory.write"

		"scope": "source.lua"
	},
	"memory.getint8": {
		"body": "memory.getint8(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getint8(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint8"

		"scope": "source.lua"
	},
	"memory.setint8": {
		"body": "memory.setint8(${1:uint address},${2:int byte},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setint8(uint address, int byte, [bool unprotect=false])\n",
		"prefix": "memory.setint8"

		"scope": "source.lua"
	},
	"memory.getint16": {
		"body": "memory.getint16(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getint16(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint16"

		"scope": "source.lua"
	},
	"memory.setint16": {
		"body": "memory.setint16(${1:uint address},${2:int word},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setint16(uint address, int word, [bool unprotect=false])\n",
		"prefix": "memory.setint16"

		"scope": "source.lua"
	},
	"memory.getint32": {
		"body": "memory.getint32(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getint32(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint32"

		"scope": "source.lua"
	},
	"memory.setint32": {
		"body": "memory.setint32(${1:uint address},${2:int dword},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setint32(uint address, int dword, [bool unprotect=false])\n",
		"prefix": "memory.setint32"

		"scope": "source.lua"
	},
	"memory.getint64": {
		"body": "memory.getint64(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\ndouble value = memory.getint64(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getint64"

		"scope": "source.lua"
	},
	"memory.setint64": {
		"body": "memory.setint64(${1:uint address},${2:double qword},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setint64(uint address, double qword, [bool unprotect=false])\n",
		"prefix": "memory.setint64"

		"scope": "source.lua"
	},
	"memory.getuint8": {
		"body": "memory.getuint8(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getuint8(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint8"

		"scope": "source.lua"
	},
	"memory.setuint8": {
		"body": "memory.setuint8(${1:uint address},${2:int byte},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setuint8(uint address, int byte, [bool unprotect=false])\n",
		"prefix": "memory.setuint8"

		"scope": "source.lua"
	},
	"memory.getuint16": {
		"body": "memory.getuint16(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getuint16(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint16"

		"scope": "source.lua"
	},
	"memory.setuint16": {
		"body": "memory.setuint16(${1:uint address},${2:int word},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setuint16(uint address, int word, [bool unprotect=false])\n",
		"prefix": "memory.setuint16"

		"scope": "source.lua"
	},
	"memory.getuint32": {
		"body": "memory.getuint32(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nint value = memory.getuint32(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint32"

		"scope": "source.lua"
	},
	"memory.setuint32": {
		"body": "memory.setuint32(${1:uint address},${2:int dword},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setuint32(uint address, int dword, [bool unprotect=false])\n",
		"prefix": "memory.setuint32"

		"scope": "source.lua"
	},
	"memory.getuint64": {
		"body": "memory.getuint64(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\ndouble value = memory.getuint64(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getuint64"

		"scope": "source.lua"
	},
	"memory.setuint64": {
		"body": "memory.setuint64(${1:uint address},${2:double qword},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setuint64(uint address, double qword, [bool unprotect=false])\n",
		"prefix": "memory.setuint64"

		"scope": "source.lua"
	},
	"memory.getfloat": {
		"body": "memory.getfloat(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\nfloat value = memory.getfloat(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getfloat"

		"scope": "source.lua"
	},
	"memory.setfloat": {
		"body": "memory.setfloat(${1:uint address},${2:float value},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setfloat(uint address, float value, [bool unprotect=false])\n",
		"prefix": "memory.setfloat"

		"scope": "source.lua"
	},
	"memory.getdouble": {
		"body": "memory.getdouble(${1:uint address},${2:[bool unprotect=false]})",
		"description": "GTA_SA\ndouble value = memory.getdouble(uint address, [bool unprotect=false])\n",
		"prefix": "memory.getdouble"

		"scope": "source.lua"
	},
	"memory.setdouble": {
		"body": "memory.setdouble(${1:uint address},${2:double value},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.setdouble(uint address, double value, [bool unprotect=false])\n",
		"prefix": "memory.setdouble"

		"scope": "source.lua"
	},
	"memory.unprotect": {
		"body": "memory.unprotect(${1:uint address},${2:uint size})",
		"description": "GTA_SA\nint oldProtection = memory.unprotect(uint address, uint size)\n",
		"prefix": "memory.unprotect"

		"scope": "source.lua"
	},
	"memory.protect": {
		"body": "memory.protect(${1:uint address},${2:uint size},${3:int newProtection})",
		"description": "GTA_SA\nint oldProtection = memory.protect(uint address, uint size, int newProtection)\n",
		"prefix": "memory.protect"

		"scope": "source.lua"
	},
	"memory.copy": {
		"body": "memory.copy(${1:uint destAddress},${2:uint srcAddress},${3:uint size},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nmemory.copy(uint destAddress, uint srcAddress, uint size, [bool unprotect=false])\n",
		"prefix": "memory.copy"

		"scope": "source.lua"
	},
	"memory.compare": {
		"body": "memory.compare(${1:uint address1},${2:uint address2},${3:uint size},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nbool result = memory.compare(uint address1, uint address2, uint size, [bool unprotect=false])\n",
		"prefix": "memory.compare"

		"scope": "source.lua"
	},
	"memory.tostring": {
		"body": "memory.tostring(${1:uint address},${2:[uint size]},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nstring str = memory.tostring(uint address, [uint size], [bool unprotect=false])\n",
		"prefix": "memory.tostring"

		"scope": "source.lua"
	},
	"memory.tohex": {
		"body": "memory.tohex(${1:uint address},${2:uint size},${3:[bool unprotect=false]})",
		"description": "GTA_SA\nstring hexstr = memory.tohex(uint address, uint size, [bool unprotect=false])\n",
		"prefix": "memory.tohex"

		"scope": "source.lua"
	},
	"memory.hex2bin": {
		"body": "memory.hex2bin(${1:string hex},${2:[uint dstAddress]},${3:[uint size]})",
		"description": "GTA_SA\nstring bin = memory.hex2bin(string hex, [uint dstAddress], [uint size])\n",
		"prefix": "memory.hex2bin"

		"scope": "source.lua"
	},
	"memory.fill": {
		"body": "memory.fill(${1:uint address},${2:int value},${3:uint size},${4:[bool unprotect=false]})",
		"description": "GTA_SA\nmemory.fill(uint address, int value, uint size, [bool unprotect=false])\n",
		"prefix": "memory.fill"

		"scope": "source.lua"
	},
	"memory.strptr": {
		"body": "memory.strptr(${1:string str})",
		"description": "GTA_SA\nuint address = memory.strptr(string str)\n",
		"prefix": "memory.strptr"

		"scope": "source.lua"
	},
	"lua_thread.create": {
		"body": "lua_thread.create(${1:function func},${2:...})",
		"description": "GTA_SA\nLuaThread thread = lua_thread.create(function func, ...)\n",
		"prefix": "lua_thread.create"

		"scope": "source.lua"
	},
	"lua_thread.create_suspended": {
		"body": "lua_thread.create_suspended(${1:function func})",
		"description": "GTA_SA\nLuaThread thread = lua_thread.create_suspended(function func)\n",
		"prefix": "lua_thread.create_suspended"

		"scope": "source.lua"
	},
	"main": {
		"body": "main()",
		"description": "GTA_SA\nmain()\n",
		"prefix": "main"

		"scope": "source.lua"
	},
	"onExitScript": {
		"body": "onExitScript(${1:bool quitGame})",
		"description": "GTA_SA\nonExitScript(bool quitGame)\n",
		"prefix": "onExitScript"

		"scope": "source.lua"
	},
	"onScriptMessage": {
		"body": "onScriptMessage(${1:string msg},${2:LuaScript script})",
		"description": "GTA_SA\nonScriptMessage(string msg, LuaScript script)\n",
		"prefix": "onScriptMessage"

		"scope": "source.lua"
	},
	"onSystemMessage": {
		"body": "onSystemMessage(${1:string msg},${2:int type},${3:LuaScript script})",
		"description": "GTA_SA\nonSystemMessage(string msg, int type, LuaScript script)\n",
		"prefix": "onSystemMessage"

		"scope": "source.lua"
	},
	"onQuitGame": {
		"body": "onQuitGame()",
		"description": "GTA_SA\nonQuitGame()\n",
		"prefix": "onQuitGame"

		"scope": "source.lua"
	},
	"onSystemInitialized": {
		"body": "onSystemInitialized()",
		"description": "GTA_SA\nonSystemInitialized()\n",
		"prefix": "onSystemInitialized"

		"scope": "source.lua"
	},
	"onScriptLoad": {
		"body": "onScriptLoad(${1:LuaScript script})",
		"description": "GTA_SA\nonScriptLoad(LuaScript script)\n",
		"prefix": "onScriptLoad"

		"scope": "source.lua"
	},
	"onScriptTerminate": {
		"body": "onScriptTerminate(${1:LuaScript script},${2:bool quitGame})",
		"description": "GTA_SA\nonScriptTerminate(LuaScript script, bool quitGame)\n",
		"prefix": "onScriptTerminate"

		"scope": "source.lua"
	},
	"onReceiveRpc": {
		"body": "onReceiveRpc(${1:int id},${2:Bitstream bitStream})",
		"description": "GTA_SA\nbool process, int id, Bitstream bitStream = onReceiveRpc(int id, Bitstream bitStream)\n",
		"prefix": "onReceiveRpc"

		"scope": "source.lua"
	},
	"onReceivePacket": {
		"body": "onReceivePacket(${1:int id},${2:Bitstream bitStream})",
		"description": "GTA_SA\nbool process, int id, Bitstream bitStream = onReceivePacket(int id, Bitstream bitStream)\n",
		"prefix": "onReceivePacket"

		"scope": "source.lua"
	},
	"onSendRpc": {
		"body": "onSendRpc(${1:int id},${2:Bitstream bitStream},${3:int priority},${4:int reliability},${5:int orderingChannel},${6:bool shiftTs})",
		"description": "GTA_SA\nbool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs = onSendRpc(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel, bool shiftTs)\n",
		"prefix": "onSendRpc"

		"scope": "source.lua"
	},
	"onSendPacket": {
		"body": "onSendPacket(${1:int id},${2:Bitstream bitStream},${3:int priority},${4:int reliability},${5:int orderingChannel})",
		"description": "GTA_SA\nbool process, int id, Bitstream bitStream, int priority, int reliability, int orderingChannel = onSendPacket(int id, Bitstream bitStream, int priority, int reliability, int orderingChannel)\n",
		"prefix": "onSendPacket"

		"scope": "source.lua"
	},
	"onWindowMessage": {
		"body": "onWindowMessage(${1:uint msg},${2:uint wparam},${3:int lparam})",
		"description": "GTA_SA\nonWindowMessage(uint msg, uint wparam, int lparam)\n",
		"prefix": "onWindowMessage"

		"scope": "source.lua"
	},
	"onStartNewGame": {
		"body": "onStartNewGame(${1:int missionPackNumber})",
		"description": "GTA_SA\nonStartNewGame(int missionPackNumber)\n",
		"prefix": "onStartNewGame"

		"scope": "source.lua"
	},
	"onSaveGame": {
		"body": "onSaveGame(${1:table saveData})",
		"description": "GTA_SA\ntable newSaveData = onSaveGame(table saveData)\n",
		"prefix": "onSaveGame"

		"scope": "source.lua"
	},
	"onLoadGame": {
		"body": "onLoadGame(${1:table saveData})",
		"description": "GTA_SA\nonLoadGame(table saveData)\n",
		"prefix": "onLoadGame"

		"scope": "source.lua"
	},
	"onD3DDeviceLost": {
		"body": "onD3DDeviceLost()",
		"description": "GTA_SA\nonD3DDeviceLost()\n",
		"prefix": "onD3DDeviceLost"

		"scope": "source.lua"
	},
	"onD3DDeviceReset": {
		"body": "onD3DDeviceReset()",
		"description": "GTA_SA\nonD3DDeviceReset()\n",
		"prefix": "onD3DDeviceReset"

		"scope": "source.lua"
	},
	"onD3DPresent": {
		"body": "onD3DPresent()",
		"description": "GTA_SA\nonD3DPresent()\n",
		"prefix": "onD3DPresent"

		"scope": "source.lua"
	},
	
	
	
	"MoonAdditions": {
		"body": "local mad = require('MoonAdditions')",
		"description": "MoonAdditions\n",
		"prefix": "moon",
		"scope": "source.lua"
	},
	
	"MODEL_AIRTRAIN_VLO": {
		"body": "320",
		"description": "GTA SA #Models\nModel id 320\n",
		"prefix": "MODEL_AIRTRAIN_VLO",
		"scope": "source.lua"
	},
	"MODEL_GUN_DILDO1": {
		"body": "321",
		"description": "GTA SA #Models\nModel id 321\n",
		"prefix": "MODEL_GUN_DILDO1",
		"scope": "source.lua"
	},
	"MODEL_GUN_DILDO2": {
		"body": "322",
		"description": "GTA SA #Models\nModel id 322\n",
		"prefix": "MODEL_GUN_DILDO2",
		"scope": "source.lua"
	},
	"MODEL_GUN_VIBE1": {
		"body": "323",
		"description": "GTA SA #Models\nModel id 323\n",
		"prefix": "MODEL_GUN_VIBE1",
		"scope": "source.lua"
	},
	"MODEL_GUN_VIBE2": {
		"body": "324",
		"description": "GTA SA #Models\nModel id 324\n",
		"prefix": "MODEL_GUN_VIBE2",
		"scope": "source.lua"
	},
	"MODEL_FLOWERA": {
		"body": "325",
		"description": "GTA SA #Models\nModel id 325\n",
		"prefix": "MODEL_FLOWERA",
		"scope": "source.lua"
	},
	"MODEL_GUN_CANE": {
		"body": "326",
		"description": "GTA SA #Models\nModel id 326\n",
		"prefix": "MODEL_GUN_CANE",
		"scope": "source.lua"
	},
	"MODEL_GUN_BOXWEE": {
		"body": "327",
		"description": "GTA SA #Models\nModel id 327\n",
		"prefix": "MODEL_GUN_BOXWEE",
		"scope": "source.lua"
	},
	"MODEL_GUN_BOXBIG": {
		"body": "328",
		"description": "GTA SA #Models\nModel id 328\n",
		"prefix": "MODEL_GUN_BOXBIG",
		"scope": "source.lua"
	},
	"MODEL_CELLPHONE": {
		"body": "330",
		"description": "GTA SA #Models\nModel id 330\n",
		"prefix": "MODEL_CELLPHONE",
		"scope": "source.lua"
	},
	"MODEL_BRASSKNUCKLE": {
		"body": "331",
		"description": "GTA SA #Models\nModel id 331\n",
		"prefix": "MODEL_BRASSKNUCKLE",
		"scope": "source.lua"
	},
	"MODEL_GOLFCLUB": {
		"body": "333",
		"description": "GTA SA #Models\nModel id 333\n",
		"prefix": "MODEL_GOLFCLUB",
		"scope": "source.lua"
	},
	"MODEL_NITESTICK": {
		"body": "334",
		"description": "GTA SA #Models\nModel id 334\n",
		"prefix": "MODEL_NITESTICK",
		"scope": "source.lua"
	},
	"MODEL_KNIFECUR": {
		"body": "335",
		"description": "GTA SA #Models\nModel id 335\n",
		"prefix": "MODEL_KNIFECUR",
		"scope": "source.lua"
	},
	"MODEL_BAT": {
		"body": "336",
		"description": "GTA SA #Models\nModel id 336\n",
		"prefix": "MODEL_BAT",
		"scope": "source.lua"
	},
	"MODEL_SHOVEL": {
		"body": "337",
		"description": "GTA SA #Models\nModel id 337\n",
		"prefix": "MODEL_SHOVEL",
		"scope": "source.lua"
	},
	"MODEL_POOLCUE": {
		"body": "338",
		"description": "GTA SA #Models\nModel id 338\n",
		"prefix": "MODEL_POOLCUE",
		"scope": "source.lua"
	},
	"MODEL_KATANA": {
		"body": "339",
		"description": "GTA SA #Models\nModel id 339\n",
		"prefix": "MODEL_KATANA",
		"scope": "source.lua"
	},
	"MODEL_CHNSAW": {
		"body": "341",
		"description": "GTA SA #Models\nModel id 341\n",
		"prefix": "MODEL_CHNSAW",
		"scope": "source.lua"
	},
	"MODEL_GRENADE": {
		"body": "342",
		"description": "GTA SA #Models\nModel id 342\n",
		"prefix": "MODEL_GRENADE",
		"scope": "source.lua"
	},
	"MODEL_TEARGAS": {
		"body": "343",
		"description": "GTA SA #Models\nModel id 343\n",
		"prefix": "MODEL_TEARGAS",
		"scope": "source.lua"
	},
	"MODEL_MOLOTOV": {
		"body": "344",
		"description": "GTA SA #Models\nModel id 344\n",
		"prefix": "MODEL_MOLOTOV",
		"scope": "source.lua"
	},
	"MODEL_MISSILE": {
		"body": "345",
		"description": "GTA SA #Models\nModel id 345\n",
		"prefix": "MODEL_MISSILE",
		"scope": "source.lua"
	},
	"MODEL_COLT45": {
		"body": "346",
		"description": "GTA SA #Models\nModel id 346\n",
		"prefix": "MODEL_COLT45",
		"scope": "source.lua"
	},
	"MODEL_SILENCED": {
		"body": "347",
		"description": "GTA SA #Models\nModel id 347\n",
		"prefix": "MODEL_SILENCED",
		"scope": "source.lua"
	},
	"MODEL_DESERT_EAGLE": {
		"body": "348",
		"description": "GTA SA #Models\nModel id 348\n",
		"prefix": "MODEL_DESERT_EAGLE",
		"scope": "source.lua"
	},
	"MODEL_CHROMEGUN": {
		"body": "349",
		"description": "GTA SA #Models\nModel id 349\n",
		"prefix": "MODEL_CHROMEGUN",
		"scope": "source.lua"
	},
	"MODEL_SAWNOFF": {
		"body": "350",
		"description": "GTA SA #Models\nModel id 350\n",
		"prefix": "MODEL_SAWNOFF",
		"scope": "source.lua"
	},
	"MODEL_SHOTGSPA": {
		"body": "351",
		"description": "GTA SA #Models\nModel id 351\n",
		"prefix": "MODEL_SHOTGSPA",
		"scope": "source.lua"
	},
	"MODEL_MICRO_UZI": {
		"body": "352",
		"description": "GTA SA #Models\nModel id 352\n",
		"prefix": "MODEL_MICRO_UZI",
		"scope": "source.lua"
	},
	"MODEL_MP5LNG": {
		"body": "353",
		"description": "GTA SA #Models\nModel id 353\n",
		"prefix": "MODEL_MP5LNG",
		"scope": "source.lua"
	},
	"MODEL_FLARE": {
		"body": "354",
		"description": "GTA SA #Models\nModel id 354\n",
		"prefix": "MODEL_FLARE",
		"scope": "source.lua"
	},
	"MODEL_AK47": {
		"body": "355",
		"description": "GTA SA #Models\nModel id 355\n",
		"prefix": "MODEL_AK47",
		"scope": "source.lua"
	},
	"MODEL_M4": {
		"body": "356",
		"description": "GTA SA #Models\nModel id 356\n",
		"prefix": "MODEL_M4",
		"scope": "source.lua"
	},
	"MODEL_COUNTRYRIFLE": {
		"body": "357",
		"description": "GTA SA #Models\nModel id 357\n",
		"prefix": "MODEL_COUNTRYRIFLE",
		"scope": "source.lua"
	},
	"MODEL_SNIPER": {
		"body": "358",
		"description": "GTA SA #Models\nModel id 358\n",
		"prefix": "MODEL_SNIPER",
		"scope": "source.lua"
	},
	"MODEL_ROCKETLA": {
		"body": "359",
		"description": "GTA SA #Models\nModel id 359\n",
		"prefix": "MODEL_ROCKETLA",
		"scope": "source.lua"
	},
	"MODEL_HEATSEEK": {
		"body": "360",
		"description": "GTA SA #Models\nModel id 360\n",
		"prefix": "MODEL_HEATSEEK",
		"scope": "source.lua"
	},
	"MODEL_FLAME": {
		"body": "361",
		"description": "GTA SA #Models\nModel id 361\n",
		"prefix": "MODEL_FLAME",
		"scope": "source.lua"
	},
	"MODEL_MINIGUN": {
		"body": "362",
		"description": "GTA SA #Models\nModel id 362\n",
		"prefix": "MODEL_MINIGUN",
		"scope": "source.lua"
	},
	"MODEL_SATCHEL": {
		"body": "363",
		"description": "GTA SA #Models\nModel id 363\n",
		"prefix": "MODEL_SATCHEL",
		"scope": "source.lua"
	},
	"MODEL_BOMB": {
		"body": "364",
		"description": "GTA SA #Models\nModel id 364\n",
		"prefix": "MODEL_BOMB",
		"scope": "source.lua"
	},
	"MODEL_SPRAYCAN": {
		"body": "365",
		"description": "GTA SA #Models\nModel id 365\n",
		"prefix": "MODEL_SPRAYCAN",
		"scope": "source.lua"
	},
	"MODEL_FIRE_EX": {
		"body": "366",
		"description": "GTA SA #Models\nModel id 366\n",
		"prefix": "MODEL_FIRE_EX",
		"scope": "source.lua"
	},
	"MODEL_CAMERA": {
		"body": "367",
		"description": "GTA SA #Models\nModel id 367\n",
		"prefix": "MODEL_CAMERA",
		"scope": "source.lua"
	},
	"MODEL_NVGOGGLES": {
		"body": "368",
		"description": "GTA SA #Models\nModel id 368\n",
		"prefix": "MODEL_NVGOGGLES",
		"scope": "source.lua"
	},
	"MODEL_IRGOGGLES": {
		"body": "369",
		"description": "GTA SA #Models\nModel id 369\n",
		"prefix": "MODEL_IRGOGGLES",
		"scope": "source.lua"
	},
	"MODEL_JETPACK": {
		"body": "370",
		"description": "GTA SA #Models\nModel id 370\n",
		"prefix": "MODEL_JETPACK",
		"scope": "source.lua"
	},
	"MODEL_GUN_PARA": {
		"body": "371",
		"description": "GTA SA #Models\nModel id 371\n",
		"prefix": "MODEL_GUN_PARA",
		"scope": "source.lua"
	},
	"MODEL_TEC9": {
		"body": "372",
		"description": "GTA SA #Models\nModel id 372\n",
		"prefix": "MODEL_TEC9",
		"scope": "source.lua"
	},
	"MODEL_ARMOUR": {
		"body": "373",
		"description": "GTA SA #Models\nModel id 373\n",
		"prefix": "MODEL_ARMOUR",
		"scope": "source.lua"
	},
	"MODEL_CSPLAY": {
		"body": "1",
		"description": "GTA SA #Models\nModel id 1\n",
		"prefix": "MODEL_CSPLAY",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "384",
		"description": "GTA SA #Models\nModel id 384\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "385",
		"description": "GTA SA #Models\nModel id 385\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "386",
		"description": "GTA SA #Models\nModel id 386\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "387",
		"description": "GTA SA #Models\nModel id 387\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "388",
		"description": "GTA SA #Models\nModel id 388\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "389",
		"description": "GTA SA #Models\nModel id 389\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "390",
		"description": "GTA SA #Models\nModel id 390\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "391",
		"description": "GTA SA #Models\nModel id 391\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "392",
		"description": "GTA SA #Models\nModel id 392\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_CLOTHES01": {
		"body": "393",
		"description": "GTA SA #Models\nModel id 393\n",
		"prefix": "MODEL_CLOTHES01",
		"scope": "source.lua"
	},
	"MODEL_SHANDL": {
		"body": "394",
		"description": "GTA SA #Models\nModel id 394\n",
		"prefix": "MODEL_SHANDL",
		"scope": "source.lua"
	},
	"MODEL_SHANDR": {
		"body": "395",
		"description": "GTA SA #Models\nModel id 395\n",
		"prefix": "MODEL_SHANDR",
		"scope": "source.lua"
	},
	"MODEL_FHANDL": {
		"body": "396",
		"description": "GTA SA #Models\nModel id 396\n",
		"prefix": "MODEL_FHANDL",
		"scope": "source.lua"
	},
	"MODEL_FHANDR": {
		"body": "397",
		"description": "GTA SA #Models\nModel id 397\n",
		"prefix": "MODEL_FHANDR",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ01": {
		"body": "300",
		"description": "GTA SA #Models\nModel id 300\n",
		"prefix": "MODEL_CUTOBJ01",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ02": {
		"body": "301",
		"description": "GTA SA #Models\nModel id 301\n",
		"prefix": "MODEL_CUTOBJ02",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ03": {
		"body": "302",
		"description": "GTA SA #Models\nModel id 302\n",
		"prefix": "MODEL_CUTOBJ03",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ04": {
		"body": "303",
		"description": "GTA SA #Models\nModel id 303\n",
		"prefix": "MODEL_CUTOBJ04",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ05": {
		"body": "304",
		"description": "GTA SA #Models\nModel id 304\n",
		"prefix": "MODEL_CUTOBJ05",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ06": {
		"body": "305",
		"description": "GTA SA #Models\nModel id 305\n",
		"prefix": "MODEL_CUTOBJ06",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ07": {
		"body": "306",
		"description": "GTA SA #Models\nModel id 306\n",
		"prefix": "MODEL_CUTOBJ07",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ08": {
		"body": "307",
		"description": "GTA SA #Models\nModel id 307\n",
		"prefix": "MODEL_CUTOBJ08",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ09": {
		"body": "308",
		"description": "GTA SA #Models\nModel id 308\n",
		"prefix": "MODEL_CUTOBJ09",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ10": {
		"body": "309",
		"description": "GTA SA #Models\nModel id 309\n",
		"prefix": "MODEL_CUTOBJ10",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ11": {
		"body": "310",
		"description": "GTA SA #Models\nModel id 310\n",
		"prefix": "MODEL_CUTOBJ11",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ12": {
		"body": "311",
		"description": "GTA SA #Models\nModel id 311\n",
		"prefix": "MODEL_CUTOBJ12",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ13": {
		"body": "312",
		"description": "GTA SA #Models\nModel id 312\n",
		"prefix": "MODEL_CUTOBJ13",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ14": {
		"body": "313",
		"description": "GTA SA #Models\nModel id 313\n",
		"prefix": "MODEL_CUTOBJ14",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ15": {
		"body": "314",
		"description": "GTA SA #Models\nModel id 314\n",
		"prefix": "MODEL_CUTOBJ15",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ16": {
		"body": "315",
		"description": "GTA SA #Models\nModel id 315\n",
		"prefix": "MODEL_CUTOBJ16",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ17": {
		"body": "316",
		"description": "GTA SA #Models\nModel id 316\n",
		"prefix": "MODEL_CUTOBJ17",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ18": {
		"body": "317",
		"description": "GTA SA #Models\nModel id 317\n",
		"prefix": "MODEL_CUTOBJ18",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ19": {
		"body": "318",
		"description": "GTA SA #Models\nModel id 318\n",
		"prefix": "MODEL_CUTOBJ19",
		"scope": "source.lua"
	},
	"MODEL_CUTOBJ20": {
		"body": "319",
		"description": "GTA SA #Models\nModel id 319\n",
		"prefix": "MODEL_CUTOBJ20",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_--vehicles.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_--vehicles.ide",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_LANDSTAL": {
		"body": "400",
		"description": "GTA SA #Models\nModel id 400\n",
		"prefix": "MODEL_LANDSTAL",
		"scope": "source.lua"
	},
	"MODEL_BRAVURA": {
		"body": "401",
		"description": "GTA SA #Models\nModel id 401\n",
		"prefix": "MODEL_BRAVURA",
		"scope": "source.lua"
	},
	"MODEL_BUFFALO": {
		"body": "402",
		"description": "GTA SA #Models\nModel id 402\n",
		"prefix": "MODEL_BUFFALO",
		"scope": "source.lua"
	},
	"MODEL_LINERUN": {
		"body": "403",
		"description": "GTA SA #Models\nModel id 403\n",
		"prefix": "MODEL_LINERUN",
		"scope": "source.lua"
	},
	"MODEL_PEREN": {
		"body": "404",
		"description": "GTA SA #Models\nModel id 404\n",
		"prefix": "MODEL_PEREN",
		"scope": "source.lua"
	},
	"MODEL_SENTINEL": {
		"body": "405",
		"description": "GTA SA #Models\nModel id 405\n",
		"prefix": "MODEL_SENTINEL",
		"scope": "source.lua"
	},
	"MODEL_DUMPER": {
		"body": "406",
		"description": "GTA SA #Models\nModel id 406\n",
		"prefix": "MODEL_DUMPER",
		"scope": "source.lua"
	},
	"MODEL_FIRETRUK": {
		"body": "407",
		"description": "GTA SA #Models\nModel id 407\n",
		"prefix": "MODEL_FIRETRUK",
		"scope": "source.lua"
	},
	"MODEL_TRASH": {
		"body": "408",
		"description": "GTA SA #Models\nModel id 408\n",
		"prefix": "MODEL_TRASH",
		"scope": "source.lua"
	},
	"MODEL_STRETCH": {
		"body": "409",
		"description": "GTA SA #Models\nModel id 409\n",
		"prefix": "MODEL_STRETCH",
		"scope": "source.lua"
	},
	"MODEL_MANANA": {
		"body": "410",
		"description": "GTA SA #Models\nModel id 410\n",
		"prefix": "MODEL_MANANA",
		"scope": "source.lua"
	},
	"MODEL_INFERNUS": {
		"body": "411",
		"description": "GTA SA #Models\nModel id 411\n",
		"prefix": "MODEL_INFERNUS",
		"scope": "source.lua"
	},
	"MODEL_VOODOO": {
		"body": "412",
		"description": "GTA SA #Models\nModel id 412\n",
		"prefix": "MODEL_VOODOO",
		"scope": "source.lua"
	},
	"MODEL_PONY": {
		"body": "413",
		"description": "GTA SA #Models\nModel id 413\n",
		"prefix": "MODEL_PONY",
		"scope": "source.lua"
	},
	"MODEL_MULE": {
		"body": "414",
		"description": "GTA SA #Models\nModel id 414\n",
		"prefix": "MODEL_MULE",
		"scope": "source.lua"
	},
	"MODEL_CHEETAH": {
		"body": "415",
		"description": "GTA SA #Models\nModel id 415\n",
		"prefix": "MODEL_CHEETAH",
		"scope": "source.lua"
	},
	"MODEL_AMBULAN": {
		"body": "416",
		"description": "GTA SA #Models\nModel id 416\n",
		"prefix": "MODEL_AMBULAN",
		"scope": "source.lua"
	},
	"MODEL_LEVIATHN": {
		"body": "417",
		"description": "GTA SA #Models\nModel id 417\n",
		"prefix": "MODEL_LEVIATHN",
		"scope": "source.lua"
	},
	"MODEL_MOONBEAM": {
		"body": "418",
		"description": "GTA SA #Models\nModel id 418\n",
		"prefix": "MODEL_MOONBEAM",
		"scope": "source.lua"
	},
	"MODEL_ESPERANT": {
		"body": "419",
		"description": "GTA SA #Models\nModel id 419\n",
		"prefix": "MODEL_ESPERANT",
		"scope": "source.lua"
	},
	"MODEL_TAXI": {
		"body": "420",
		"description": "GTA SA #Models\nModel id 420\n",
		"prefix": "MODEL_TAXI",
		"scope": "source.lua"
	},
	"MODEL_WASHING": {
		"body": "421",
		"description": "GTA SA #Models\nModel id 421\n",
		"prefix": "MODEL_WASHING",
		"scope": "source.lua"
	},
	"MODEL_BOBCAT": {
		"body": "422",
		"description": "GTA SA #Models\nModel id 422\n",
		"prefix": "MODEL_BOBCAT",
		"scope": "source.lua"
	},
	"MODEL_MRWHOOP": {
		"body": "423",
		"description": "GTA SA #Models\nModel id 423\n",
		"prefix": "MODEL_MRWHOOP",
		"scope": "source.lua"
	},
	"MODEL_BFINJECT": {
		"body": "424",
		"description": "GTA SA #Models\nModel id 424\n",
		"prefix": "MODEL_BFINJECT",
		"scope": "source.lua"
	},
	"MODEL_HUNTER": {
		"body": "425",
		"description": "GTA SA #Models\nModel id 425\n",
		"prefix": "MODEL_HUNTER",
		"scope": "source.lua"
	},
	"MODEL_PREMIER": {
		"body": "426",
		"description": "GTA SA #Models\nModel id 426\n",
		"prefix": "MODEL_PREMIER",
		"scope": "source.lua"
	},
	"MODEL_ENFORCER": {
		"body": "427",
		"description": "GTA SA #Models\nModel id 427\n",
		"prefix": "MODEL_ENFORCER",
		"scope": "source.lua"
	},
	"MODEL_SECURICA": {
		"body": "428",
		"description": "GTA SA #Models\nModel id 428\n",
		"prefix": "MODEL_SECURICA",
		"scope": "source.lua"
	},
	"MODEL_BANSHEE": {
		"body": "429",
		"description": "GTA SA #Models\nModel id 429\n",
		"prefix": "MODEL_BANSHEE",
		"scope": "source.lua"
	},
	"MODEL_PREDATOR": {
		"body": "430",
		"description": "GTA SA #Models\nModel id 430\n",
		"prefix": "MODEL_PREDATOR",
		"scope": "source.lua"
	},
	"MODEL_BUS": {
		"body": "431",
		"description": "GTA SA #Models\nModel id 431\n",
		"prefix": "MODEL_BUS",
		"scope": "source.lua"
	},
	"MODEL_RHINO": {
		"body": "432",
		"description": "GTA SA #Models\nModel id 432\n",
		"prefix": "MODEL_RHINO",
		"scope": "source.lua"
	},
	"MODEL_BARRACKS": {
		"body": "433",
		"description": "GTA SA #Models\nModel id 433\n",
		"prefix": "MODEL_BARRACKS",
		"scope": "source.lua"
	},
	"MODEL_HOTKNIFE": {
		"body": "434",
		"description": "GTA SA #Models\nModel id 434\n",
		"prefix": "MODEL_HOTKNIFE",
		"scope": "source.lua"
	},
	"MODEL_ARTICT1": {
		"body": "435",
		"description": "GTA SA #Models\nModel id 435\n",
		"prefix": "MODEL_ARTICT1",
		"scope": "source.lua"
	},
	"MODEL_PREVION": {
		"body": "436",
		"description": "GTA SA #Models\nModel id 436\n",
		"prefix": "MODEL_PREVION",
		"scope": "source.lua"
	},
	"MODEL_COACH": {
		"body": "437",
		"description": "GTA SA #Models\nModel id 437\n",
		"prefix": "MODEL_COACH",
		"scope": "source.lua"
	},
	"MODEL_CABBIE": {
		"body": "438",
		"description": "GTA SA #Models\nModel id 438\n",
		"prefix": "MODEL_CABBIE",
		"scope": "source.lua"
	},
	"MODEL_STALLION": {
		"body": "439",
		"description": "GTA SA #Models\nModel id 439\n",
		"prefix": "MODEL_STALLION",
		"scope": "source.lua"
	},
	"MODEL_RUMPO": {
		"body": "440",
		"description": "GTA SA #Models\nModel id 440\n",
		"prefix": "MODEL_RUMPO",
		"scope": "source.lua"
	},
	"MODEL_RCBANDIT": {
		"body": "441",
		"description": "GTA SA #Models\nModel id 441\n",
		"prefix": "MODEL_RCBANDIT",
		"scope": "source.lua"
	},
	"MODEL_ROMERO": {
		"body": "442",
		"description": "GTA SA #Models\nModel id 442\n",
		"prefix": "MODEL_ROMERO",
		"scope": "source.lua"
	},
	"MODEL_PACKER": {
		"body": "443",
		"description": "GTA SA #Models\nModel id 443\n",
		"prefix": "MODEL_PACKER",
		"scope": "source.lua"
	},
	"MODEL_MONSTER": {
		"body": "444",
		"description": "GTA SA #Models\nModel id 444\n",
		"prefix": "MODEL_MONSTER",
		"scope": "source.lua"
	},
	"MODEL_ADMIRAL": {
		"body": "445",
		"description": "GTA SA #Models\nModel id 445\n",
		"prefix": "MODEL_ADMIRAL",
		"scope": "source.lua"
	},
	"MODEL_SQUALO": {
		"body": "446",
		"description": "GTA SA #Models\nModel id 446\n",
		"prefix": "MODEL_SQUALO",
		"scope": "source.lua"
	},
	"MODEL_SEASPAR": {
		"body": "447",
		"description": "GTA SA #Models\nModel id 447\n",
		"prefix": "MODEL_SEASPAR",
		"scope": "source.lua"
	},
	"MODEL_PIZZABOY": {
		"body": "448",
		"description": "GTA SA #Models\nModel id 448\n",
		"prefix": "MODEL_PIZZABOY",
		"scope": "source.lua"
	},
	"MODEL_TRAM": {
		"body": "449",
		"description": "GTA SA #Models\nModel id 449\n",
		"prefix": "MODEL_TRAM",
		"scope": "source.lua"
	},
	"MODEL_ARTICT2": {
		"body": "450",
		"description": "GTA SA #Models\nModel id 450\n",
		"prefix": "MODEL_ARTICT2",
		"scope": "source.lua"
	},
	"MODEL_TURISMO": {
		"body": "451",
		"description": "GTA SA #Models\nModel id 451\n",
		"prefix": "MODEL_TURISMO",
		"scope": "source.lua"
	},
	"MODEL_SPEEDER": {
		"body": "452",
		"description": "GTA SA #Models\nModel id 452\n",
		"prefix": "MODEL_SPEEDER",
		"scope": "source.lua"
	},
	"MODEL_REEFER": {
		"body": "453",
		"description": "GTA SA #Models\nModel id 453\n",
		"prefix": "MODEL_REEFER",
		"scope": "source.lua"
	},
	"MODEL_TROPIC": {
		"body": "454",
		"description": "GTA SA #Models\nModel id 454\n",
		"prefix": "MODEL_TROPIC",
		"scope": "source.lua"
	},
	"MODEL_FLATBED": {
		"body": "455",
		"description": "GTA SA #Models\nModel id 455\n",
		"prefix": "MODEL_FLATBED",
		"scope": "source.lua"
	},
	"MODEL_YANKEE": {
		"body": "456",
		"description": "GTA SA #Models\nModel id 456\n",
		"prefix": "MODEL_YANKEE",
		"scope": "source.lua"
	},
	"MODEL_CADDY": {
		"body": "457",
		"description": "GTA SA #Models\nModel id 457\n",
		"prefix": "MODEL_CADDY",
		"scope": "source.lua"
	},
	"MODEL_SOLAIR": {
		"body": "458",
		"description": "GTA SA #Models\nModel id 458\n",
		"prefix": "MODEL_SOLAIR",
		"scope": "source.lua"
	},
	"MODEL_TOPFUN": {
		"body": "459",
		"description": "GTA SA #Models\nModel id 459\n",
		"prefix": "MODEL_TOPFUN",
		"scope": "source.lua"
	},
	"MODEL_SKIMMER": {
		"body": "460",
		"description": "GTA SA #Models\nModel id 460\n",
		"prefix": "MODEL_SKIMMER",
		"scope": "source.lua"
	},
	"MODEL_PCJ600": {
		"body": "461",
		"description": "GTA SA #Models\nModel id 461\n",
		"prefix": "MODEL_PCJ600",
		"scope": "source.lua"
	},
	"MODEL_FAGGIO": {
		"body": "462",
		"description": "GTA SA #Models\nModel id 462\n",
		"prefix": "MODEL_FAGGIO",
		"scope": "source.lua"
	},
	"MODEL_FREEWAY": {
		"body": "463",
		"description": "GTA SA #Models\nModel id 463\n",
		"prefix": "MODEL_FREEWAY",
		"scope": "source.lua"
	},
	"MODEL_RCBARON": {
		"body": "464",
		"description": "GTA SA #Models\nModel id 464\n",
		"prefix": "MODEL_RCBARON",
		"scope": "source.lua"
	},
	"MODEL_RCRAIDER": {
		"body": "465",
		"description": "GTA SA #Models\nModel id 465\n",
		"prefix": "MODEL_RCRAIDER",
		"scope": "source.lua"
	},
	"MODEL_GLENDALE": {
		"body": "466",
		"description": "GTA SA #Models\nModel id 466\n",
		"prefix": "MODEL_GLENDALE",
		"scope": "source.lua"
	},
	"MODEL_OCEANIC": {
		"body": "467",
		"description": "GTA SA #Models\nModel id 467\n",
		"prefix": "MODEL_OCEANIC",
		"scope": "source.lua"
	},
	"MODEL_SANCHEZ": {
		"body": "468",
		"description": "GTA SA #Models\nModel id 468\n",
		"prefix": "MODEL_SANCHEZ",
		"scope": "source.lua"
	},
	"MODEL_SPARROW": {
		"body": "469",
		"description": "GTA SA #Models\nModel id 469\n",
		"prefix": "MODEL_SPARROW",
		"scope": "source.lua"
	},
	"MODEL_PATRIOT": {
		"body": "470",
		"description": "GTA SA #Models\nModel id 470\n",
		"prefix": "MODEL_PATRIOT",
		"scope": "source.lua"
	},
	"MODEL_QUAD": {
		"body": "471",
		"description": "GTA SA #Models\nModel id 471\n",
		"prefix": "MODEL_QUAD",
		"scope": "source.lua"
	},
	"MODEL_COASTG": {
		"body": "472",
		"description": "GTA SA #Models\nModel id 472\n",
		"prefix": "MODEL_COASTG",
		"scope": "source.lua"
	},
	"MODEL_DINGHY": {
		"body": "473",
		"description": "GTA SA #Models\nModel id 473\n",
		"prefix": "MODEL_DINGHY",
		"scope": "source.lua"
	},
	"MODEL_HERMES": {
		"body": "474",
		"description": "GTA SA #Models\nModel id 474\n",
		"prefix": "MODEL_HERMES",
		"scope": "source.lua"
	},
	"MODEL_SABRE": {
		"body": "475",
		"description": "GTA SA #Models\nModel id 475\n",
		"prefix": "MODEL_SABRE",
		"scope": "source.lua"
	},
	"MODEL_RUSTLER": {
		"body": "476",
		"description": "GTA SA #Models\nModel id 476\n",
		"prefix": "MODEL_RUSTLER",
		"scope": "source.lua"
	},
	"MODEL_ZR350": {
		"body": "477",
		"description": "GTA SA #Models\nModel id 477\n",
		"prefix": "MODEL_ZR350",
		"scope": "source.lua"
	},
	"MODEL_WALTON": {
		"body": "478",
		"description": "GTA SA #Models\nModel id 478\n",
		"prefix": "MODEL_WALTON",
		"scope": "source.lua"
	},
	"MODEL_REGINA": {
		"body": "479",
		"description": "GTA SA #Models\nModel id 479\n",
		"prefix": "MODEL_REGINA",
		"scope": "source.lua"
	},
	"MODEL_COMET": {
		"body": "480",
		"description": "GTA SA #Models\nModel id 480\n",
		"prefix": "MODEL_COMET",
		"scope": "source.lua"
	},
	"MODEL_BMX": {
		"body": "481",
		"description": "GTA SA #Models\nModel id 481\n",
		"prefix": "MODEL_BMX",
		"scope": "source.lua"
	},
	"MODEL_BURRITO": {
		"body": "482",
		"description": "GTA SA #Models\nModel id 482\n",
		"prefix": "MODEL_BURRITO",
		"scope": "source.lua"
	},
	"MODEL_CAMPER": {
		"body": "483",
		"description": "GTA SA #Models\nModel id 483\n",
		"prefix": "MODEL_CAMPER",
		"scope": "source.lua"
	},
	"MODEL_MARQUIS": {
		"body": "484",
		"description": "GTA SA #Models\nModel id 484\n",
		"prefix": "MODEL_MARQUIS",
		"scope": "source.lua"
	},
	"MODEL_BAGGAGE": {
		"body": "485",
		"description": "GTA SA #Models\nModel id 485\n",
		"prefix": "MODEL_BAGGAGE",
		"scope": "source.lua"
	},
	"MODEL_DOZER": {
		"body": "486",
		"description": "GTA SA #Models\nModel id 486\n",
		"prefix": "MODEL_DOZER",
		"scope": "source.lua"
	},
	"MODEL_MAVERICK": {
		"body": "487",
		"description": "GTA SA #Models\nModel id 487\n",
		"prefix": "MODEL_MAVERICK",
		"scope": "source.lua"
	},
	"MODEL_VCNMAV": {
		"body": "488",
		"description": "GTA SA #Models\nModel id 488\n",
		"prefix": "MODEL_VCNMAV",
		"scope": "source.lua"
	},
	"MODEL_RANCHER": {
		"body": "489",
		"description": "GTA SA #Models\nModel id 489\n",
		"prefix": "MODEL_RANCHER",
		"scope": "source.lua"
	},
	"MODEL_FBIRANCH": {
		"body": "490",
		"description": "GTA SA #Models\nModel id 490\n",
		"prefix": "MODEL_FBIRANCH",
		"scope": "source.lua"
	},
	"MODEL_VIRGO": {
		"body": "491",
		"description": "GTA SA #Models\nModel id 491\n",
		"prefix": "MODEL_VIRGO",
		"scope": "source.lua"
	},
	"MODEL_GREENWOO": {
		"body": "492",
		"description": "GTA SA #Models\nModel id 492\n",
		"prefix": "MODEL_GREENWOO",
		"scope": "source.lua"
	},
	"MODEL_JETMAX": {
		"body": "493",
		"description": "GTA SA #Models\nModel id 493\n",
		"prefix": "MODEL_JETMAX",
		"scope": "source.lua"
	},
	"MODEL_HOTRING": {
		"body": "494",
		"description": "GTA SA #Models\nModel id 494\n",
		"prefix": "MODEL_HOTRING",
		"scope": "source.lua"
	},
	"MODEL_SANDKING": {
		"body": "495",
		"description": "GTA SA #Models\nModel id 495\n",
		"prefix": "MODEL_SANDKING",
		"scope": "source.lua"
	},
	"MODEL_BLISTAC": {
		"body": "496",
		"description": "GTA SA #Models\nModel id 496\n",
		"prefix": "MODEL_BLISTAC",
		"scope": "source.lua"
	},
	"MODEL_POLMAV": {
		"body": "497",
		"description": "GTA SA #Models\nModel id 497\n",
		"prefix": "MODEL_POLMAV",
		"scope": "source.lua"
	},
	"MODEL_BOXVILLE": {
		"body": "498",
		"description": "GTA SA #Models\nModel id 498\n",
		"prefix": "MODEL_BOXVILLE",
		"scope": "source.lua"
	},
	"MODEL_BENSON": {
		"body": "499",
		"description": "GTA SA #Models\nModel id 499\n",
		"prefix": "MODEL_BENSON",
		"scope": "source.lua"
	},
	"MODEL_MESA": {
		"body": "500",
		"description": "GTA SA #Models\nModel id 500\n",
		"prefix": "MODEL_MESA",
		"scope": "source.lua"
	},
	"MODEL_RCGOBLIN": {
		"body": "501",
		"description": "GTA SA #Models\nModel id 501\n",
		"prefix": "MODEL_RCGOBLIN",
		"scope": "source.lua"
	},
	"MODEL_HOTRINA": {
		"body": "502",
		"description": "GTA SA #Models\nModel id 502\n",
		"prefix": "MODEL_HOTRINA",
		"scope": "source.lua"
	},
	"MODEL_HOTRINB": {
		"body": "503",
		"description": "GTA SA #Models\nModel id 503\n",
		"prefix": "MODEL_HOTRINB",
		"scope": "source.lua"
	},
	"MODEL_BLOODRA": {
		"body": "504",
		"description": "GTA SA #Models\nModel id 504\n",
		"prefix": "MODEL_BLOODRA",
		"scope": "source.lua"
	},
	"MODEL_RNCHLURE": {
		"body": "505",
		"description": "GTA SA #Models\nModel id 505\n",
		"prefix": "MODEL_RNCHLURE",
		"scope": "source.lua"
	},
	"MODEL_SUPERGT": {
		"body": "506",
		"description": "GTA SA #Models\nModel id 506\n",
		"prefix": "MODEL_SUPERGT",
		"scope": "source.lua"
	},
	"MODEL_ELEGANT": {
		"body": "507",
		"description": "GTA SA #Models\nModel id 507\n",
		"prefix": "MODEL_ELEGANT",
		"scope": "source.lua"
	},
	"MODEL_JOURNEY": {
		"body": "508",
		"description": "GTA SA #Models\nModel id 508\n",
		"prefix": "MODEL_JOURNEY",
		"scope": "source.lua"
	},
	"MODEL_BIKE": {
		"body": "509",
		"description": "GTA SA #Models\nModel id 509\n",
		"prefix": "MODEL_BIKE",
		"scope": "source.lua"
	},
	"MODEL_MTBIKE": {
		"body": "510",
		"description": "GTA SA #Models\nModel id 510\n",
		"prefix": "MODEL_MTBIKE",
		"scope": "source.lua"
	},
	"MODEL_BEAGLE": {
		"body": "511",
		"description": "GTA SA #Models\nModel id 511\n",
		"prefix": "MODEL_BEAGLE",
		"scope": "source.lua"
	},
	"MODEL_CROPDUST": {
		"body": "512",
		"description": "GTA SA #Models\nModel id 512\n",
		"prefix": "MODEL_CROPDUST",
		"scope": "source.lua"
	},
	"MODEL_STUNT": {
		"body": "513",
		"description": "GTA SA #Models\nModel id 513\n",
		"prefix": "MODEL_STUNT",
		"scope": "source.lua"
	},
	"MODEL_PETRO": {
		"body": "514",
		"description": "GTA SA #Models\nModel id 514\n",
		"prefix": "MODEL_PETRO",
		"scope": "source.lua"
	},
	"MODEL_RDTRAIN": {
		"body": "515",
		"description": "GTA SA #Models\nModel id 515\n",
		"prefix": "MODEL_RDTRAIN",
		"scope": "source.lua"
	},
	"MODEL_NEBULA": {
		"body": "516",
		"description": "GTA SA #Models\nModel id 516\n",
		"prefix": "MODEL_NEBULA",
		"scope": "source.lua"
	},
	"MODEL_MAJESTIC": {
		"body": "517",
		"description": "GTA SA #Models\nModel id 517\n",
		"prefix": "MODEL_MAJESTIC",
		"scope": "source.lua"
	},
	"MODEL_BUCCANEE": {
		"body": "518",
		"description": "GTA SA #Models\nModel id 518\n",
		"prefix": "MODEL_BUCCANEE",
		"scope": "source.lua"
	},
	"MODEL_SHAMAL": {
		"body": "519",
		"description": "GTA SA #Models\nModel id 519\n",
		"prefix": "MODEL_SHAMAL",
		"scope": "source.lua"
	},
	"MODEL_HYDRA": {
		"body": "520",
		"description": "GTA SA #Models\nModel id 520\n",
		"prefix": "MODEL_HYDRA",
		"scope": "source.lua"
	},
	"MODEL_FCR900": {
		"body": "521",
		"description": "GTA SA #Models\nModel id 521\n",
		"prefix": "MODEL_FCR900",
		"scope": "source.lua"
	},
	"MODEL_NRG500": {
		"body": "522",
		"description": "GTA SA #Models\nModel id 522\n",
		"prefix": "MODEL_NRG500",
		"scope": "source.lua"
	},
	"MODEL_COPBIKE": {
		"body": "523",
		"description": "GTA SA #Models\nModel id 523\n",
		"prefix": "MODEL_COPBIKE",
		"scope": "source.lua"
	},
	"MODEL_CEMENT": {
		"body": "524",
		"description": "GTA SA #Models\nModel id 524\n",
		"prefix": "MODEL_CEMENT",
		"scope": "source.lua"
	},
	"MODEL_TOWTRUCK": {
		"body": "525",
		"description": "GTA SA #Models\nModel id 525\n",
		"prefix": "MODEL_TOWTRUCK",
		"scope": "source.lua"
	},
	"MODEL_FORTUNE": {
		"body": "526",
		"description": "GTA SA #Models\nModel id 526\n",
		"prefix": "MODEL_FORTUNE",
		"scope": "source.lua"
	},
	"MODEL_CADRONA": {
		"body": "527",
		"description": "GTA SA #Models\nModel id 527\n",
		"prefix": "MODEL_CADRONA",
		"scope": "source.lua"
	},
	"MODEL_FBITRUCK": {
		"body": "528",
		"description": "GTA SA #Models\nModel id 528\n",
		"prefix": "MODEL_FBITRUCK",
		"scope": "source.lua"
	},
	"MODEL_WILLARD": {
		"body": "529",
		"description": "GTA SA #Models\nModel id 529\n",
		"prefix": "MODEL_WILLARD",
		"scope": "source.lua"
	},
	"MODEL_FORKLIFT": {
		"body": "530",
		"description": "GTA SA #Models\nModel id 530\n",
		"prefix": "MODEL_FORKLIFT",
		"scope": "source.lua"
	},
	"MODEL_TRACTOR": {
		"body": "531",
		"description": "GTA SA #Models\nModel id 531\n",
		"prefix": "MODEL_TRACTOR",
		"scope": "source.lua"
	},
	"MODEL_COMBINE": {
		"body": "532",
		"description": "GTA SA #Models\nModel id 532\n",
		"prefix": "MODEL_COMBINE",
		"scope": "source.lua"
	},
	"MODEL_FELTZER": {
		"body": "533",
		"description": "GTA SA #Models\nModel id 533\n",
		"prefix": "MODEL_FELTZER",
		"scope": "source.lua"
	},
	"MODEL_REMINGTN": {
		"body": "534",
		"description": "GTA SA #Models\nModel id 534\n",
		"prefix": "MODEL_REMINGTN",
		"scope": "source.lua"
	},
	"MODEL_SLAMVAN": {
		"body": "535",
		"description": "GTA SA #Models\nModel id 535\n",
		"prefix": "MODEL_SLAMVAN",
		"scope": "source.lua"
	},
	"MODEL_BLADE": {
		"body": "536",
		"description": "GTA SA #Models\nModel id 536\n",
		"prefix": "MODEL_BLADE",
		"scope": "source.lua"
	},
	"MODEL_FREIGHT": {
		"body": "537",
		"description": "GTA SA #Models\nModel id 537\n",
		"prefix": "MODEL_FREIGHT",
		"scope": "source.lua"
	},
	"MODEL_STREAK": {
		"body": "538",
		"description": "GTA SA #Models\nModel id 538\n",
		"prefix": "MODEL_STREAK",
		"scope": "source.lua"
	},
	"MODEL_VORTEX": {
		"body": "539",
		"description": "GTA SA #Models\nModel id 539\n",
		"prefix": "MODEL_VORTEX",
		"scope": "source.lua"
	},
	"MODEL_VINCENT": {
		"body": "540",
		"description": "GTA SA #Models\nModel id 540\n",
		"prefix": "MODEL_VINCENT",
		"scope": "source.lua"
	},
	"MODEL_BULLET": {
		"body": "541",
		"description": "GTA SA #Models\nModel id 541\n",
		"prefix": "MODEL_BULLET",
		"scope": "source.lua"
	},
	"MODEL_CLOVER": {
		"body": "542",
		"description": "GTA SA #Models\nModel id 542\n",
		"prefix": "MODEL_CLOVER",
		"scope": "source.lua"
	},
	"MODEL_SADLER": {
		"body": "543",
		"description": "GTA SA #Models\nModel id 543\n",
		"prefix": "MODEL_SADLER",
		"scope": "source.lua"
	},
	"MODEL_FIRELA": {
		"body": "544",
		"description": "GTA SA #Models\nModel id 544\n",
		"prefix": "MODEL_FIRELA",
		"scope": "source.lua"
	},
	"MODEL_HUSTLER": {
		"body": "545",
		"description": "GTA SA #Models\nModel id 545\n",
		"prefix": "MODEL_HUSTLER",
		"scope": "source.lua"
	},
	"MODEL_INTRUDER": {
		"body": "546",
		"description": "GTA SA #Models\nModel id 546\n",
		"prefix": "MODEL_INTRUDER",
		"scope": "source.lua"
	},
	"MODEL_PRIMO": {
		"body": "547",
		"description": "GTA SA #Models\nModel id 547\n",
		"prefix": "MODEL_PRIMO",
		"scope": "source.lua"
	},
	"MODEL_CARGOBOB": {
		"body": "548",
		"description": "GTA SA #Models\nModel id 548\n",
		"prefix": "MODEL_CARGOBOB",
		"scope": "source.lua"
	},
	"MODEL_TAMPA": {
		"body": "549",
		"description": "GTA SA #Models\nModel id 549\n",
		"prefix": "MODEL_TAMPA",
		"scope": "source.lua"
	},
	"MODEL_SUNRISE": {
		"body": "550",
		"description": "GTA SA #Models\nModel id 550\n",
		"prefix": "MODEL_SUNRISE",
		"scope": "source.lua"
	},
	"MODEL_MERIT": {
		"body": "551",
		"description": "GTA SA #Models\nModel id 551\n",
		"prefix": "MODEL_MERIT",
		"scope": "source.lua"
	},
	"MODEL_UTILITY": {
		"body": "552",
		"description": "GTA SA #Models\nModel id 552\n",
		"prefix": "MODEL_UTILITY",
		"scope": "source.lua"
	},
	"MODEL_NEVADA": {
		"body": "553",
		"description": "GTA SA #Models\nModel id 553\n",
		"prefix": "MODEL_NEVADA",
		"scope": "source.lua"
	},
	"MODEL_YOSEMITE": {
		"body": "554",
		"description": "GTA SA #Models\nModel id 554\n",
		"prefix": "MODEL_YOSEMITE",
		"scope": "source.lua"
	},
	"MODEL_WINDSOR": {
		"body": "555",
		"description": "GTA SA #Models\nModel id 555\n",
		"prefix": "MODEL_WINDSOR",
		"scope": "source.lua"
	},
	"MODEL_MONSTERA": {
		"body": "556",
		"description": "GTA SA #Models\nModel id 556\n",
		"prefix": "MODEL_MONSTERA",
		"scope": "source.lua"
	},
	"MODEL_MONSTERB": {
		"body": "557",
		"description": "GTA SA #Models\nModel id 557\n",
		"prefix": "MODEL_MONSTERB",
		"scope": "source.lua"
	},
	"MODEL_URANUS": {
		"body": "558",
		"description": "GTA SA #Models\nModel id 558\n",
		"prefix": "MODEL_URANUS",
		"scope": "source.lua"
	},
	"MODEL_JESTER": {
		"body": "559",
		"description": "GTA SA #Models\nModel id 559\n",
		"prefix": "MODEL_JESTER",
		"scope": "source.lua"
	},
	"MODEL_SULTAN": {
		"body": "560",
		"description": "GTA SA #Models\nModel id 560\n",
		"prefix": "MODEL_SULTAN",
		"scope": "source.lua"
	},
	"MODEL_STRATUM": {
		"body": "561",
		"description": "GTA SA #Models\nModel id 561\n",
		"prefix": "MODEL_STRATUM",
		"scope": "source.lua"
	},
	"MODEL_ELEGY": {
		"body": "562",
		"description": "GTA SA #Models\nModel id 562\n",
		"prefix": "MODEL_ELEGY",
		"scope": "source.lua"
	},
	"MODEL_RAINDANC": {
		"body": "563",
		"description": "GTA SA #Models\nModel id 563\n",
		"prefix": "MODEL_RAINDANC",
		"scope": "source.lua"
	},
	"MODEL_RCTIGER": {
		"body": "564",
		"description": "GTA SA #Models\nModel id 564\n",
		"prefix": "MODEL_RCTIGER",
		"scope": "source.lua"
	},
	"MODEL_FLASH": {
		"body": "565",
		"description": "GTA SA #Models\nModel id 565\n",
		"prefix": "MODEL_FLASH",
		"scope": "source.lua"
	},
	"MODEL_TAHOMA": {
		"body": "566",
		"description": "GTA SA #Models\nModel id 566\n",
		"prefix": "MODEL_TAHOMA",
		"scope": "source.lua"
	},
	"MODEL_SAVANNA": {
		"body": "567",
		"description": "GTA SA #Models\nModel id 567\n",
		"prefix": "MODEL_SAVANNA",
		"scope": "source.lua"
	},
	"MODEL_BANDITO": {
		"body": "568",
		"description": "GTA SA #Models\nModel id 568\n",
		"prefix": "MODEL_BANDITO",
		"scope": "source.lua"
	},
	"MODEL_FREIFLAT": {
		"body": "569",
		"description": "GTA SA #Models\nModel id 569\n",
		"prefix": "MODEL_FREIFLAT",
		"scope": "source.lua"
	},
	"MODEL_STREAKC": {
		"body": "570",
		"description": "GTA SA #Models\nModel id 570\n",
		"prefix": "MODEL_STREAKC",
		"scope": "source.lua"
	},
	"MODEL_KART": {
		"body": "571",
		"description": "GTA SA #Models\nModel id 571\n",
		"prefix": "MODEL_KART",
		"scope": "source.lua"
	},
	"MODEL_MOWER": {
		"body": "572",
		"description": "GTA SA #Models\nModel id 572\n",
		"prefix": "MODEL_MOWER",
		"scope": "source.lua"
	},
	"MODEL_DUNERIDE": {
		"body": "573",
		"description": "GTA SA #Models\nModel id 573\n",
		"prefix": "MODEL_DUNERIDE",
		"scope": "source.lua"
	},
	"MODEL_SWEEPER": {
		"body": "574",
		"description": "GTA SA #Models\nModel id 574\n",
		"prefix": "MODEL_SWEEPER",
		"scope": "source.lua"
	},
	"MODEL_BROADWAY": {
		"body": "575",
		"description": "GTA SA #Models\nModel id 575\n",
		"prefix": "MODEL_BROADWAY",
		"scope": "source.lua"
	},
	"MODEL_TORNADO": {
		"body": "576",
		"description": "GTA SA #Models\nModel id 576\n",
		"prefix": "MODEL_TORNADO",
		"scope": "source.lua"
	},
	"MODEL_AT400": {
		"body": "577",
		"description": "GTA SA #Models\nModel id 577\n",
		"prefix": "MODEL_AT400",
		"scope": "source.lua"
	},
	"MODEL_DFT30": {
		"body": "578",
		"description": "GTA SA #Models\nModel id 578\n",
		"prefix": "MODEL_DFT30",
		"scope": "source.lua"
	},
	"MODEL_HUNTLEY": {
		"body": "579",
		"description": "GTA SA #Models\nModel id 579\n",
		"prefix": "MODEL_HUNTLEY",
		"scope": "source.lua"
	},
	"MODEL_STAFFORD": {
		"body": "580",
		"description": "GTA SA #Models\nModel id 580\n",
		"prefix": "MODEL_STAFFORD",
		"scope": "source.lua"
	},
	"MODEL_BF400": {
		"body": "581",
		"description": "GTA SA #Models\nModel id 581\n",
		"prefix": "MODEL_BF400",
		"scope": "source.lua"
	},
	"MODEL_NEWSVAN": {
		"body": "582",
		"description": "GTA SA #Models\nModel id 582\n",
		"prefix": "MODEL_NEWSVAN",
		"scope": "source.lua"
	},
	"MODEL_TUG": {
		"body": "583",
		"description": "GTA SA #Models\nModel id 583\n",
		"prefix": "MODEL_TUG",
		"scope": "source.lua"
	},
	"MODEL_PETROTR": {
		"body": "584",
		"description": "GTA SA #Models\nModel id 584\n",
		"prefix": "MODEL_PETROTR",
		"scope": "source.lua"
	},
	"MODEL_EMPEROR": {
		"body": "585",
		"description": "GTA SA #Models\nModel id 585\n",
		"prefix": "MODEL_EMPEROR",
		"scope": "source.lua"
	},
	"MODEL_WAYFARER": {
		"body": "586",
		"description": "GTA SA #Models\nModel id 586\n",
		"prefix": "MODEL_WAYFARER",
		"scope": "source.lua"
	},
	"MODEL_EUROS": {
		"body": "587",
		"description": "GTA SA #Models\nModel id 587\n",
		"prefix": "MODEL_EUROS",
		"scope": "source.lua"
	},
	"MODEL_HOTDOG": {
		"body": "588",
		"description": "GTA SA #Models\nModel id 588\n",
		"prefix": "MODEL_HOTDOG",
		"scope": "source.lua"
	},
	"MODEL_CLUB": {
		"body": "589",
		"description": "GTA SA #Models\nModel id 589\n",
		"prefix": "MODEL_CLUB",
		"scope": "source.lua"
	},
	"MODEL_FREIBOX": {
		"body": "590",
		"description": "GTA SA #Models\nModel id 590\n",
		"prefix": "MODEL_FREIBOX",
		"scope": "source.lua"
	},
	"MODEL_ARTICT3": {
		"body": "591",
		"description": "GTA SA #Models\nModel id 591\n",
		"prefix": "MODEL_ARTICT3",
		"scope": "source.lua"
	},
	"MODEL_ANDROM": {
		"body": "592",
		"description": "GTA SA #Models\nModel id 592\n",
		"prefix": "MODEL_ANDROM",
		"scope": "source.lua"
	},
	"MODEL_DODO": {
		"body": "593",
		"description": "GTA SA #Models\nModel id 593\n",
		"prefix": "MODEL_DODO",
		"scope": "source.lua"
	},
	"MODEL_RCCAM": {
		"body": "594",
		"description": "GTA SA #Models\nModel id 594\n",
		"prefix": "MODEL_RCCAM",
		"scope": "source.lua"
	},
	"MODEL_LAUNCH": {
		"body": "595",
		"description": "GTA SA #Models\nModel id 595\n",
		"prefix": "MODEL_LAUNCH",
		"scope": "source.lua"
	},
	"MODEL_COPCARLA": {
		"body": "596",
		"description": "GTA SA #Models\nModel id 596\n",
		"prefix": "MODEL_COPCARLA",
		"scope": "source.lua"
	},
	"MODEL_COPCARSF": {
		"body": "597",
		"description": "GTA SA #Models\nModel id 597\n",
		"prefix": "MODEL_COPCARSF",
		"scope": "source.lua"
	},
	"MODEL_COPCARVG": {
		"body": "598",
		"description": "GTA SA #Models\nModel id 598\n",
		"prefix": "MODEL_COPCARVG",
		"scope": "source.lua"
	},
	"MODEL_COPCARRU": {
		"body": "599",
		"description": "GTA SA #Models\nModel id 599\n",
		"prefix": "MODEL_COPCARRU",
		"scope": "source.lua"
	},
	"MODEL_PICADOR": {
		"body": "600",
		"description": "GTA SA #Models\nModel id 600\n",
		"prefix": "MODEL_PICADOR",
		"scope": "source.lua"
	},
	"MODEL_SWATVAN": {
		"body": "601",
		"description": "GTA SA #Models\nModel id 601\n",
		"prefix": "MODEL_SWATVAN",
		"scope": "source.lua"
	},
	"MODEL_ALPHA": {
		"body": "602",
		"description": "GTA SA #Models\nModel id 602\n",
		"prefix": "MODEL_ALPHA",
		"scope": "source.lua"
	},
	"MODEL_PHOENIX": {
		"body": "603",
		"description": "GTA SA #Models\nModel id 603\n",
		"prefix": "MODEL_PHOENIX",
		"scope": "source.lua"
	},
	"MODEL_GLENSHIT": {
		"body": "604",
		"description": "GTA SA #Models\nModel id 604\n",
		"prefix": "MODEL_GLENSHIT",
		"scope": "source.lua"
	},
	"MODEL_SADLSHIT": {
		"body": "605",
		"description": "GTA SA #Models\nModel id 605\n",
		"prefix": "MODEL_SADLSHIT",
		"scope": "source.lua"
	},
	"MODEL_BAGBOXA": {
		"body": "606",
		"description": "GTA SA #Models\nModel id 606\n",
		"prefix": "MODEL_BAGBOXA",
		"scope": "source.lua"
	},
	"MODEL_BAGBOXB": {
		"body": "607",
		"description": "GTA SA #Models\nModel id 607\n",
		"prefix": "MODEL_BAGBOXB",
		"scope": "source.lua"
	},
	"MODEL_TUGSTAIR": {
		"body": "608",
		"description": "GTA SA #Models\nModel id 608\n",
		"prefix": "MODEL_TUGSTAIR",
		"scope": "source.lua"
	},
	"MODEL_BOXBURG": {
		"body": "609",
		"description": "GTA SA #Models\nModel id 609\n",
		"prefix": "MODEL_BOXBURG",
		"scope": "source.lua"
	},
	"MODEL_FARMTR1": {
		"body": "610",
		"description": "GTA SA #Models\nModel id 610\n",
		"prefix": "MODEL_FARMTR1",
		"scope": "source.lua"
	},
	"MODEL_UTILTR1": {
		"body": "611",
		"description": "GTA SA #Models\nModel id 611\n",
		"prefix": "MODEL_UTILTR1",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_--peds.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_--peds.ide",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_NULL": {
		"body": "0",
		"description": "GTA SA #Models\nModel id 0\n",
		"prefix": "MODEL_NULL",
		"scope": "source.lua"
	},
	"MODEL_MALE01": {
		"body": "7",
		"description": "GTA SA #Models\nModel id 7\n",
		"prefix": "MODEL_MALE01",
		"scope": "source.lua"
	},
	"MODEL_BFORI": {
		"body": "9",
		"description": "GTA SA #Models\nModel id 9\n",
		"prefix": "MODEL_BFORI",
		"scope": "source.lua"
	},
	"MODEL_BFOST": {
		"body": "10",
		"description": "GTA SA #Models\nModel id 10\n",
		"prefix": "MODEL_BFOST",
		"scope": "source.lua"
	},
	"MODEL_VBFYCRP": {
		"body": "11",
		"description": "GTA SA #Models\nModel id 11\n",
		"prefix": "MODEL_VBFYCRP",
		"scope": "source.lua"
	},
	"MODEL_BFYRI": {
		"body": "12",
		"description": "GTA SA #Models\nModel id 12\n",
		"prefix": "MODEL_BFYRI",
		"scope": "source.lua"
	},
	"MODEL_BFYST": {
		"body": "13",
		"description": "GTA SA #Models\nModel id 13\n",
		"prefix": "MODEL_BFYST",
		"scope": "source.lua"
	},
	"MODEL_BMORI": {
		"body": "14",
		"description": "GTA SA #Models\nModel id 14\n",
		"prefix": "MODEL_BMORI",
		"scope": "source.lua"
	},
	"MODEL_BMOST": {
		"body": "15",
		"description": "GTA SA #Models\nModel id 15\n",
		"prefix": "MODEL_BMOST",
		"scope": "source.lua"
	},
	"MODEL_BMYAP": {
		"body": "16",
		"description": "GTA SA #Models\nModel id 16\n",
		"prefix": "MODEL_BMYAP",
		"scope": "source.lua"
	},
	"MODEL_BMYBU": {
		"body": "17",
		"description": "GTA SA #Models\nModel id 17\n",
		"prefix": "MODEL_BMYBU",
		"scope": "source.lua"
	},
	"MODEL_BMYBE": {
		"body": "18",
		"description": "GTA SA #Models\nModel id 18\n",
		"prefix": "MODEL_BMYBE",
		"scope": "source.lua"
	},
	"MODEL_BMYDJ": {
		"body": "19",
		"description": "GTA SA #Models\nModel id 19\n",
		"prefix": "MODEL_BMYDJ",
		"scope": "source.lua"
	},
	"MODEL_BMYRI": {
		"body": "20",
		"description": "GTA SA #Models\nModel id 20\n",
		"prefix": "MODEL_BMYRI",
		"scope": "source.lua"
	},
	"MODEL_BMYCR": {
		"body": "21",
		"description": "GTA SA #Models\nModel id 21\n",
		"prefix": "MODEL_BMYCR",
		"scope": "source.lua"
	},
	"MODEL_BMYST": {
		"body": "22",
		"description": "GTA SA #Models\nModel id 22\n",
		"prefix": "MODEL_BMYST",
		"scope": "source.lua"
	},
	"MODEL_WMYBMX": {
		"body": "23",
		"description": "GTA SA #Models\nModel id 23\n",
		"prefix": "MODEL_WMYBMX",
		"scope": "source.lua"
	},
	"MODEL_WBDYG1": {
		"body": "24",
		"description": "GTA SA #Models\nModel id 24\n",
		"prefix": "MODEL_WBDYG1",
		"scope": "source.lua"
	},
	"MODEL_WBDYG2": {
		"body": "25",
		"description": "GTA SA #Models\nModel id 25\n",
		"prefix": "MODEL_WBDYG2",
		"scope": "source.lua"
	},
	"MODEL_WMYBP": {
		"body": "26",
		"description": "GTA SA #Models\nModel id 26\n",
		"prefix": "MODEL_WMYBP",
		"scope": "source.lua"
	},
	"MODEL_WMYCON": {
		"body": "27",
		"description": "GTA SA #Models\nModel id 27\n",
		"prefix": "MODEL_WMYCON",
		"scope": "source.lua"
	},
	"MODEL_BMYDRUG": {
		"body": "28",
		"description": "GTA SA #Models\nModel id 28\n",
		"prefix": "MODEL_BMYDRUG",
		"scope": "source.lua"
	},
	"MODEL_WMYDRUG": {
		"body": "29",
		"description": "GTA SA #Models\nModel id 29\n",
		"prefix": "MODEL_WMYDRUG",
		"scope": "source.lua"
	},
	"MODEL_HMYDRUG": {
		"body": "30",
		"description": "GTA SA #Models\nModel id 30\n",
		"prefix": "MODEL_HMYDRUG",
		"scope": "source.lua"
	},
	"MODEL_DWFOLC": {
		"body": "31",
		"description": "GTA SA #Models\nModel id 31\n",
		"prefix": "MODEL_DWFOLC",
		"scope": "source.lua"
	},
	"MODEL_DWMOLC1": {
		"body": "32",
		"description": "GTA SA #Models\nModel id 32\n",
		"prefix": "MODEL_DWMOLC1",
		"scope": "source.lua"
	},
	"MODEL_DWMOLC2": {
		"body": "33",
		"description": "GTA SA #Models\nModel id 33\n",
		"prefix": "MODEL_DWMOLC2",
		"scope": "source.lua"
	},
	"MODEL_DWMYLC1": {
		"body": "34",
		"description": "GTA SA #Models\nModel id 34\n",
		"prefix": "MODEL_DWMYLC1",
		"scope": "source.lua"
	},
	"MODEL_HMOGAR": {
		"body": "35",
		"description": "GTA SA #Models\nModel id 35\n",
		"prefix": "MODEL_HMOGAR",
		"scope": "source.lua"
	},
	"MODEL_WMYGOL1": {
		"body": "36",
		"description": "GTA SA #Models\nModel id 36\n",
		"prefix": "MODEL_WMYGOL1",
		"scope": "source.lua"
	},
	"MODEL_WMYGOL2": {
		"body": "37",
		"description": "GTA SA #Models\nModel id 37\n",
		"prefix": "MODEL_WMYGOL2",
		"scope": "source.lua"
	},
	"MODEL_HFORI": {
		"body": "38",
		"description": "GTA SA #Models\nModel id 38\n",
		"prefix": "MODEL_HFORI",
		"scope": "source.lua"
	},
	"MODEL_HFOST": {
		"body": "39",
		"description": "GTA SA #Models\nModel id 39\n",
		"prefix": "MODEL_HFOST",
		"scope": "source.lua"
	},
	"MODEL_HFYRI": {
		"body": "40",
		"description": "GTA SA #Models\nModel id 40\n",
		"prefix": "MODEL_HFYRI",
		"scope": "source.lua"
	},
	"MODEL_HFYST": {
		"body": "41",
		"description": "GTA SA #Models\nModel id 41\n",
		"prefix": "MODEL_HFYST",
		"scope": "source.lua"
	},
	"MODEL_HMORI": {
		"body": "43",
		"description": "GTA SA #Models\nModel id 43\n",
		"prefix": "MODEL_HMORI",
		"scope": "source.lua"
	},
	"MODEL_HMOST": {
		"body": "44",
		"description": "GTA SA #Models\nModel id 44\n",
		"prefix": "MODEL_HMOST",
		"scope": "source.lua"
	},
	"MODEL_HMYBE": {
		"body": "45",
		"description": "GTA SA #Models\nModel id 45\n",
		"prefix": "MODEL_HMYBE",
		"scope": "source.lua"
	},
	"MODEL_HMYRI": {
		"body": "46",
		"description": "GTA SA #Models\nModel id 46\n",
		"prefix": "MODEL_HMYRI",
		"scope": "source.lua"
	},
	"MODEL_HMYCR": {
		"body": "47",
		"description": "GTA SA #Models\nModel id 47\n",
		"prefix": "MODEL_HMYCR",
		"scope": "source.lua"
	},
	"MODEL_HMYST": {
		"body": "48",
		"description": "GTA SA #Models\nModel id 48\n",
		"prefix": "MODEL_HMYST",
		"scope": "source.lua"
	},
	"MODEL_OMOKUNG": {
		"body": "49",
		"description": "GTA SA #Models\nModel id 49\n",
		"prefix": "MODEL_OMOKUNG",
		"scope": "source.lua"
	},
	"MODEL_WMYMECH": {
		"body": "50",
		"description": "GTA SA #Models\nModel id 50\n",
		"prefix": "MODEL_WMYMECH",
		"scope": "source.lua"
	},
	"MODEL_BMYMOUN": {
		"body": "51",
		"description": "GTA SA #Models\nModel id 51\n",
		"prefix": "MODEL_BMYMOUN",
		"scope": "source.lua"
	},
	"MODEL_WMYMOUN": {
		"body": "52",
		"description": "GTA SA #Models\nModel id 52\n",
		"prefix": "MODEL_WMYMOUN",
		"scope": "source.lua"
	},
	"MODEL_OFORI": {
		"body": "53",
		"description": "GTA SA #Models\nModel id 53\n",
		"prefix": "MODEL_OFORI",
		"scope": "source.lua"
	},
	"MODEL_OFOST": {
		"body": "54",
		"description": "GTA SA #Models\nModel id 54\n",
		"prefix": "MODEL_OFOST",
		"scope": "source.lua"
	},
	"MODEL_OFYRI": {
		"body": "55",
		"description": "GTA SA #Models\nModel id 55\n",
		"prefix": "MODEL_OFYRI",
		"scope": "source.lua"
	},
	"MODEL_OFYST": {
		"body": "56",
		"description": "GTA SA #Models\nModel id 56\n",
		"prefix": "MODEL_OFYST",
		"scope": "source.lua"
	},
	"MODEL_OMORI": {
		"body": "57",
		"description": "GTA SA #Models\nModel id 57\n",
		"prefix": "MODEL_OMORI",
		"scope": "source.lua"
	},
	"MODEL_OMOST": {
		"body": "58",
		"description": "GTA SA #Models\nModel id 58\n",
		"prefix": "MODEL_OMOST",
		"scope": "source.lua"
	},
	"MODEL_OMYRI": {
		"body": "59",
		"description": "GTA SA #Models\nModel id 59\n",
		"prefix": "MODEL_OMYRI",
		"scope": "source.lua"
	},
	"MODEL_OMYST": {
		"body": "60",
		"description": "GTA SA #Models\nModel id 60\n",
		"prefix": "MODEL_OMYST",
		"scope": "source.lua"
	},
	"MODEL_WMYPLT": {
		"body": "61",
		"description": "GTA SA #Models\nModel id 61\n",
		"prefix": "MODEL_WMYPLT",
		"scope": "source.lua"
	},
	"MODEL_WMOPJ": {
		"body": "62",
		"description": "GTA SA #Models\nModel id 62\n",
		"prefix": "MODEL_WMOPJ",
		"scope": "source.lua"
	},
	"MODEL_BFYPRO": {
		"body": "63",
		"description": "GTA SA #Models\nModel id 63\n",
		"prefix": "MODEL_BFYPRO",
		"scope": "source.lua"
	},
	"MODEL_HFYPRO": {
		"body": "64",
		"description": "GTA SA #Models\nModel id 64\n",
		"prefix": "MODEL_HFYPRO",
		"scope": "source.lua"
	},
	"MODEL_BMYPOL1": {
		"body": "66",
		"description": "GTA SA #Models\nModel id 66\n",
		"prefix": "MODEL_BMYPOL1",
		"scope": "source.lua"
	},
	"MODEL_BMYPOL2": {
		"body": "67",
		"description": "GTA SA #Models\nModel id 67\n",
		"prefix": "MODEL_BMYPOL2",
		"scope": "source.lua"
	},
	"MODEL_WMOPREA": {
		"body": "68",
		"description": "GTA SA #Models\nModel id 68\n",
		"prefix": "MODEL_WMOPREA",
		"scope": "source.lua"
	},
	"MODEL_SBFYST": {
		"body": "69",
		"description": "GTA SA #Models\nModel id 69\n",
		"prefix": "MODEL_SBFYST",
		"scope": "source.lua"
	},
	"MODEL_WMOSCI": {
		"body": "70",
		"description": "GTA SA #Models\nModel id 70\n",
		"prefix": "MODEL_WMOSCI",
		"scope": "source.lua"
	},
	"MODEL_WMYSGRD": {
		"body": "71",
		"description": "GTA SA #Models\nModel id 71\n",
		"prefix": "MODEL_WMYSGRD",
		"scope": "source.lua"
	},
	"MODEL_SWMYHP1": {
		"body": "72",
		"description": "GTA SA #Models\nModel id 72\n",
		"prefix": "MODEL_SWMYHP1",
		"scope": "source.lua"
	},
	"MODEL_SWMYHP2": {
		"body": "73",
		"description": "GTA SA #Models\nModel id 73\n",
		"prefix": "MODEL_SWMYHP2",
		"scope": "source.lua"
	},
	"MODEL_SWFOPRO": {
		"body": "75",
		"description": "GTA SA #Models\nModel id 75\n",
		"prefix": "MODEL_SWFOPRO",
		"scope": "source.lua"
	},
	"MODEL_WFYSTEW": {
		"body": "76",
		"description": "GTA SA #Models\nModel id 76\n",
		"prefix": "MODEL_WFYSTEW",
		"scope": "source.lua"
	},
	"MODEL_SWMOTR1": {
		"body": "77",
		"description": "GTA SA #Models\nModel id 77\n",
		"prefix": "MODEL_SWMOTR1",
		"scope": "source.lua"
	},
	"MODEL_WMOTR1": {
		"body": "78",
		"description": "GTA SA #Models\nModel id 78\n",
		"prefix": "MODEL_WMOTR1",
		"scope": "source.lua"
	},
	"MODEL_BMOTR1": {
		"body": "79",
		"description": "GTA SA #Models\nModel id 79\n",
		"prefix": "MODEL_BMOTR1",
		"scope": "source.lua"
	},
	"MODEL_VBMYBOX": {
		"body": "80",
		"description": "GTA SA #Models\nModel id 80\n",
		"prefix": "MODEL_VBMYBOX",
		"scope": "source.lua"
	},
	"MODEL_VWMYBOX": {
		"body": "81",
		"description": "GTA SA #Models\nModel id 81\n",
		"prefix": "MODEL_VWMYBOX",
		"scope": "source.lua"
	},
	"MODEL_VHMYELV": {
		"body": "82",
		"description": "GTA SA #Models\nModel id 82\n",
		"prefix": "MODEL_VHMYELV",
		"scope": "source.lua"
	},
	"MODEL_VBMYELV": {
		"body": "83",
		"description": "GTA SA #Models\nModel id 83\n",
		"prefix": "MODEL_VBMYELV",
		"scope": "source.lua"
	},
	"MODEL_VIMYELV": {
		"body": "84",
		"description": "GTA SA #Models\nModel id 84\n",
		"prefix": "MODEL_VIMYELV",
		"scope": "source.lua"
	},
	"MODEL_VWFYPRO": {
		"body": "85",
		"description": "GTA SA #Models\nModel id 85\n",
		"prefix": "MODEL_VWFYPRO",
		"scope": "source.lua"
	},
	"MODEL_VWFYST1": {
		"body": "87",
		"description": "GTA SA #Models\nModel id 87\n",
		"prefix": "MODEL_VWFYST1",
		"scope": "source.lua"
	},
	"MODEL_WFORI": {
		"body": "88",
		"description": "GTA SA #Models\nModel id 88\n",
		"prefix": "MODEL_WFORI",
		"scope": "source.lua"
	},
	"MODEL_WFOST": {
		"body": "89",
		"description": "GTA SA #Models\nModel id 89\n",
		"prefix": "MODEL_WFOST",
		"scope": "source.lua"
	},
	"MODEL_WFYJG": {
		"body": "90",
		"description": "GTA SA #Models\nModel id 90\n",
		"prefix": "MODEL_WFYJG",
		"scope": "source.lua"
	},
	"MODEL_WFYRI": {
		"body": "91",
		"description": "GTA SA #Models\nModel id 91\n",
		"prefix": "MODEL_WFYRI",
		"scope": "source.lua"
	},
	"MODEL_WFYRO": {
		"body": "92",
		"description": "GTA SA #Models\nModel id 92\n",
		"prefix": "MODEL_WFYRO",
		"scope": "source.lua"
	},
	"MODEL_WFYST": {
		"body": "93",
		"description": "GTA SA #Models\nModel id 93\n",
		"prefix": "MODEL_WFYST",
		"scope": "source.lua"
	},
	"MODEL_WMORI": {
		"body": "94",
		"description": "GTA SA #Models\nModel id 94\n",
		"prefix": "MODEL_WMORI",
		"scope": "source.lua"
	},
	"MODEL_WMOST": {
		"body": "95",
		"description": "GTA SA #Models\nModel id 95\n",
		"prefix": "MODEL_WMOST",
		"scope": "source.lua"
	},
	"MODEL_WMYJG": {
		"body": "96",
		"description": "GTA SA #Models\nModel id 96\n",
		"prefix": "MODEL_WMYJG",
		"scope": "source.lua"
	},
	"MODEL_WMYLG": {
		"body": "97",
		"description": "GTA SA #Models\nModel id 97\n",
		"prefix": "MODEL_WMYLG",
		"scope": "source.lua"
	},
	"MODEL_WMYRI": {
		"body": "98",
		"description": "GTA SA #Models\nModel id 98\n",
		"prefix": "MODEL_WMYRI",
		"scope": "source.lua"
	},
	"MODEL_WMYRO": {
		"body": "99",
		"description": "GTA SA #Models\nModel id 99\n",
		"prefix": "MODEL_WMYRO",
		"scope": "source.lua"
	},
	"MODEL_WMYCR": {
		"body": "100",
		"description": "GTA SA #Models\nModel id 100\n",
		"prefix": "MODEL_WMYCR",
		"scope": "source.lua"
	},
	"MODEL_WMYST": {
		"body": "101",
		"description": "GTA SA #Models\nModel id 101\n",
		"prefix": "MODEL_WMYST",
		"scope": "source.lua"
	},
	"MODEL_BALLAS1": {
		"body": "102",
		"description": "GTA SA #Models\nModel id 102\n",
		"prefix": "MODEL_BALLAS1",
		"scope": "source.lua"
	},
	"MODEL_BALLAS2": {
		"body": "103",
		"description": "GTA SA #Models\nModel id 103\n",
		"prefix": "MODEL_BALLAS2",
		"scope": "source.lua"
	},
	"MODEL_BALLAS3": {
		"body": "104",
		"description": "GTA SA #Models\nModel id 104\n",
		"prefix": "MODEL_BALLAS3",
		"scope": "source.lua"
	},
	"MODEL_FAM1": {
		"body": "105",
		"description": "GTA SA #Models\nModel id 105\n",
		"prefix": "MODEL_FAM1",
		"scope": "source.lua"
	},
	"MODEL_FAM2": {
		"body": "106",
		"description": "GTA SA #Models\nModel id 106\n",
		"prefix": "MODEL_FAM2",
		"scope": "source.lua"
	},
	"MODEL_FAM3": {
		"body": "107",
		"description": "GTA SA #Models\nModel id 107\n",
		"prefix": "MODEL_FAM3",
		"scope": "source.lua"
	},
	"MODEL_LSV1": {
		"body": "108",
		"description": "GTA SA #Models\nModel id 108\n",
		"prefix": "MODEL_LSV1",
		"scope": "source.lua"
	},
	"MODEL_LSV2": {
		"body": "109",
		"description": "GTA SA #Models\nModel id 109\n",
		"prefix": "MODEL_LSV2",
		"scope": "source.lua"
	},
	"MODEL_LSV3": {
		"body": "110",
		"description": "GTA SA #Models\nModel id 110\n",
		"prefix": "MODEL_LSV3",
		"scope": "source.lua"
	},
	"MODEL_MAFFA": {
		"body": "111",
		"description": "GTA SA #Models\nModel id 111\n",
		"prefix": "MODEL_MAFFA",
		"scope": "source.lua"
	},
	"MODEL_MAFFB": {
		"body": "112",
		"description": "GTA SA #Models\nModel id 112\n",
		"prefix": "MODEL_MAFFB",
		"scope": "source.lua"
	},
	"MODEL_MAFBOSS": {
		"body": "113",
		"description": "GTA SA #Models\nModel id 113\n",
		"prefix": "MODEL_MAFBOSS",
		"scope": "source.lua"
	},
	"MODEL_VLA1": {
		"body": "114",
		"description": "GTA SA #Models\nModel id 114\n",
		"prefix": "MODEL_VLA1",
		"scope": "source.lua"
	},
	"MODEL_VLA2": {
		"body": "115",
		"description": "GTA SA #Models\nModel id 115\n",
		"prefix": "MODEL_VLA2",
		"scope": "source.lua"
	},
	"MODEL_VLA3": {
		"body": "116",
		"description": "GTA SA #Models\nModel id 116\n",
		"prefix": "MODEL_VLA3",
		"scope": "source.lua"
	},
	"MODEL_TRIADA": {
		"body": "117",
		"description": "GTA SA #Models\nModel id 117\n",
		"prefix": "MODEL_TRIADA",
		"scope": "source.lua"
	},
	"MODEL_TRIADB": {
		"body": "118",
		"description": "GTA SA #Models\nModel id 118\n",
		"prefix": "MODEL_TRIADB",
		"scope": "source.lua"
	},
	"MODEL_TRIBOSS": {
		"body": "120",
		"description": "GTA SA #Models\nModel id 120\n",
		"prefix": "MODEL_TRIBOSS",
		"scope": "source.lua"
	},
	"MODEL_DNB1": {
		"body": "121",
		"description": "GTA SA #Models\nModel id 121\n",
		"prefix": "MODEL_DNB1",
		"scope": "source.lua"
	},
	"MODEL_DNB2": {
		"body": "122",
		"description": "GTA SA #Models\nModel id 122\n",
		"prefix": "MODEL_DNB2",
		"scope": "source.lua"
	},
	"MODEL_DNB3": {
		"body": "123",
		"description": "GTA SA #Models\nModel id 123\n",
		"prefix": "MODEL_DNB3",
		"scope": "source.lua"
	},
	"MODEL_VMAFF1": {
		"body": "124",
		"description": "GTA SA #Models\nModel id 124\n",
		"prefix": "MODEL_VMAFF1",
		"scope": "source.lua"
	},
	"MODEL_VMAFF2": {
		"body": "125",
		"description": "GTA SA #Models\nModel id 125\n",
		"prefix": "MODEL_VMAFF2",
		"scope": "source.lua"
	},
	"MODEL_VMAFF3": {
		"body": "126",
		"description": "GTA SA #Models\nModel id 126\n",
		"prefix": "MODEL_VMAFF3",
		"scope": "source.lua"
	},
	"MODEL_VMAFF4": {
		"body": "127",
		"description": "GTA SA #Models\nModel id 127\n",
		"prefix": "MODEL_VMAFF4",
		"scope": "source.lua"
	},
	"MODEL_DNMYLC": {
		"body": "128",
		"description": "GTA SA #Models\nModel id 128\n",
		"prefix": "MODEL_DNMYLC",
		"scope": "source.lua"
	},
	"MODEL_DNFOLC1": {
		"body": "129",
		"description": "GTA SA #Models\nModel id 129\n",
		"prefix": "MODEL_DNFOLC1",
		"scope": "source.lua"
	},
	"MODEL_DNFOLC2": {
		"body": "130",
		"description": "GTA SA #Models\nModel id 130\n",
		"prefix": "MODEL_DNFOLC2",
		"scope": "source.lua"
	},
	"MODEL_DNFYLC": {
		"body": "131",
		"description": "GTA SA #Models\nModel id 131\n",
		"prefix": "MODEL_DNFYLC",
		"scope": "source.lua"
	},
	"MODEL_DNMOLC1": {
		"body": "132",
		"description": "GTA SA #Models\nModel id 132\n",
		"prefix": "MODEL_DNMOLC1",
		"scope": "source.lua"
	},
	"MODEL_DNMOLC2": {
		"body": "133",
		"description": "GTA SA #Models\nModel id 133\n",
		"prefix": "MODEL_DNMOLC2",
		"scope": "source.lua"
	},
	"MODEL_SBMOTR2": {
		"body": "134",
		"description": "GTA SA #Models\nModel id 134\n",
		"prefix": "MODEL_SBMOTR2",
		"scope": "source.lua"
	},
	"MODEL_SWMOTR2": {
		"body": "135",
		"description": "GTA SA #Models\nModel id 135\n",
		"prefix": "MODEL_SWMOTR2",
		"scope": "source.lua"
	},
	"MODEL_SBMYTR3": {
		"body": "136",
		"description": "GTA SA #Models\nModel id 136\n",
		"prefix": "MODEL_SBMYTR3",
		"scope": "source.lua"
	},
	"MODEL_SWMOTR3": {
		"body": "137",
		"description": "GTA SA #Models\nModel id 137\n",
		"prefix": "MODEL_SWMOTR3",
		"scope": "source.lua"
	},
	"MODEL_WFYBE": {
		"body": "138",
		"description": "GTA SA #Models\nModel id 138\n",
		"prefix": "MODEL_WFYBE",
		"scope": "source.lua"
	},
	"MODEL_BFYBE": {
		"body": "139",
		"description": "GTA SA #Models\nModel id 139\n",
		"prefix": "MODEL_BFYBE",
		"scope": "source.lua"
	},
	"MODEL_HFYBE": {
		"body": "140",
		"description": "GTA SA #Models\nModel id 140\n",
		"prefix": "MODEL_HFYBE",
		"scope": "source.lua"
	},
	"MODEL_SOFYBU": {
		"body": "141",
		"description": "GTA SA #Models\nModel id 141\n",
		"prefix": "MODEL_SOFYBU",
		"scope": "source.lua"
	},
	"MODEL_SBMYST": {
		"body": "142",
		"description": "GTA SA #Models\nModel id 142\n",
		"prefix": "MODEL_SBMYST",
		"scope": "source.lua"
	},
	"MODEL_SBMYCR": {
		"body": "143",
		"description": "GTA SA #Models\nModel id 143\n",
		"prefix": "MODEL_SBMYCR",
		"scope": "source.lua"
	},
	"MODEL_BMYCG": {
		"body": "144",
		"description": "GTA SA #Models\nModel id 144\n",
		"prefix": "MODEL_BMYCG",
		"scope": "source.lua"
	},
	"MODEL_WFYCRK": {
		"body": "145",
		"description": "GTA SA #Models\nModel id 145\n",
		"prefix": "MODEL_WFYCRK",
		"scope": "source.lua"
	},
	"MODEL_HMYCM": {
		"body": "146",
		"description": "GTA SA #Models\nModel id 146\n",
		"prefix": "MODEL_HMYCM",
		"scope": "source.lua"
	},
	"MODEL_WMYBU": {
		"body": "147",
		"description": "GTA SA #Models\nModel id 147\n",
		"prefix": "MODEL_WMYBU",
		"scope": "source.lua"
	},
	"MODEL_BFYBU": {
		"body": "148",
		"description": "GTA SA #Models\nModel id 148\n",
		"prefix": "MODEL_BFYBU",
		"scope": "source.lua"
	},
	"MODEL_WFYBU": {
		"body": "150",
		"description": "GTA SA #Models\nModel id 150\n",
		"prefix": "MODEL_WFYBU",
		"scope": "source.lua"
	},
	"MODEL_DWFYLC1": {
		"body": "151",
		"description": "GTA SA #Models\nModel id 151\n",
		"prefix": "MODEL_DWFYLC1",
		"scope": "source.lua"
	},
	"MODEL_WFYPRO": {
		"body": "152",
		"description": "GTA SA #Models\nModel id 152\n",
		"prefix": "MODEL_WFYPRO",
		"scope": "source.lua"
	},
	"MODEL_WMYCONB": {
		"body": "153",
		"description": "GTA SA #Models\nModel id 153\n",
		"prefix": "MODEL_WMYCONB",
		"scope": "source.lua"
	},
	"MODEL_WMYBE": {
		"body": "154",
		"description": "GTA SA #Models\nModel id 154\n",
		"prefix": "MODEL_WMYBE",
		"scope": "source.lua"
	},
	"MODEL_WMYPIZZ": {
		"body": "155",
		"description": "GTA SA #Models\nModel id 155\n",
		"prefix": "MODEL_WMYPIZZ",
		"scope": "source.lua"
	},
	"MODEL_BMOBAR": {
		"body": "156",
		"description": "GTA SA #Models\nModel id 156\n",
		"prefix": "MODEL_BMOBAR",
		"scope": "source.lua"
	},
	"MODEL_CWFYHB": {
		"body": "157",
		"description": "GTA SA #Models\nModel id 157\n",
		"prefix": "MODEL_CWFYHB",
		"scope": "source.lua"
	},
	"MODEL_CWMOFR": {
		"body": "158",
		"description": "GTA SA #Models\nModel id 158\n",
		"prefix": "MODEL_CWMOFR",
		"scope": "source.lua"
	},
	"MODEL_CWMOHB1": {
		"body": "159",
		"description": "GTA SA #Models\nModel id 159\n",
		"prefix": "MODEL_CWMOHB1",
		"scope": "source.lua"
	},
	"MODEL_CWMOHB2": {
		"body": "160",
		"description": "GTA SA #Models\nModel id 160\n",
		"prefix": "MODEL_CWMOHB2",
		"scope": "source.lua"
	},
	"MODEL_CWMYFR": {
		"body": "161",
		"description": "GTA SA #Models\nModel id 161\n",
		"prefix": "MODEL_CWMYFR",
		"scope": "source.lua"
	},
	"MODEL_CWMYHB1": {
		"body": "162",
		"description": "GTA SA #Models\nModel id 162\n",
		"prefix": "MODEL_CWMYHB1",
		"scope": "source.lua"
	},
	"MODEL_BMYBOUN": {
		"body": "163",
		"description": "GTA SA #Models\nModel id 163\n",
		"prefix": "MODEL_BMYBOUN",
		"scope": "source.lua"
	},
	"MODEL_WMYBOUN": {
		"body": "164",
		"description": "GTA SA #Models\nModel id 164\n",
		"prefix": "MODEL_WMYBOUN",
		"scope": "source.lua"
	},
	"MODEL_WMOMIB": {
		"body": "165",
		"description": "GTA SA #Models\nModel id 165\n",
		"prefix": "MODEL_WMOMIB",
		"scope": "source.lua"
	},
	"MODEL_BMYMIB": {
		"body": "166",
		"description": "GTA SA #Models\nModel id 166\n",
		"prefix": "MODEL_BMYMIB",
		"scope": "source.lua"
	},
	"MODEL_WMYBELL": {
		"body": "167",
		"description": "GTA SA #Models\nModel id 167\n",
		"prefix": "MODEL_WMYBELL",
		"scope": "source.lua"
	},
	"MODEL_BMOCHIL": {
		"body": "168",
		"description": "GTA SA #Models\nModel id 168\n",
		"prefix": "MODEL_BMOCHIL",
		"scope": "source.lua"
	},
	"MODEL_SOFYRI": {
		"body": "169",
		"description": "GTA SA #Models\nModel id 169\n",
		"prefix": "MODEL_SOFYRI",
		"scope": "source.lua"
	},
	"MODEL_SOMYST": {
		"body": "170",
		"description": "GTA SA #Models\nModel id 170\n",
		"prefix": "MODEL_SOMYST",
		"scope": "source.lua"
	},
	"MODEL_VWMYBJD": {
		"body": "171",
		"description": "GTA SA #Models\nModel id 171\n",
		"prefix": "MODEL_VWMYBJD",
		"scope": "source.lua"
	},
	"MODEL_VWFYCRP": {
		"body": "172",
		"description": "GTA SA #Models\nModel id 172\n",
		"prefix": "MODEL_VWFYCRP",
		"scope": "source.lua"
	},
	"MODEL_SFR1": {
		"body": "173",
		"description": "GTA SA #Models\nModel id 173\n",
		"prefix": "MODEL_SFR1",
		"scope": "source.lua"
	},
	"MODEL_SFR2": {
		"body": "174",
		"description": "GTA SA #Models\nModel id 174\n",
		"prefix": "MODEL_SFR2",
		"scope": "source.lua"
	},
	"MODEL_SFR3": {
		"body": "175",
		"description": "GTA SA #Models\nModel id 175\n",
		"prefix": "MODEL_SFR3",
		"scope": "source.lua"
	},
	"MODEL_BMYBAR": {
		"body": "176",
		"description": "GTA SA #Models\nModel id 176\n",
		"prefix": "MODEL_BMYBAR",
		"scope": "source.lua"
	},
	"MODEL_WMYBAR": {
		"body": "177",
		"description": "GTA SA #Models\nModel id 177\n",
		"prefix": "MODEL_WMYBAR",
		"scope": "source.lua"
	},
	"MODEL_WFYSEX": {
		"body": "178",
		"description": "GTA SA #Models\nModel id 178\n",
		"prefix": "MODEL_WFYSEX",
		"scope": "source.lua"
	},
	"MODEL_WMYAMMO": {
		"body": "179",
		"description": "GTA SA #Models\nModel id 179\n",
		"prefix": "MODEL_WMYAMMO",
		"scope": "source.lua"
	},
	"MODEL_BMYTATT": {
		"body": "180",
		"description": "GTA SA #Models\nModel id 180\n",
		"prefix": "MODEL_BMYTATT",
		"scope": "source.lua"
	},
	"MODEL_VWMYCR": {
		"body": "181",
		"description": "GTA SA #Models\nModel id 181\n",
		"prefix": "MODEL_VWMYCR",
		"scope": "source.lua"
	},
	"MODEL_VBMOCD": {
		"body": "182",
		"description": "GTA SA #Models\nModel id 182\n",
		"prefix": "MODEL_VBMOCD",
		"scope": "source.lua"
	},
	"MODEL_VBMYCR": {
		"body": "183",
		"description": "GTA SA #Models\nModel id 183\n",
		"prefix": "MODEL_VBMYCR",
		"scope": "source.lua"
	},
	"MODEL_VHMYCR": {
		"body": "184",
		"description": "GTA SA #Models\nModel id 184\n",
		"prefix": "MODEL_VHMYCR",
		"scope": "source.lua"
	},
	"MODEL_SBMYRI": {
		"body": "185",
		"description": "GTA SA #Models\nModel id 185\n",
		"prefix": "MODEL_SBMYRI",
		"scope": "source.lua"
	},
	"MODEL_SOMYRI": {
		"body": "186",
		"description": "GTA SA #Models\nModel id 186\n",
		"prefix": "MODEL_SOMYRI",
		"scope": "source.lua"
	},
	"MODEL_SOMYBU": {
		"body": "187",
		"description": "GTA SA #Models\nModel id 187\n",
		"prefix": "MODEL_SOMYBU",
		"scope": "source.lua"
	},
	"MODEL_SWMYST": {
		"body": "188",
		"description": "GTA SA #Models\nModel id 188\n",
		"prefix": "MODEL_SWMYST",
		"scope": "source.lua"
	},
	"MODEL_WMYVA": {
		"body": "189",
		"description": "GTA SA #Models\nModel id 189\n",
		"prefix": "MODEL_WMYVA",
		"scope": "source.lua"
	},
	"MODEL_COPGRL3": {
		"body": "190",
		"description": "GTA SA #Models\nModel id 190\n",
		"prefix": "MODEL_COPGRL3",
		"scope": "source.lua"
	},
	"MODEL_GUNGRL3": {
		"body": "191",
		"description": "GTA SA #Models\nModel id 191\n",
		"prefix": "MODEL_GUNGRL3",
		"scope": "source.lua"
	},
	"MODEL_MECGRL3": {
		"body": "192",
		"description": "GTA SA #Models\nModel id 192\n",
		"prefix": "MODEL_MECGRL3",
		"scope": "source.lua"
	},
	"MODEL_NURGRL3": {
		"body": "193",
		"description": "GTA SA #Models\nModel id 193\n",
		"prefix": "MODEL_NURGRL3",
		"scope": "source.lua"
	},
	"MODEL_CROGRL3": {
		"body": "194",
		"description": "GTA SA #Models\nModel id 194\n",
		"prefix": "MODEL_CROGRL3",
		"scope": "source.lua"
	},
	"MODEL_GANGRL3": {
		"body": "195",
		"description": "GTA SA #Models\nModel id 195\n",
		"prefix": "MODEL_GANGRL3",
		"scope": "source.lua"
	},
	"MODEL_CWFOFR": {
		"body": "196",
		"description": "GTA SA #Models\nModel id 196\n",
		"prefix": "MODEL_CWFOFR",
		"scope": "source.lua"
	},
	"MODEL_CWFOHB": {
		"body": "197",
		"description": "GTA SA #Models\nModel id 197\n",
		"prefix": "MODEL_CWFOHB",
		"scope": "source.lua"
	},
	"MODEL_CWFYFR1": {
		"body": "198",
		"description": "GTA SA #Models\nModel id 198\n",
		"prefix": "MODEL_CWFYFR1",
		"scope": "source.lua"
	},
	"MODEL_CWFYFR2": {
		"body": "199",
		"description": "GTA SA #Models\nModel id 199\n",
		"prefix": "MODEL_CWFYFR2",
		"scope": "source.lua"
	},
	"MODEL_CWMYHB2": {
		"body": "200",
		"description": "GTA SA #Models\nModel id 200\n",
		"prefix": "MODEL_CWMYHB2",
		"scope": "source.lua"
	},
	"MODEL_DWFYLC2": {
		"body": "201",
		"description": "GTA SA #Models\nModel id 201\n",
		"prefix": "MODEL_DWFYLC2",
		"scope": "source.lua"
	},
	"MODEL_DWMYLC2": {
		"body": "202",
		"description": "GTA SA #Models\nModel id 202\n",
		"prefix": "MODEL_DWMYLC2",
		"scope": "source.lua"
	},
	"MODEL_OMYKARA": {
		"body": "203",
		"description": "GTA SA #Models\nModel id 203\n",
		"prefix": "MODEL_OMYKARA",
		"scope": "source.lua"
	},
	"MODEL_WMYKARA": {
		"body": "204",
		"description": "GTA SA #Models\nModel id 204\n",
		"prefix": "MODEL_WMYKARA",
		"scope": "source.lua"
	},
	"MODEL_WFYBURG": {
		"body": "205",
		"description": "GTA SA #Models\nModel id 205\n",
		"prefix": "MODEL_WFYBURG",
		"scope": "source.lua"
	},
	"MODEL_VWMYCD": {
		"body": "206",
		"description": "GTA SA #Models\nModel id 206\n",
		"prefix": "MODEL_VWMYCD",
		"scope": "source.lua"
	},
	"MODEL_VHFYPRO": {
		"body": "207",
		"description": "GTA SA #Models\nModel id 207\n",
		"prefix": "MODEL_VHFYPRO",
		"scope": "source.lua"
	},
	"MODEL_OMONOOD": {
		"body": "209",
		"description": "GTA SA #Models\nModel id 209\n",
		"prefix": "MODEL_OMONOOD",
		"scope": "source.lua"
	},
	"MODEL_OMOBOAT": {
		"body": "210",
		"description": "GTA SA #Models\nModel id 210\n",
		"prefix": "MODEL_OMOBOAT",
		"scope": "source.lua"
	},
	"MODEL_WFYCLOT": {
		"body": "211",
		"description": "GTA SA #Models\nModel id 211\n",
		"prefix": "MODEL_WFYCLOT",
		"scope": "source.lua"
	},
	"MODEL_VWMOTR1": {
		"body": "212",
		"description": "GTA SA #Models\nModel id 212\n",
		"prefix": "MODEL_VWMOTR1",
		"scope": "source.lua"
	},
	"MODEL_VWMOTR2": {
		"body": "213",
		"description": "GTA SA #Models\nModel id 213\n",
		"prefix": "MODEL_VWMOTR2",
		"scope": "source.lua"
	},
	"MODEL_VWFYWAI": {
		"body": "214",
		"description": "GTA SA #Models\nModel id 214\n",
		"prefix": "MODEL_VWFYWAI",
		"scope": "source.lua"
	},
	"MODEL_SBFORI": {
		"body": "215",
		"description": "GTA SA #Models\nModel id 215\n",
		"prefix": "MODEL_SBFORI",
		"scope": "source.lua"
	},
	"MODEL_SWFYRI": {
		"body": "216",
		"description": "GTA SA #Models\nModel id 216\n",
		"prefix": "MODEL_SWFYRI",
		"scope": "source.lua"
	},
	"MODEL_WMYCLOT": {
		"body": "217",
		"description": "GTA SA #Models\nModel id 217\n",
		"prefix": "MODEL_WMYCLOT",
		"scope": "source.lua"
	},
	"MODEL_SBFOST": {
		"body": "218",
		"description": "GTA SA #Models\nModel id 218\n",
		"prefix": "MODEL_SBFOST",
		"scope": "source.lua"
	},
	"MODEL_SBFYRI": {
		"body": "219",
		"description": "GTA SA #Models\nModel id 219\n",
		"prefix": "MODEL_SBFYRI",
		"scope": "source.lua"
	},
	"MODEL_SBMOCD": {
		"body": "220",
		"description": "GTA SA #Models\nModel id 220\n",
		"prefix": "MODEL_SBMOCD",
		"scope": "source.lua"
	},
	"MODEL_SBMORI": {
		"body": "221",
		"description": "GTA SA #Models\nModel id 221\n",
		"prefix": "MODEL_SBMORI",
		"scope": "source.lua"
	},
	"MODEL_SBMOST": {
		"body": "222",
		"description": "GTA SA #Models\nModel id 222\n",
		"prefix": "MODEL_SBMOST",
		"scope": "source.lua"
	},
	"MODEL_SHMYCR": {
		"body": "223",
		"description": "GTA SA #Models\nModel id 223\n",
		"prefix": "MODEL_SHMYCR",
		"scope": "source.lua"
	},
	"MODEL_SOFORI": {
		"body": "224",
		"description": "GTA SA #Models\nModel id 224\n",
		"prefix": "MODEL_SOFORI",
		"scope": "source.lua"
	},
	"MODEL_SOFOST": {
		"body": "225",
		"description": "GTA SA #Models\nModel id 225\n",
		"prefix": "MODEL_SOFOST",
		"scope": "source.lua"
	},
	"MODEL_SOFYST": {
		"body": "226",
		"description": "GTA SA #Models\nModel id 226\n",
		"prefix": "MODEL_SOFYST",
		"scope": "source.lua"
	},
	"MODEL_SOMOBU": {
		"body": "227",
		"description": "GTA SA #Models\nModel id 227\n",
		"prefix": "MODEL_SOMOBU",
		"scope": "source.lua"
	},
	"MODEL_SOMORI": {
		"body": "228",
		"description": "GTA SA #Models\nModel id 228\n",
		"prefix": "MODEL_SOMORI",
		"scope": "source.lua"
	},
	"MODEL_SOMOST": {
		"body": "229",
		"description": "GTA SA #Models\nModel id 229\n",
		"prefix": "MODEL_SOMOST",
		"scope": "source.lua"
	},
	"MODEL_SWMOTR5": {
		"body": "230",
		"description": "GTA SA #Models\nModel id 230\n",
		"prefix": "MODEL_SWMOTR5",
		"scope": "source.lua"
	},
	"MODEL_SWFORI": {
		"body": "231",
		"description": "GTA SA #Models\nModel id 231\n",
		"prefix": "MODEL_SWFORI",
		"scope": "source.lua"
	},
	"MODEL_SWFOST": {
		"body": "232",
		"description": "GTA SA #Models\nModel id 232\n",
		"prefix": "MODEL_SWFOST",
		"scope": "source.lua"
	},
	"MODEL_SWFYST": {
		"body": "233",
		"description": "GTA SA #Models\nModel id 233\n",
		"prefix": "MODEL_SWFYST",
		"scope": "source.lua"
	},
	"MODEL_SWMOCD": {
		"body": "234",
		"description": "GTA SA #Models\nModel id 234\n",
		"prefix": "MODEL_SWMOCD",
		"scope": "source.lua"
	},
	"MODEL_SWMORI": {
		"body": "235",
		"description": "GTA SA #Models\nModel id 235\n",
		"prefix": "MODEL_SWMORI",
		"scope": "source.lua"
	},
	"MODEL_SWMOST": {
		"body": "236",
		"description": "GTA SA #Models\nModel id 236\n",
		"prefix": "MODEL_SWMOST",
		"scope": "source.lua"
	},
	"MODEL_SHFYPRO": {
		"body": "237",
		"description": "GTA SA #Models\nModel id 237\n",
		"prefix": "MODEL_SHFYPRO",
		"scope": "source.lua"
	},
	"MODEL_SBFYPRO": {
		"body": "238",
		"description": "GTA SA #Models\nModel id 238\n",
		"prefix": "MODEL_SBFYPRO",
		"scope": "source.lua"
	},
	"MODEL_SWMOTR4": {
		"body": "239",
		"description": "GTA SA #Models\nModel id 239\n",
		"prefix": "MODEL_SWMOTR4",
		"scope": "source.lua"
	},
	"MODEL_SWMYRI": {
		"body": "240",
		"description": "GTA SA #Models\nModel id 240\n",
		"prefix": "MODEL_SWMYRI",
		"scope": "source.lua"
	},
	"MODEL_SMYST": {
		"body": "241",
		"description": "GTA SA #Models\nModel id 241\n",
		"prefix": "MODEL_SMYST",
		"scope": "source.lua"
	},
	"MODEL_SMYST2": {
		"body": "242",
		"description": "GTA SA #Models\nModel id 242\n",
		"prefix": "MODEL_SMYST2",
		"scope": "source.lua"
	},
	"MODEL_SFYPRO": {
		"body": "243",
		"description": "GTA SA #Models\nModel id 243\n",
		"prefix": "MODEL_SFYPRO",
		"scope": "source.lua"
	},
	"MODEL_VBFYST2": {
		"body": "244",
		"description": "GTA SA #Models\nModel id 244\n",
		"prefix": "MODEL_VBFYST2",
		"scope": "source.lua"
	},
	"MODEL_VBFYPRO": {
		"body": "245",
		"description": "GTA SA #Models\nModel id 245\n",
		"prefix": "MODEL_VBFYPRO",
		"scope": "source.lua"
	},
	"MODEL_VHFYST3": {
		"body": "246",
		"description": "GTA SA #Models\nModel id 246\n",
		"prefix": "MODEL_VHFYST3",
		"scope": "source.lua"
	},
	"MODEL_BIKERA": {
		"body": "247",
		"description": "GTA SA #Models\nModel id 247\n",
		"prefix": "MODEL_BIKERA",
		"scope": "source.lua"
	},
	"MODEL_BIKERB": {
		"body": "248",
		"description": "GTA SA #Models\nModel id 248\n",
		"prefix": "MODEL_BIKERB",
		"scope": "source.lua"
	},
	"MODEL_BMYPIMP": {
		"body": "249",
		"description": "GTA SA #Models\nModel id 249\n",
		"prefix": "MODEL_BMYPIMP",
		"scope": "source.lua"
	},
	"MODEL_SWMYCR": {
		"body": "250",
		"description": "GTA SA #Models\nModel id 250\n",
		"prefix": "MODEL_SWMYCR",
		"scope": "source.lua"
	},
	"MODEL_WFYLG": {
		"body": "251",
		"description": "GTA SA #Models\nModel id 251\n",
		"prefix": "MODEL_WFYLG",
		"scope": "source.lua"
	},
	"MODEL_WMYVA2": {
		"body": "252",
		"description": "GTA SA #Models\nModel id 252\n",
		"prefix": "MODEL_WMYVA2",
		"scope": "source.lua"
	},
	"MODEL_BMOSEC": {
		"body": "253",
		"description": "GTA SA #Models\nModel id 253\n",
		"prefix": "MODEL_BMOSEC",
		"scope": "source.lua"
	},
	"MODEL_BIKDRUG": {
		"body": "254",
		"description": "GTA SA #Models\nModel id 254\n",
		"prefix": "MODEL_BIKDRUG",
		"scope": "source.lua"
	},
	"MODEL_WMYCH": {
		"body": "255",
		"description": "GTA SA #Models\nModel id 255\n",
		"prefix": "MODEL_WMYCH",
		"scope": "source.lua"
	},
	"MODEL_SBFYSTR": {
		"body": "256",
		"description": "GTA SA #Models\nModel id 256\n",
		"prefix": "MODEL_SBFYSTR",
		"scope": "source.lua"
	},
	"MODEL_SWFYSTR": {
		"body": "257",
		"description": "GTA SA #Models\nModel id 257\n",
		"prefix": "MODEL_SWFYSTR",
		"scope": "source.lua"
	},
	"MODEL_HECK1": {
		"body": "258",
		"description": "GTA SA #Models\nModel id 258\n",
		"prefix": "MODEL_HECK1",
		"scope": "source.lua"
	},
	"MODEL_HECK2": {
		"body": "259",
		"description": "GTA SA #Models\nModel id 259\n",
		"prefix": "MODEL_HECK2",
		"scope": "source.lua"
	},
	"MODEL_BMYCON": {
		"body": "260",
		"description": "GTA SA #Models\nModel id 260\n",
		"prefix": "MODEL_BMYCON",
		"scope": "source.lua"
	},
	"MODEL_WMYCD1": {
		"body": "261",
		"description": "GTA SA #Models\nModel id 261\n",
		"prefix": "MODEL_WMYCD1",
		"scope": "source.lua"
	},
	"MODEL_BMOCD": {
		"body": "262",
		"description": "GTA SA #Models\nModel id 262\n",
		"prefix": "MODEL_BMOCD",
		"scope": "source.lua"
	},
	"MODEL_VWFYWA2": {
		"body": "263",
		"description": "GTA SA #Models\nModel id 263\n",
		"prefix": "MODEL_VWFYWA2",
		"scope": "source.lua"
	},
	"MODEL_WMOICE": {
		"body": "264",
		"description": "GTA SA #Models\nModel id 264\n",
		"prefix": "MODEL_WMOICE",
		"scope": "source.lua"
	},
	"MODEL_LAEMT1": {
		"body": "274",
		"description": "GTA SA #Models\nModel id 274\n",
		"prefix": "MODEL_LAEMT1",
		"scope": "source.lua"
	},
	"MODEL_LVEMT1": {
		"body": "275",
		"description": "GTA SA #Models\nModel id 275\n",
		"prefix": "MODEL_LVEMT1",
		"scope": "source.lua"
	},
	"MODEL_SFEMT1": {
		"body": "276",
		"description": "GTA SA #Models\nModel id 276\n",
		"prefix": "MODEL_SFEMT1",
		"scope": "source.lua"
	},
	"MODEL_LAFD1": {
		"body": "277",
		"description": "GTA SA #Models\nModel id 277\n",
		"prefix": "MODEL_LAFD1",
		"scope": "source.lua"
	},
	"MODEL_LVFD1": {
		"body": "278",
		"description": "GTA SA #Models\nModel id 278\n",
		"prefix": "MODEL_LVFD1",
		"scope": "source.lua"
	},
	"MODEL_SFFD1": {
		"body": "279",
		"description": "GTA SA #Models\nModel id 279\n",
		"prefix": "MODEL_SFFD1",
		"scope": "source.lua"
	},
	"MODEL_LAPD1": {
		"body": "280",
		"description": "GTA SA #Models\nModel id 280\n",
		"prefix": "MODEL_LAPD1",
		"scope": "source.lua"
	},
	"MODEL_SFPD1": {
		"body": "281",
		"description": "GTA SA #Models\nModel id 281\n",
		"prefix": "MODEL_SFPD1",
		"scope": "source.lua"
	},
	"MODEL_LVPD1": {
		"body": "282",
		"description": "GTA SA #Models\nModel id 282\n",
		"prefix": "MODEL_LVPD1",
		"scope": "source.lua"
	},
	"MODEL_CSHER": {
		"body": "283",
		"description": "GTA SA #Models\nModel id 283\n",
		"prefix": "MODEL_CSHER",
		"scope": "source.lua"
	},
	"MODEL_LAPDM1": {
		"body": "284",
		"description": "GTA SA #Models\nModel id 284\n",
		"prefix": "MODEL_LAPDM1",
		"scope": "source.lua"
	},
	"MODEL_SWAT": {
		"body": "285",
		"description": "GTA SA #Models\nModel id 285\n",
		"prefix": "MODEL_SWAT",
		"scope": "source.lua"
	},
	"MODEL_FBI": {
		"body": "286",
		"description": "GTA SA #Models\nModel id 286\n",
		"prefix": "MODEL_FBI",
		"scope": "source.lua"
	},
	"MODEL_ARMY": {
		"body": "287",
		"description": "GTA SA #Models\nModel id 287\n",
		"prefix": "MODEL_ARMY",
		"scope": "source.lua"
	},
	"MODEL_DSHER": {
		"body": "288",
		"description": "GTA SA #Models\nModel id 288\n",
		"prefix": "MODEL_DSHER",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL01": {
		"body": "290",
		"description": "GTA SA #Models\nModel id 290\n",
		"prefix": "MODEL_SPECIAL01",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL02": {
		"body": "291",
		"description": "GTA SA #Models\nModel id 291\n",
		"prefix": "MODEL_SPECIAL02",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL03": {
		"body": "292",
		"description": "GTA SA #Models\nModel id 292\n",
		"prefix": "MODEL_SPECIAL03",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL04": {
		"body": "293",
		"description": "GTA SA #Models\nModel id 293\n",
		"prefix": "MODEL_SPECIAL04",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL05": {
		"body": "294",
		"description": "GTA SA #Models\nModel id 294\n",
		"prefix": "MODEL_SPECIAL05",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL06": {
		"body": "295",
		"description": "GTA SA #Models\nModel id 295\n",
		"prefix": "MODEL_SPECIAL06",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL07": {
		"body": "296",
		"description": "GTA SA #Models\nModel id 296\n",
		"prefix": "MODEL_SPECIAL07",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL08": {
		"body": "297",
		"description": "GTA SA #Models\nModel id 297\n",
		"prefix": "MODEL_SPECIAL08",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL09": {
		"body": "298",
		"description": "GTA SA #Models\nModel id 298\n",
		"prefix": "MODEL_SPECIAL09",
		"scope": "source.lua"
	},
	"MODEL_SPECIAL10": {
		"body": "299",
		"description": "GTA SA #Models\nModel id 299\n",
		"prefix": "MODEL_SPECIAL10",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_--veh_mods.ide": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_--veh_mods.ide",
		"scope": "source.lua"
	},
	"MODEL_---": {
		"body": "",
		"description": "GTA SA #Models\nModel id \n",
		"prefix": "MODEL_---",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_MAR_M": {
		"body": "1000",
		"description": "GTA SA #Models\nModel id 1000\n",
		"prefix": "MODEL_SPL_B_MAR_M",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BAB_M": {
		"body": "1001",
		"description": "GTA SA #Models\nModel id 1001\n",
		"prefix": "MODEL_SPL_B_BAB_M",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BAR_M": {
		"body": "1002",
		"description": "GTA SA #Models\nModel id 1002\n",
		"prefix": "MODEL_SPL_B_BAR_M",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_MAB_M": {
		"body": "1003",
		"description": "GTA SA #Models\nModel id 1003\n",
		"prefix": "MODEL_SPL_B_MAB_M",
		"scope": "source.lua"
	},
	"MODEL_BNT_B_SC_M": {
		"body": "1004",
		"description": "GTA SA #Models\nModel id 1004\n",
		"prefix": "MODEL_BNT_B_SC_M",
		"scope": "source.lua"
	},
	"MODEL_BNT_B_SC_L": {
		"body": "1005",
		"description": "GTA SA #Models\nModel id 1005\n",
		"prefix": "MODEL_BNT_B_SC_L",
		"scope": "source.lua"
	},
	"MODEL_RF_B_SC_R": {
		"body": "1006",
		"description": "GTA SA #Models\nModel id 1006\n",
		"prefix": "MODEL_RF_B_SC_R",
		"scope": "source.lua"
	},
	"MODEL_WG_L_B_SSK": {
		"body": "1007",
		"description": "GTA SA #Models\nModel id 1007\n",
		"prefix": "MODEL_WG_L_B_SSK",
		"scope": "source.lua"
	},
	"MODEL_NTO_B_L": {
		"body": "1008",
		"description": "GTA SA #Models\nModel id 1008\n",
		"prefix": "MODEL_NTO_B_L",
		"scope": "source.lua"
	},
	"MODEL_NTO_B_S": {
		"body": "1009",
		"description": "GTA SA #Models\nModel id 1009\n",
		"prefix": "MODEL_NTO_B_S",
		"scope": "source.lua"
	},
	"MODEL_NTO_B_TW": {
		"body": "1010",
		"description": "GTA SA #Models\nModel id 1010\n",
		"prefix": "MODEL_NTO_B_TW",
		"scope": "source.lua"
	},
	"MODEL_BNT_B_SC_P_M": {
		"body": "1011",
		"description": "GTA SA #Models\nModel id 1011\n",
		"prefix": "MODEL_BNT_B_SC_P_M",
		"scope": "source.lua"
	},
	"MODEL_BNT_B_SC_P_L": {
		"body": "1012",
		"description": "GTA SA #Models\nModel id 1012\n",
		"prefix": "MODEL_BNT_B_SC_P_L",
		"scope": "source.lua"
	},
	"MODEL_LGT_B_RSPT": {
		"body": "1013",
		"description": "GTA SA #Models\nModel id 1013\n",
		"prefix": "MODEL_LGT_B_RSPT",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BAR_L": {
		"body": "1014",
		"description": "GTA SA #Models\nModel id 1014\n",
		"prefix": "MODEL_SPL_B_BAR_L",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BBR_L": {
		"body": "1015",
		"description": "GTA SA #Models\nModel id 1015\n",
		"prefix": "MODEL_SPL_B_BBR_L",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BBR_M": {
		"body": "1016",
		"description": "GTA SA #Models\nModel id 1016\n",
		"prefix": "MODEL_SPL_B_BBR_M",
		"scope": "source.lua"
	},
	"MODEL_WG_R_B_SSK": {
		"body": "1017",
		"description": "GTA SA #Models\nModel id 1017\n",
		"prefix": "MODEL_WG_R_B_SSK",
		"scope": "source.lua"
	},
	"MODEL_EXH_B_TS": {
		"body": "1018",
		"description": "GTA SA #Models\nModel id 1018\n",
		"prefix": "MODEL_EXH_B_TS",
		"scope": "source.lua"
	},
	"MODEL_EXH_B_T": {
		"body": "1019",
		"description": "GTA SA #Models\nModel id 1019\n",
		"prefix": "MODEL_EXH_B_T",
		"scope": "source.lua"
	},
	"MODEL_EXH_B_L": {
		"body": "1020",
		"description": "GTA SA #Models\nModel id 1020\n",
		"prefix": "MODEL_EXH_B_L",
		"scope": "source.lua"
	},
	"MODEL_EXH_B_M": {
		"body": "1021",
		"description": "GTA SA #Models\nModel id 1021\n",
		"prefix": "MODEL_EXH_B_M",
		"scope": "source.lua"
	},
	"MODEL_EXH_B_S": {
		"body": "1022",
		"description": "GTA SA #Models\nModel id 1022\n",
		"prefix": "MODEL_EXH_B_S",
		"scope": "source.lua"
	},
	"MODEL_SPL_B_BBB_M": {
		"body": "1023",
		"description": "GTA SA #Models\nModel id 1023\n",
		"prefix": "MODEL_SPL_B_BBB_M",
		"scope": "source.lua"
	},
	"MODEL_LGT_B_SSPT": {
		"body": "1024",
		"description": "GTA SA #Models\nModel id 1024\n",
		"prefix": "MODEL_LGT_B_SSPT",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_OR1": {
		"body": "1025",
		"description": "GTA SA #Models\nModel id 1025\n",
		"prefix": "MODEL_WHEEL_OR1",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_S": {
		"body": "1026",
		"description": "GTA SA #Models\nModel id 1026\n",
		"prefix": "MODEL_WG_L_A_S",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_S": {
		"body": "1027",
		"description": "GTA SA #Models\nModel id 1027\n",
		"prefix": "MODEL_WG_R_A_S",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_S": {
		"body": "1028",
		"description": "GTA SA #Models\nModel id 1028\n",
		"prefix": "MODEL_EXH_A_S",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_S": {
		"body": "1029",
		"description": "GTA SA #Models\nModel id 1029\n",
		"prefix": "MODEL_EXH_C_S",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_S": {
		"body": "1030",
		"description": "GTA SA #Models\nModel id 1030\n",
		"prefix": "MODEL_WG_R_C_S",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_S": {
		"body": "1031",
		"description": "GTA SA #Models\nModel id 1031\n",
		"prefix": "MODEL_WG_L_C_S",
		"scope": "source.lua"
	},
	"MODEL_RF_A_S": {
		"body": "1032",
		"description": "GTA SA #Models\nModel id 1032\n",
		"prefix": "MODEL_RF_A_S",
		"scope": "source.lua"
	},
	"MODEL_RF_C_S": {
		"body": "1033",
		"description": "GTA SA #Models\nModel id 1033\n",
		"prefix": "MODEL_RF_C_S",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_L": {
		"body": "1034",
		"description": "GTA SA #Models\nModel id 1034\n",
		"prefix": "MODEL_EXH_A_L",
		"scope": "source.lua"
	},
	"MODEL_RF_C_L": {
		"body": "1035",
		"description": "GTA SA #Models\nModel id 1035\n",
		"prefix": "MODEL_RF_C_L",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_L": {
		"body": "1036",
		"description": "GTA SA #Models\nModel id 1036\n",
		"prefix": "MODEL_WG_L_A_L",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_L": {
		"body": "1037",
		"description": "GTA SA #Models\nModel id 1037\n",
		"prefix": "MODEL_EXH_C_L",
		"scope": "source.lua"
	},
	"MODEL_RF_A_L": {
		"body": "1038",
		"description": "GTA SA #Models\nModel id 1038\n",
		"prefix": "MODEL_RF_A_L",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_L": {
		"body": "1039",
		"description": "GTA SA #Models\nModel id 1039\n",
		"prefix": "MODEL_WG_L_C_L",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_L": {
		"body": "1040",
		"description": "GTA SA #Models\nModel id 1040\n",
		"prefix": "MODEL_WG_R_A_L",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_L": {
		"body": "1041",
		"description": "GTA SA #Models\nModel id 1041\n",
		"prefix": "MODEL_WG_R_C_L",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_BR1": {
		"body": "1042",
		"description": "GTA SA #Models\nModel id 1042\n",
		"prefix": "MODEL_WG_L_LR_BR1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_BR2": {
		"body": "1043",
		"description": "GTA SA #Models\nModel id 1043\n",
		"prefix": "MODEL_EXH_LR_BR2",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_BR1": {
		"body": "1044",
		"description": "GTA SA #Models\nModel id 1044\n",
		"prefix": "MODEL_EXH_LR_BR1",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_F": {
		"body": "1045",
		"description": "GTA SA #Models\nModel id 1045\n",
		"prefix": "MODEL_EXH_C_F",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_F": {
		"body": "1046",
		"description": "GTA SA #Models\nModel id 1046\n",
		"prefix": "MODEL_EXH_A_F",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_F": {
		"body": "1047",
		"description": "GTA SA #Models\nModel id 1047\n",
		"prefix": "MODEL_WG_L_A_F",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_F": {
		"body": "1048",
		"description": "GTA SA #Models\nModel id 1048\n",
		"prefix": "MODEL_WG_L_C_F",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_F_R": {
		"body": "1049",
		"description": "GTA SA #Models\nModel id 1049\n",
		"prefix": "MODEL_SPL_A_F_R",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_F_R": {
		"body": "1050",
		"description": "GTA SA #Models\nModel id 1050\n",
		"prefix": "MODEL_SPL_C_F_R",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_F": {
		"body": "1051",
		"description": "GTA SA #Models\nModel id 1051\n",
		"prefix": "MODEL_WG_R_A_F",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_F": {
		"body": "1052",
		"description": "GTA SA #Models\nModel id 1052\n",
		"prefix": "MODEL_WG_R_C_F",
		"scope": "source.lua"
	},
	"MODEL_RF_C_F": {
		"body": "1053",
		"description": "GTA SA #Models\nModel id 1053\n",
		"prefix": "MODEL_RF_C_F",
		"scope": "source.lua"
	},
	"MODEL_RF_A_F": {
		"body": "1054",
		"description": "GTA SA #Models\nModel id 1054\n",
		"prefix": "MODEL_RF_A_F",
		"scope": "source.lua"
	},
	"MODEL_RF_A_ST": {
		"body": "1055",
		"description": "GTA SA #Models\nModel id 1055\n",
		"prefix": "MODEL_RF_A_ST",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_ST": {
		"body": "1056",
		"description": "GTA SA #Models\nModel id 1056\n",
		"prefix": "MODEL_WG_L_A_ST",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_ST": {
		"body": "1057",
		"description": "GTA SA #Models\nModel id 1057\n",
		"prefix": "MODEL_WG_L_C_ST",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_ST_R": {
		"body": "1058",
		"description": "GTA SA #Models\nModel id 1058\n",
		"prefix": "MODEL_SPL_A_ST_R",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_ST": {
		"body": "1059",
		"description": "GTA SA #Models\nModel id 1059\n",
		"prefix": "MODEL_EXH_C_ST",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_ST_R": {
		"body": "1060",
		"description": "GTA SA #Models\nModel id 1060\n",
		"prefix": "MODEL_SPL_C_ST_R",
		"scope": "source.lua"
	},
	"MODEL_RF_C_ST": {
		"body": "1061",
		"description": "GTA SA #Models\nModel id 1061\n",
		"prefix": "MODEL_RF_C_ST",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_ST": {
		"body": "1062",
		"description": "GTA SA #Models\nModel id 1062\n",
		"prefix": "MODEL_WG_R_A_ST",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_ST": {
		"body": "1063",
		"description": "GTA SA #Models\nModel id 1063\n",
		"prefix": "MODEL_WG_R_C_ST",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_ST": {
		"body": "1064",
		"description": "GTA SA #Models\nModel id 1064\n",
		"prefix": "MODEL_EXH_A_ST",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_J": {
		"body": "1065",
		"description": "GTA SA #Models\nModel id 1065\n",
		"prefix": "MODEL_EXH_A_J",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_J": {
		"body": "1066",
		"description": "GTA SA #Models\nModel id 1066\n",
		"prefix": "MODEL_EXH_C_J",
		"scope": "source.lua"
	},
	"MODEL_RF_A_J": {
		"body": "1067",
		"description": "GTA SA #Models\nModel id 1067\n",
		"prefix": "MODEL_RF_A_J",
		"scope": "source.lua"
	},
	"MODEL_RF_C_J": {
		"body": "1068",
		"description": "GTA SA #Models\nModel id 1068\n",
		"prefix": "MODEL_RF_C_J",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_J": {
		"body": "1069",
		"description": "GTA SA #Models\nModel id 1069\n",
		"prefix": "MODEL_WG_L_A_J",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_J": {
		"body": "1070",
		"description": "GTA SA #Models\nModel id 1070\n",
		"prefix": "MODEL_WG_L_C_J",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_J": {
		"body": "1071",
		"description": "GTA SA #Models\nModel id 1071\n",
		"prefix": "MODEL_WG_R_A_J",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_J": {
		"body": "1072",
		"description": "GTA SA #Models\nModel id 1072\n",
		"prefix": "MODEL_WG_R_C_J",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR6": {
		"body": "1073",
		"description": "GTA SA #Models\nModel id 1073\n",
		"prefix": "MODEL_WHEEL_SR6",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR3": {
		"body": "1074",
		"description": "GTA SA #Models\nModel id 1074\n",
		"prefix": "MODEL_WHEEL_SR3",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR2": {
		"body": "1075",
		"description": "GTA SA #Models\nModel id 1075\n",
		"prefix": "MODEL_WHEEL_SR2",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_LR4": {
		"body": "1076",
		"description": "GTA SA #Models\nModel id 1076\n",
		"prefix": "MODEL_WHEEL_LR4",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_LR1": {
		"body": "1077",
		"description": "GTA SA #Models\nModel id 1077\n",
		"prefix": "MODEL_WHEEL_LR1",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_LR3": {
		"body": "1078",
		"description": "GTA SA #Models\nModel id 1078\n",
		"prefix": "MODEL_WHEEL_LR3",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR1": {
		"body": "1079",
		"description": "GTA SA #Models\nModel id 1079\n",
		"prefix": "MODEL_WHEEL_SR1",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR5": {
		"body": "1080",
		"description": "GTA SA #Models\nModel id 1080\n",
		"prefix": "MODEL_WHEEL_SR5",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_SR4": {
		"body": "1081",
		"description": "GTA SA #Models\nModel id 1081\n",
		"prefix": "MODEL_WHEEL_SR4",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_GN1": {
		"body": "1082",
		"description": "GTA SA #Models\nModel id 1082\n",
		"prefix": "MODEL_WHEEL_GN1",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_LR2": {
		"body": "1083",
		"description": "GTA SA #Models\nModel id 1083\n",
		"prefix": "MODEL_WHEEL_LR2",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_LR5": {
		"body": "1084",
		"description": "GTA SA #Models\nModel id 1084\n",
		"prefix": "MODEL_WHEEL_LR5",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_GN2": {
		"body": "1085",
		"description": "GTA SA #Models\nModel id 1085\n",
		"prefix": "MODEL_WHEEL_GN2",
		"scope": "source.lua"
	},
	"MODEL_STEREO": {
		"body": "1086",
		"description": "GTA SA #Models\nModel id 1086\n",
		"prefix": "MODEL_STEREO",
		"scope": "source.lua"
	},
	"MODEL_HYDRALICS": {
		"body": "1087",
		"description": "GTA SA #Models\nModel id 1087\n",
		"prefix": "MODEL_HYDRALICS",
		"scope": "source.lua"
	},
	"MODEL_RF_A_U": {
		"body": "1088",
		"description": "GTA SA #Models\nModel id 1088\n",
		"prefix": "MODEL_RF_A_U",
		"scope": "source.lua"
	},
	"MODEL_EXH_C_U": {
		"body": "1089",
		"description": "GTA SA #Models\nModel id 1089\n",
		"prefix": "MODEL_EXH_C_U",
		"scope": "source.lua"
	},
	"MODEL_WG_L_A_U": {
		"body": "1090",
		"description": "GTA SA #Models\nModel id 1090\n",
		"prefix": "MODEL_WG_L_A_U",
		"scope": "source.lua"
	},
	"MODEL_RF_C_U": {
		"body": "1091",
		"description": "GTA SA #Models\nModel id 1091\n",
		"prefix": "MODEL_RF_C_U",
		"scope": "source.lua"
	},
	"MODEL_EXH_A_U": {
		"body": "1092",
		"description": "GTA SA #Models\nModel id 1092\n",
		"prefix": "MODEL_EXH_A_U",
		"scope": "source.lua"
	},
	"MODEL_WG_L_C_U": {
		"body": "1093",
		"description": "GTA SA #Models\nModel id 1093\n",
		"prefix": "MODEL_WG_L_C_U",
		"scope": "source.lua"
	},
	"MODEL_WG_R_A_U": {
		"body": "1094",
		"description": "GTA SA #Models\nModel id 1094\n",
		"prefix": "MODEL_WG_R_A_U",
		"scope": "source.lua"
	},
	"MODEL_WG_R_C_U": {
		"body": "1095",
		"description": "GTA SA #Models\nModel id 1095\n",
		"prefix": "MODEL_WG_R_C_U",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_GN3": {
		"body": "1096",
		"description": "GTA SA #Models\nModel id 1096\n",
		"prefix": "MODEL_WHEEL_GN3",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_GN4": {
		"body": "1097",
		"description": "GTA SA #Models\nModel id 1097\n",
		"prefix": "MODEL_WHEEL_GN4",
		"scope": "source.lua"
	},
	"MODEL_WHEEL_GN5": {
		"body": "1098",
		"description": "GTA SA #Models\nModel id 1098\n",
		"prefix": "MODEL_WHEEL_GN5",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_BR1": {
		"body": "1099",
		"description": "GTA SA #Models\nModel id 1099\n",
		"prefix": "MODEL_WG_R_LR_BR1",
		"scope": "source.lua"
	},
	"MODEL_MISC_C_LR_REM1": {
		"body": "1100",
		"description": "GTA SA #Models\nModel id 1100\n",
		"prefix": "MODEL_MISC_C_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_REM1": {
		"body": "1101",
		"description": "GTA SA #Models\nModel id 1101\n",
		"prefix": "MODEL_WG_R_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_SV": {
		"body": "1102",
		"description": "GTA SA #Models\nModel id 1102\n",
		"prefix": "MODEL_WG_R_LR_SV",
		"scope": "source.lua"
	},
	"MODEL_RF_LR_BL2": {
		"body": "1103",
		"description": "GTA SA #Models\nModel id 1103\n",
		"prefix": "MODEL_RF_LR_BL2",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_BL1": {
		"body": "1104",
		"description": "GTA SA #Models\nModel id 1104\n",
		"prefix": "MODEL_EXH_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_BL2": {
		"body": "1105",
		"description": "GTA SA #Models\nModel id 1105\n",
		"prefix": "MODEL_EXH_LR_BL2",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_REM2": {
		"body": "1106",
		"description": "GTA SA #Models\nModel id 1106\n",
		"prefix": "MODEL_WG_L_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_BL1": {
		"body": "1107",
		"description": "GTA SA #Models\nModel id 1107\n",
		"prefix": "MODEL_WG_R_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_BL1": {
		"body": "1108",
		"description": "GTA SA #Models\nModel id 1108\n",
		"prefix": "MODEL_WG_L_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_BBB_LR_SLV1": {
		"body": "1109",
		"description": "GTA SA #Models\nModel id 1109\n",
		"prefix": "MODEL_BBB_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_BBB_LR_SLV2": {
		"body": "1110",
		"description": "GTA SA #Models\nModel id 1110\n",
		"prefix": "MODEL_BBB_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_BNT_LR_SLV1": {
		"body": "1111",
		"description": "GTA SA #Models\nModel id 1111\n",
		"prefix": "MODEL_BNT_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_BNT_LR_SLV2": {
		"body": "1112",
		"description": "GTA SA #Models\nModel id 1112\n",
		"prefix": "MODEL_BNT_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_SLV1": {
		"body": "1113",
		"description": "GTA SA #Models\nModel id 1113\n",
		"prefix": "MODEL_EXH_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_SLV2": {
		"body": "1114",
		"description": "GTA SA #Models\nModel id 1114\n",
		"prefix": "MODEL_EXH_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_FBB_LR_SLV1": {
		"body": "1115",
		"description": "GTA SA #Models\nModel id 1115\n",
		"prefix": "MODEL_FBB_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_FBB_LR_SLV2": {
		"body": "1116",
		"description": "GTA SA #Models\nModel id 1116\n",
		"prefix": "MODEL_FBB_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_SLV1": {
		"body": "1117",
		"description": "GTA SA #Models\nModel id 1117\n",
		"prefix": "MODEL_FBMP_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_SLV1": {
		"body": "1118",
		"description": "GTA SA #Models\nModel id 1118\n",
		"prefix": "MODEL_WG_L_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_SLV2": {
		"body": "1119",
		"description": "GTA SA #Models\nModel id 1119\n",
		"prefix": "MODEL_WG_L_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_SLV1": {
		"body": "1120",
		"description": "GTA SA #Models\nModel id 1120\n",
		"prefix": "MODEL_WG_R_LR_SLV1",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_SLV2": {
		"body": "1121",
		"description": "GTA SA #Models\nModel id 1121\n",
		"prefix": "MODEL_WG_R_LR_SLV2",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_REM1": {
		"body": "1122",
		"description": "GTA SA #Models\nModel id 1122\n",
		"prefix": "MODEL_WG_L_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_MISC_C_LR_REM2": {
		"body": "1123",
		"description": "GTA SA #Models\nModel id 1123\n",
		"prefix": "MODEL_MISC_C_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_REM2": {
		"body": "1124",
		"description": "GTA SA #Models\nModel id 1124\n",
		"prefix": "MODEL_WG_R_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_MISC_C_LR_REM3": {
		"body": "1125",
		"description": "GTA SA #Models\nModel id 1125\n",
		"prefix": "MODEL_MISC_C_LR_REM3",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_REM1": {
		"body": "1126",
		"description": "GTA SA #Models\nModel id 1126\n",
		"prefix": "MODEL_EXH_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_REM2": {
		"body": "1127",
		"description": "GTA SA #Models\nModel id 1127\n",
		"prefix": "MODEL_EXH_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_RF_LR_BL1": {
		"body": "1128",
		"description": "GTA SA #Models\nModel id 1128\n",
		"prefix": "MODEL_RF_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_SV1": {
		"body": "1129",
		"description": "GTA SA #Models\nModel id 1129\n",
		"prefix": "MODEL_EXH_LR_SV1",
		"scope": "source.lua"
	},
	"MODEL_RF_LR_SV1": {
		"body": "1130",
		"description": "GTA SA #Models\nModel id 1130\n",
		"prefix": "MODEL_RF_LR_SV1",
		"scope": "source.lua"
	},
	"MODEL_RF_LR_SV2": {
		"body": "1131",
		"description": "GTA SA #Models\nModel id 1131\n",
		"prefix": "MODEL_RF_LR_SV2",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_SV2": {
		"body": "1132",
		"description": "GTA SA #Models\nModel id 1132\n",
		"prefix": "MODEL_EXH_LR_SV2",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_SV": {
		"body": "1133",
		"description": "GTA SA #Models\nModel id 1133\n",
		"prefix": "MODEL_WG_L_LR_SV",
		"scope": "source.lua"
	},
	"MODEL_WG_L_LR_T1": {
		"body": "1134",
		"description": "GTA SA #Models\nModel id 1134\n",
		"prefix": "MODEL_WG_L_LR_T1",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_T2": {
		"body": "1135",
		"description": "GTA SA #Models\nModel id 1135\n",
		"prefix": "MODEL_EXH_LR_T2",
		"scope": "source.lua"
	},
	"MODEL_EXH_LR_T1": {
		"body": "1136",
		"description": "GTA SA #Models\nModel id 1136\n",
		"prefix": "MODEL_EXH_LR_T1",
		"scope": "source.lua"
	},
	"MODEL_WG_R_LR_T1": {
		"body": "1137",
		"description": "GTA SA #Models\nModel id 1137\n",
		"prefix": "MODEL_WG_R_LR_T1",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_S_B": {
		"body": "1138",
		"description": "GTA SA #Models\nModel id 1138\n",
		"prefix": "MODEL_SPL_A_S_B",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_S_B": {
		"body": "1139",
		"description": "GTA SA #Models\nModel id 1139\n",
		"prefix": "MODEL_SPL_C_S_B",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_S": {
		"body": "1140",
		"description": "GTA SA #Models\nModel id 1140\n",
		"prefix": "MODEL_RBMP_C_S",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_S": {
		"body": "1141",
		"description": "GTA SA #Models\nModel id 1141\n",
		"prefix": "MODEL_RBMP_A_S",
		"scope": "source.lua"
	},
	"MODEL_BNTR_B_OV": {
		"body": "1142",
		"description": "GTA SA #Models\nModel id 1142\n",
		"prefix": "MODEL_BNTR_B_OV",
		"scope": "source.lua"
	},
	"MODEL_BNTL_B_OV": {
		"body": "1143",
		"description": "GTA SA #Models\nModel id 1143\n",
		"prefix": "MODEL_BNTL_B_OV",
		"scope": "source.lua"
	},
	"MODEL_BNTR_B_SQ": {
		"body": "1144",
		"description": "GTA SA #Models\nModel id 1144\n",
		"prefix": "MODEL_BNTR_B_SQ",
		"scope": "source.lua"
	},
	"MODEL_BNTL_B_SQ": {
		"body": "1145",
		"description": "GTA SA #Models\nModel id 1145\n",
		"prefix": "MODEL_BNTL_B_SQ",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_L_B": {
		"body": "1146",
		"description": "GTA SA #Models\nModel id 1146\n",
		"prefix": "MODEL_SPL_C_L_B",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_L_B": {
		"body": "1147",
		"description": "GTA SA #Models\nModel id 1147\n",
		"prefix": "MODEL_SPL_A_L_B",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_L": {
		"body": "1148",
		"description": "GTA SA #Models\nModel id 1148\n",
		"prefix": "MODEL_RBMP_C_L",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_L": {
		"body": "1149",
		"description": "GTA SA #Models\nModel id 1149\n",
		"prefix": "MODEL_RBMP_A_L",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_F": {
		"body": "1150",
		"description": "GTA SA #Models\nModel id 1150\n",
		"prefix": "MODEL_RBMP_A_F",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_F": {
		"body": "1151",
		"description": "GTA SA #Models\nModel id 1151\n",
		"prefix": "MODEL_RBMP_C_F",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_F": {
		"body": "1152",
		"description": "GTA SA #Models\nModel id 1152\n",
		"prefix": "MODEL_FBMP_C_F",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_F": {
		"body": "1153",
		"description": "GTA SA #Models\nModel id 1153\n",
		"prefix": "MODEL_FBMP_A_F",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_ST": {
		"body": "1154",
		"description": "GTA SA #Models\nModel id 1154\n",
		"prefix": "MODEL_RBMP_A_ST",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_ST": {
		"body": "1155",
		"description": "GTA SA #Models\nModel id 1155\n",
		"prefix": "MODEL_FBMP_A_ST",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_ST": {
		"body": "1156",
		"description": "GTA SA #Models\nModel id 1156\n",
		"prefix": "MODEL_RBMP_C_ST",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_ST": {
		"body": "1157",
		"description": "GTA SA #Models\nModel id 1157\n",
		"prefix": "MODEL_FBMP_C_ST",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_J_B": {
		"body": "1158",
		"description": "GTA SA #Models\nModel id 1158\n",
		"prefix": "MODEL_SPL_C_J_B",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_J": {
		"body": "1159",
		"description": "GTA SA #Models\nModel id 1159\n",
		"prefix": "MODEL_RBMP_A_J",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_J": {
		"body": "1160",
		"description": "GTA SA #Models\nModel id 1160\n",
		"prefix": "MODEL_FBMP_A_J",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_J": {
		"body": "1161",
		"description": "GTA SA #Models\nModel id 1161\n",
		"prefix": "MODEL_RBMP_C_J",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_J_B": {
		"body": "1162",
		"description": "GTA SA #Models\nModel id 1162\n",
		"prefix": "MODEL_SPL_A_J_B",
		"scope": "source.lua"
	},
	"MODEL_SPL_C_U_B": {
		"body": "1163",
		"description": "GTA SA #Models\nModel id 1163\n",
		"prefix": "MODEL_SPL_C_U_B",
		"scope": "source.lua"
	},
	"MODEL_SPL_A_U_B": {
		"body": "1164",
		"description": "GTA SA #Models\nModel id 1164\n",
		"prefix": "MODEL_SPL_A_U_B",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_U": {
		"body": "1165",
		"description": "GTA SA #Models\nModel id 1165\n",
		"prefix": "MODEL_FBMP_C_U",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_U": {
		"body": "1166",
		"description": "GTA SA #Models\nModel id 1166\n",
		"prefix": "MODEL_FBMP_A_U",
		"scope": "source.lua"
	},
	"MODEL_RBMP_C_U": {
		"body": "1167",
		"description": "GTA SA #Models\nModel id 1167\n",
		"prefix": "MODEL_RBMP_C_U",
		"scope": "source.lua"
	},
	"MODEL_RBMP_A_U": {
		"body": "1168",
		"description": "GTA SA #Models\nModel id 1168\n",
		"prefix": "MODEL_RBMP_A_U",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_S": {
		"body": "1169",
		"description": "GTA SA #Models\nModel id 1169\n",
		"prefix": "MODEL_FBMP_A_S",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_S": {
		"body": "1170",
		"description": "GTA SA #Models\nModel id 1170\n",
		"prefix": "MODEL_FBMP_C_S",
		"scope": "source.lua"
	},
	"MODEL_FBMP_A_L": {
		"body": "1171",
		"description": "GTA SA #Models\nModel id 1171\n",
		"prefix": "MODEL_FBMP_A_L",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_L": {
		"body": "1172",
		"description": "GTA SA #Models\nModel id 1172\n",
		"prefix": "MODEL_FBMP_C_L",
		"scope": "source.lua"
	},
	"MODEL_FBMP_C_J": {
		"body": "1173",
		"description": "GTA SA #Models\nModel id 1173\n",
		"prefix": "MODEL_FBMP_C_J",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_BR1": {
		"body": "1174",
		"description": "GTA SA #Models\nModel id 1174\n",
		"prefix": "MODEL_FBMP_LR_BR1",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_BR2": {
		"body": "1175",
		"description": "GTA SA #Models\nModel id 1175\n",
		"prefix": "MODEL_FBMP_LR_BR2",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_BR1": {
		"body": "1176",
		"description": "GTA SA #Models\nModel id 1176\n",
		"prefix": "MODEL_RBMP_LR_BR1",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_BR2": {
		"body": "1177",
		"description": "GTA SA #Models\nModel id 1177\n",
		"prefix": "MODEL_RBMP_LR_BR2",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_REM2": {
		"body": "1178",
		"description": "GTA SA #Models\nModel id 1178\n",
		"prefix": "MODEL_RBMP_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_REM1": {
		"body": "1179",
		"description": "GTA SA #Models\nModel id 1179\n",
		"prefix": "MODEL_FBMP_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_REM1": {
		"body": "1180",
		"description": "GTA SA #Models\nModel id 1180\n",
		"prefix": "MODEL_RBMP_LR_REM1",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_BL2": {
		"body": "1181",
		"description": "GTA SA #Models\nModel id 1181\n",
		"prefix": "MODEL_FBMP_LR_BL2",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_BL1": {
		"body": "1182",
		"description": "GTA SA #Models\nModel id 1182\n",
		"prefix": "MODEL_FBMP_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_BL2": {
		"body": "1183",
		"description": "GTA SA #Models\nModel id 1183\n",
		"prefix": "MODEL_RBMP_LR_BL2",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_BL1": {
		"body": "1184",
		"description": "GTA SA #Models\nModel id 1184\n",
		"prefix": "MODEL_RBMP_LR_BL1",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_REM2": {
		"body": "1185",
		"description": "GTA SA #Models\nModel id 1185\n",
		"prefix": "MODEL_FBMP_LR_REM2",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_SV2": {
		"body": "1186",
		"description": "GTA SA #Models\nModel id 1186\n",
		"prefix": "MODEL_RBMP_LR_SV2",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_SV1": {
		"body": "1187",
		"description": "GTA SA #Models\nModel id 1187\n",
		"prefix": "MODEL_RBMP_LR_SV1",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_SV2": {
		"body": "1188",
		"description": "GTA SA #Models\nModel id 1188\n",
		"prefix": "MODEL_FBMP_LR_SV2",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_SV1": {
		"body": "1189",
		"description": "GTA SA #Models\nModel id 1189\n",
		"prefix": "MODEL_FBMP_LR_SV1",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_T2": {
		"body": "1190",
		"description": "GTA SA #Models\nModel id 1190\n",
		"prefix": "MODEL_FBMP_LR_T2",
		"scope": "source.lua"
	},
	"MODEL_FBMP_LR_T1": {
		"body": "1191",
		"description": "GTA SA #Models\nModel id 1191\n",
		"prefix": "MODEL_FBMP_LR_T1",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_T1": {
		"body": "1192",
		"description": "GTA SA #Models\nModel id 1192\n",
		"prefix": "MODEL_RBMP_LR_T1",
		"scope": "source.lua"
	},
	"MODEL_RBMP_LR_T2": {
		"body": "1193",
		"description": "GTA SA #Models\nModel id 1193\n",
		"prefix": "MODEL_RBMP_LR_T2",
		"scope": "source.lua"
	},
	
	"WEAPON_FIST": {
		"body": "0",
		"description": "GTA SA #Weapons\nWeapon id 0\n",
		"prefix": "WEAPON_FIST",
		"scope": "source.lua"
	},
	"WEAPON_BRASSKNUCKLES": {
		"body": "1",
		"description": "GTA SA #Weapons\nWeapon id 1\n",
		"prefix": "WEAPON_BRASSKNUCKLES",
		"scope": "source.lua"
	},
	"WEAPON_GOLFCLUB": {
		"body": "2",
		"description": "GTA SA #Weapons\nWeapon id 2\n",
		"prefix": "WEAPON_GOLFCLUB",
		"scope": "source.lua"
	},
	"WEAPON_NIGHTSTICK": {
		"body": "3",
		"description": "GTA SA #Weapons\nWeapon id 3\n",
		"prefix": "WEAPON_NIGHTSTICK",
		"scope": "source.lua"
	},
	"WEAPON_KNIFE": {
		"body": "4",
		"description": "GTA SA #Weapons\nWeapon id 4\n",
		"prefix": "WEAPON_KNIFE",
		"scope": "source.lua"
	},
	"WEAPON_BASEBALLBAT": {
		"body": "5",
		"description": "GTA SA #Weapons\nWeapon id 5\n",
		"prefix": "WEAPON_BASEBALLBAT",
		"scope": "source.lua"
	},
	"WEAPON_SHOVEL": {
		"body": "6",
		"description": "GTA SA #Weapons\nWeapon id 6\n",
		"prefix": "WEAPON_SHOVEL",
		"scope": "source.lua"
	},
	"WEAPON_POOLCUE": {
		"body": "7",
		"description": "GTA SA #Weapons\nWeapon id 7\n",
		"prefix": "WEAPON_POOLCUE",
		"scope": "source.lua"
	},
	"WEAPON_KATANA": {
		"body": "8",
		"description": "GTA SA #Weapons\nWeapon id 8\n",
		"prefix": "WEAPON_KATANA",
		"scope": "source.lua"
	},
	"WEAPON_CHAINSAW": {
		"body": "9",
		"description": "GTA SA #Weapons\nWeapon id 9\n",
		"prefix": "WEAPON_CHAINSAW",
		"scope": "source.lua"
	},
	"WEAPON_PURPLEDILDO": {
		"body": "10",
		"description": "GTA SA #Weapons\nWeapon id 10\n",
		"prefix": "WEAPON_PURPLEDILDO",
		"scope": "source.lua"
	},
	"WEAPON_WHITEDILDO": {
		"body": "11",
		"description": "GTA SA #Weapons\nWeapon id 11\n",
		"prefix": "WEAPON_WHITEDILDO",
		"scope": "source.lua"
	},
	"WEAPON_WHITEVIBRATOR": {
		"body": "12",
		"description": "GTA SA #Weapons\nWeapon id 12\n",
		"prefix": "WEAPON_WHITEVIBRATOR",
		"scope": "source.lua"
	},
	"WEAPON_SILVERVIBRATOR": {
		"body": "13",
		"description": "GTA SA #Weapons\nWeapon id 13\n",
		"prefix": "WEAPON_SILVERVIBRATOR",
		"scope": "source.lua"
	},
	"WEAPON_FLOWERS": {
		"body": "14",
		"description": "GTA SA #Weapons\nWeapon id 14\n",
		"prefix": "WEAPON_FLOWERS",
		"scope": "source.lua"
	},
	"WEAPON_CANE": {
		"body": "15",
		"description": "GTA SA #Weapons\nWeapon id 15\n",
		"prefix": "WEAPON_CANE",
		"scope": "source.lua"
	},
	"WEAPON_GRENADE": {
		"body": "16",
		"description": "GTA SA #Weapons\nWeapon id 16\n",
		"prefix": "WEAPON_GRENADE",
		"scope": "source.lua"
	},
	"WEAPON_TEARGAS": {
		"body": "17",
		"description": "GTA SA #Weapons\nWeapon id 17\n",
		"prefix": "WEAPON_TEARGAS",
		"scope": "source.lua"
	},
	"WEAPON_MOLOTOV": {
		"body": "18",
		"description": "GTA SA #Weapons\nWeapon id 18\n",
		"prefix": "WEAPON_MOLOTOV",
		"scope": "source.lua"
	},
	"WEAPON_COLT45": {
		"body": "22",
		"description": "GTA SA #Weapons\nWeapon id 22\n",
		"prefix": "WEAPON_COLT45",
		"scope": "source.lua"
	},
	"WEAPON_SILENCED": {
		"body": "23",
		"description": "GTA SA #Weapons\nWeapon id 23\n",
		"prefix": "WEAPON_SILENCED",
		"scope": "source.lua"
	},
	"WEAPON_DESERTEAGLE": {
		"body": "24",
		"description": "GTA SA #Weapons\nWeapon id 24\n",
		"prefix": "WEAPON_DESERTEAGLE",
		"scope": "source.lua"
	},
	"WEAPON_SHOTGUN": {
		"body": "25",
		"description": "GTA SA #Weapons\nWeapon id 25\n",
		"prefix": "WEAPON_SHOTGUN",
		"scope": "source.lua"
	},
	"WEAPON_SAWNOFFSHOTGUN": {
		"body": "26",
		"description": "GTA SA #Weapons\nWeapon id 26\n",
		"prefix": "WEAPON_SAWNOFFSHOTGUN",
		"scope": "source.lua"
	},
	"WEAPON_COMBATSHOTGUN": {
		"body": "27",
		"description": "GTA SA #Weapons\nWeapon id 27\n",
		"prefix": "WEAPON_COMBATSHOTGUN",
		"scope": "source.lua"
	},
	"WEAPON_UZI": {
		"body": "28",
		"description": "GTA SA #Weapons\nWeapon id 28\n",
		"prefix": "WEAPON_UZI",
		"scope": "source.lua"
	},
	"WEAPON_MP5": {
		"body": "29",
		"description": "GTA SA #Weapons\nWeapon id 29\n",
		"prefix": "WEAPON_MP5",
		"scope": "source.lua"
	},
	"WEAPON_AK47": {
		"body": "30",
		"description": "GTA SA #Weapons\nWeapon id 30\n",
		"prefix": "WEAPON_AK47",
		"scope": "source.lua"
	},
	"WEAPON_M4": {
		"body": "31",
		"description": "GTA SA #Weapons\nWeapon id 31\n",
		"prefix": "WEAPON_M4",
		"scope": "source.lua"
	},
	"WEAPON_TEC9": {
		"body": "32",
		"description": "GTA SA #Weapons\nWeapon id 32\n",
		"prefix": "WEAPON_TEC9",
		"scope": "source.lua"
	},
	"WEAPON_RIFLE": {
		"body": "33",
		"description": "GTA SA #Weapons\nWeapon id 33\n",
		"prefix": "WEAPON_RIFLE",
		"scope": "source.lua"
	},
	"WEAPON_SNIPERRIFLE": {
		"body": "34",
		"description": "GTA SA #Weapons\nWeapon id 34\n",
		"prefix": "WEAPON_SNIPERRIFLE",
		"scope": "source.lua"
	},
	"WEAPON_ROCKETLAUNCHER": {
		"body": "35",
		"description": "GTA SA #Weapons\nWeapon id 35\n",
		"prefix": "WEAPON_ROCKETLAUNCHER",
		"scope": "source.lua"
	},
	"WEAPON_HEATSEEKER": {
		"body": "36",
		"description": "GTA SA #Weapons\nWeapon id 36\n",
		"prefix": "WEAPON_HEATSEEKER",
		"scope": "source.lua"
	},
	"WEAPON_FLAMETHROWER": {
		"body": "37",
		"description": "GTA SA #Weapons\nWeapon id 37\n",
		"prefix": "WEAPON_FLAMETHROWER",
		"scope": "source.lua"
	},
	"WEAPON_MINIGUN": {
		"body": "38",
		"description": "GTA SA #Weapons\nWeapon id 38\n",
		"prefix": "WEAPON_MINIGUN",
		"scope": "source.lua"
	},
	"WEAPON_SATCHELCHARGE": {
		"body": "39",
		"description": "GTA SA #Weapons\nWeapon id 39\n",
		"prefix": "WEAPON_SATCHELCHARGE",
		"scope": "source.lua"
	},
	"WEAPON_DETONATOR": {
		"body": "40",
		"description": "GTA SA #Weapons\nWeapon id 40\n",
		"prefix": "WEAPON_DETONATOR",
		"scope": "source.lua"
	},
	"WEAPON_SPRAYCAN": {
		"body": "41",
		"description": "GTA SA #Weapons\nWeapon id 41\n",
		"prefix": "WEAPON_SPRAYCAN",
		"scope": "source.lua"
	},
	"WEAPON_FIREEXTINGUISHER": {
		"body": "42",
		"description": "GTA SA #Weapons\nWeapon id 42\n",
		"prefix": "WEAPON_FIREEXTINGUISHER",
		"scope": "source.lua"
	},
	"WEAPON_CAMERA": {
		"body": "43",
		"description": "GTA SA #Weapons\nWeapon id 43\n",
		"prefix": "WEAPON_CAMERA",
		"scope": "source.lua"
	},
	"WEAPON_NIGHTVISION": {
		"body": "44",
		"description": "GTA SA #Weapons\nWeapon id 44\n",
		"prefix": "WEAPON_NIGHTVISION",
		"scope": "source.lua"
	},
	"WEAPON_THERMALVISION": {
		"body": "45",
		"description": "GTA SA #Weapons\nWeapon id 45\n",
		"prefix": "WEAPON_THERMALVISION",
		"scope": "source.lua"
	},
	"WEAPON_PARACHUTE": {
		"body": "46",
		"description": "GTA SA #Weapons\nWeapon id 46\n",
		"prefix": "WEAPON_PARACHUTE",
		"scope": "source.lua"
	},
		
	"BUTTON_GOLEFT_GORIGHT": {
		"body": "0",
		"description": "GTA SA #Buttons\nButton id 0\n",
		"prefix": "BUTTON_GOLEFT_GORIGHT",
		"scope": "source.lua"
	},
	"BUTTON_GOFORWARD_GOBACK": {
		"body": "1",
		"description": "GTA SA #Buttons\nButton id 1\n",
		"prefix": "BUTTON_GOFORWARD_GOBACK",
		"scope": "source.lua"
	},
	"BUTTON_ANSWERPHONE_FIREWEAPONALT": {
		"body": "4",
		"description": "GTA SA #Buttons\nButton id 4\n",
		"prefix": "BUTTON_ANSWERPHONE_FIREWEAPONALT",
		"scope": "source.lua"
	},
	"BUTTON_CYCLEWEAPONLEFT_SNIPERZOOMIN": {
		"body": "5",
		"description": "GTA SA #Buttons\nButton id 5\n",
		"prefix": "BUTTON_CYCLEWEAPONLEFT_SNIPERZOOMIN",
		"scope": "source.lua"
	},
	"BUTTON_LOCKTARGET": {
		"body": "6",
		"description": "GTA SA #Buttons\nButton id 6\n",
		"prefix": "BUTTON_LOCKTARGET",
		"scope": "source.lua"
	},
	"BUTTON_CYCLEWEAPONRIGHT_SNIPERZOOMOUT": {
		"body": "7",
		"description": "GTA SA #Buttons\nButton id 7\n",
		"prefix": "BUTTON_CYCLEWEAPONRIGHT_SNIPERZOOMOUT",
		"scope": "source.lua"
	},
	"BUTTON_GROUPCONTROLFWD": {
		"body": "8",
		"description": "GTA SA #Buttons\nButton id 8\n",
		"prefix": "BUTTON_GROUPCONTROLFWD",
		"scope": "source.lua"
	},
	"BUTTON_GROUPCONTROLBWD": {
		"body": "9",
		"description": "GTA SA #Buttons\nButton id 9\n",
		"prefix": "BUTTON_GROUPCONTROLBWD",
		"scope": "source.lua"
	},
	"BUTTON_CONVERSATIONNO": {
		"body": "10",
		"description": "GTA SA #Buttons\nButton id 10\n",
		"prefix": "BUTTON_CONVERSATIONNO",
		"scope": "source.lua"
	},
	"BUTTON_CONVERSATIONYES": {
		"body": "11",
		"description": "GTA SA #Buttons\nButton id 11\n",
		"prefix": "BUTTON_CONVERSATIONYES",
		"scope": "source.lua"
	},
	"BUTTON_CHANGECAMERAVIEW": {
		"body": "13",
		"description": "GTA SA #Buttons\nButton id 13\n",
		"prefix": "BUTTON_CHANGECAMERAVIEW",
		"scope": "source.lua"
	},
	"BUTTON_JUMP": {
		"body": "14",
		"description": "GTA SA #Buttons\nButton id 14\n",
		"prefix": "BUTTON_JUMP",
		"scope": "source.lua"
	},
	"BUTTON_ENTERVEHICLE": {
		"body": "15",
		"description": "GTA SA #Buttons\nButton id 15\n",
		"prefix": "BUTTON_ENTERVEHICLE",
		"scope": "source.lua"
	},
	"BUTTON_SPRINT": {
		"body": "16",
		"description": "GTA SA #Buttons\nButton id 16\n",
		"prefix": "BUTTON_SPRINT",
		"scope": "source.lua"
	},
	"BUTTON_FIREWEAPON": {
		"body": "17",
		"description": "GTA SA #Buttons\nButton id 17\n",
		"prefix": "BUTTON_FIREWEAPON",
		"scope": "source.lua"
	},
	"BUTTON_CROUCH": {
		"body": "18",
		"description": "GTA SA #Buttons\nButton id 18\n",
		"prefix": "BUTTON_CROUCH",
		"scope": "source.lua"
	},
	"BUTTON_LOOKBEHIND": {
		"body": "19",
		"description": "GTA SA #Buttons\nButton id 19\n",
		"prefix": "BUTTON_LOOKBEHIND",
		"scope": "source.lua"
	},
	"BUTTON_WALK": {
		"body": "21",
		"description": "GTA SA #Buttons\nButton id 21\n",
		"prefix": "BUTTON_WALK",
		"scope": "source.lua"
	},
		
	"VK_LBUTTON": {
		"body": "0x01",
		"description": "System #VK_Keys\nVK_Keys id 0x01\n",
		"prefix": "VK_LBUTTON",
		"scope": "source.lua"
	},
	"VK_RBUTTON": {
		"body": "0x02",
		"description": "System #VK_Keys\nVK_Keys id 0x02\n",
		"prefix": "VK_RBUTTON",
		"scope": "source.lua"
	},
	"VK_CANCEL": {
		"body": "0x03",
		"description": "System #VK_Keys\nVK_Keys id 0x03\n",
		"prefix": "VK_CANCEL",
		"scope": "source.lua"
	},
	"VK_MBUTTON": {
		"body": "0x04",
		"description": "System #VK_Keys\nVK_Keys id 0x04\n",
		"prefix": "VK_MBUTTON",
		"scope": "source.lua"
	},
	"VK_XBUTTON1": {
		"body": "0x05",
		"description": "System #VK_Keys\nVK_Keys id 0x05\n",
		"prefix": "VK_XBUTTON1",
		"scope": "source.lua"
	},
	"VK_XBUTTON2": {
		"body": "0x06",
		"description": "System #VK_Keys\nVK_Keys id 0x06\n",
		"prefix": "VK_XBUTTON2",
		"scope": "source.lua"
	},
	"VK_BACK": {
		"body": "0x08",
		"description": "System #VK_Keys\nVK_Keys id 0x08\n",
		"prefix": "VK_BACK",
		"scope": "source.lua"
	},
	"VK_TAB": {
		"body": "0x09",
		"description": "System #VK_Keys\nVK_Keys id 0x09\n",
		"prefix": "VK_TAB",
		"scope": "source.lua"
	},
	"VK_CLEAR": {
		"body": "0x0C",
		"description": "System #VK_Keys\nVK_Keys id 0x0C\n",
		"prefix": "VK_CLEAR",
		"scope": "source.lua"
	},
	"VK_RETURN": {
		"body": "0x0D",
		"description": "System #VK_Keys\nVK_Keys id 0x0D\n",
		"prefix": "VK_RETURN",
		"scope": "source.lua"
	},
	"VK_SHIFT": {
		"body": "0x10",
		"description": "System #VK_Keys\nVK_Keys id 0x10\n",
		"prefix": "VK_SHIFT",
		"scope": "source.lua"
	},
	"VK_CONTROL": {
		"body": "0x11",
		"description": "System #VK_Keys\nVK_Keys id 0x11\n",
		"prefix": "VK_CONTROL",
		"scope": "source.lua"
	},
	"VK_MENU": {
		"body": "0x12",
		"description": "System #VK_Keys\nVK_Keys id 0x12\n",
		"prefix": "VK_MENU",
		"scope": "source.lua"
	},
	"VK_PAUSE": {
		"body": "0x13",
		"description": "System #VK_Keys\nVK_Keys id 0x13\n",
		"prefix": "VK_PAUSE",
		"scope": "source.lua"
	},
	"VK_CAPITAL": {
		"body": "0x14",
		"description": "System #VK_Keys\nVK_Keys id 0x14\n",
		"prefix": "VK_CAPITAL",
		"scope": "source.lua"
	},
	"VK_KANA": {
		"body": "0x15",
		"description": "System #VK_Keys\nVK_Keys id 0x15\n",
		"prefix": "VK_KANA",
		"scope": "source.lua"
	},
	"VK_JUNJA": {
		"body": "0x17",
		"description": "System #VK_Keys\nVK_Keys id 0x17\n",
		"prefix": "VK_JUNJA",
		"scope": "source.lua"
	},
	"VK_FINAL": {
		"body": "0x18",
		"description": "System #VK_Keys\nVK_Keys id 0x18\n",
		"prefix": "VK_FINAL",
		"scope": "source.lua"
	},
	"VK_KANJI": {
		"body": "0x19",
		"description": "System #VK_Keys\nVK_Keys id 0x19\n",
		"prefix": "VK_KANJI",
		"scope": "source.lua"
	},
	"VK_ESCAPE": {
		"body": "0x1B",
		"description": "System #VK_Keys\nVK_Keys id 0x1B\n",
		"prefix": "VK_ESCAPE",
		"scope": "source.lua"
	},
	"VK_CONVERT": {
		"body": "0x1C",
		"description": "System #VK_Keys\nVK_Keys id 0x1C\n",
		"prefix": "VK_CONVERT",
		"scope": "source.lua"
	},
	"VK_NONCONVERT": {
		"body": "0x1D",
		"description": "System #VK_Keys\nVK_Keys id 0x1D\n",
		"prefix": "VK_NONCONVERT",
		"scope": "source.lua"
	},
	"VK_ACCEPT": {
		"body": "0x1E",
		"description": "System #VK_Keys\nVK_Keys id 0x1E\n",
		"prefix": "VK_ACCEPT",
		"scope": "source.lua"
	},
	"VK_MODECHANGE": {
		"body": "0x1F",
		"description": "System #VK_Keys\nVK_Keys id 0x1F\n",
		"prefix": "VK_MODECHANGE",
		"scope": "source.lua"
	},
	"VK_SPACE": {
		"body": "0x20",
		"description": "System #VK_Keys\nVK_Keys id 0x20\n",
		"prefix": "VK_SPACE",
		"scope": "source.lua"
	},
	"VK_PRIOR": {
		"body": "0x21",
		"description": "System #VK_Keys\nVK_Keys id 0x21\n",
		"prefix": "VK_PRIOR",
		"scope": "source.lua"
	},
	"VK_NEXT": {
		"body": "0x22",
		"description": "System #VK_Keys\nVK_Keys id 0x22\n",
		"prefix": "VK_NEXT",
		"scope": "source.lua"
	},
	"VK_END": {
		"body": "0x23",
		"description": "System #VK_Keys\nVK_Keys id 0x23\n",
		"prefix": "VK_END",
		"scope": "source.lua"
	},
	"VK_HOME": {
		"body": "0x24",
		"description": "System #VK_Keys\nVK_Keys id 0x24\n",
		"prefix": "VK_HOME",
		"scope": "source.lua"
	},
	"VK_LEFT": {
		"body": "0x25",
		"description": "System #VK_Keys\nVK_Keys id 0x25\n",
		"prefix": "VK_LEFT",
		"scope": "source.lua"
	},
	"VK_UP": {
		"body": "0x26",
		"description": "System #VK_Keys\nVK_Keys id 0x26\n",
		"prefix": "VK_UP",
		"scope": "source.lua"
	},
	"VK_RIGHT": {
		"body": "0x27",
		"description": "System #VK_Keys\nVK_Keys id 0x27\n",
		"prefix": "VK_RIGHT",
		"scope": "source.lua"
	},
	"VK_DOWN": {
		"body": "0x28",
		"description": "System #VK_Keys\nVK_Keys id 0x28\n",
		"prefix": "VK_DOWN",
		"scope": "source.lua"
	},
	"VK_SELECT": {
		"body": "0x29",
		"description": "System #VK_Keys\nVK_Keys id 0x29\n",
		"prefix": "VK_SELECT",
		"scope": "source.lua"
	},
	"VK_PRINT": {
		"body": "0x2A",
		"description": "System #VK_Keys\nVK_Keys id 0x2A\n",
		"prefix": "VK_PRINT",
		"scope": "source.lua"
	},
	"VK_EXECUTE": {
		"body": "0x2B",
		"description": "System #VK_Keys\nVK_Keys id 0x2B\n",
		"prefix": "VK_EXECUTE",
		"scope": "source.lua"
	},
	"VK_SNAPSHOT": {
		"body": "0x2C",
		"description": "System #VK_Keys\nVK_Keys id 0x2C\n",
		"prefix": "VK_SNAPSHOT",
		"scope": "source.lua"
	},
	"VK_INSERT": {
		"body": "0x2D",
		"description": "System #VK_Keys\nVK_Keys id 0x2D\n",
		"prefix": "VK_INSERT",
		"scope": "source.lua"
	},
	"VK_DELETE": {
		"body": "0x2E",
		"description": "System #VK_Keys\nVK_Keys id 0x2E\n",
		"prefix": "VK_DELETE",
		"scope": "source.lua"
	},
	"VK_HELP": {
		"body": "0x2F",
		"description": "System #VK_Keys\nVK_Keys id 0x2F\n",
		"prefix": "VK_HELP",
		"scope": "source.lua"
	},
	"VK_0": {
		"body": "0x30",
		"description": "System #VK_Keys\nVK_Keys id 0x30\n",
		"prefix": "VK_0",
		"scope": "source.lua"
	},
	"VK_1": {
		"body": "0x31",
		"description": "System #VK_Keys\nVK_Keys id 0x31\n",
		"prefix": "VK_1",
		"scope": "source.lua"
	},
	"VK_2": {
		"body": "0x32",
		"description": "System #VK_Keys\nVK_Keys id 0x32\n",
		"prefix": "VK_2",
		"scope": "source.lua"
	},
	"VK_3": {
		"body": "0x33",
		"description": "System #VK_Keys\nVK_Keys id 0x33\n",
		"prefix": "VK_3",
		"scope": "source.lua"
	},
	"VK_4": {
		"body": "0x34",
		"description": "System #VK_Keys\nVK_Keys id 0x34\n",
		"prefix": "VK_4",
		"scope": "source.lua"
	},
	"VK_5": {
		"body": "0x35",
		"description": "System #VK_Keys\nVK_Keys id 0x35\n",
		"prefix": "VK_5",
		"scope": "source.lua"
	},
	"VK_6": {
		"body": "0x36",
		"description": "System #VK_Keys\nVK_Keys id 0x36\n",
		"prefix": "VK_6",
		"scope": "source.lua"
	},
	"VK_7": {
		"body": "0x37",
		"description": "System #VK_Keys\nVK_Keys id 0x37\n",
		"prefix": "VK_7",
		"scope": "source.lua"
	},
	"VK_8": {
		"body": "0x38",
		"description": "System #VK_Keys\nVK_Keys id 0x38\n",
		"prefix": "VK_8",
		"scope": "source.lua"
	},
	"VK_9": {
		"body": "0x39",
		"description": "System #VK_Keys\nVK_Keys id 0x39\n",
		"prefix": "VK_9",
		"scope": "source.lua"
	},
	"VK_A": {
		"body": "0x41",
		"description": "System #VK_Keys\nVK_Keys id 0x41\n",
		"prefix": "VK_A",
		"scope": "source.lua"
	},
	"VK_B": {
		"body": "0x42",
		"description": "System #VK_Keys\nVK_Keys id 0x42\n",
		"prefix": "VK_B",
		"scope": "source.lua"
	},
	"VK_C": {
		"body": "0x43",
		"description": "System #VK_Keys\nVK_Keys id 0x43\n",
		"prefix": "VK_C",
		"scope": "source.lua"
	},
	"VK_D": {
		"body": "0x44",
		"description": "System #VK_Keys\nVK_Keys id 0x44\n",
		"prefix": "VK_D",
		"scope": "source.lua"
	},
	"VK_E": {
		"body": "0x45",
		"description": "System #VK_Keys\nVK_Keys id 0x45\n",
		"prefix": "VK_E",
		"scope": "source.lua"
	},
	"VK_F": {
		"body": "0x46",
		"description": "System #VK_Keys\nVK_Keys id 0x46\n",
		"prefix": "VK_F",
		"scope": "source.lua"
	},
	"VK_G": {
		"body": "0x47",
		"description": "System #VK_Keys\nVK_Keys id 0x47\n",
		"prefix": "VK_G",
		"scope": "source.lua"
	},
	"VK_H": {
		"body": "0x48",
		"description": "System #VK_Keys\nVK_Keys id 0x48\n",
		"prefix": "VK_H",
		"scope": "source.lua"
	},
	"VK_I": {
		"body": "0x49",
		"description": "System #VK_Keys\nVK_Keys id 0x49\n",
		"prefix": "VK_I",
		"scope": "source.lua"
	},
	"VK_J": {
		"body": "0x4A",
		"description": "System #VK_Keys\nVK_Keys id 0x4A\n",
		"prefix": "VK_J",
		"scope": "source.lua"
	},
	"VK_K": {
		"body": "0x4B",
		"description": "System #VK_Keys\nVK_Keys id 0x4B\n",
		"prefix": "VK_K",
		"scope": "source.lua"
	},
	"VK_L": {
		"body": "0x4C",
		"description": "System #VK_Keys\nVK_Keys id 0x4C\n",
		"prefix": "VK_L",
		"scope": "source.lua"
	},
	"VK_M": {
		"body": "0x4D",
		"description": "System #VK_Keys\nVK_Keys id 0x4D\n",
		"prefix": "VK_M",
		"scope": "source.lua"
	},
	"VK_N": {
		"body": "0x4E",
		"description": "System #VK_Keys\nVK_Keys id 0x4E\n",
		"prefix": "VK_N",
		"scope": "source.lua"
	},
	"VK_O": {
		"body": "0x4F",
		"description": "System #VK_Keys\nVK_Keys id 0x4F\n",
		"prefix": "VK_O",
		"scope": "source.lua"
	},
	"VK_P": {
		"body": "0x50",
		"description": "System #VK_Keys\nVK_Keys id 0x50\n",
		"prefix": "VK_P",
		"scope": "source.lua"
	},
	"VK_Q": {
		"body": "0x51",
		"description": "System #VK_Keys\nVK_Keys id 0x51\n",
		"prefix": "VK_Q",
		"scope": "source.lua"
	},
	"VK_R": {
		"body": "0x52",
		"description": "System #VK_Keys\nVK_Keys id 0x52\n",
		"prefix": "VK_R",
		"scope": "source.lua"
	},
	"VK_S": {
		"body": "0x53",
		"description": "System #VK_Keys\nVK_Keys id 0x53\n",
		"prefix": "VK_S",
		"scope": "source.lua"
	},
	"VK_T": {
		"body": "0x54",
		"description": "System #VK_Keys\nVK_Keys id 0x54\n",
		"prefix": "VK_T",
		"scope": "source.lua"
	},
	"VK_U": {
		"body": "0x55",
		"description": "System #VK_Keys\nVK_Keys id 0x55\n",
		"prefix": "VK_U",
		"scope": "source.lua"
	},
	"VK_V": {
		"body": "0x56",
		"description": "System #VK_Keys\nVK_Keys id 0x56\n",
		"prefix": "VK_V",
		"scope": "source.lua"
	},
	"VK_W": {
		"body": "0x57",
		"description": "System #VK_Keys\nVK_Keys id 0x57\n",
		"prefix": "VK_W",
		"scope": "source.lua"
	},
	"VK_X": {
		"body": "0x58",
		"description": "System #VK_Keys\nVK_Keys id 0x58\n",
		"prefix": "VK_X",
		"scope": "source.lua"
	},
	"VK_Y": {
		"body": "0x59",
		"description": "System #VK_Keys\nVK_Keys id 0x59\n",
		"prefix": "VK_Y",
		"scope": "source.lua"
	},
	"VK_Z": {
		"body": "0x5A",
		"description": "System #VK_Keys\nVK_Keys id 0x5A\n",
		"prefix": "VK_Z",
		"scope": "source.lua"
	},
	"VK_LWIN": {
		"body": "0x5B",
		"description": "System #VK_Keys\nVK_Keys id 0x5B\n",
		"prefix": "VK_LWIN",
		"scope": "source.lua"
	},
	"VK_RWIN": {
		"body": "0x5C",
		"description": "System #VK_Keys\nVK_Keys id 0x5C\n",
		"prefix": "VK_RWIN",
		"scope": "source.lua"
	},
	"VK_APPS": {
		"body": "0x5D",
		"description": "System #VK_Keys\nVK_Keys id 0x5D\n",
		"prefix": "VK_APPS",
		"scope": "source.lua"
	},
	"VK_SLEEP": {
		"body": "0x5F",
		"description": "System #VK_Keys\nVK_Keys id 0x5F\n",
		"prefix": "VK_SLEEP",
		"scope": "source.lua"
	},
	"VK_NUMPAD0": {
		"body": "0x60",
		"description": "System #VK_Keys\nVK_Keys id 0x60\n",
		"prefix": "VK_NUMPAD0",
		"scope": "source.lua"
	},
	"VK_NUMPAD1": {
		"body": "0x61",
		"description": "System #VK_Keys\nVK_Keys id 0x61\n",
		"prefix": "VK_NUMPAD1",
		"scope": "source.lua"
	},
	"VK_NUMPAD2": {
		"body": "0x62",
		"description": "System #VK_Keys\nVK_Keys id 0x62\n",
		"prefix": "VK_NUMPAD2",
		"scope": "source.lua"
	},
	"VK_NUMPAD3": {
		"body": "0x63",
		"description": "System #VK_Keys\nVK_Keys id 0x63\n",
		"prefix": "VK_NUMPAD3",
		"scope": "source.lua"
	},
	"VK_NUMPAD4": {
		"body": "0x64",
		"description": "System #VK_Keys\nVK_Keys id 0x64\n",
		"prefix": "VK_NUMPAD4",
		"scope": "source.lua"
	},
	"VK_NUMPAD5": {
		"body": "0x65",
		"description": "System #VK_Keys\nVK_Keys id 0x65\n",
		"prefix": "VK_NUMPAD5",
		"scope": "source.lua"
	},
	"VK_NUMPAD6": {
		"body": "0x66",
		"description": "System #VK_Keys\nVK_Keys id 0x66\n",
		"prefix": "VK_NUMPAD6",
		"scope": "source.lua"
	},
	"VK_NUMPAD7": {
		"body": "0x67",
		"description": "System #VK_Keys\nVK_Keys id 0x67\n",
		"prefix": "VK_NUMPAD7",
		"scope": "source.lua"
	},
	"VK_NUMPAD8": {
		"body": "0x68",
		"description": "System #VK_Keys\nVK_Keys id 0x68\n",
		"prefix": "VK_NUMPAD8",
		"scope": "source.lua"
	},
	"VK_NUMPAD9": {
		"body": "0x69",
		"description": "System #VK_Keys\nVK_Keys id 0x69\n",
		"prefix": "VK_NUMPAD9",
		"scope": "source.lua"
	},
	"VK_MULTIPLY": {
		"body": "0x6A",
		"description": "System #VK_Keys\nVK_Keys id 0x6A\n",
		"prefix": "VK_MULTIPLY",
		"scope": "source.lua"
	},
	"VK_ADD": {
		"body": "0x6B",
		"description": "System #VK_Keys\nVK_Keys id 0x6B\n",
		"prefix": "VK_ADD",
		"scope": "source.lua"
	},
	"VK_SEPARATOR": {
		"body": "0x6C",
		"description": "System #VK_Keys\nVK_Keys id 0x6C\n",
		"prefix": "VK_SEPARATOR",
		"scope": "source.lua"
	},
	"VK_SUBTRACT": {
		"body": "0x6D",
		"description": "System #VK_Keys\nVK_Keys id 0x6D\n",
		"prefix": "VK_SUBTRACT",
		"scope": "source.lua"
	},
	"VK_DECIMAL": {
		"body": "0x6E",
		"description": "System #VK_Keys\nVK_Keys id 0x6E\n",
		"prefix": "VK_DECIMAL",
		"scope": "source.lua"
	},
	"VK_DIVIDE": {
		"body": "0x6F",
		"description": "System #VK_Keys\nVK_Keys id 0x6F\n",
		"prefix": "VK_DIVIDE",
		"scope": "source.lua"
	},
	"VK_F1": {
		"body": "0x70",
		"description": "System #VK_Keys\nVK_Keys id 0x70\n",
		"prefix": "VK_F1",
		"scope": "source.lua"
	},
	"VK_F2": {
		"body": "0x71",
		"description": "System #VK_Keys\nVK_Keys id 0x71\n",
		"prefix": "VK_F2",
		"scope": "source.lua"
	},
	"VK_F3": {
		"body": "0x72",
		"description": "System #VK_Keys\nVK_Keys id 0x72\n",
		"prefix": "VK_F3",
		"scope": "source.lua"
	},
	"VK_F4": {
		"body": "0x73",
		"description": "System #VK_Keys\nVK_Keys id 0x73\n",
		"prefix": "VK_F4",
		"scope": "source.lua"
	},
	"VK_F5": {
		"body": "0x74",
		"description": "System #VK_Keys\nVK_Keys id 0x74\n",
		"prefix": "VK_F5",
		"scope": "source.lua"
	},
	"VK_F6": {
		"body": "0x75",
		"description": "System #VK_Keys\nVK_Keys id 0x75\n",
		"prefix": "VK_F6",
		"scope": "source.lua"
	},
	"VK_F7": {
		"body": "0x76",
		"description": "System #VK_Keys\nVK_Keys id 0x76\n",
		"prefix": "VK_F7",
		"scope": "source.lua"
	},
	"VK_F8": {
		"body": "0x77",
		"description": "System #VK_Keys\nVK_Keys id 0x77\n",
		"prefix": "VK_F8",
		"scope": "source.lua"
	},
	"VK_F9": {
		"body": "0x78",
		"description": "System #VK_Keys\nVK_Keys id 0x78\n",
		"prefix": "VK_F9",
		"scope": "source.lua"
	},
	"VK_F10": {
		"body": "0x79",
		"description": "System #VK_Keys\nVK_Keys id 0x79\n",
		"prefix": "VK_F10",
		"scope": "source.lua"
	},
	"VK_F11": {
		"body": "0x7A",
		"description": "System #VK_Keys\nVK_Keys id 0x7A\n",
		"prefix": "VK_F11",
		"scope": "source.lua"
	},
	"VK_F12": {
		"body": "0x7B",
		"description": "System #VK_Keys\nVK_Keys id 0x7B\n",
		"prefix": "VK_F12",
		"scope": "source.lua"
	},
	"VK_F13": {
		"body": "0x7C",
		"description": "System #VK_Keys\nVK_Keys id 0x7C\n",
		"prefix": "VK_F13",
		"scope": "source.lua"
	},
	"VK_F14": {
		"body": "0x7D",
		"description": "System #VK_Keys\nVK_Keys id 0x7D\n",
		"prefix": "VK_F14",
		"scope": "source.lua"
	},
	"VK_F15": {
		"body": "0x7E",
		"description": "System #VK_Keys\nVK_Keys id 0x7E\n",
		"prefix": "VK_F15",
		"scope": "source.lua"
	},
	"VK_F16": {
		"body": "0x7F",
		"description": "System #VK_Keys\nVK_Keys id 0x7F\n",
		"prefix": "VK_F16",
		"scope": "source.lua"
	},
	"VK_F17": {
		"body": "0x80",
		"description": "System #VK_Keys\nVK_Keys id 0x80\n",
		"prefix": "VK_F17",
		"scope": "source.lua"
	},
	"VK_F18": {
		"body": "0x81",
		"description": "System #VK_Keys\nVK_Keys id 0x81\n",
		"prefix": "VK_F18",
		"scope": "source.lua"
	},
	"VK_F19": {
		"body": "0x82",
		"description": "System #VK_Keys\nVK_Keys id 0x82\n",
		"prefix": "VK_F19",
		"scope": "source.lua"
	},
	"VK_F20": {
		"body": "0x83",
		"description": "System #VK_Keys\nVK_Keys id 0x83\n",
		"prefix": "VK_F20",
		"scope": "source.lua"
	},
	"VK_F21": {
		"body": "0x84",
		"description": "System #VK_Keys\nVK_Keys id 0x84\n",
		"prefix": "VK_F21",
		"scope": "source.lua"
	},
	"VK_F22": {
		"body": "0x85",
		"description": "System #VK_Keys\nVK_Keys id 0x85\n",
		"prefix": "VK_F22",
		"scope": "source.lua"
	},
	"VK_F23": {
		"body": "0x86",
		"description": "System #VK_Keys\nVK_Keys id 0x86\n",
		"prefix": "VK_F23",
		"scope": "source.lua"
	},
	"VK_F24": {
		"body": "0x87",
		"description": "System #VK_Keys\nVK_Keys id 0x87\n",
		"prefix": "VK_F24",
		"scope": "source.lua"
	},
	"VK_NUMLOCK": {
		"body": "0x90",
		"description": "System #VK_Keys\nVK_Keys id 0x90\n",
		"prefix": "VK_NUMLOCK",
		"scope": "source.lua"
	},
	"VK_SCROLL": {
		"body": "0x91",
		"description": "System #VK_Keys\nVK_Keys id 0x91\n",
		"prefix": "VK_SCROLL",
		"scope": "source.lua"
	},
	"VK_OEM_FJ_JISHO": {
		"body": "0x92",
		"description": "System #VK_Keys\nVK_Keys id 0x92\n",
		"prefix": "VK_OEM_FJ_JISHO",
		"scope": "source.lua"
	},
	"VK_OEM_FJ_MASSHOU": {
		"body": "0x93",
		"description": "System #VK_Keys\nVK_Keys id 0x93\n",
		"prefix": "VK_OEM_FJ_MASSHOU",
		"scope": "source.lua"
	},
	"VK_OEM_FJ_TOUROKU": {
		"body": "0x94",
		"description": "System #VK_Keys\nVK_Keys id 0x94\n",
		"prefix": "VK_OEM_FJ_TOUROKU",
		"scope": "source.lua"
	},
	"VK_OEM_FJ_LOYA": {
		"body": "0x95",
		"description": "System #VK_Keys\nVK_Keys id 0x95\n",
		"prefix": "VK_OEM_FJ_LOYA",
		"scope": "source.lua"
	},
	"VK_OEM_FJ_ROYA": {
		"body": "0x96",
		"description": "System #VK_Keys\nVK_Keys id 0x96\n",
		"prefix": "VK_OEM_FJ_ROYA",
		"scope": "source.lua"
	},
	"VK_LSHIFT": {
		"body": "0xA0",
		"description": "System #VK_Keys\nVK_Keys id 0xA0\n",
		"prefix": "VK_LSHIFT",
		"scope": "source.lua"
	},
	"VK_RSHIFT": {
		"body": "0xA1",
		"description": "System #VK_Keys\nVK_Keys id 0xA1\n",
		"prefix": "VK_RSHIFT",
		"scope": "source.lua"
	},
	"VK_LCONTROL": {
		"body": "0xA2",
		"description": "System #VK_Keys\nVK_Keys id 0xA2\n",
		"prefix": "VK_LCONTROL",
		"scope": "source.lua"
	},
	"VK_RCONTROL": {
		"body": "0xA3",
		"description": "System #VK_Keys\nVK_Keys id 0xA3\n",
		"prefix": "VK_RCONTROL",
		"scope": "source.lua"
	},
	"VK_LMENU": {
		"body": "0xA4",
		"description": "System #VK_Keys\nVK_Keys id 0xA4\n",
		"prefix": "VK_LMENU",
		"scope": "source.lua"
	},
	"VK_RMENU": {
		"body": "0xA5",
		"description": "System #VK_Keys\nVK_Keys id 0xA5\n",
		"prefix": "VK_RMENU",
		"scope": "source.lua"
	},
	"VK_BROWSER_BACK": {
		"body": "0xA6",
		"description": "System #VK_Keys\nVK_Keys id 0xA6\n",
		"prefix": "VK_BROWSER_BACK",
		"scope": "source.lua"
	},
	"VK_BROWSER_FORWARD": {
		"body": "0xA7",
		"description": "System #VK_Keys\nVK_Keys id 0xA7\n",
		"prefix": "VK_BROWSER_FORWARD",
		"scope": "source.lua"
	},
	"VK_BROWSER_REFRESH": {
		"body": "0xA8",
		"description": "System #VK_Keys\nVK_Keys id 0xA8\n",
		"prefix": "VK_BROWSER_REFRESH",
		"scope": "source.lua"
	},
	"VK_BROWSER_STOP": {
		"body": "0xA9",
		"description": "System #VK_Keys\nVK_Keys id 0xA9\n",
		"prefix": "VK_BROWSER_STOP",
		"scope": "source.lua"
	},
	"VK_BROWSER_SEARCH": {
		"body": "0xAA",
		"description": "System #VK_Keys\nVK_Keys id 0xAA\n",
		"prefix": "VK_BROWSER_SEARCH",
		"scope": "source.lua"
	},
	"VK_BROWSER_FAVORITES": {
		"body": "0xAB",
		"description": "System #VK_Keys\nVK_Keys id 0xAB\n",
		"prefix": "VK_BROWSER_FAVORITES",
		"scope": "source.lua"
	},
	"VK_BROWSER_HOME": {
		"body": "0xAC",
		"description": "System #VK_Keys\nVK_Keys id 0xAC\n",
		"prefix": "VK_BROWSER_HOME",
		"scope": "source.lua"
	},
	"VK_VOLUME_MUTE": {
		"body": "0xAD",
		"description": "System #VK_Keys\nVK_Keys id 0xAD\n",
		"prefix": "VK_VOLUME_MUTE",
		"scope": "source.lua"
	},
	"VK_VOLUME_DOWN": {
		"body": "0xAE",
		"description": "System #VK_Keys\nVK_Keys id 0xAE\n",
		"prefix": "VK_VOLUME_DOWN",
		"scope": "source.lua"
	},
	"VK_VOLUME_UP": {
		"body": "0xAF",
		"description": "System #VK_Keys\nVK_Keys id 0xAF\n",
		"prefix": "VK_VOLUME_UP",
		"scope": "source.lua"
	},
	"VK_MEDIA_NEXT_TRACK": {
		"body": "0xB0",
		"description": "System #VK_Keys\nVK_Keys id 0xB0\n",
		"prefix": "VK_MEDIA_NEXT_TRACK",
		"scope": "source.lua"
	},
	"VK_MEDIA_PREV_TRACK": {
		"body": "0xB1",
		"description": "System #VK_Keys\nVK_Keys id 0xB1\n",
		"prefix": "VK_MEDIA_PREV_TRACK",
		"scope": "source.lua"
	},
	"VK_MEDIA_STOP": {
		"body": "0xB2",
		"description": "System #VK_Keys\nVK_Keys id 0xB2\n",
		"prefix": "VK_MEDIA_STOP",
		"scope": "source.lua"
	},
	"VK_MEDIA_PLAY_PAUSE": {
		"body": "0xB3",
		"description": "System #VK_Keys\nVK_Keys id 0xB3\n",
		"prefix": "VK_MEDIA_PLAY_PAUSE",
		"scope": "source.lua"
	},
	"VK_LAUNCH_MAIL": {
		"body": "0xB4",
		"description": "System #VK_Keys\nVK_Keys id 0xB4\n",
		"prefix": "VK_LAUNCH_MAIL",
		"scope": "source.lua"
	},
	"VK_LAUNCH_MEDIA_SELECT": {
		"body": "0xB5",
		"description": "System #VK_Keys\nVK_Keys id 0xB5\n",
		"prefix": "VK_LAUNCH_MEDIA_SELECT",
		"scope": "source.lua"
	},
	"VK_LAUNCH_APP1": {
		"body": "0xB6",
		"description": "System #VK_Keys\nVK_Keys id 0xB6\n",
		"prefix": "VK_LAUNCH_APP1",
		"scope": "source.lua"
	},
	"VK_LAUNCH_APP2": {
		"body": "0xB7",
		"description": "System #VK_Keys\nVK_Keys id 0xB7\n",
		"prefix": "VK_LAUNCH_APP2",
		"scope": "source.lua"
	},
	"VK_OEM_1": {
		"body": "0xBA",
		"description": "System #VK_Keys\nVK_Keys id 0xBA\n",
		"prefix": "VK_OEM_1",
		"scope": "source.lua"
	},
	"VK_OEM_PLUS": {
		"body": "0xBB",
		"description": "System #VK_Keys\nVK_Keys id 0xBB\n",
		"prefix": "VK_OEM_PLUS",
		"scope": "source.lua"
	},
	"VK_OEM_COMMA": {
		"body": "0xBC",
		"description": "System #VK_Keys\nVK_Keys id 0xBC\n",
		"prefix": "VK_OEM_COMMA",
		"scope": "source.lua"
	},
	"VK_OEM_MINUS": {
		"body": "0xBD",
		"description": "System #VK_Keys\nVK_Keys id 0xBD\n",
		"prefix": "VK_OEM_MINUS",
		"scope": "source.lua"
	},
	"VK_OEM_PERIOD": {
		"body": "0xBE",
		"description": "System #VK_Keys\nVK_Keys id 0xBE\n",
		"prefix": "VK_OEM_PERIOD",
		"scope": "source.lua"
	},
	"VK_OEM_2": {
		"body": "0xBF",
		"description": "System #VK_Keys\nVK_Keys id 0xBF\n",
		"prefix": "VK_OEM_2",
		"scope": "source.lua"
	},
	"VK_OEM_3": {
		"body": "0xC0",
		"description": "System #VK_Keys\nVK_Keys id 0xC0\n",
		"prefix": "VK_OEM_3",
		"scope": "source.lua"
	},
	"VK_ABNT_C1": {
		"body": "0xC1",
		"description": "System #VK_Keys\nVK_Keys id 0xC1\n",
		"prefix": "VK_ABNT_C1",
		"scope": "source.lua"
	},
	"VK_ABNT_C2": {
		"body": "0xC2",
		"description": "System #VK_Keys\nVK_Keys id 0xC2\n",
		"prefix": "VK_ABNT_C2",
		"scope": "source.lua"
	},
	"VK_OEM_4": {
		"body": "0xDB",
		"description": "System #VK_Keys\nVK_Keys id 0xDB\n",
		"prefix": "VK_OEM_4",
		"scope": "source.lua"
	},
	"VK_OEM_5": {
		"body": "0xDC",
		"description": "System #VK_Keys\nVK_Keys id 0xDC\n",
		"prefix": "VK_OEM_5",
		"scope": "source.lua"
	},
	"VK_OEM_6": {
		"body": "0xDD",
		"description": "System #VK_Keys\nVK_Keys id 0xDD\n",
		"prefix": "VK_OEM_6",
		"scope": "source.lua"
	},
	"VK_OEM_7": {
		"body": "0xDE",
		"description": "System #VK_Keys\nVK_Keys id 0xDE\n",
		"prefix": "VK_OEM_7",
		"scope": "source.lua"
	},
	"VK_OEM_8": {
		"body": "0xDF",
		"description": "System #VK_Keys\nVK_Keys id 0xDF\n",
		"prefix": "VK_OEM_8",
		"scope": "source.lua"
	},
	"VK_OEM_AX": {
		"body": "0xE1",
		"description": "System #VK_Keys\nVK_Keys id 0xE1\n",
		"prefix": "VK_OEM_AX",
		"scope": "source.lua"
	},
	"VK_OEM_102": {
		"body": "0xE2",
		"description": "System #VK_Keys\nVK_Keys id 0xE2\n",
		"prefix": "VK_OEM_102",
		"scope": "source.lua"
	},
	"VK_ICO_HELP": {
		"body": "0xE3",
		"description": "System #VK_Keys\nVK_Keys id 0xE3\n",
		"prefix": "VK_ICO_HELP",
		"scope": "source.lua"
	},
	"VK_PROCESSKEY": {
		"body": "0xE5",
		"description": "System #VK_Keys\nVK_Keys id 0xE5\n",
		"prefix": "VK_PROCESSKEY",
		"scope": "source.lua"
	},
	"VK_ICO_CLEAR": {
		"body": "0xE6",
		"description": "System #VK_Keys\nVK_Keys id 0xE6\n",
		"prefix": "VK_ICO_CLEAR",
		"scope": "source.lua"
	},
	"VK_PACKET": {
		"body": "0xE7",
		"description": "System #VK_Keys\nVK_Keys id 0xE7\n",
		"prefix": "VK_PACKET",
		"scope": "source.lua"
	},
	"VK_OEM_RESET": {
		"body": "0xE9",
		"description": "System #VK_Keys\nVK_Keys id 0xE9\n",
		"prefix": "VK_OEM_RESET",
		"scope": "source.lua"
	},
	"VK_OEM_JUMP": {
		"body": "0xEA",
		"description": "System #VK_Keys\nVK_Keys id 0xEA\n",
		"prefix": "VK_OEM_JUMP",
		"scope": "source.lua"
	},
	"VK_OEM_PA1": {
		"body": "0xEB",
		"description": "System #VK_Keys\nVK_Keys id 0xEB\n",
		"prefix": "VK_OEM_PA1",
		"scope": "source.lua"
	},
	"VK_OEM_PA2": {
		"body": "0xEC",
		"description": "System #VK_Keys\nVK_Keys id 0xEC\n",
		"prefix": "VK_OEM_PA2",
		"scope": "source.lua"
	},
	"VK_OEM_PA3": {
		"body": "0xED",
		"description": "System #VK_Keys\nVK_Keys id 0xED\n",
		"prefix": "VK_OEM_PA3",
		"scope": "source.lua"
	},
	"VK_OEM_WSCTRL": {
		"body": "0xEE",
		"description": "System #VK_Keys\nVK_Keys id 0xEE\n",
		"prefix": "VK_OEM_WSCTRL",
		"scope": "source.lua"
	},
	"VK_OEM_CUSEL": {
		"body": "0xEF",
		"description": "System #VK_Keys\nVK_Keys id 0xEF\n",
		"prefix": "VK_OEM_CUSEL",
		"scope": "source.lua"
	},
	"VK_OEM_ATTN": {
		"body": "0xF0",
		"description": "System #VK_Keys\nVK_Keys id 0xF0\n",
		"prefix": "VK_OEM_ATTN",
		"scope": "source.lua"
	},
	"VK_OEM_FINISH": {
		"body": "0xF1",
		"description": "System #VK_Keys\nVK_Keys id 0xF1\n",
		"prefix": "VK_OEM_FINISH",
		"scope": "source.lua"
	},
	"VK_OEM_COPY": {
		"body": "0xF2",
		"description": "System #VK_Keys\nVK_Keys id 0xF2\n",
		"prefix": "VK_OEM_COPY",
		"scope": "source.lua"
	},
	"VK_OEM_AUTO": {
		"body": "0xF3",
		"description": "System #VK_Keys\nVK_Keys id 0xF3\n",
		"prefix": "VK_OEM_AUTO",
		"scope": "source.lua"
	},
	"VK_OEM_ENLW": {
		"body": "0xF4",
		"description": "System #VK_Keys\nVK_Keys id 0xF4\n",
		"prefix": "VK_OEM_ENLW",
		"scope": "source.lua"
	},
	"VK_OEM_BACKTAB": {
		"body": "0xF5",
		"description": "System #VK_Keys\nVK_Keys id 0xF5\n",
		"prefix": "VK_OEM_BACKTAB",
		"scope": "source.lua"
	},
	"VK_ATTN": {
		"body": "0xF6",
		"description": "System #VK_Keys\nVK_Keys id 0xF6\n",
		"prefix": "VK_ATTN",
		"scope": "source.lua"
	},
	"VK_CRSEL": {
		"body": "0xF7",
		"description": "System #VK_Keys\nVK_Keys id 0xF7\n",
		"prefix": "VK_CRSEL",
		"scope": "source.lua"
	},
	"VK_EXSEL": {
		"body": "0xF8",
		"description": "System #VK_Keys\nVK_Keys id 0xF8\n",
		"prefix": "VK_EXSEL",
		"scope": "source.lua"
	},
	"VK_EREOF": {
		"body": "0xF9",
		"description": "System #VK_Keys\nVK_Keys id 0xF9\n",
		"prefix": "VK_EREOF",
		"scope": "source.lua"
	},
	"VK_PLAY": {
		"body": "0xFA",
		"description": "System #VK_Keys\nVK_Keys id 0xFA\n",
		"prefix": "VK_PLAY",
		"scope": "source.lua"
	},
	"VK_ZOOM": {
		"body": "0xFB",
		"description": "System #VK_Keys\nVK_Keys id 0xFB\n",
		"prefix": "VK_ZOOM",
		"scope": "source.lua"
	},
	"VK_PA1": {
		"body": "0xFD",
		"description": "System #VK_Keys\nVK_Keys id 0xFD\n",
		"prefix": "VK_PA1",
		"scope": "source.lua"
	},
	"VK_OEM_CLEAR": {
		"body": "0xFE",
		"description": "System #VK_Keys\nVK_Keys id 0xFE\n",
		"prefix": "VK_OEM_CLEAR",
		"scope": "source.lua"
	},

	"PEDTYPE_PLAYER1": {
		"body": "0",
		"description": "GTA SA #pedtype\npedtype id 0\n",
		"prefix": "PEDTYPE_PLAYER1",
		"scope": "source.lua"
	},
	"PEDTYPE_PLAYER2": {
		"body": "1",
		"description": "GTA SA #pedtype\npedtype id 1\n",
		"prefix": "PEDTYPE_PLAYER2",
		"scope": "source.lua"
	},
	"PEDTYPE_PLAYER_NETWORK": {
		"body": "2",
		"description": "GTA SA #pedtype\npedtype id 2\n",
		"prefix": "PEDTYPE_PLAYER_NETWORK",
		"scope": "source.lua"
	},
	"PEDTYPE_PLAYER_UNUSED": {
		"body": "3",
		"description": "GTA SA #pedtype\npedtype id 3\n",
		"prefix": "PEDTYPE_PLAYER_UNUSED",
		"scope": "source.lua"
	},
	"PEDTYPE_CIVMALE": {
		"body": "4",
		"description": "GTA SA #pedtype\npedtype id 4\n",
		"prefix": "PEDTYPE_CIVMALE",
		"scope": "source.lua"
	},
	"PEDTYPE_CIVFEMALE": {
		"body": "5",
		"description": "GTA SA #pedtype\npedtype id 5\n",
		"prefix": "PEDTYPE_CIVFEMALE",
		"scope": "source.lua"
	},
	"PEDTYPE_COP": {
		"body": "6",
		"description": "GTA SA #pedtype\npedtype id 6\n",
		"prefix": "PEDTYPE_COP",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG1": {
		"body": "7",
		"description": "GTA SA #pedtype\npedtype id 7\n",
		"prefix": "PEDTYPE_GANG1",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG2": {
		"body": "8",
		"description": "GTA SA #pedtype\npedtype id 8\n",
		"prefix": "PEDTYPE_GANG2",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG3": {
		"body": "9",
		"description": "GTA SA #pedtype\npedtype id 9\n",
		"prefix": "PEDTYPE_GANG3",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG4": {
		"body": "10",
		"description": "GTA SA #pedtype\npedtype id 10\n",
		"prefix": "PEDTYPE_GANG4",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG5": {
		"body": "11",
		"description": "GTA SA #pedtype\npedtype id 11\n",
		"prefix": "PEDTYPE_GANG5",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG6": {
		"body": "12",
		"description": "GTA SA #pedtype\npedtype id 12\n",
		"prefix": "PEDTYPE_GANG6",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG7": {
		"body": "13",
		"description": "GTA SA #pedtype\npedtype id 13\n",
		"prefix": "PEDTYPE_GANG7",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG8": {
		"body": "14",
		"description": "GTA SA #pedtype\npedtype id 14\n",
		"prefix": "PEDTYPE_GANG8",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG9": {
		"body": "15",
		"description": "GTA SA #pedtype\npedtype id 15\n",
		"prefix": "PEDTYPE_GANG9",
		"scope": "source.lua"
	},
	"PEDTYPE_GANG10": {
		"body": "16",
		"description": "GTA SA #pedtype\npedtype id 16\n",
		"prefix": "PEDTYPE_GANG10",
		"scope": "source.lua"
	},
	"PEDTYPE_DEALER": {
		"body": "17",
		"description": "GTA SA #pedtype\npedtype id 17\n",
		"prefix": "PEDTYPE_DEALER",
		"scope": "source.lua"
	},
	"PEDTYPE_MEDIC": {
		"body": "18",
		"description": "GTA SA #pedtype\npedtype id 18\n",
		"prefix": "PEDTYPE_MEDIC",
		"scope": "source.lua"
	},
	"PEDTYPE_FIRE": {
		"body": "19",
		"description": "GTA SA #pedtype\npedtype id 19\n",
		"prefix": "PEDTYPE_FIRE",
		"scope": "source.lua"
	},
	"PEDTYPE_CRIMINAL": {
		"body": "20",
		"description": "GTA SA #pedtype\npedtype id 20\n",
		"prefix": "PEDTYPE_CRIMINAL",
		"scope": "source.lua"
	},
	"PEDTYPE_BUM": {
		"body": "21",
		"description": "GTA SA #pedtype\npedtype id 21\n",
		"prefix": "PEDTYPE_BUM",
		"scope": "source.lua"
	},
	"PEDTYPE_PROSTITUTE": {
		"body": "22",
		"description": "GTA SA #pedtype\npedtype id 22\n",
		"prefix": "PEDTYPE_PROSTITUTE",
		"scope": "source.lua"
	},
	"PEDTYPE_SPECIAL": {
		"body": "23",
		"description": "GTA SA #pedtype\npedtype id 23\n",
		"prefix": "PEDTYPE_SPECIAL",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION1": {
		"body": "24",
		"description": "GTA SA #pedtype\npedtype id 24\n",
		"prefix": "PEDTYPE_MISSION1",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION2": {
		"body": "25",
		"description": "GTA SA #pedtype\npedtype id 25\n",
		"prefix": "PEDTYPE_MISSION2",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION3": {
		"body": "26",
		"description": "GTA SA #pedtype\npedtype id 26\n",
		"prefix": "PEDTYPE_MISSION3",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION4": {
		"body": "27",
		"description": "GTA SA #pedtype\npedtype id 27\n",
		"prefix": "PEDTYPE_MISSION4",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION5": {
		"body": "28",
		"description": "GTA SA #pedtype\npedtype id 28\n",
		"prefix": "PEDTYPE_MISSION5",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION6": {
		"body": "29",
		"description": "GTA SA #pedtype\npedtype id 29\n",
		"prefix": "PEDTYPE_MISSION6",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION7": {
		"body": "30",
		"description": "GTA SA #pedtype\npedtype id 30\n",
		"prefix": "PEDTYPE_MISSION7",
		"scope": "source.lua"
	},
	"PEDTYPE_MISSION8": {
		"body": "31",
		"description": "GTA SA #pedtype\npedtype id 31\n",
		"prefix": "PEDTYPE_MISSION8",
		"scope": "source.lua"
	},
	"PEDTYPE_LAST_PEDTYPE": {
		"body": "32",
		"description": "GTA SA #pedtype\npedtype id 32\n",
		"prefix": "PEDTYPE_LAST_PEDTYPE",
		"scope": "source.lua"
	},

	"CORONATYPE_SHINYSTAR": {
		"body": "0",
		"description": "GTA SA #coronatype\ncoronatype id 0\n",
		"prefix": "CORONATYPE_SHINYSTAR",
		"scope": "source.lua"
	},
	"CORONATYPE_HEADLIGHT": {
		"body": "1",
		"description": "GTA SA #coronatype\ncoronatype id 1\n",
		"prefix": "CORONATYPE_HEADLIGHT",
		"scope": "source.lua"
	},
	"CORONATYPE_MOON": {
		"body": "2",
		"description": "GTA SA #coronatype\ncoronatype id 2\n",
		"prefix": "CORONATYPE_MOON",
		"scope": "source.lua"
	},
	"CORONATYPE_REFLECTION": {
		"body": "3",
		"description": "GTA SA #coronatype\ncoronatype id 3\n",
		"prefix": "CORONATYPE_REFLECTION",
		"scope": "source.lua"
	},
	"CORONATYPE_HEADLIGHTLINE": {
		"body": "4",
		"description": "GTA SA #coronatype\ncoronatype id 4\n",
		"prefix": "CORONATYPE_HEADLIGHTLINE",
		"scope": "source.lua"
	},
	"CORONATYPE_HEX": {
		"body": "5",
		"description": "GTA SA #coronatype\ncoronatype id 5\n",
		"prefix": "CORONATYPE_HEX",
		"scope": "source.lua"
	},
	"CORONATYPE_CIRCLE": {
		"body": "6",
		"description": "GTA SA #coronatype\ncoronatype id 6\n",
		"prefix": "CORONATYPE_CIRCLE",
		"scope": "source.lua"
	},
	"CORONATYPE_RING": {
		"body": "7",
		"description": "GTA SA #coronatype\ncoronatype id 7\n",
		"prefix": "CORONATYPE_RING",
		"scope": "source.lua"
	},
	"CORONATYPE_STREAK": {
		"body": "8",
		"description": "GTA SA #coronatype\ncoronatype id 8\n",
		"prefix": "CORONATYPE_STREAK",
		"scope": "source.lua"
	},
	"CORONATYPE_TORUS": {
		"body": "9",
		"description": "GTA SA #coronatype\ncoronatype id 9\n",
		"prefix": "CORONATYPE_TORUS",
		"scope": "source.lua"
	},
	"CORONATYPE_NONE": {
		"body": "10",
		"description": "GTA SA #coronatype\ncoronatype id 10\n",
		"prefix": "CORONATYPE_NONE",
		"scope": "source.lua"
	},
		
	"RADAR_SPRITE_NONE": {
		"body": "0",
		"description": "GTA SA #radarsprite\nradarsprite id 0\n",
		"prefix": "RADAR_SPRITE_NONE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BORDER": {
		"body": "1",
		"description": "GTA SA #radarsprite\nradarsprite id 1\n",
		"prefix": "RADAR_SPRITE_BORDER",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CENTRE": {
		"body": "2",
		"description": "GTA SA #radarsprite\nradarsprite id 2\n",
		"prefix": "RADAR_SPRITE_CENTRE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MAP_HERE": {
		"body": "3",
		"description": "GTA SA #radarsprite\nradarsprite id 3\n",
		"prefix": "RADAR_SPRITE_MAP_HERE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_NORTH": {
		"body": "4",
		"description": "GTA SA #radarsprite\nradarsprite id 4\n",
		"prefix": "RADAR_SPRITE_NORTH",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_AIRYARD": {
		"body": "5",
		"description": "GTA SA #radarsprite\nradarsprite id 5\n",
		"prefix": "RADAR_SPRITE_AIRYARD",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GUN": {
		"body": "6",
		"description": "GTA SA #radarsprite\nradarsprite id 6\n",
		"prefix": "RADAR_SPRITE_GUN",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BARBERS": {
		"body": "7",
		"description": "GTA SA #radarsprite\nradarsprite id 7\n",
		"prefix": "RADAR_SPRITE_BARBERS",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BIG_SMOKE": {
		"body": "8",
		"description": "GTA SA #radarsprite\nradarsprite id 8\n",
		"prefix": "RADAR_SPRITE_BIG_SMOKE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BOATYARD": {
		"body": "9",
		"description": "GTA SA #radarsprite\nradarsprite id 9\n",
		"prefix": "RADAR_SPRITE_BOATYARD",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BURGERSHOT": {
		"body": "10",
		"description": "GTA SA #radarsprite\nradarsprite id 10\n",
		"prefix": "RADAR_SPRITE_BURGERSHOT",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_BULLDOZER": {
		"body": "11",
		"description": "GTA SA #radarsprite\nradarsprite id 11\n",
		"prefix": "RADAR_SPRITE_BULLDOZER",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CAT_PINK": {
		"body": "12",
		"description": "GTA SA #radarsprite\nradarsprite id 12\n",
		"prefix": "RADAR_SPRITE_CAT_PINK",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CESAR": {
		"body": "13",
		"description": "GTA SA #radarsprite\nradarsprite id 13\n",
		"prefix": "RADAR_SPRITE_CESAR",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CHICKEN": {
		"body": "14",
		"description": "GTA SA #radarsprite\nradarsprite id 14\n",
		"prefix": "RADAR_SPRITE_CHICKEN",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CJ": {
		"body": "15",
		"description": "GTA SA #radarsprite\nradarsprite id 15\n",
		"prefix": "RADAR_SPRITE_CJ",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CRASH1": {
		"body": "16",
		"description": "GTA SA #radarsprite\nradarsprite id 16\n",
		"prefix": "RADAR_SPRITE_CRASH1",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_DINER": {
		"body": "17",
		"description": "GTA SA #radarsprite\nradarsprite id 17\n",
		"prefix": "RADAR_SPRITE_DINER",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_EMMETGUN": {
		"body": "18",
		"description": "GTA SA #radarsprite\nradarsprite id 18\n",
		"prefix": "RADAR_SPRITE_EMMETGUN",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_ENEMYATTACK": {
		"body": "19",
		"description": "GTA SA #radarsprite\nradarsprite id 19\n",
		"prefix": "RADAR_SPRITE_ENEMYATTACK",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_FIRE": {
		"body": "20",
		"description": "GTA SA #radarsprite\nradarsprite id 20\n",
		"prefix": "RADAR_SPRITE_FIRE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GIRLFRIEND": {
		"body": "21",
		"description": "GTA SA #radarsprite\nradarsprite id 21\n",
		"prefix": "RADAR_SPRITE_GIRLFRIEND",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_HOSPITAL": {
		"body": "22",
		"description": "GTA SA #radarsprite\nradarsprite id 22\n",
		"prefix": "RADAR_SPRITE_HOSPITAL",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_LOCO": {
		"body": "23",
		"description": "GTA SA #radarsprite\nradarsprite id 23\n",
		"prefix": "RADAR_SPRITE_LOCO",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MADDOG": {
		"body": "24",
		"description": "GTA SA #radarsprite\nradarsprite id 24\n",
		"prefix": "RADAR_SPRITE_MADDOG",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MAFIA": {
		"body": "25",
		"description": "GTA SA #radarsprite\nradarsprite id 25\n",
		"prefix": "RADAR_SPRITE_MAFIA",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MCSTRAP": {
		"body": "26",
		"description": "GTA SA #radarsprite\nradarsprite id 26\n",
		"prefix": "RADAR_SPRITE_MCSTRAP",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MOD_GARAGE": {
		"body": "27",
		"description": "GTA SA #radarsprite\nradarsprite id 27\n",
		"prefix": "RADAR_SPRITE_MOD_GARAGE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_OGLOC": {
		"body": "28",
		"description": "GTA SA #radarsprite\nradarsprite id 28\n",
		"prefix": "RADAR_SPRITE_OGLOC",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_PIZZA": {
		"body": "29",
		"description": "GTA SA #radarsprite\nradarsprite id 29\n",
		"prefix": "RADAR_SPRITE_PIZZA",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_POLICE": {
		"body": "30",
		"description": "GTA SA #radarsprite\nradarsprite id 30\n",
		"prefix": "RADAR_SPRITE_POLICE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_PROPERTY_GREEN": {
		"body": "31",
		"description": "GTA SA #radarsprite\nradarsprite id 31\n",
		"prefix": "RADAR_SPRITE_PROPERTY_GREEN",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_PROPERTY_RED": {
		"body": "32",
		"description": "GTA SA #radarsprite\nradarsprite id 32\n",
		"prefix": "RADAR_SPRITE_PROPERTY_RED",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_RACE": {
		"body": "33",
		"description": "GTA SA #radarsprite\nradarsprite id 33\n",
		"prefix": "RADAR_SPRITE_RACE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_RYDER": {
		"body": "34",
		"description": "GTA SA #radarsprite\nradarsprite id 34\n",
		"prefix": "RADAR_SPRITE_RYDER",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_SAVEHOUSE": {
		"body": "35",
		"description": "GTA SA #radarsprite\nradarsprite id 35\n",
		"prefix": "RADAR_SPRITE_SAVEHOUSE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_SCHOOL": {
		"body": "36",
		"description": "GTA SA #radarsprite\nradarsprite id 36\n",
		"prefix": "RADAR_SPRITE_SCHOOL",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_MYSTERY": {
		"body": "37",
		"description": "GTA SA #radarsprite\nradarsprite id 37\n",
		"prefix": "RADAR_SPRITE_MYSTERY",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_SWEET": {
		"body": "38",
		"description": "GTA SA #radarsprite\nradarsprite id 38\n",
		"prefix": "RADAR_SPRITE_SWEET",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TATTOO": {
		"body": "39",
		"description": "GTA SA #radarsprite\nradarsprite id 39\n",
		"prefix": "RADAR_SPRITE_TATTOO",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TRUTH": {
		"body": "40",
		"description": "GTA SA #radarsprite\nradarsprite id 40\n",
		"prefix": "RADAR_SPRITE_TRUTH",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_WAYPOINT": {
		"body": "41",
		"description": "GTA SA #radarsprite\nradarsprite id 41\n",
		"prefix": "RADAR_SPRITE_WAYPOINT",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TORENO_RANCH": {
		"body": "42",
		"description": "GTA SA #radarsprite\nradarsprite id 42\n",
		"prefix": "RADAR_SPRITE_TORENO_RANCH",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TRIADS": {
		"body": "43",
		"description": "GTA SA #radarsprite\nradarsprite id 43\n",
		"prefix": "RADAR_SPRITE_TRIADS",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TRIADS_CASINO": {
		"body": "44",
		"description": "GTA SA #radarsprite\nradarsprite id 44\n",
		"prefix": "RADAR_SPRITE_TRIADS_CASINO",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TSHIRT": {
		"body": "45",
		"description": "GTA SA #radarsprite\nradarsprite id 45\n",
		"prefix": "RADAR_SPRITE_TSHIRT",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_WOOZIE": {
		"body": "46",
		"description": "GTA SA #radarsprite\nradarsprite id 46\n",
		"prefix": "RADAR_SPRITE_WOOZIE",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_ZERO": {
		"body": "47",
		"description": "GTA SA #radarsprite\nradarsprite id 47\n",
		"prefix": "RADAR_SPRITE_ZERO",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_DATE_DISCO": {
		"body": "48",
		"description": "GTA SA #radarsprite\nradarsprite id 48\n",
		"prefix": "RADAR_SPRITE_DATE_DISCO",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_DATE_DRINK": {
		"body": "49",
		"description": "GTA SA #radarsprite\nradarsprite id 49\n",
		"prefix": "RADAR_SPRITE_DATE_DRINK",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_DATE_FOOD": {
		"body": "50",
		"description": "GTA SA #radarsprite\nradarsprite id 50\n",
		"prefix": "RADAR_SPRITE_DATE_FOOD",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_TRUCK": {
		"body": "51",
		"description": "GTA SA #radarsprite\nradarsprite id 51\n",
		"prefix": "RADAR_SPRITE_TRUCK",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_CASH": {
		"body": "52",
		"description": "GTA SA #radarsprite\nradarsprite id 52\n",
		"prefix": "RADAR_SPRITE_CASH",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_FLAG": {
		"body": "53",
		"description": "GTA SA #radarsprite\nradarsprite id 53\n",
		"prefix": "RADAR_SPRITE_FLAG",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GYM": {
		"body": "54",
		"description": "GTA SA #radarsprite\nradarsprite id 54\n",
		"prefix": "RADAR_SPRITE_GYM",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_IMPOUND": {
		"body": "55",
		"description": "GTA SA #radarsprite\nradarsprite id 55\n",
		"prefix": "RADAR_SPRITE_IMPOUND",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_RUNWAY_LIGHT": {
		"body": "56",
		"description": "GTA SA #radarsprite\nradarsprite id 56\n",
		"prefix": "RADAR_SPRITE_RUNWAY_LIGHT",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_RUNWAY": {
		"body": "57",
		"description": "GTA SA #radarsprite\nradarsprite id 57\n",
		"prefix": "RADAR_SPRITE_RUNWAY",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GANG_B": {
		"body": "58",
		"description": "GTA SA #radarsprite\nradarsprite id 58\n",
		"prefix": "RADAR_SPRITE_GANG_B",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GANG_P": {
		"body": "59",
		"description": "GTA SA #radarsprite\nradarsprite id 59\n",
		"prefix": "RADAR_SPRITE_GANG_P",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GANG_Y": {
		"body": "60",
		"description": "GTA SA #radarsprite\nradarsprite id 60\n",
		"prefix": "RADAR_SPRITE_GANG_Y",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GANG_N": {
		"body": "61",
		"description": "GTA SA #radarsprite\nradarsprite id 61\n",
		"prefix": "RADAR_SPRITE_GANG_N",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_GANG_G": {
		"body": "62",
		"description": "GTA SA #radarsprite\nradarsprite id 62\n",
		"prefix": "RADAR_SPRITE_GANG_G",
		"scope": "source.lua"
	},
	"RADAR_SPRITE_SPRAY": {
		"body": "63",
		"description": "GTA SA #radarsprite\nradarsprite id 63\n",
		"prefix": "RADAR_SPRITE_SPRAY",
		"scope": "source.lua"
	},

	"PICKUP_NONE": {
		"body": "0",
		"description": "GTA SA #pickuptype\npickuptype id 0\n",
		"prefix": "PICKUP_NONE",
		"scope": "source.lua"
	},
	"PICKUP_IN_SHOP": {
		"body": "1",
		"description": "GTA SA #pickuptype\npickuptype id 1\n",
		"prefix": "PICKUP_IN_SHOP",
		"scope": "source.lua"
	},
	"PICKUP_ON_STREET": {
		"body": "2",
		"description": "GTA SA #pickuptype\npickuptype id 2\n",
		"prefix": "PICKUP_ON_STREET",
		"scope": "source.lua"
	},
	"PICKUP_ONCE": {
		"body": "3",
		"description": "GTA SA #pickuptype\npickuptype id 3\n",
		"prefix": "PICKUP_ONCE",
		"scope": "source.lua"
	},
	"PICKUP_ONCE_TIMEOUT": {
		"body": "4",
		"description": "GTA SA #pickuptype\npickuptype id 4\n",
		"prefix": "PICKUP_ONCE_TIMEOUT",
		"scope": "source.lua"
	},
	"PICKUP_ONCE_TIMEOUT_SLOW": {
		"body": "5",
		"description": "GTA SA #pickuptype\npickuptype id 5\n",
		"prefix": "PICKUP_ONCE_TIMEOUT_SLOW",
		"scope": "source.lua"
	},
	"PICKUP_COLLECTABLE1": {
		"body": "6",
		"description": "GTA SA #pickuptype\npickuptype id 6\n",
		"prefix": "PICKUP_COLLECTABLE1",
		"scope": "source.lua"
	},
	"PICKUP_IN_SHOP_OUT_OF_STOCK": {
		"body": "7",
		"description": "GTA SA #pickuptype\npickuptype id 7\n",
		"prefix": "PICKUP_IN_SHOP_OUT_OF_STOCK",
		"scope": "source.lua"
	},
	"PICKUP_MONEY": {
		"body": "8",
		"description": "GTA SA #pickuptype\npickuptype id 8\n",
		"prefix": "PICKUP_MONEY",
		"scope": "source.lua"
	},
	"PICKUP_MINE_INACTIVE": {
		"body": "9",
		"description": "GTA SA #pickuptype\npickuptype id 9\n",
		"prefix": "PICKUP_MINE_INACTIVE",
		"scope": "source.lua"
	},
	"PICKUP_MINE_ARMED": {
		"body": "10",
		"description": "GTA SA #pickuptype\npickuptype id 10\n",
		"prefix": "PICKUP_MINE_ARMED",
		"scope": "source.lua"
	},
	"PICKUP_NAUTICAL_MINE_INACTIVE": {
		"body": "11",
		"description": "GTA SA #pickuptype\npickuptype id 11\n",
		"prefix": "PICKUP_NAUTICAL_MINE_INACTIVE",
		"scope": "source.lua"
	},
	"PICKUP_NAUTICAL_MINE_ARMED": {
		"body": "12",
		"description": "GTA SA #pickuptype\npickuptype id 12\n",
		"prefix": "PICKUP_NAUTICAL_MINE_ARMED",
		"scope": "source.lua"
	},
	"PICKUP_FLOATINGPACKAGE": {
		"body": "13",
		"description": "GTA SA #pickuptype\npickuptype id 13\n",
		"prefix": "PICKUP_FLOATINGPACKAGE",
		"scope": "source.lua"
	},
	"PICKUP_FLOATINGPACKAGE_FLOATING": {
		"body": "14",
		"description": "GTA SA #pickuptype\npickuptype id 14\n",
		"prefix": "PICKUP_FLOATINGPACKAGE_FLOATING",
		"scope": "source.lua"
	},
	"PICKUP_ON_STREET_SLOW": {
		"body": "15",
		"description": "GTA SA #pickuptype\npickuptype id 15\n",
		"prefix": "PICKUP_ON_STREET_SLOW",
		"scope": "source.lua"
	},
	"PICKUP_ASSET_REVENUE": {
		"body": "16",
		"description": "GTA SA #pickuptype\npickuptype id 16\n",
		"prefix": "PICKUP_ASSET_REVENUE",
		"scope": "source.lua"
	},
	"PICKUP_PROPERTY_LOCKED": {
		"body": "17",
		"description": "GTA SA #pickuptype\npickuptype id 17\n",
		"prefix": "PICKUP_PROPERTY_LOCKED",
		"scope": "source.lua"
	},
	"PICKUP_PROPERTY_FORSALE": {
		"body": "18",
		"description": "GTA SA #pickuptype\npickuptype id 18\n",
		"prefix": "PICKUP_PROPERTY_FORSALE",
		"scope": "source.lua"
	},
	"PICKUP_MONEY_DOESNTDISAPPEAR": {
		"body": "19",
		"description": "GTA SA #pickuptype\npickuptype id 19\n",
		"prefix": "PICKUP_MONEY_DOESNTDISAPPEAR",
		"scope": "source.lua"
	},
	"PICKUP_SNAPSHOT": {
		"body": "20",
		"description": "GTA SA #pickuptype\npickuptype id 20\n",
		"prefix": "PICKUP_SNAPSHOT",
		"scope": "source.lua"
	},
	"PICKUP_2P": {
		"body": "21",
		"description": "GTA SA #pickuptype\npickuptype id 21\n",
		"prefix": "PICKUP_2P",
		"scope": "source.lua"
	},
	"PICKUP_ONCE_FOR_MISSION": {
		"body": "22",
		"description": "GTA SA #pickuptype\npickuptype id 22\n",
		"prefix": "PICKUP_ONCE_FOR_MISSION",
		"scope": "source.lua"
	},

	"CORONATYPE_SHINYSTAR": {
		"body": "0",
		"description": "GTA SA #coronatype\ncoronatype id 0\n",
		"prefix": "CORONATYPE_SHINYSTAR",
		"scope": "source.lua"
	},
	"CORONATYPE_HEADLIGHT": {
		"body": "1",
		"description": "GTA SA #coronatype\ncoronatype id 1\n",
		"prefix": "CORONATYPE_HEADLIGHT",
		"scope": "source.lua"
	},
	"CORONATYPE_MOON": {
		"body": "2",
		"description": "GTA SA #coronatype\ncoronatype id 2\n",
		"prefix": "CORONATYPE_MOON",
		"scope": "source.lua"
	},
	"CORONATYPE_REFLECTION": {
		"body": "3",
		"description": "GTA SA #coronatype\ncoronatype id 3\n",
		"prefix": "CORONATYPE_REFLECTION",
		"scope": "source.lua"
	},
	"CORONATYPE_HEADLIGHTLINE": {
		"body": "4",
		"description": "GTA SA #coronatype\ncoronatype id 4\n",
		"prefix": "CORONATYPE_HEADLIGHTLINE",
		"scope": "source.lua"
	},
	"CORONATYPE_HEX": {
		"body": "5",
		"description": "GTA SA #coronatype\ncoronatype id 5\n",
		"prefix": "CORONATYPE_HEX",
		"scope": "source.lua"
	},
	"CORONATYPE_CIRCLE": {
		"body": "6",
		"description": "GTA SA #coronatype\ncoronatype id 6\n",
		"prefix": "CORONATYPE_CIRCLE",
		"scope": "source.lua"
	},
	"CORONATYPE_RING": {
		"body": "7",
		"description": "GTA SA #coronatype\ncoronatype id 7\n",
		"prefix": "CORONATYPE_RING",
		"scope": "source.lua"
	},
	"CORONATYPE_STREAK": {
		"body": "8",
		"description": "GTA SA #coronatype\ncoronatype id 8\n",
		"prefix": "CORONATYPE_STREAK",
		"scope": "source.lua"
	},
	"CORONATYPE_TORUS": {
		"body": "9",
		"description": "GTA SA #coronatype\ncoronatype id 9\n",
		"prefix": "CORONATYPE_TORUS",
		"scope": "source.lua"
	},
	"CORONATYPE_NONE": {
		"body": "10",
		"description": "GTA SA #coronatype\ncoronatype id 10\n",
		"prefix": "CORONATYPE_NONE",
		"scope": "source.lua"
	},
		
	"CAMMODE_NONE": {
		"body": "0",
		"description": "GTA SA #cammode\ncammode id 0\n",
		"prefix": "CAMMODE_NONE",
		"scope": "source.lua"
	},
	"CAMMODE_TOPDOWN": {
		"body": "1",
		"description": "GTA SA #cammode\ncammode id 1\n",
		"prefix": "CAMMODE_TOPDOWN",
		"scope": "source.lua"
	},
	"CAMMODE_GTACLASSIC": {
		"body": "2",
		"description": "GTA SA #cammode\ncammode id 2\n",
		"prefix": "CAMMODE_GTACLASSIC",
		"scope": "source.lua"
	},
	"CAMMODE_BEHINDCAR": {
		"body": "3",
		"description": "GTA SA #cammode\ncammode id 3\n",
		"prefix": "CAMMODE_BEHINDCAR",
		"scope": "source.lua"
	},
	"CAMMODE_FOLLOWPED": {
		"body": "4",
		"description": "GTA SA #cammode\ncammode id 4\n",
		"prefix": "CAMMODE_FOLLOWPED",
		"scope": "source.lua"
	},
	"CAMMODE_AIMING": {
		"body": "5",
		"description": "GTA SA #cammode\ncammode id 5\n",
		"prefix": "CAMMODE_AIMING",
		"scope": "source.lua"
	},
	"CAMMODE_DEBUG": {
		"body": "6",
		"description": "GTA SA #cammode\ncammode id 6\n",
		"prefix": "CAMMODE_DEBUG",
		"scope": "source.lua"
	},
	"CAMMODE_SNIPER": {
		"body": "7",
		"description": "GTA SA #cammode\ncammode id 7\n",
		"prefix": "CAMMODE_SNIPER",
		"scope": "source.lua"
	},
	"CAMMODE_ROCKETLAUNCHER": {
		"body": "8",
		"description": "GTA SA #cammode\ncammode id 8\n",
		"prefix": "CAMMODE_ROCKETLAUNCHER",
		"scope": "source.lua"
	},
	"CAMMODE_MODELVIEW": {
		"body": "9",
		"description": "GTA SA #cammode\ncammode id 9\n",
		"prefix": "CAMMODE_MODELVIEW",
		"scope": "source.lua"
	},
	"CAMMODE_BILL": {
		"body": "10",
		"description": "GTA SA #cammode\ncammode id 10\n",
		"prefix": "CAMMODE_BILL",
		"scope": "source.lua"
	},
	"CAMMODE_SYPHON": {
		"body": "11",
		"description": "GTA SA #cammode\ncammode id 11\n",
		"prefix": "CAMMODE_SYPHON",
		"scope": "source.lua"
	},
	"CAMMODE_CIRCLE": {
		"body": "12",
		"description": "GTA SA #cammode\ncammode id 12\n",
		"prefix": "CAMMODE_CIRCLE",
		"scope": "source.lua"
	},
	"CAMMODE_CHEESYZOOM": {
		"body": "13",
		"description": "GTA SA #cammode\ncammode id 13\n",
		"prefix": "CAMMODE_CHEESYZOOM",
		"scope": "source.lua"
	},
	"CAMMODE_WHEELCAM": {
		"body": "14",
		"description": "GTA SA #cammode\ncammode id 14\n",
		"prefix": "CAMMODE_WHEELCAM",
		"scope": "source.lua"
	},
	"CAMMODE_FIXED": {
		"body": "15",
		"description": "GTA SA #cammode\ncammode id 15\n",
		"prefix": "CAMMODE_FIXED",
		"scope": "source.lua"
	},
	"CAMMODE_1STPERSON": {
		"body": "16",
		"description": "GTA SA #cammode\ncammode id 16\n",
		"prefix": "CAMMODE_1STPERSON",
		"scope": "source.lua"
	},
	"CAMMODE_FLYBY": {
		"body": "17",
		"description": "GTA SA #cammode\ncammode id 17\n",
		"prefix": "CAMMODE_FLYBY",
		"scope": "source.lua"
	},
	"CAMMODE_CAM_ON_A_STRING": {
		"body": "18",
		"description": "GTA SA #cammode\ncammode id 18\n",
		"prefix": "CAMMODE_CAM_ON_A_STRING",
		"scope": "source.lua"
	},
	"CAMMODE_REACTION": {
		"body": "19",
		"description": "GTA SA #cammode\ncammode id 19\n",
		"prefix": "CAMMODE_REACTION",
		"scope": "source.lua"
	},
	"CAMMODE_FOLLOW_PED_WITH_BIND": {
		"body": "20",
		"description": "GTA SA #cammode\ncammode id 20\n",
		"prefix": "CAMMODE_FOLLOW_PED_WITH_BIND",
		"scope": "source.lua"
	},
	"CAMMODE_CHRIS": {
		"body": "21",
		"description": "GTA SA #cammode\ncammode id 21\n",
		"prefix": "CAMMODE_CHRIS",
		"scope": "source.lua"
	},
	"CAMMODE_BEHINDBOAT": {
		"body": "22",
		"description": "GTA SA #cammode\ncammode id 22\n",
		"prefix": "CAMMODE_BEHINDBOAT",
		"scope": "source.lua"
	},
	"CAMMODE_PLAYER_FALLEN_WATER": {
		"body": "23",
		"description": "GTA SA #cammode\ncammode id 23\n",
		"prefix": "CAMMODE_PLAYER_FALLEN_WATER",
		"scope": "source.lua"
	},
	"CAMMODE_CAM_ON_TRAIN_ROOF": {
		"body": "24",
		"description": "GTA SA #cammode\ncammode id 24\n",
		"prefix": "CAMMODE_CAM_ON_TRAIN_ROOF",
		"scope": "source.lua"
	},
	"CAMMODE_CAM_RUNNING_SIDE_TRAIN": {
		"body": "25",
		"description": "GTA SA #cammode\ncammode id 25\n",
		"prefix": "CAMMODE_CAM_RUNNING_SIDE_TRAIN",
		"scope": "source.lua"
	},
	"CAMMODE_BLOOD_ON_THE_TRACKS": {
		"body": "26",
		"description": "GTA SA #cammode\ncammode id 26\n",
		"prefix": "CAMMODE_BLOOD_ON_THE_TRACKS",
		"scope": "source.lua"
	},
	"CAMMODE_IM_THE_PASSENGER_WOOWOO": {
		"body": "27",
		"description": "GTA SA #cammode\ncammode id 27\n",
		"prefix": "CAMMODE_IM_THE_PASSENGER_WOOWOO",
		"scope": "source.lua"
	},
	"CAMMODE_SYPHON_CRIM_IN_FRONT": {
		"body": "28",
		"description": "GTA SA #cammode\ncammode id 28\n",
		"prefix": "CAMMODE_SYPHON_CRIM_IN_FRONT",
		"scope": "source.lua"
	},
	"CAMMODE_PED_DEAD_BABY": {
		"body": "29",
		"description": "GTA SA #cammode\ncammode id 29\n",
		"prefix": "CAMMODE_PED_DEAD_BABY",
		"scope": "source.lua"
	},
	"CAMMODE_PILLOWS_PAPS": {
		"body": "30",
		"description": "GTA SA #cammode\ncammode id 30\n",
		"prefix": "CAMMODE_PILLOWS_PAPS",
		"scope": "source.lua"
	},
	"CAMMODE_LOOK_AT_CARS": {
		"body": "31",
		"description": "GTA SA #cammode\ncammode id 31\n",
		"prefix": "CAMMODE_LOOK_AT_CARS",
		"scope": "source.lua"
	},
	"CAMMODE_ARRESTCAM_ONE": {
		"body": "32",
		"description": "GTA SA #cammode\ncammode id 32\n",
		"prefix": "CAMMODE_ARRESTCAM_ONE",
		"scope": "source.lua"
	},
	"CAMMODE_ARRESTCAM_TWO": {
		"body": "33",
		"description": "GTA SA #cammode\ncammode id 33\n",
		"prefix": "CAMMODE_ARRESTCAM_TWO",
		"scope": "source.lua"
	},
	"CAMMODE_M16_1STPERSON": {
		"body": "34",
		"description": "GTA SA #cammode\ncammode id 34\n",
		"prefix": "CAMMODE_M16_1STPERSON",
		"scope": "source.lua"
	},
	"CAMMODE_SPECIAL_FIXED_FOR_SYPHON": {
		"body": "35",
		"description": "GTA SA #cammode\ncammode id 35\n",
		"prefix": "CAMMODE_SPECIAL_FIXED_FOR_SYPHON",
		"scope": "source.lua"
	},
	"CAMMODE_FIGHT_CAM": {
		"body": "36",
		"description": "GTA SA #cammode\ncammode id 36\n",
		"prefix": "CAMMODE_FIGHT_CAM",
		"scope": "source.lua"
	},
	"CAMMODE_TOP_DOWN_PED": {
		"body": "37",
		"description": "GTA SA #cammode\ncammode id 37\n",
		"prefix": "CAMMODE_TOP_DOWN_PED",
		"scope": "source.lua"
	},
	"CAMMODE_LIGHTHOUSE": {
		"body": "38",
		"description": "GTA SA #cammode\ncammode id 38\n",
		"prefix": "CAMMODE_LIGHTHOUSE",
		"scope": "source.lua"
	},
	"CAMMODE_SNIPER_RUNABOUT": {
		"body": "39",
		"description": "GTA SA #cammode\ncammode id 39\n",
		"prefix": "CAMMODE_SNIPER_RUNABOUT",
		"scope": "source.lua"
	},
	"CAMMODE_ROCKETLAUNCHER_RUNABOUT": {
		"body": "40",
		"description": "GTA SA #cammode\ncammode id 40\n",
		"prefix": "CAMMODE_ROCKETLAUNCHER_RUNABOUT",
		"scope": "source.lua"
	},
	"CAMMODE_1STPERSON_RUNABOUT": {
		"body": "41",
		"description": "GTA SA #cammode\ncammode id 41\n",
		"prefix": "CAMMODE_1STPERSON_RUNABOUT",
		"scope": "source.lua"
	},
	"CAMMODE_M16_1STPERSON_RUNABOUT": {
		"body": "42",
		"description": "GTA SA #cammode\ncammode id 42\n",
		"prefix": "CAMMODE_M16_1STPERSON_RUNABOUT",
		"scope": "source.lua"
	},
	"CAMMODE_FIGHT_CAM_RUNABOUT": {
		"body": "43",
		"description": "GTA SA #cammode\ncammode id 43\n",
		"prefix": "CAMMODE_FIGHT_CAM_RUNABOUT",
		"scope": "source.lua"
	},
	"CAMMODE_EDITOR": {
		"body": "44",
		"description": "GTA SA #cammode\ncammode id 44\n",
		"prefix": "CAMMODE_EDITOR",
		"scope": "source.lua"
	},
	"CAMMODE_HELICANNON_1STPERSON": {
		"body": "45",
		"description": "GTA SA #cammode\ncammode id 45\n",
		"prefix": "CAMMODE_HELICANNON_1STPERSON",
		"scope": "source.lua"
	},
	"CAMMODE_CAMERA": {
		"body": "46",
		"description": "GTA SA #cammode\ncammode id 46\n",
		"prefix": "CAMMODE_CAMERA",
		"scope": "source.lua"
	},
	"CAMMODE_ATTACHCAM": {
		"body": "47",
		"description": "GTA SA #cammode\ncammode id 47\n",
		"prefix": "CAMMODE_ATTACHCAM",
		"scope": "source.lua"
	},
	"CAMMODE_TWOPLAYER": {
		"body": "48",
		"description": "GTA SA #cammode\ncammode id 48\n",
		"prefix": "CAMMODE_TWOPLAYER",
		"scope": "source.lua"
	},
	"CAMMODE_TWOPLAYER_IN_CAR_AND_SHOOTING": {
		"body": "49",
		"description": "GTA SA #cammode\ncammode id 49\n",
		"prefix": "CAMMODE_TWOPLAYER_IN_CAR_AND_SHOOTING",
		"scope": "source.lua"
	},
	"CAMMODE_TWOPLAYER_SEPARATE_CARS": {
		"body": "50",
		"description": "GTA SA #cammode\ncammode id 50\n",
		"prefix": "CAMMODE_TWOPLAYER_SEPARATE_CARS",
		"scope": "source.lua"
	},
	"CAMMODE_ROCKETLAUNCHER_HS": {
		"body": "51",
		"description": "GTA SA #cammode\ncammode id 51\n",
		"prefix": "CAMMODE_ROCKETLAUNCHER_HS",
		"scope": "source.lua"
	},
	"CAMMODE_ROCKETLAUNCHER_RUNABOUT_HS": {
		"body": "52",
		"description": "GTA SA #cammode\ncammode id 52\n",
		"prefix": "CAMMODE_ROCKETLAUNCHER_RUNABOUT_HS",
		"scope": "source.lua"
	},
	"CAMMODE_AIMWEAPON": {
		"body": "53",
		"description": "GTA SA #cammode\ncammode id 53\n",
		"prefix": "CAMMODE_AIMWEAPON",
		"scope": "source.lua"
	},
	"CAMMODE_TWOPLAYER_SEPARATE_CARS_TOPDOWN": {
		"body": "54",
		"description": "GTA SA #cammode\ncammode id 54\n",
		"prefix": "CAMMODE_TWOPLAYER_SEPARATE_CARS_TOPDOWN",
		"scope": "source.lua"
	},
	"CAMMODE_AIMWEAPON_FROMCAR": {
		"body": "55",
		"description": "GTA SA #cammode\ncammode id 55\n",
		"prefix": "CAMMODE_AIMWEAPON_FROMCAR",
		"scope": "source.lua"
	},
	"CAMMODE_DW_HELI_CHASE": {
		"body": "56",
		"description": "GTA SA #cammode\ncammode id 56\n",
		"prefix": "CAMMODE_DW_HELI_CHASE",
		"scope": "source.lua"
	},
	"CAMMODE_DW_CAM_MAN": {
		"body": "57",
		"description": "GTA SA #cammode\ncammode id 57\n",
		"prefix": "CAMMODE_DW_CAM_MAN",
		"scope": "source.lua"
	},
	"CAMMODE_DW_BIRDY": {
		"body": "58",
		"description": "GTA SA #cammode\ncammode id 58\n",
		"prefix": "CAMMODE_DW_BIRDY",
		"scope": "source.lua"
	},
	"CAMMODE_DW_PLANE_SPOTTER": {
		"body": "59",
		"description": "GTA SA #cammode\ncammode id 59\n",
		"prefix": "CAMMODE_DW_PLANE_SPOTTER",
		"scope": "source.lua"
	},
	"CAMMODE_DW_DOG_FIGHT": {
		"body": "60",
		"description": "GTA SA #cammode\ncammode id 60\n",
		"prefix": "CAMMODE_DW_DOG_FIGHT",
		"scope": "source.lua"
	},
	"CAMMODE_DW_FISH": {
		"body": "61",
		"description": "GTA SA #cammode\ncammode id 61\n",
		"prefix": "CAMMODE_DW_FISH",
		"scope": "source.lua"
	},
	"CAMMODE_DW_PLANECAM1": {
		"body": "62",
		"description": "GTA SA #cammode\ncammode id 62\n",
		"prefix": "CAMMODE_DW_PLANECAM1",
		"scope": "source.lua"
	},
	"CAMMODE_DW_PLANECAM2": {
		"body": "63",
		"description": "GTA SA #cammode\ncammode id 63\n",
		"prefix": "CAMMODE_DW_PLANECAM2",
		"scope": "source.lua"
	},
	"CAMMODE_DW_PLANECAM3": {
		"body": "64",
		"description": "GTA SA #cammode\ncammode id 64\n",
		"prefix": "CAMMODE_DW_PLANECAM3",
		"scope": "source.lua"
	},
	"CAMMODE_AIMWEAPON_ATTACHED": {
		"body": "65",
		"description": "GTA SA #cammode\ncammode id 65\n",
		"prefix": "CAMMODE_AIMWEAPON_ATTACHED",
		"scope": "source.lua"
	},
		
	"EXPLOSION_TYPE_GRENADE": {
		"body": "0",
		"description": "GTA SA #explosiontype\nexplosiontype id 0\n",
		"prefix": "EXPLOSION_TYPE_GRENADE",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_MOLOTOV": {
		"body": "1",
		"description": "GTA SA #explosiontype\nexplosiontype id 1\n",
		"prefix": "EXPLOSION_TYPE_MOLOTOV",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_ROCKET": {
		"body": "2",
		"description": "GTA SA #explosiontype\nexplosiontype id 2\n",
		"prefix": "EXPLOSION_TYPE_ROCKET",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_ROCKET_WEAK": {
		"body": "3",
		"description": "GTA SA #explosiontype\nexplosiontype id 3\n",
		"prefix": "EXPLOSION_TYPE_ROCKET_WEAK",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_CAR": {
		"body": "4",
		"description": "GTA SA #explosiontype\nexplosiontype id 4\n",
		"prefix": "EXPLOSION_TYPE_CAR",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_CAR_QUICK": {
		"body": "5",
		"description": "GTA SA #explosiontype\nexplosiontype id 5\n",
		"prefix": "EXPLOSION_TYPE_CAR_QUICK",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_BOAT": {
		"body": "6",
		"description": "GTA SA #explosiontype\nexplosiontype id 6\n",
		"prefix": "EXPLOSION_TYPE_BOAT",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_HELI": {
		"body": "7",
		"description": "GTA SA #explosiontype\nexplosiontype id 7\n",
		"prefix": "EXPLOSION_TYPE_HELI",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_MINE": {
		"body": "8",
		"description": "GTA SA #explosiontype\nexplosiontype id 8\n",
		"prefix": "EXPLOSION_TYPE_MINE",
		"scope": "source.lua"
	},
	"EXPLOSION_TYPE_BARREL": {
		"body": "9",
		"description": "GTA SA #explosiontype\nexplosiontype id 9\n",
		"prefix": "EXPLOSION_TYPE_BARREL",
		"scope": "source.lua"
	},

	"particle_prt_boatsplash": {
		"body": "'prt_boatsplash'",
		"description": "GTA SA #effectname\nString: prt_boatsplash\n",
		"prefix": "particle_prt_boatsplash",
		"scope": "source.lua"
	},
	"particle_prt_bubble": {
		"body": "'prt_bubble'",
		"description": "GTA SA #effectname\nString: prt_bubble\n",
		"prefix": "particle_prt_bubble",
		"scope": "source.lua"
	},
	"particle_prt_cardebris": {
		"body": "'prt_cardebris'",
		"description": "GTA SA #effectname\nString: prt_cardebris\n",
		"prefix": "particle_prt_cardebris",
		"scope": "source.lua"
	},
	"particle_prt_collisionsmoke": {
		"body": "'prt_collisionsmoke'",
		"description": "GTA SA #effectname\nString: prt_collisionsmoke\n",
		"prefix": "particle_prt_collisionsmoke",
		"scope": "source.lua"
	},
	"particle_prt_glass": {
		"body": "'prt_glass'",
		"description": "GTA SA #effectname\nString: prt_glass\n",
		"prefix": "particle_prt_glass",
		"scope": "source.lua"
	},
	"particle_prt_gunshell": {
		"body": "'prt_gunshell'",
		"description": "GTA SA #effectname\nString: prt_gunshell\n",
		"prefix": "particle_prt_gunshell",
		"scope": "source.lua"
	},
	"particle_prt_sand": {
		"body": "'prt_sand'",
		"description": "GTA SA #effectname\nString: prt_sand\n",
		"prefix": "particle_prt_sand",
		"scope": "source.lua"
	},
	"particle_prt_sand2": {
		"body": "'prt_sand2'",
		"description": "GTA SA #effectname\nString: prt_sand2\n",
		"prefix": "particle_prt_sand2",
		"scope": "source.lua"
	},
	"particle_prt_smokeII_3_expand": {
		"body": "'prt_smokeII_3_expand'",
		"description": "GTA SA #effectname\nString: prt_smokeII_3_expand\n",
		"prefix": "particle_prt_smokeII_3_expand",
		"scope": "source.lua"
	},
	"particle_prt_smoke_huge": {
		"body": "'prt_smoke_huge'",
		"description": "GTA SA #effectname\nString: prt_smoke_huge\n",
		"prefix": "particle_prt_smoke_huge",
		"scope": "source.lua"
	},
	"particle_prt_spark": {
		"body": "'prt_spark'",
		"description": "GTA SA #effectname\nString: prt_spark\n",
		"prefix": "particle_prt_spark",
		"scope": "source.lua"
	},
	"particle_prt_spark_2": {
		"body": "'prt_spark_2'",
		"description": "GTA SA #effectname\nString: prt_spark_2\n",
		"prefix": "particle_prt_spark_2",
		"scope": "source.lua"
	},
	"particle_prt_splash": {
		"body": "'prt_splash'",
		"description": "GTA SA #effectname\nString: prt_splash\n",
		"prefix": "particle_prt_splash",
		"scope": "source.lua"
	},
	"particle_prt_wake": {
		"body": "'prt_wake'",
		"description": "GTA SA #effectname\nString: prt_wake\n",
		"prefix": "particle_prt_wake",
		"scope": "source.lua"
	},
	"particle_prt_watersplash": {
		"body": "'prt_watersplash'",
		"description": "GTA SA #effectname\nString: prt_watersplash\n",
		"prefix": "particle_prt_watersplash",
		"scope": "source.lua"
	},
	"particle_prt_wheeldirt": {
		"body": "'prt_wheeldirt'",
		"description": "GTA SA #effectname\nString: prt_wheeldirt\n",
		"prefix": "particle_prt_wheeldirt",
		"scope": "source.lua"
	},
	"particle_boat_prop": {
		"body": "'boat_prop'",
		"description": "GTA SA #effectname\nString: boat_prop\n",
		"prefix": "particle_boat_prop",
		"scope": "source.lua"
	},
	"particle_camflash": {
		"body": "'camflash'",
		"description": "GTA SA #effectname\nString: camflash\n",
		"prefix": "particle_camflash",
		"scope": "source.lua"
	},
	"particle_exhale": {
		"body": "'exhale'",
		"description": "GTA SA #effectname\nString: exhale\n",
		"prefix": "particle_exhale",
		"scope": "source.lua"
	},
	"particle_explosion_fuel_car": {
		"body": "'explosion_fuel_car'",
		"description": "GTA SA #effectname\nString: explosion_fuel_car\n",
		"prefix": "particle_explosion_fuel_car",
		"scope": "source.lua"
	},
	"particle_explosion_large": {
		"body": "'explosion_large'",
		"description": "GTA SA #effectname\nString: explosion_large\n",
		"prefix": "particle_explosion_large",
		"scope": "source.lua"
	},
	"particle_explosion_medium": {
		"body": "'explosion_medium'",
		"description": "GTA SA #effectname\nString: explosion_medium\n",
		"prefix": "particle_explosion_medium",
		"scope": "source.lua"
	},
	"particle_explosion_molotov": {
		"body": "'explosion_molotov'",
		"description": "GTA SA #effectname\nString: explosion_molotov\n",
		"prefix": "particle_explosion_molotov",
		"scope": "source.lua"
	},
	"particle_explosion_small": {
		"body": "'explosion_small'",
		"description": "GTA SA #effectname\nString: explosion_small\n",
		"prefix": "particle_explosion_small",
		"scope": "source.lua"
	},
	"particle_explosion_tiny": {
		"body": "'explosion_tiny'",
		"description": "GTA SA #effectname\nString: explosion_tiny\n",
		"prefix": "particle_explosion_tiny",
		"scope": "source.lua"
	},
	"particle_extinguisher": {
		"body": "'extinguisher'",
		"description": "GTA SA #effectname\nString: extinguisher\n",
		"prefix": "particle_extinguisher",
		"scope": "source.lua"
	},
	"particle_fire": {
		"body": "'fire'",
		"description": "GTA SA #effectname\nString: fire\n",
		"prefix": "particle_fire",
		"scope": "source.lua"
	},
	"particle_fire_bike": {
		"body": "'fire_bike'",
		"description": "GTA SA #effectname\nString: fire_bike\n",
		"prefix": "particle_fire_bike",
		"scope": "source.lua"
	},
	"particle_fire_car": {
		"body": "'fire_car'",
		"description": "GTA SA #effectname\nString: fire_car\n",
		"prefix": "particle_fire_car",
		"scope": "source.lua"
	},
	"particle_fire_large": {
		"body": "'fire_large'",
		"description": "GTA SA #effectname\nString: fire_large\n",
		"prefix": "particle_fire_large",
		"scope": "source.lua"
	},
	"particle_fire_med": {
		"body": "'fire_med'",
		"description": "GTA SA #effectname\nString: fire_med\n",
		"prefix": "particle_fire_med",
		"scope": "source.lua"
	},
	"particle_flamethrower": {
		"body": "'flamethrower'",
		"description": "GTA SA #effectname\nString: flamethrower\n",
		"prefix": "particle_flamethrower",
		"scope": "source.lua"
	},
	"particle_gunflash": {
		"body": "'gunflash'",
		"description": "GTA SA #effectname\nString: gunflash\n",
		"prefix": "particle_gunflash",
		"scope": "source.lua"
	},
	"particle_gunsmoke": {
		"body": "'gunsmoke'",
		"description": "GTA SA #effectname\nString: gunsmoke\n",
		"prefix": "particle_gunsmoke",
		"scope": "source.lua"
	},
	"particle_heli_dust": {
		"body": "'heli_dust'",
		"description": "GTA SA #effectname\nString: heli_dust\n",
		"prefix": "particle_heli_dust",
		"scope": "source.lua"
	},
	"particle_jetpack": {
		"body": "'jetpack'",
		"description": "GTA SA #effectname\nString: jetpack\n",
		"prefix": "particle_jetpack",
		"scope": "source.lua"
	},
	"particle_jetthrust": {
		"body": "'jetthrust'",
		"description": "GTA SA #effectname\nString: jetthrust\n",
		"prefix": "particle_jetthrust",
		"scope": "source.lua"
	},
	"particle_molotov_flame": {
		"body": "'molotov_flame'",
		"description": "GTA SA #effectname\nString: molotov_flame\n",
		"prefix": "particle_molotov_flame",
		"scope": "source.lua"
	},
	"particle_nitro": {
		"body": "'nitro'",
		"description": "GTA SA #effectname\nString: nitro\n",
		"prefix": "particle_nitro",
		"scope": "source.lua"
	},
	"particle_overheat_car": {
		"body": "'overheat_car'",
		"description": "GTA SA #effectname\nString: overheat_car\n",
		"prefix": "particle_overheat_car",
		"scope": "source.lua"
	},
	"particle_overheat_car_electric": {
		"body": "overheat_car_electric",
		"description": "GTA SA #effectname\nString: overheat_car_electric\n",
		"prefix": "particle_overheat_car_electric",
		"scope": "source.lua"
	},
	"particle_riot_smoke": {
		"body": "'riot_smoke'",
		"description": "GTA SA #effectname\nString: riot_smoke\n",
		"prefix": "particle_riot_smoke",
		"scope": "source.lua"
	},
	"particle_spraycan": {
		"body": "'spraycan'",
		"description": "GTA SA #effectname\nString: spraycan\n",
		"prefix": "particle_spraycan",
		"scope": "source.lua"
	},
	"particle_tank_fire": {
		"body": "'tank_fire'",
		"description": "GTA SA #effectname\nString: tank_fire\n",
		"prefix": "particle_tank_fire",
		"scope": "source.lua"
	},
	"particle_teargas": {
		"body": "'teargas'",
		"description": "GTA SA #effectname\nString: teargas\n",
		"prefix": "particle_teargas",
		"scope": "source.lua"
	},
	"particle_teargasAD": {
		"body": "'teargasAD'",
		"description": "GTA SA #effectname\nString: teargasAD\n",
		"prefix": "particle_teargasAD",
		"scope": "source.lua"
	},
	"particle_water_hydrant": {
		"body": "'water_hydrant'",
		"description": "GTA SA #effectname\nString: water_hydrant\n",
		"prefix": "particle_water_hydrant",
		"scope": "source.lua"
	},
	"particle_water_ripples": {
		"body": "'water_ripples'",
		"description": "GTA SA #effectname\nString: water_ripples\n",
		"prefix": "particle_water_ripples",
		"scope": "source.lua"
	},
	"particle_water_speed": {
		"body": "'water_speed'",
		"description": "GTA SA #effectname\nString: water_speed\n",
		"prefix": "particle_water_speed",
		"scope": "source.lua"
	},
	"particle_water_splash": {
		"body": "'water_splash'",
		"description": "GTA SA #effectname\nString: water_splash\n",
		"prefix": "particle_water_splash",
		"scope": "source.lua"
	},
	"particle_water_splash_big": {
		"body": "'water_splash_big'",
		"description": "GTA SA #effectname\nString: water_splash_big\n",
		"prefix": "particle_water_splash_big",
		"scope": "source.lua"
	},
	"particle_water_splsh_sml": {
		"body": "'water_splsh_sml'",
		"description": "GTA SA #effectname\nString: water_splsh_sml\n",
		"prefix": "particle_water_splsh_sml",
		"scope": "source.lua"
	},
	"particle_water_swim": {
		"body": "'water_swim'",
		"description": "GTA SA #effectname\nString: water_swim\n",
		"prefix": "particle_water_swim",
		"scope": "source.lua"
	},
	"particle_cigarette_smoke": {
		"body": "'cigarette_smoke'",
		"description": "GTA SA #effectname\nString: cigarette_smoke\n",
		"prefix": "particle_cigarette_smoke",
		"scope": "source.lua"
	},
	"particle_Flame": {
		"body": "'Flame'",
		"description": "GTA SA #effectname\nString: Flame\n",
		"prefix": "particle_Flame",
		"scope": "source.lua"
	},
	"particle_insects": {
		"body": "'insects'",
		"description": "GTA SA #effectname\nString: insects\n",
		"prefix": "particle_insects",
		"scope": "source.lua"
	},
	"particle_smoke30lit": {
		"body": "'smoke30lit'",
		"description": "GTA SA #effectname\nString: smoke30lit\n",
		"prefix": "particle_smoke30lit",
		"scope": "source.lua"
	},
	"particle_smoke30m": {
		"body": "'smoke30m'",
		"description": "GTA SA #effectname\nString: smoke30m\n",
		"prefix": "particle_smoke30m",
		"scope": "source.lua"
	},
	"particle_smoke50lit": {
		"body": "'smoke50lit'",
		"description": "GTA SA #effectname\nString: smoke50lit\n",
		"prefix": "particle_smoke50lit",
		"scope": "source.lua"
	},
	"particle_vent": {
		"body": "'vent'",
		"description": "GTA SA #effectname\nString: vent\n",
		"prefix": "particle_vent",
		"scope": "source.lua"
	},
	"particle_vent2": {
		"body": "'vent2'",
		"description": "GTA SA #effectname\nString: vent2\n",
		"prefix": "particle_vent2",
		"scope": "source.lua"
	},
	"particle_waterfall_end": {
		"body": "'waterfall_end'",
		"description": "GTA SA #effectname\nString: waterfall_end\n",
		"prefix": "particle_waterfall_end",
		"scope": "source.lua"
	},
	"particle_water_fnt_tme": {
		"body": "'water_fnt_tme'",
		"description": "GTA SA #effectname\nString: water_fnt_tme\n",
		"prefix": "particle_water_fnt_tme",
		"scope": "source.lua"
	},
	"particle_water_fountain": {
		"body": "'water_fountain'",
		"description": "GTA SA #effectname\nString: water_fountain\n",
		"prefix": "particle_water_fountain",
		"scope": "source.lua"
	},
	"particle_tree_hit_fir": {
		"body": "'tree_hit_fir'",
		"description": "GTA SA #effectname\nString: tree_hit_fir\n",
		"prefix": "particle_tree_hit_fir",
		"scope": "source.lua"
	},
	"particle_tree_hit_palm": {
		"body": "'tree_hit_palm'",
		"description": "GTA SA #effectname\nString: tree_hit_palm\n",
		"prefix": "particle_tree_hit_palm",
		"scope": "source.lua"
	},
	"particle_blood_heli": {
		"body": "'blood_heli'",
		"description": "GTA SA #effectname\nString: blood_heli\n",
		"prefix": "particle_blood_heli",
		"scope": "source.lua"
	},
	"particle_carwashspray": {
		"body": "'carwashspray'",
		"description": "GTA SA #effectname\nString: carwashspray\n",
		"prefix": "particle_carwashspray",
		"scope": "source.lua"
	},
	"particle_cement": {
		"body": "'cement'",
		"description": "GTA SA #effectname\nString: cement\n",
		"prefix": "particle_cement",
		"scope": "source.lua"
	},
	"particle_cloudfast": {
		"body": "'cloudfast'",
		"description": "GTA SA #effectname\nString: cloudfast\n",
		"prefix": "particle_cloudfast",
		"scope": "source.lua"
	},
	"particle_coke_puff": {
		"body": "'coke_puff'",
		"description": "GTA SA #effectname\nString: coke_puff\n",
		"prefix": "particle_coke_puff",
		"scope": "source.lua"
	},
	"particle_coke_trail": {
		"body": "'coke_trail'",
		"description": "GTA SA #effectname\nString: coke_trail\n",
		"prefix": "particle_coke_trail",
		"scope": "source.lua"
	},
	"particle_explosion_barrel": {
		"body": "'explosion_barrel'",
		"description": "GTA SA #effectname\nString: explosion_barrel\n",
		"prefix": "particle_explosion_barrel",
		"scope": "source.lua"
	},
	"particle_explosion_crate": {
		"body": "'explosion_crate'",
		"description": "GTA SA #effectname\nString: explosion_crate\n",
		"prefix": "particle_explosion_crate",
		"scope": "source.lua"
	},
	"particle_explosion_door": {
		"body": "'explosion_door'",
		"description": "GTA SA #effectname\nString: explosion_door\n",
		"prefix": "particle_explosion_door",
		"scope": "source.lua"
	},
	"particle_petrolcan": {
		"body": "'petrolcan'",
		"description": "GTA SA #effectname\nString: petrolcan\n",
		"prefix": "particle_petrolcan",
		"scope": "source.lua"
	},
	"particle_puke": {
		"body": "'puke'",
		"description": "GTA SA #effectname\nString: puke\n",
		"prefix": "particle_puke",
		"scope": "source.lua"
	},
	"particle_shootlight": {
		"body": "'shootlight'",
		"description": "GTA SA #effectname\nString: shootlight\n",
		"prefix": "particle_shootlight",
		"scope": "source.lua"
	},
	"particle_smoke_flare": {
		"body": "'smoke_flare'",
		"description": "GTA SA #effectname\nString: smoke_flare\n",
		"prefix": "particle_smoke_flare",
		"scope": "source.lua"
	},
	"particle_wallbust": {
		"body": "'wallbust'",
		"description": "GTA SA #effectname\nString: wallbust\n",
		"prefix": "particle_wallbust",
		"scope": "source.lua"
	},
	"particle_WS_factorysmoke": {
		"body": "'WS_factorysmoke'",
		"description": "GTA SA #effectname\nString: WS_factorysmoke\n",
		"prefix": "particle_WS_factorysmoke",
		"scope": "source.lua"
	},
	
	"shape.new": {
		"body": "shape.new()",
		"description": "MoonAdditions\n﻿Shape shape = shape.new()\n",
		"prefix": "shape.new",
		"scope": "source.lua"
	},
	"shape:draw": {
		"body": "shape:draw(${1:uint prim_type},${2:bool enable_vertex_alpha},${3:uint src_blend},${4:uint dst_blend},${5:[Texture texture]})",
		"description": "MoonAdditions\nshape:draw(uint prim_type, bool enable_vertex_alpha, uint src_blend, uint dst_blend, [Texture texture])\n",
		"prefix": "shape:draw",
		"scope": "source.lua"
	},
	"shape:add_vertex": {
		"body": "shape:add_vertex(${1:float x},${2:float y},${3:int r},${4:int g},${5:int b},${6:int a},${7:[float u},${8:float v},${9:bool invert_x},${10:bool invert_y]})",
		"description": "MoonAdditions\nshape:add_vertex(float x, float y, int r, int g, int b, int a, [float u, float v, bool invert_x, bool invert_y])\n",
		"prefix": "shape:add_vertex",
		"scope": "source.lua"
	},
	"shape:set_vertex": {
		"body": "shape:set_vertex(${1:uint index},${2:float x},${3:float y},${4:int r},${5:int g},${6:int b},${7:int a},${8:[float u},${9:float v},${10:bool invert_x},${11:bool invert_y]})",
		"description": "MoonAdditions\nshape:set_vertex(uint index, float x, float y, int r, int g, int b, int a, [float u, float v, bool invert_x, bool invert_y])\n",
		"prefix": "shape:set_vertex",
		"scope": "source.lua"
	},
	"shape:set_vertex": {
		"body": "shape:set_vertex(${1:uint index},${2:Vertex vertex})",
		"description": "MoonAdditions\nshape:set_vertex(uint index, Vertex vertex)\n",
		"prefix": "shape:set_vertex",
		"scope": "source.lua"
	},
	"shape:clear": {
		"body": "shape:clear()",
		"description": "MoonAdditions\nshape:clear()\n",
		"prefix": "shape:clear",
		"scope": "source.lua"
	},
	"shape.vertices_number": {
		"body": "shape.vertices_number()",
		"description": "MoonAdditions\nuint vertices = shape.vertices_number\n",
		"prefix": "shape.vertices_number",
		"scope": "source.lua"
	},
	"shape:rotate_vertex": {
		"body": "shape:rotate_vertex(${1:uint index},${2:float around_x},${3:float around_y},${4:float angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_vertex(uint index, float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_vertex",
		"scope": "source.lua"
	},
	"shape:rotate_vertices_range": {
		"body": "shape:rotate_vertices_range(${1:uint from},${2:uint to},${3:float around_x},${4:float around_y},${5:float angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_vertices_range(uint from, uint to, float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_vertices_range",
		"scope": "source.lua"
	},
	"shape:rotate_all_vertices": {
		"body": "shape:rotate_all_vertices(${1:float around_x},${2:float around_y},${3:float angle})",
		"description": "MoonAdditions\nbool result = shape:rotate_all_vertices(float around_x, float around_y, float angle)\n",
		"prefix": "shape:rotate_all_vertices",
		"scope": "source.lua"
	},
	"shape:get_vertex": {
		"body": "shape:get_vertex(${1:uint index})",
		"description": "MoonAdditions\nVertex vertex = shape:get_vertex(uint index)\n",
		"prefix": "shape:get_vertex",
		"scope": "source.lua"
	},
	"vertex:set_color": {
		"body": "vertex:set_color(${1:int r},${2:int g},${3:int b},${4:int aя})",
		"description": "MoonAdditions\nvertex:set_color(int r, int g, int b, int aя)\n",
		"prefix": "vertex:set_color",
		"scope": "source.lua"
	},
	"vertex:get_color": {
		"body": "vertex:get_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = vertex:get_color()\n",
		"prefix": "vertex:get_color",
		"scope": "source.lua"
	},
	"get_char_bone": {
		"body": "get_char_bone(${1:Ped handle},${2:int bone_id})",
		"description": "MoonAdditions\nBone bone = get_char_bone(Ped handle, int bone_id)\n",
		"prefix": "get_char_bone",
		"scope": "source.lua"
	},
	"bone:get_pointer": {
		"body": "bone:get_pointer()",
		"description": "MoonAdditions\nuint ptr = bone:get_pointer()\n",
		"prefix": "bone:get_pointer",
		"scope": "source.lua"
	},
	"set_vehicle_model_alpha": {
		"body": "set_vehicle_model_alpha(${1:Vehicle handle},${2:uint alpha})",
		"description": "MoonAdditions\nset_vehicle_model_alpha(Vehicle handle, uint alpha)\n",
		"prefix": "set_vehicle_model_alpha",
		"scope": "source.lua"
	},
	"set_char_model_alpha": {
		"body": "set_char_model_alpha(${1:Ped handle},${2:uint alpha})",
		"description": "MoonAdditions\nset_char_model_alpha(Ped handle, uint alpha)\n",
		"prefix": "set_char_model_alpha",
		"scope": "source.lua"
	},
	"set_object_model_alpha": {
		"body": "set_object_model_alpha(${1:Object handle},${2:uint alpha})",
		"description": "MoonAdditions\nset_object_model_alpha(Object handle, uint alpha)\n",
		"prefix": "set_object_model_alpha",
		"scope": "source.lua"
	},
	"get_entity_type_and_class": {
		"body": "get_entity_type_and_class(${1:uint entity_ptr})",
		"description": "MoonAdditions\nuint type, uint class = get_entity_type_and_class(uint entity_ptr)\n",
		"prefix": "get_entity_type_and_class",
		"scope": "source.lua"
	},
	"get_vehicle_number_of_collided_entites": {
		"body": "get_vehicle_number_of_collided_entites(${1:Vehicle handle})",
		"description": "MoonAdditions\nint number = get_vehicle_number_of_collided_entites(Vehicle handle)\n",
		"prefix": "get_vehicle_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_char_number_of_collided_entites": {
		"body": "get_char_number_of_collided_entites(${1:Ped handle})",
		"description": "MoonAdditions\nint number = get_char_number_of_collided_entites(Ped handle)\n",
		"prefix": "get_char_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_object_number_of_collided_entites": {
		"body": "get_object_number_of_collided_entites(${1:Object handle})",
		"description": "MoonAdditions\nint number = get_object_number_of_collided_entites(Object handle)\n",
		"prefix": "get_object_number_of_collided_entites",
		"scope": "source.lua"
	},
	"get_vehicle_collided_entites": {
		"body": "get_vehicle_collided_entites(${1:Vehicle handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_vehicle_collided_entites(Vehicle handle)\n",
		"prefix": "get_vehicle_collided_entites",
		"scope": "source.lua"
	},
	"get_char_collided_entites": {
		"body": "get_char_collided_entites(${1:Ped handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_char_collided_entites(Ped handle)\n",
		"prefix": "get_char_collided_entites",
		"scope": "source.lua"
	},
	"get_object_collided_entites": {
		"body": "get_object_collided_entites(${1:Object handle})",
		"description": "MoonAdditions\ntable<uint> entities = get_object_collided_entites(Object handle)\n",
		"prefix": "get_object_collided_entites",
		"scope": "source.lua"
	},
	"set_car_window_state": {
		"body": "set_car_window_state(${1:Vehicle handle},${2:uint window_id},${3:bool state})",
		"description": "MoonAdditions\nset_car_window_state(Vehicle handle, uint window_id, bool state)\n",
		"prefix": "set_car_window_state",
		"scope": "source.lua"
	},
	"get_char_max_health": {
		"body": "get_char_max_health(${1:Ped handle})",
		"description": "MoonAdditions\nfloat health = get_char_max_health(Ped handle)\n",
		"prefix": "get_char_max_health",
		"scope": "source.lua"
	},
	"get_circles_intersection": {
		"body": "get_circles_intersection(${1:float x1},${2:float y1},${3:floar radius1},${4:float x2},${5:float y2},${6:float radius2})",
		"description": "MoonAdditions\nbool result, float x1, float y1, float x2, float y2 = get_circles_intersection(float x1, float y1, floar radius1, float x2, float y2, float radius2)\n",
		"prefix": "get_circles_intersection",
		"scope": "source.lua"
	},
	"get_model_txd_id": {
		"body": "get_model_txd_id(${1:Model model})",
		"description": "MoonAdditions\nint txd = get_model_txd_id(Model model)\n",
		"prefix": "get_model_txd_id",
		"scope": "source.lua"
	},
	"get_model_crc32_key": {
		"body": "get_model_crc32_key(${1:Model model})",
		"description": "MoonAdditions\nuint crc32 = get_model_crc32_key(Model model)\n",
		"prefix": "get_model_crc32_key",
		"scope": "source.lua"
	},
	"draw_temporary_shadow": {
		"body": "draw_temporary_shadow(${1:uint shadow_type},${2:float x},${3:float y},${4:float z},${5:float width},${6:float height},${7:float rotation},${8:float distance},${9:uint/Texture texture},${10:uint intensity},${11:[int color_r},${12:int color_g},${13:int color_b},${14:int color_a},${15:uint shadow_data},${16:float scale},${17:bool draw_on_buildings},${18:bool draw_on_water]})",
		"description": "MoonAdditions\ndraw_temporary_shadow(uint shadow_type, float x, float y, float z, float width, float height, float rotation, float distance, uint/Texture texture, uint intensity, [int color_r, int color_g, int color_b, int color_a, uint shadow_data, float scale, bool draw_on_buildings, bool draw_on_water])\n",
		"prefix": "draw_temporary_shadow",
		"scope": "source.lua"
	},
	"draw_permanent_shadow": {
		"body": "draw_permanent_shadow(${1:uint shadow_type},${2:float x},${3:float y},${4:float z},${5:float width},${6:float height},${7:float rotation},${8:float distance},${9:uint/Texture texture},${10:uint intensity},${11:uint time},${12:[int color_r},${13:int color_g},${14:int color_b},${15:int color_a]})",
		"description": "MoonAdditions\ndraw_permanent_shadow(uint shadow_type, float x, float y, float z, float width, float height, float rotation, float distance, uint/Texture texture, uint intensity, uint time, [int color_r, int color_g, int color_b, int color_a])\n",
		"prefix": "draw_permanent_shadow",
		"scope": "source.lua"
	},
	"draw_light": {
		"body": "draw_light(${1:uint light_type},${2:float x},${3:float y},${4:float z},${5:float dir_x},${6:float dir_y},${7:float dir_z},${8:float radius},${9:[int color_r},${10:int color_g},${11:int color_b},${12:int color_a},${13:uint entity]})",
		"description": "MoonAdditions\ndraw_light(uint light_type, float x, float y, float z, float dir_x, float dir_y, float dir_z, float radius, [int color_r, int color_g, int color_b, int color_a, uint entity])\n",
		"prefix": "draw_light",
		"scope": "source.lua"
	},
	"draw_corona": {
		"body": "draw_corona(${1:uint/Texture texture},${2:float x},${3:float y},${4:float z},${5:float size},${6:[int color_r},${7:int color_g},${8:int color_b},${9:int color_a},${10:uint entity]})",
		"description": "MoonAdditions\ndraw_corona(uint/Texture texture, float x, float y, float z, float size, [int color_r, int color_g, int color_b, int color_a, uint entity])\n",
		"prefix": "draw_corona",
		"scope": "source.lua"
	},
	"get_sun_colors": {
		"body": "get_sun_colors()",
		"description": "MoonAdditions\nint core_r, int core_g, int core_b, int corona_r, int corona_g, int corona_b = get_sun_colors()\n",
		"prefix": "get_sun_colors",
		"scope": "source.lua"
	},
	"get_sun_size": {
		"body": "get_sun_size()",
		"description": "MoonAdditions\nfloat core, float corona = get_sun_size()\n",
		"prefix": "get_sun_size",
		"scope": "source.lua"
	},
	"get_sun_screen_coordinates": {
		"body": "get_sun_screen_coordinates()",
		"description": "MoonAdditions\nfloat x, y = get_sun_screen_coordinates()\n",
		"prefix": "get_sun_screen_coordinates",
		"scope": "source.lua"
	},
	"get_sun_world_position": {
		"body": "get_sun_world_position()",
		"description": "MoonAdditions\nbool visible, float x, float y, float z = get_sun_world_position()\n",
		"prefix": "get_sun_world_position",
		"scope": "source.lua"
	},
	"get_current_weather": {
		"body": "get_current_weather()",
		"description": "MoonAdditions\nint weather = get_current_weather()\n",
		"prefix": "get_current_weather",
		"scope": "source.lua"
	},
	"get_traffic_lights_color": {
		"body": "get_traffic_lights_color()",
		"description": "MoonAdditions\nint color1, color2 = get_traffic_lights_color()\n",
		"prefix": "get_traffic_lights_color",
		"scope": "source.lua"
	},
	"get_car_light_damage_status": {
		"body": "get_car_light_damage_status(${1:Vehicle handle},${2:int light_id})",
		"description": "MoonAdditions\nuint status = get_car_light_damage_status(Vehicle handle, int light_id)\n",
		"prefix": "get_car_light_damage_status",
		"scope": "source.lua"
	},
	"set_car_light_damage_status": {
		"body": "set_car_light_damage_status(${1:Vehicle handle},${2:int light_id},${3:uint status})",
		"description": "MoonAdditions\nset_car_light_damage_status(Vehicle handle, int light_id, uint status)\n",
		"prefix": "set_car_light_damage_status",
		"scope": "source.lua"
	},
	"get_vehicle_class": {
		"body": "get_vehicle_class(${1:Vehicle handle})",
		"description": "MoonAdditions\nuint class, uint subclass = get_vehicle_class(Vehicle handle)\n",
		"prefix": "get_vehicle_class",
		"scope": "source.lua"
	},
	"get_vehicle_dummy_element_position": {
		"body": "get_vehicle_dummy_element_position(${1:Vehicle handle},${2:uint element},${3:[bool world},${4:bool invert_x]})",
		"description": "MoonAdditions\nfloat x, float y, float z = get_vehicle_dummy_element_position(Vehicle handle, uint element, [bool world, bool invert_x])\n",
		"prefix": "get_vehicle_dummy_element_position",
		"scope": "source.lua"
	},
	"create_projectile": {
		"body": "create_projectile(${1:uint weapon_id},${2:float src_x},${3:float src_y},${4:float src_z},${5:float dir_x},${6:float dir_y},${7:float dir_z},${8:float force},${9:uint source_entity_ptr},${10:uint target_entity_ptr})",
		"description": "MoonAdditions\nbool result = create_projectile(uint weapon_id, float src_x, float src_y, float src_z, float dir_x, float dir_y, float dir_z, float force, uint source_entity_ptr, uint target_entity_ptr)\n",
		"prefix": "create_projectile",
		"scope": "source.lua"
	},
	"get_game_volume": {
		"body": "get_game_volume()",
		"description": "MoonAdditions\nint sfx_volume, int radio_volume = get_game_volume()\n",
		"prefix": "get_game_volume",
		"scope": "source.lua"
	},
	"get_collision_between_points": {
		"body": "get_collision_between_points(${1:float origin_x},${2:float origin_y},${3:floar origin_z},${4:float target_x},${5:float target_y},${6:float target_z},${7:[table<string=bool> flags},${8:uint ignore_entity_ptr]})",
		"description": "MoonAdditions\ntable collision = get_collision_between_points(float origin_x, float origin_y, floar origin_z, float target_x, float target_y, float target_z, [table<string=bool> flags, uint ignore_entity_ptr])\n",
		"prefix": "get_collision_between_points",
		"scope": "source.lua"
	},
	"draw_spotlight": {
		"body": "draw_spotlight(${1:float origin_x},${2:float origin_y},${3:floar origin_z},${4:float target_x},${5:float target_y},${6:float target_z},${7:float base_radius},${8:float target_radius},${9:bool shadow},${10:float shadow_intensity})",
		"description": "MoonAdditions\ndraw_spotlight(float origin_x, float origin_y, floar origin_z, float target_x, float target_y, float target_z, float base_radius, float target_radius, bool shadow, float shadow_intensity)\n",
		"prefix": "draw_spotlight",
		"scope": "source.lua"
	},
	"draw_rect": {
		"body": "draw_rect(${1:float left},${2:float top},${3:float right},${4:float bottom},${5:int r},${6:int g},${7:int b},${8:int a},${9:[float angle]})",
		"description": "MoonAdditions\ndraw_rect(float left, float top, float right, float bottom, int r, int g, int b, int a, [float angle])\n",
		"prefix": "draw_rect",
		"scope": "source.lua"
	},
	"draw_rect_with_gradient": {
		"body": "draw_rect_with_gradient(${1:float left},${2:float top},${3:float right},${4:float bottom},${5:int r1},${6:int g1},${7:int b1},${8:int a1},${9:int r2},${10:int g2},${11:int b2},${12:int a2},${13:int r3},${14:int g3},${15:int b3},${16:int a3},${17:int r4},${18:int g4},${19:int b4},${20:int a4},${21:[float angle]})",
		"description": "MoonAdditions\ndraw_rect_with_gradient(float left, float top, float right, float bottom, int r1, int g1, int b1, int a1, int r2, int g2, int b2, int a2, int r3, int g3, int b3, int a3, int r4, int g4, int b4, int a4, [float angle])\n",
		"prefix": "draw_rect_with_gradient",
		"scope": "source.lua"
	},
	"get_all_objects": {
		"body": "get_all_objects(${1:float x},${2:float y},${3:float z},${4:[float radius},${5:bool sphere]})",
		"description": "MoonAdditions\ntable<Object> objects = get_all_objects(float x, float y, float z, [float radius, bool sphere])\n",
		"prefix": "get_all_objects",
		"scope": "source.lua"
	},
	"get_all_characters": {
		"body": "get_all_characters(${1:float x},${2:float y},${3:float z},${4:[float radius},${5:bool skip_dead},${6:bool sphere]})",
		"description": "MoonAdditions\ntable<Ped> chars = get_all_characters(float x, float y, float z, [float radius, bool skip_dead, bool sphere])\n",
		"prefix": "get_all_characters",
		"scope": "source.lua"
	},
	"get_all_vehicles": {
		"body": "get_all_vehicles(${1:float x},${2:float y},${3:float z},${4:[float radius},${5:bool skip_wrecked bool sphere]})",
		"description": "MoonAdditions\ntable<Vehicle> vehicles = get_all_vehicles(float x, float y, float z, [float radius, bool skip_wrecked bool sphere])\n",
		"prefix": "get_all_vehicles",
		"scope": "source.lua"
	},
	"get_object_matrix": {
		"body": "get_object_matrix(${1:Object handle})",
		"description": "MoonAdditions\nMatrix matrix = get_object_matrix(Object handle)\n",
		"prefix": "get_object_matrix",
		"scope": "source.lua"
	},
	"get_char_matrix": {
		"body": "get_char_matrix(${1:Ped handle})",
		"description": "MoonAdditions\nMatrix matrix = get_char_matrix(Ped handle)\n",
		"prefix": "get_char_matrix",
		"scope": "source.lua"
	},
	"get_vehicle_matrix": {
		"body": "get_vehicle_matrix(${1:Vehicle handle})",
		"description": "MoonAdditions\nMatrix matrix = get_vehicle_matrix(Vehicle handle)\n",
		"prefix": "get_vehicle_matrix",
		"scope": "source.lua"
	},
	"draw_text": {
		"body": "draw_text(${1:string text},${2:float x},${3:float y},${4:[uint style},${5:float width},${6:float height},${7:uint align},${8:float wrap},${9:bool proportional},${10:bool justify},${11:int text_r},${12:int text_g},${13:int text_b},${14:int text_a},${15:uint outline},${16:uint shadow},${17:int shadow_r},${18:int shadow_g},${19:int shadow_b},${20:int shadow_a},${21:bool background},${22:int background_r},${23:int background_g},${24:int background_b},${25:int background_a]})",
		"description": "MoonAdditions\ndraw_text(string text, float x, float y, [uint style, float width, float height, uint align, float wrap, bool proportional, bool justify, int text_r, int text_g, int text_b, int text_a, uint outline, uint shadow, int shadow_r, int shadow_g, int shadow_b, int shadow_a, bool background, int background_r, int background_g, int background_b, int background_a])\n",
		"prefix": "draw_text",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new()",
		"description": "MoonAdditions\nMatrix matrix = matrix.new()\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:Matrix matrix})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(Matrix matrix)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:Vector right},${2:Vector up},${3:Vector at},${4:Vector pos})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(Vector right, Vector up, Vector at, Vector pos)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.new": {
		"body": "matrix.new(${1:float right_x},${2:float right_y},${3:float right_z},${4:float up_x},${5:float up_y},${6:float up_z},${7:float at_x},${8:float at_y},${9:float at_z},${10:float pos_x},${11:float pos_y},${12:float pos_z})",
		"description": "MoonAdditions\nMatrix matrix = matrix.new(float right_x, float right_y, float right_z, float up_x, float up_y, float up_z, float at_x, float at_y, float at_z, float pos_x, float pos_y, float pos_z)\n",
		"prefix": "matrix.new",
		"scope": "source.lua"
	},
	"matrix.from_quat": {
		"body": "matrix.from_quat(${1:Quaternion quat})",
		"description": "MoonAdditions\nMatrix matrix = matrix.from_quat(Quaternion quat)\n",
		"prefix": "matrix.from_quat",
		"scope": "source.lua"
	},
	"matrix.from_memory": {
		"body": "matrix.from_memory(${1:uint matrix_ptr})",
		"description": "MoonAdditions\nMatrix matrix = matrix.from_memory(uint matrix_ptr)\n",
		"prefix": "matrix.from_memory",
		"scope": "source.lua"
	},
	"matrix:get_pointer": {
		"body": "matrix:get_pointer()",
		"description": "MoonAdditions\nuint ptr = matrix:get_pointer()\n",
		"prefix": "matrix:get_pointer",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:Matrix matrix})",
		"description": "MoonAdditions\nmatrix:set(Matrix matrix)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:Vector right},${2:Vector up},${3:Vector at},${4:Vector pos})",
		"description": "MoonAdditions\nmatrix:set(Vector right, Vector up, Vector at, Vector pos)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set": {
		"body": "matrix:set(${1:float right_x},${2:float right_y},${3:float right_z},${4:float up_x},${5:float up_y},${6:float up_z},${7:float at_x},${8:float at_y},${9:float at_z},${10:float pos_x},${11:float pos_y},${12:float pos_z})",
		"description": "MoonAdditions\nmatrix:set(float right_x, float right_y, float right_z, float up_x, float up_y, float up_z, float at_x, float at_y, float at_z, float pos_x, float pos_y, float pos_z)\n",
		"prefix": "matrix:set",
		"scope": "source.lua"
	},
	"matrix:set_rotation_from_quat": {
		"body": "matrix:set_rotation_from_quat(${1:Quaternion quat})",
		"description": "MoonAdditions\nmatrix:set_rotation_from_quat(Quaternion quat)\n",
		"prefix": "matrix:set_rotation_from_quat",
		"scope": "source.lua"
	},
	"matrix:rotate": {
		"body": "matrix:rotate(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nmatrix:rotate(float x, float y, float z)\n",
		"prefix": "matrix:rotate",
		"scope": "source.lua"
	},
	"matrix:rotate_x": {
		"body": "matrix:rotate_x(${1:float angle})",
		"description": "MoonAdditions\nmatrix:rotate_x(float angle)\n",
		"prefix": "matrix:rotate_x",
		"scope": "source.lua"
	},
	"matrix:rotate_y": {
		"body": "matrix:rotate_y(${1:float angle})",
		"description": "MoonAdditions\nmatrix:rotate_y(float angle)\n",
		"prefix": "matrix:rotate_y",
		"scope": "source.lua"
	},
	"matrix:rotate_z": {
		"body": "matrix:rotate_z(${1:float angle})",
		"description": "MoonAdditions\nmatrix:rotate_z(float angle)\n",
		"prefix": "matrix:rotate_z",
		"scope": "source.lua"
	},
	"matrix:rotate_around_axis": {
		"body": "matrix:rotate_around_axis(${1:float x},${2:float y},${3:float z},${4:float angle},${5:[int combine_op]})",
		"description": "MoonAdditions\nmatrix:rotate_around_axis(float x, float y, float z, float angle, [int combine_op])\n",
		"prefix": "matrix:rotate_around_axis",
		"scope": "source.lua"
	},
	"matrix:get_coords_with_offset": {
		"body": "matrix:get_coords_with_offset(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_coords_with_offset(float x, float y, float z)\n",
		"prefix": "matrix:get_coords_with_offset",
		"scope": "source.lua"
	},
	"matrix:get_relative_coords": {
		"body": "matrix:get_relative_coords(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_relative_coords(float x, float y, float z)\n",
		"prefix": "matrix:get_relative_coords",
		"scope": "source.lua"
	},
	"matrix:get_angles": {
		"body": "matrix:get_angles()",
		"description": "MoonAdditions\nfloat x, float y, float z = matrix:get_angles()\n",
		"prefix": "matrix:get_angles",
		"scope": "source.lua"
	},
	"matrix:get_slerped": {
		"body": "matrix:get_slerped(${1:Matrix matrix},${2:float t})",
		"description": "MoonAdditions\nMatrix matrix = matrix:get_slerped(Matrix matrix, float t)\n",
		"prefix": "matrix:get_slerped",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new()",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new()\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:Quaternion quat})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Quaternion quat)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:Vector vec},${2:float w})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Vector vec, float w)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:float x},${2:float y},${3:float z},${4:float w})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(float x, float y, float z, float w)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quaternion.new": {
		"body": "quaternion.new(${1:Matrix matrix})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.new(Matrix matrix)\n",
		"prefix": "quaternion.new",
		"scope": "source.lua"
	},
	"quat.from_euler": {
		"body": "quat.from_euler(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nQuaternion quat = quat.from_euler(float x, float y, float z)\n",
		"prefix": "quat.from_euler",
		"scope": "source.lua"
	},
	"quaternion.from_memory": {
		"body": "quaternion.from_memory(${1:uint quat_ptr})",
		"description": "MoonAdditions\nQuaternion quat = quaternion.from_memory(uint quat_ptr)\n",
		"prefix": "quaternion.from_memory",
		"scope": "source.lua"
	},
	"quat:get_pointer": {
		"body": "quat:get_pointer()",
		"description": "MoonAdditions\nuint ptr = quat:get_pointer()\n",
		"prefix": "quat:get_pointer",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:Quaternion quat})",
		"description": "MoonAdditions\nquat:set(Quaternion quat)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:Vector vec},${2:float w})",
		"description": "MoonAdditions\nquat:set(Vector vec, float w)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:float x},${2:float y},${3:float z},${4:float w})",
		"description": "MoonAdditions\nquat:set(float x, float y, float z, float w)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:set": {
		"body": "quat:set(${1:Matrix matrix})",
		"description": "MoonAdditions\nquat:set(Matrix matrix)\n",
		"prefix": "quat:set",
		"scope": "source.lua"
	},
	"quat:get": {
		"body": "quat:get()",
		"description": "MoonAdditions\nfloat x, float y, float z, float w = quat:get()\n",
		"prefix": "quat:get",
		"scope": "source.lua"
	},
	"quat:rotate": {
		"body": "quat:rotate(${1:float x},${2:float y},${3:float z},${4:float angle},${5:[int combine_op]})",
		"description": "MoonAdditions\nquat:rotate(float x, float y, float z, float angle, [int combine_op])\n",
		"prefix": "quat:rotate",
		"scope": "source.lua"
	},
	"quat:normalize": {
		"body": "quat:normalize()",
		"description": "MoonAdditions\nquat:normalize()\n",
		"prefix": "quat:normalize",
		"scope": "source.lua"
	},
	"quat:get_normalized": {
		"body": "quat:get_normalized()",
		"description": "MoonAdditions\nQuaternion quat = quat:get_normalized()\n",
		"prefix": "quat:get_normalized",
		"scope": "source.lua"
	},
	"quat:get_slerped": {
		"body": "quat:get_slerped(${1:Quaternion quat},${2:float t})",
		"description": "MoonAdditions\nQuaternion quat = quat:get_slerped(Quaternion quat, float t)\n",
		"prefix": "quat:get_slerped",
		"scope": "source.lua"
	},
	"quat:get_euler": {
		"body": "quat:get_euler()",
		"description": "MoonAdditions\nfloat x, float y, float z = quat:get_euler()\n",
		"prefix": "quat:get_euler",
		"scope": "source.lua"
	},
	"textdraw.new": {
		"body": "textdraw.new(${1:string text},${2:float visible},${3:float y})",
		"description": "MoonAdditions\nTextdraw textdraw = textdraw.new(string text, float visible, float y)\n",
		"prefix": "textdraw.new",
		"scope": "source.lua"
	},
	"textdraw:set_text_color": {
		"body": "textdraw:set_text_color(${1:int r},${2:int g},${3:int b},${4:int a})",
		"description": "MoonAdditions\ntextdraw:set_text_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_text_color",
		"scope": "source.lua"
	},
	"textdraw:set_background_color": {
		"body": "textdraw:set_background_color(${1:int r},${2:int g},${3:int b},${4:int a})",
		"description": "MoonAdditions\ntextdraw:set_background_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_background_color",
		"scope": "source.lua"
	},
	"textdraw:set_shadow_color": {
		"body": "textdraw:set_shadow_color(${1:int r},${2:int g},${3:int b},${4:int a})",
		"description": "MoonAdditions\ntextdraw:set_shadow_color(int r, int g, int b, int a)\n",
		"prefix": "textdraw:set_shadow_color",
		"scope": "source.lua"
	},
	"textdraw:get_text_color": {
		"body": "textdraw:get_text_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_text_color()\n",
		"prefix": "textdraw:get_text_color",
		"scope": "source.lua"
	},
	"textdraw:get_background_color": {
		"body": "textdraw:get_background_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_background_color()\n",
		"prefix": "textdraw:get_background_color",
		"scope": "source.lua"
	},
	"textdraw:get_shadow_color": {
		"body": "textdraw:get_shadow_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = textdraw:get_shadow_color()\n",
		"prefix": "textdraw:get_shadow_color",
		"scope": "source.lua"
	},
	"load_bmp_texture_with_mask": {
		"body": "load_bmp_texture_with_mask(${1:string image_path},${2:string mask_path})",
		"description": "MoonAdditions\nTexture texture = load_bmp_texture_with_mask(string image_path, string mask_path)\n",
		"prefix": "load_bmp_texture_with_mask",
		"scope": "source.lua"
	},
	"load_png_texture": {
		"body": "load_png_texture(${1:string image_path})",
		"description": "MoonAdditions\nTexture texture = load_png_texture(string image_path)\n",
		"prefix": "load_png_texture",
		"scope": "source.lua"
	},
	"load_dds_texture": {
		"body": "load_dds_texture(${1:string image_path})",
		"description": "MoonAdditions\nTexture texture = load_dds_texture(string image_path)\n",
		"prefix": "load_dds_texture",
		"scope": "source.lua"
	},
	"texture.from_memory": {
		"body": "texture.from_memory(${1:uint rwtexture_ptr})",
		"description": "MoonAdditions\nTexture texture = texture.from_memory(uint rwtexture_ptr)\n",
		"prefix": "texture.from_memory",
		"scope": "source.lua"
	},
	"texture:get_pointer": {
		"body": "texture:get_pointer()",
		"description": "MoonAdditions\nuint ptr = texture:get_pointer()\n",
		"prefix": "texture:get_pointer",
		"scope": "source.lua"
	},
	"texture:draw": {
		"body": "texture:draw(${1:float left},${2:float top},${3:float right},${4:float bottom},${5:[int r},${6:int g},${7:int b},${8:int a},${9:float angle]})",
		"description": "MoonAdditions\ntexture:draw(float left, float top, float right, float bottom, [int r, int g, int b, int a, float angle])\n",
		"prefix": "texture:draw",
		"scope": "source.lua"
	},
	"texture:draw_with_gradient": {
		"body": "texture:draw_with_gradient(${1:float left},${2:float top},${3:float right},${4:float bottom},${5:[int r1},${6:int g1},${7:int b1},${8:int a1},${9:int r2},${10:int g2},${11:int b2},${12:int a2},${13:int r3},${14:int g3},${15:int b3},${16:int a3},${17:int r4},${18:int g4},${19:int b4},${20:int a4},${21:float angle]})",
		"description": "MoonAdditions\ntexture:draw_with_gradient(float left, float top, float right, float bottom, [int r1, int g1, int b1, int a1, int r2, int g2, int b2, int a2, int r3, int g3, int b3, int a3, int r4, int g4, int b4, int a4, float angle])\n",
		"prefix": "texture:draw_with_gradient",
		"scope": "source.lua"
	},
	"load_txd": {
		"body": "load_txd(${1:string file_path},${2:string name})",
		"description": "MoonAdditions\nTxd txd = load_txd(string file_path, string name)\n",
		"prefix": "load_txd",
		"scope": "source.lua"
	},
	"get_txd": {
		"body": "get_txd(${1:string name})",
		"description": "MoonAdditions\nTxd txd = get_txd(string name)\n",
		"prefix": "get_txd",
		"scope": "source.lua"
	},
	"txd.from_memory": {
		"body": "txd.from_memory(${1:uint rwtexdictionary_ptr})",
		"description": "MoonAdditions\nTxd txd = txd.from_memory(uint rwtexdictionary_ptr)\n",
		"prefix": "txd.from_memory",
		"scope": "source.lua"
	},
	"txd:get_texture": {
		"body": "txd:get_texture(${1:string name})",
		"description": "MoonAdditions\nTexture texture = txd:get_texture(string name)\n",
		"prefix": "txd:get_texture",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new()",
		"description": "MoonAdditions\nVector vector = vector3d.new()\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nVector vector = vector3d.new(float x, float y, float z)\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.new": {
		"body": "vector3d.new(${1:Vector vector})",
		"description": "MoonAdditions\nVector vector = vector3d.new(Vector vector)\n",
		"prefix": "vector3d.new",
		"scope": "source.lua"
	},
	"vector3d.from_memory": {
		"body": "vector3d.from_memory(${1:uint vector_ptr})",
		"description": "MoonAdditions\nVector vector = vector3d.from_memory(uint vector_ptr)\n",
		"prefix": "vector3d.from_memory",
		"scope": "source.lua"
	},
	"vector:get_pointer": {
		"body": "vector:get_pointer()",
		"description": "MoonAdditions\nuint ptr = vector:get_pointer()\n",
		"prefix": "vector:get_pointer",
		"scope": "source.lua"
	},
	"vector:get": {
		"body": "vector:get()",
		"description": "MoonAdditions\nfloat x, float y, float z = vector:get()\n",
		"prefix": "vector:get",
		"scope": "source.lua"
	},
	"vector:set": {
		"body": "vector:set(${1:float x},${2:float y},${3:float z})",
		"description": "MoonAdditions\nvector:set(float x, float y, float z)\n",
		"prefix": "vector:set",
		"scope": "source.lua"
	},
	"vector:magnitude": {
		"body": "vector:magnitude()",
		"description": "MoonAdditions\nfloat value = vector:magnitude()\n",
		"prefix": "vector:magnitude",
		"scope": "source.lua"
	},
	"vector:magnitude2d": {
		"body": "vector:magnitude2d()",
		"description": "MoonAdditions\nfloat value = vector:magnitude2d()\n",
		"prefix": "vector:magnitude2d",
		"scope": "source.lua"
	},
	"vector:normalize": {
		"body": "vector:normalize()",
		"description": "MoonAdditions\nvector:normalize()\n",
		"prefix": "vector:normalize",
		"scope": "source.lua"
	},
	"get_vehicle_component": {
		"body": "get_vehicle_component(${1:Vehicle handle},${2:string component_name})",
		"description": "MoonAdditions\nVehicleComponent component = get_vehicle_component(Vehicle handle, string component_name)\n",
		"prefix": "get_vehicle_component",
		"scope": "source.lua"
	},
	"get_vehicle_components": {
		"body": "get_vehicle_components(${1:Vehicle handle})",
		"description": "MoonAdditions\ntable<VehicleComponent> components = get_vehicle_components(Vehicle handle)\n",
		"prefix": "get_vehicle_components",
		"scope": "source.lua"
	},
	"get_all_vehicle_components": {
		"body": "get_all_vehicle_components(${1:Vehicle handle})",
		"description": "MoonAdditions\ntable<VehicleComponent> components = get_all_vehicle_components(Vehicle handle)\n",
		"prefix": "get_all_vehicle_components",
		"scope": "source.lua"
	},
	"vehicle_component.from_memory": {
		"body": "vehicle_component.from_memory(${1:uint vehicle_ptr},${2:uint rwframe_ptr})",
		"description": "MoonAdditions\nVehicleComponent component = vehicle_component.from_memory(uint vehicle_ptr, uint rwframe_ptr)\n",
		"prefix": "vehicle_component.from_memory",
		"scope": "source.lua"
	},
	"component:get_pointer": {
		"body": "component:get_pointer()",
		"description": "MoonAdditions\nuint ptr = component:get_pointer()\n",
		"prefix": "component:get_pointer",
		"scope": "source.lua"
	},
	"component:set_visibility": {
		"body": "component:set_visibility(${1:int visibility_state})",
		"description": "MoonAdditions\ncomponent:set_visibility(int visibility_state)\n",
		"prefix": "component:set_visibility",
		"scope": "source.lua"
	},
	"component:set_alpha": {
		"body": "component:set_alpha(${1:int alpha})",
		"description": "MoonAdditions\ncomponent:set_alpha(int alpha)\n",
		"prefix": "component:set_alpha",
		"scope": "source.lua"
	},
	"component:get_objects": {
		"body": "component:get_objects()",
		"description": "MoonAdditions\ntable<VehicleAtomic> objects = component:get_objects()\n",
		"prefix": "component:get_objects",
		"scope": "source.lua"
	},
	"component:get_child_components": {
		"body": "component:get_child_components()",
		"description": "MoonAdditions\ntable<VehicleComponent> components = component:get_child_components()\n",
		"prefix": "component:get_child_components",
		"scope": "source.lua"
	},
	"vehicle_atomic_object.from_memory": {
		"body": "vehicle_atomic_object.from_memory(${1:uint vehicle_ptr},${2:uint rpatomic_ptr})",
		"description": "MoonAdditions\nVehicleAtomic object = vehicle_atomic_object.from_memory(uint vehicle_ptr, uint rpatomic_ptr)\n",
		"prefix": "vehicle_atomic_object.from_memory",
		"scope": "source.lua"
	},
	"object:get_pointer": {
		"body": "object:get_pointer()",
		"description": "MoonAdditions\nuint ptr = object:get_pointer()\n",
		"prefix": "object:get_pointer",
		"scope": "source.lua"
	},
	"object:hide": {
		"body": "object:hide(${1:bool hide})",
		"description": "MoonAdditions\nobject:hide(bool hide)\n",
		"prefix": "object:hide",
		"scope": "source.lua"
	},
	"object:get_atomic_flag": {
		"body": "object:get_atomic_flag(${1:uint flag})",
		"description": "MoonAdditions\nbool value = object:get_atomic_flag(uint flag)\n",
		"prefix": "object:get_atomic_flag",
		"scope": "source.lua"
	},
	"object:set_atomic_flag": {
		"body": "object:set_atomic_flag(${1:uint flag},${2:bool value})",
		"description": "MoonAdditions\nobject:set_atomic_flag(uint flag, bool value)\n",
		"prefix": "object:set_atomic_flag",
		"scope": "source.lua"
	},
	"object:get_materials": {
		"body": "object:get_materials()",
		"description": "MoonAdditions\ntable<VehicleMaterial> materials = object:get_materials()\n",
		"prefix": "object:get_materials",
		"scope": "source.lua"
	},
	"vehicle_object_material.from_memory": {
		"body": "vehicle_object_material.from_memory(${1:uint vehicle_ptr},${2:uint rpmaterial_ptr},${3:uint rpgeometry_ptr})",
		"description": "MoonAdditions\nVehicleMaterial material = vehicle_object_material.from_memory(uint vehicle_ptr, uint rpmaterial_ptr, uint rpgeometry_ptr)\n",
		"prefix": "vehicle_object_material.from_memory",
		"scope": "source.lua"
	},
	"material:get_pointer": {
		"body": "material:get_pointer()",
		"description": "MoonAdditions\nuint ptr = material:get_pointer()\n",
		"prefix": "material:get_pointer",
		"scope": "source.lua"
	},
	"material:set_color": {
		"body": "material:set_color(${1:int r},${2:int g},${3:int b},${4:int a})",
		"description": "MoonAdditions\nmaterial:set_color(int r, int g, int b, int a)\n",
		"prefix": "material:set_color",
		"scope": "source.lua"
	},
	"material:get_color": {
		"body": "material:get_color()",
		"description": "MoonAdditions\nint r, int g, int b, int a = material:get_color()\n",
		"prefix": "material:get_color",
		"scope": "source.lua"
	},
	"material:reset_color": {
		"body": "material:reset_color()",
		"description": "MoonAdditions\nmaterial:reset_color()\n",
		"prefix": "material:reset_color",
		"scope": "source.lua"
	},
	"material:set_texture": {
		"body": "material:set_texture(${1:Texture texture})",
		"description": "MoonAdditions\nmaterial:set_texture(Texture texture)\n",
		"prefix": "material:set_texture",
		"scope": "source.lua"
	},
	"material:get_texture": {
		"body": "material:get_texture()",
		"description": "MoonAdditions\nTexture texture = material:get_texture()\n",
		"prefix": "material:get_texture",
		"scope": "source.lua"
	},
	"material:reset_texture": {
		"body": "material:reset_texture()",
		"description": "MoonAdditions\nmaterial:reset_texture()\n",
		"prefix": "material:reset_texture",
		"scope": "source.lua"
	}

}